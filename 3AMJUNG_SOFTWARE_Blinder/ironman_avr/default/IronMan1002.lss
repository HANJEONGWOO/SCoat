
IronMan1002.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00002e2e  00002ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800212  00800212  00002fd4  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002db  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000262a  00000000  00000000  0000340f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001190  00000000  00000000  00005a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c4d  00000000  00000000  00006bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00008818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a8  00000000  00000000  00008ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00008f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000975e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e2       	ldi	r30, 0x2E	; 46
      a0:	fe e2       	ldi	r31, 0x2E	; 46
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 31       	cpi	r26, 0x12	; 18
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a2 e1       	ldi	r26, 0x12	; 18
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 33       	cpi	r26, 0x39	; 57
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 af 09 	call	0x135e	; 0x135e <main>
      c6:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_21>:
static int call_size_cnt;
static int command;


ISR(ADC_vect)	//AD 컨버터 진동센서 관련 인터럽트 
{
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	00 90 5b 00 	lds	r0, 0x005B
      da:	0f 92       	push	r0
      dc:	11 24       	eor	r1, r1
      de:	8f 93       	push	r24
      e0:	9f 93       	push	r25
      e2:	ef 93       	push	r30
      e4:	ff 93       	push	r31
      e6:	df 93       	push	r29
      e8:	cf 93       	push	r28
      ea:	00 d0       	rcall	.+0      	; 0xec <__vector_21+0x1e>
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
	switch(sensor_flag)
      f0:	80 91 18 02 	lds	r24, 0x0218
      f4:	90 91 19 02 	lds	r25, 0x0219
      f8:	9a 83       	std	Y+2, r25	; 0x02
      fa:	89 83       	std	Y+1, r24	; 0x01
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	9a 81       	ldd	r25, Y+2	; 0x02
     100:	81 30       	cpi	r24, 0x01	; 1
     102:	91 05       	cpc	r25, r1
     104:	71 f1       	breq	.+92     	; 0x162 <__vector_21+0x94>
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	9a 81       	ldd	r25, Y+2	; 0x02
     10a:	82 30       	cpi	r24, 0x02	; 2
     10c:	91 05       	cpc	r25, r1
     10e:	09 f4       	brne	.+2      	; 0x112 <__vector_21+0x44>
     110:	4b c0       	rjmp	.+150    	; 0x1a8 <__vector_21+0xda>
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	9a 81       	ldd	r25, Y+2	; 0x02
     116:	00 97       	sbiw	r24, 0x00	; 0
     118:	09 f0       	breq	.+2      	; 0x11c <__vector_21+0x4e>
     11a:	63 c0       	rjmp	.+198    	; 0x1e2 <__vector_21+0x114>
	{
	case 0: 
	  ADMUX = 0xC0;	//// 내부 클럭 사용함
     11c:	e7 e2       	ldi	r30, 0x27	; 39
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 ec       	ldi	r24, 0xC0	; 192
     122:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     124:	e6 e2       	ldi	r30, 0x26	; 38
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	88 2f       	mov	r24, r24
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	80 71       	andi	r24, 0x10	; 16
     130:	90 70       	andi	r25, 0x00	; 0
     132:	00 97       	sbiw	r24, 0x00	; 0
     134:	b9 f3       	breq	.-18     	; 0x124 <__vector_21+0x56>
	  	val0 = ADCW;
     136:	e4 e2       	ldi	r30, 0x24	; 36
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	91 81       	ldd	r25, Z+1	; 0x01
     13e:	90 93 13 02 	sts	0x0213, r25
     142:	80 93 12 02 	sts	0x0212, r24
		ADCW = 0;
     146:	e4 e2       	ldi	r30, 0x24	; 36
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	11 82       	std	Z+1, r1	; 0x01
     14c:	10 82       	st	Z, r1
		sensor_flag++;
     14e:	80 91 18 02 	lds	r24, 0x0218
     152:	90 91 19 02 	lds	r25, 0x0219
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	90 93 19 02 	sts	0x0219, r25
     15c:	80 93 18 02 	sts	0x0218, r24
     160:	40 c0       	rjmp	.+128    	; 0x1e2 <__vector_21+0x114>
	  break;
	case 1:
	  ADMUX = 0xC1;	//// ""
     162:	e7 e2       	ldi	r30, 0x27	; 39
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	81 ec       	ldi	r24, 0xC1	; 193
     168:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     16a:	e6 e2       	ldi	r30, 0x26	; 38
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	80 81       	ld	r24, Z
     170:	88 2f       	mov	r24, r24
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	80 71       	andi	r24, 0x10	; 16
     176:	90 70       	andi	r25, 0x00	; 0
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	b9 f3       	breq	.-18     	; 0x16a <__vector_21+0x9c>
	  	val1 = ADCW;
     17c:	e4 e2       	ldi	r30, 0x24	; 36
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	90 93 15 02 	sts	0x0215, r25
     188:	80 93 14 02 	sts	0x0214, r24
		ADCW = 0;
     18c:	e4 e2       	ldi	r30, 0x24	; 36
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	11 82       	std	Z+1, r1	; 0x01
     192:	10 82       	st	Z, r1
		sensor_flag++;
     194:	80 91 18 02 	lds	r24, 0x0218
     198:	90 91 19 02 	lds	r25, 0x0219
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	90 93 19 02 	sts	0x0219, r25
     1a2:	80 93 18 02 	sts	0x0218, r24
     1a6:	1d c0       	rjmp	.+58     	; 0x1e2 <__vector_21+0x114>
	  break;
	case 2:
	  ADMUX = 0xC2; // 가슴 적외선
     1a8:	e7 e2       	ldi	r30, 0x27	; 39
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	82 ec       	ldi	r24, 0xC2	; 194
     1ae:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     1b0:	e6 e2       	ldi	r30, 0x26	; 38
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	88 2f       	mov	r24, r24
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	80 71       	andi	r24, 0x10	; 16
     1bc:	90 70       	andi	r25, 0x00	; 0
     1be:	00 97       	sbiw	r24, 0x00	; 0
     1c0:	b9 f3       	breq	.-18     	; 0x1b0 <__vector_21+0xe2>
	  val2 = ADCW;
     1c2:	e4 e2       	ldi	r30, 0x24	; 36
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	91 81       	ldd	r25, Z+1	; 0x01
     1ca:	90 93 17 02 	sts	0x0217, r25
     1ce:	80 93 16 02 	sts	0x0216, r24
	  ADCW = 0;
     1d2:	e4 e2       	ldi	r30, 0x24	; 36
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	11 82       	std	Z+1, r1	; 0x01
     1d8:	10 82       	st	Z, r1
	  sensor_flag = 0;
     1da:	10 92 19 02 	sts	0x0219, r1
     1de:	10 92 18 02 	sts	0x0218, r1
	  break;
	  
	}
	
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	cf 91       	pop	r28
     1e8:	df 91       	pop	r29
     1ea:	ff 91       	pop	r31
     1ec:	ef 91       	pop	r30
     1ee:	9f 91       	pop	r25
     1f0:	8f 91       	pop	r24
     1f2:	0f 90       	pop	r0
     1f4:	00 92 5b 00 	sts	0x005B, r0
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <__vector_5>:

// *** 버튼 인터럽트 관련 부분 ***
ISR(INT4_vect)
{
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	00 90 5b 00 	lds	r0, 0x005B
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	2f 93       	push	r18
     214:	3f 93       	push	r19
     216:	4f 93       	push	r20
     218:	5f 93       	push	r21
     21a:	6f 93       	push	r22
     21c:	7f 93       	push	r23
     21e:	8f 93       	push	r24
     220:	9f 93       	push	r25
     222:	af 93       	push	r26
     224:	bf 93       	push	r27
     226:	ef 93       	push	r30
     228:	ff 93       	push	r31
     22a:	df 93       	push	r29
     22c:	cf 93       	push	r28
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	6c 97       	sbiw	r28, 0x1c	; 28
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
	if(TEST)
		printf("INT4 Call!!!\n");
     238:	89 e0       	ldi	r24, 0x09	; 9
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 12 13 	call	0x2624	; 0x2624 <puts>
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	a0 ea       	ldi	r26, 0xA0	; 160
     246:	b1 e4       	ldi	r27, 0x41	; 65
     248:	89 8f       	std	Y+25, r24	; 0x19
     24a:	9a 8f       	std	Y+26, r25	; 0x1a
     24c:	ab 8f       	std	Y+27, r26	; 0x1b
     24e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     250:	69 8d       	ldd	r22, Y+25	; 0x19
     252:	7a 8d       	ldd	r23, Y+26	; 0x1a
     254:	8b 8d       	ldd	r24, Y+27	; 0x1b
     256:	9c 8d       	ldd	r25, Y+28	; 0x1c
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	4a e7       	ldi	r20, 0x7A	; 122
     25e:	55 e4       	ldi	r21, 0x45	; 69
     260:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	8d 8b       	std	Y+21, r24	; 0x15
     26a:	9e 8b       	std	Y+22, r25	; 0x16
     26c:	af 8b       	std	Y+23, r26	; 0x17
     26e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     270:	6d 89       	ldd	r22, Y+21	; 0x15
     272:	7e 89       	ldd	r23, Y+22	; 0x16
     274:	8f 89       	ldd	r24, Y+23	; 0x17
     276:	98 8d       	ldd	r25, Y+24	; 0x18
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e8       	ldi	r20, 0x80	; 128
     27e:	5f e3       	ldi	r21, 0x3F	; 63
     280:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     284:	88 23       	and	r24, r24
     286:	2c f4       	brge	.+10     	; 0x292 <__vector_5+0x90>
		__ticks = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	9c 8b       	std	Y+20, r25	; 0x14
     28e:	8b 8b       	std	Y+19, r24	; 0x13
     290:	3f c0       	rjmp	.+126    	; 0x310 <__vector_5+0x10e>
	else if (__tmp > 65535)
     292:	6d 89       	ldd	r22, Y+21	; 0x15
     294:	7e 89       	ldd	r23, Y+22	; 0x16
     296:	8f 89       	ldd	r24, Y+23	; 0x17
     298:	98 8d       	ldd	r25, Y+24	; 0x18
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	3f ef       	ldi	r19, 0xFF	; 255
     29e:	4f e7       	ldi	r20, 0x7F	; 127
     2a0:	57 e4       	ldi	r21, 0x47	; 71
     2a2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     2a6:	18 16       	cp	r1, r24
     2a8:	4c f5       	brge	.+82     	; 0x2fc <__vector_5+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2aa:	69 8d       	ldd	r22, Y+25	; 0x19
     2ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e2       	ldi	r20, 0x20	; 32
     2b8:	51 e4       	ldi	r21, 0x41	; 65
     2ba:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     2be:	dc 01       	movw	r26, r24
     2c0:	cb 01       	movw	r24, r22
     2c2:	bc 01       	movw	r22, r24
     2c4:	cd 01       	movw	r24, r26
     2c6:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	9c 8b       	std	Y+20, r25	; 0x14
     2d0:	8b 8b       	std	Y+19, r24	; 0x13
     2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <__vector_5+0xf0>
     2d4:	80 e9       	ldi	r24, 0x90	; 144
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	9a 8b       	std	Y+18, r25	; 0x12
     2da:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2dc:	89 89       	ldd	r24, Y+17	; 0x11
     2de:	9a 89       	ldd	r25, Y+18	; 0x12
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <__vector_5+0xde>
     2e4:	9a 8b       	std	Y+18, r25	; 0x12
     2e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2e8:	8b 89       	ldd	r24, Y+19	; 0x13
     2ea:	9c 89       	ldd	r25, Y+20	; 0x14
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	9c 8b       	std	Y+20, r25	; 0x14
     2f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2f2:	8b 89       	ldd	r24, Y+19	; 0x13
     2f4:	9c 89       	ldd	r25, Y+20	; 0x14
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	69 f7       	brne	.-38     	; 0x2d4 <__vector_5+0xd2>
     2fa:	14 c0       	rjmp	.+40     	; 0x324 <__vector_5+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2fc:	6d 89       	ldd	r22, Y+21	; 0x15
     2fe:	7e 89       	ldd	r23, Y+22	; 0x16
     300:	8f 89       	ldd	r24, Y+23	; 0x17
     302:	98 8d       	ldd	r25, Y+24	; 0x18
     304:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     308:	dc 01       	movw	r26, r24
     30a:	cb 01       	movw	r24, r22
     30c:	9c 8b       	std	Y+20, r25	; 0x14
     30e:	8b 8b       	std	Y+19, r24	; 0x13
     310:	8b 89       	ldd	r24, Y+19	; 0x13
     312:	9c 89       	ldd	r25, Y+20	; 0x14
     314:	98 8b       	std	Y+16, r25	; 0x10
     316:	8f 87       	std	Y+15, r24	; 0x0f
     318:	8f 85       	ldd	r24, Y+15	; 0x0f
     31a:	98 89       	ldd	r25, Y+16	; 0x10
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <__vector_5+0x11a>
     320:	98 8b       	std	Y+16, r25	; 0x10
     322:	8f 87       	std	Y+15, r24	; 0x0f
	
	
	_delay_ms(20);		//디바운싱
	while(~PINE & 0x10);	//스위치 누름을 기다림
     324:	e1 e2       	ldi	r30, 0x21	; 33
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	80 71       	andi	r24, 0x10	; 16
     330:	90 70       	andi	r25, 0x00	; 0
     332:	00 97       	sbiw	r24, 0x00	; 0
     334:	b9 f3       	breq	.-18     	; 0x324 <__vector_5+0x122>
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	a0 ea       	ldi	r26, 0xA0	; 160
     33c:	b1 e4       	ldi	r27, 0x41	; 65
     33e:	8b 87       	std	Y+11, r24	; 0x0b
     340:	9c 87       	std	Y+12, r25	; 0x0c
     342:	ad 87       	std	Y+13, r26	; 0x0d
     344:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     346:	6b 85       	ldd	r22, Y+11	; 0x0b
     348:	7c 85       	ldd	r23, Y+12	; 0x0c
     34a:	8d 85       	ldd	r24, Y+13	; 0x0d
     34c:	9e 85       	ldd	r25, Y+14	; 0x0e
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	4a e7       	ldi	r20, 0x7A	; 122
     354:	55 e4       	ldi	r21, 0x45	; 69
     356:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
     35e:	8f 83       	std	Y+7, r24	; 0x07
     360:	98 87       	std	Y+8, r25	; 0x08
     362:	a9 87       	std	Y+9, r26	; 0x09
     364:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     366:	6f 81       	ldd	r22, Y+7	; 0x07
     368:	78 85       	ldd	r23, Y+8	; 0x08
     36a:	89 85       	ldd	r24, Y+9	; 0x09
     36c:	9a 85       	ldd	r25, Y+10	; 0x0a
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e8       	ldi	r20, 0x80	; 128
     374:	5f e3       	ldi	r21, 0x3F	; 63
     376:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     37a:	88 23       	and	r24, r24
     37c:	2c f4       	brge	.+10     	; 0x388 <__vector_5+0x186>
		__ticks = 1;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	9e 83       	std	Y+6, r25	; 0x06
     384:	8d 83       	std	Y+5, r24	; 0x05
     386:	3f c0       	rjmp	.+126    	; 0x406 <__vector_5+0x204>
	else if (__tmp > 65535)
     388:	6f 81       	ldd	r22, Y+7	; 0x07
     38a:	78 85       	ldd	r23, Y+8	; 0x08
     38c:	89 85       	ldd	r24, Y+9	; 0x09
     38e:	9a 85       	ldd	r25, Y+10	; 0x0a
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	3f ef       	ldi	r19, 0xFF	; 255
     394:	4f e7       	ldi	r20, 0x7F	; 127
     396:	57 e4       	ldi	r21, 0x47	; 71
     398:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     39c:	18 16       	cp	r1, r24
     39e:	4c f5       	brge	.+82     	; 0x3f2 <__vector_5+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3a0:	6b 85       	ldd	r22, Y+11	; 0x0b
     3a2:	7c 85       	ldd	r23, Y+12	; 0x0c
     3a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     3a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	40 e2       	ldi	r20, 0x20	; 32
     3ae:	51 e4       	ldi	r21, 0x41	; 65
     3b0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     3b4:	dc 01       	movw	r26, r24
     3b6:	cb 01       	movw	r24, r22
     3b8:	bc 01       	movw	r22, r24
     3ba:	cd 01       	movw	r24, r26
     3bc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     3c0:	dc 01       	movw	r26, r24
     3c2:	cb 01       	movw	r24, r22
     3c4:	9e 83       	std	Y+6, r25	; 0x06
     3c6:	8d 83       	std	Y+5, r24	; 0x05
     3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <__vector_5+0x1e6>
     3ca:	80 e9       	ldi	r24, 0x90	; 144
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	9c 83       	std	Y+4, r25	; 0x04
     3d0:	8b 83       	std	Y+3, r24	; 0x03
     3d2:	8b 81       	ldd	r24, Y+3	; 0x03
     3d4:	9c 81       	ldd	r25, Y+4	; 0x04
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <__vector_5+0x1d4>
     3da:	9c 83       	std	Y+4, r25	; 0x04
     3dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3de:	8d 81       	ldd	r24, Y+5	; 0x05
     3e0:	9e 81       	ldd	r25, Y+6	; 0x06
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	9e 83       	std	Y+6, r25	; 0x06
     3e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ea:	9e 81       	ldd	r25, Y+6	; 0x06
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	69 f7       	brne	.-38     	; 0x3ca <__vector_5+0x1c8>
     3f0:	14 c0       	rjmp	.+40     	; 0x41a <__vector_5+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f2:	6f 81       	ldd	r22, Y+7	; 0x07
     3f4:	78 85       	ldd	r23, Y+8	; 0x08
     3f6:	89 85       	ldd	r24, Y+9	; 0x09
     3f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     3fa:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	9e 83       	std	Y+6, r25	; 0x06
     404:	8d 83       	std	Y+5, r24	; 0x05
     406:	8d 81       	ldd	r24, Y+5	; 0x05
     408:	9e 81       	ldd	r25, Y+6	; 0x06
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	89 83       	std	Y+1, r24	; 0x01
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	9a 81       	ldd	r25, Y+2	; 0x02
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <__vector_5+0x210>
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		//디바운싱
		
	// 인터럽트 Disable 시키는 부분
  	EIMSK = 0x00;	//외부 인터럽트 DISABLE 
     41a:	e9 e5       	ldi	r30, 0x59	; 89
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	10 82       	st	Z, r1
	ADCSRA = 0x00;	//AD 컨버팅 중지	
     420:	e6 e2       	ldi	r30, 0x26	; 38
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	10 82       	st	Z, r1

	idle();
     426:	0e 94 cc 02 	call	0x598	; 0x598 <idle>

	EIFR = 0x10;		//인터럽트 플래그 레지스터 리셋	- 실행후 리셋시켜야함
     42a:	e8 e5       	ldi	r30, 0x58	; 88
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 e1       	ldi	r24, 0x10	; 16
     430:	80 83       	st	Z, r24
}
     432:	6c 96       	adiw	r28, 0x1c	; 28
     434:	de bf       	out	0x3e, r29	; 62
     436:	cd bf       	out	0x3d, r28	; 61
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	00 92 5b 00 	sts	0x005B, r0
     45a:	0f 90       	pop	r0
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <putchar1>:
	EIFR = 0x01;		//인터럽트 플래그 레지스터 리셋
}
*/

static int putchar1(char c)	//카메라에 명령어 전송
{
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	0f 92       	push	r0
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
     470:	eb e2       	ldi	r30, 0x2B	; 43
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	88 2f       	mov	r24, r24
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	80 72       	andi	r24, 0x20	; 32
     47c:	90 70       	andi	r25, 0x00	; 0
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	b9 f3       	breq	.-18     	; 0x470 <putchar1+0xc>
		UDR0 = c;
     482:	ec e2       	ldi	r30, 0x2C	; 44
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	80 83       	st	Z, r24
	return 0;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
}
     48e:	0f 90       	pop	r0
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	08 95       	ret

00000496 <reset>:


void reset(){		//Camera Command(reset)
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
 printf("\r\nRESET  ");
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <reset+0xa>
     4a0:	ed b7       	in	r30, 0x3d	; 61
     4a2:	fe b7       	in	r31, 0x3e	; 62
     4a4:	31 96       	adiw	r30, 0x01	; 1
     4a6:	86 e1       	ldi	r24, 0x16	; 22
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	91 83       	std	Z+1, r25	; 0x01
     4ac:	80 83       	st	Z, r24
     4ae:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
 putchar1(0x56);
     4b6:	86 e5       	ldi	r24, 0x56	; 86
     4b8:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x26);
     4c2:	86 e2       	ldi	r24, 0x26	; 38
     4c4:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 img_cnt = 0;
     4ce:	10 92 1e 02 	sts	0x021E, r1
     4d2:	10 92 1d 02 	sts	0x021D, r1
}
     4d6:	cf 91       	pop	r28
     4d8:	df 91       	pop	r29
     4da:	08 95       	ret

000004dc <resize>:
 
void resize(){		//Camera Command(resize)
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
 printf("\r\nRESIZE  ");
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <resize+0xa>
     4e6:	ed b7       	in	r30, 0x3d	; 61
     4e8:	fe b7       	in	r31, 0x3e	; 62
     4ea:	31 96       	adiw	r30, 0x01	; 1
     4ec:	80 e2       	ldi	r24, 0x20	; 32
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	91 83       	std	Z+1, r25	; 0x01
     4f2:	80 83       	st	Z, r24
     4f4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
 putchar1(0x56);
     4fc:	86 e5       	ldi	r24, 0x56	; 86
     4fe:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x31);
     508:	81 e3       	ldi	r24, 0x31	; 49
     50a:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x05);
     50e:	85 e0       	ldi	r24, 0x05	; 5
     510:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x04);
     514:	84 e0       	ldi	r24, 0x04	; 4
     516:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x01);
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x19);
     526:	89 e1       	ldi	r24, 0x19	; 25
     528:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x11);
     52c:	81 e1       	ldi	r24, 0x11	; 17
     52e:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 img_cnt = 0;
     532:	10 92 1e 02 	sts	0x021E, r1
     536:	10 92 1d 02 	sts	0x021D, r1
}
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <set_rate>:
 
void set_rate(){	//Camera Command(set_rate 115200)
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
 printf("\r\nSET_RATE ");
     548:	00 d0       	rcall	.+0      	; 0x54a <set_rate+0xa>
     54a:	ed b7       	in	r30, 0x3d	; 61
     54c:	fe b7       	in	r31, 0x3e	; 62
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	8b e2       	ldi	r24, 0x2B	; 43
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	91 83       	std	Z+1, r25	; 0x01
     556:	80 83       	st	Z, r24
     558:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
 putchar1(0x56);
     560:	86 e5       	ldi	r24, 0x56	; 86
     562:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x24);
     56c:	84 e2       	ldi	r24, 0x24	; 36
     56e:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x03);
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x01);
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x0D);
     57e:	8d e0       	ldi	r24, 0x0D	; 13
     580:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0xA6);
     584:	86 ea       	ldi	r24, 0xA6	; 166
     586:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 img_cnt = 0;
     58a:	10 92 1e 02 	sts	0x021E, r1
     58e:	10 92 1d 02 	sts	0x021D, r1
}
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <idle>:

void idle(){		//Camera Command(Idle)
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	c6 54       	subi	r28, 0x46	; 70
     5a6:	d0 40       	sbci	r29, 0x00	; 0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
 printf("\r\nIDLE  ");
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <idle+0x1c>
     5b4:	ed b7       	in	r30, 0x3d	; 61
     5b6:	fe b7       	in	r31, 0x3e	; 62
     5b8:	31 96       	adiw	r30, 0x01	; 1
     5ba:	87 e3       	ldi	r24, 0x37	; 55
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
     5c2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
 init_buffer(CAMERA);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 89 09 	call	0x1312	; 0x1312 <init_buffer>
 command = IDLE;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	90 93 2e 02 	sts	0x022E, r25
     5da:	80 93 2d 02 	sts	0x022D, r24
 idle_cnt = 0;
     5de:	10 92 28 02 	sts	0x0228, r1
     5e2:	10 92 27 02 	sts	0x0227, r1
 img_cnt = 0;
     5e6:	10 92 1e 02 	sts	0x021E, r1
     5ea:	10 92 1d 02 	sts	0x021D, r1
 call_img_flag = 0;
     5ee:	10 92 22 02 	sts	0x0222, r1
     5f2:	10 92 21 02 	sts	0x0221, r1
 img_data_start_flag = 0;
     5f6:	10 92 24 02 	sts	0x0224, r1
     5fa:	10 92 23 02 	sts	0x0223, r1
 
 putchar1(0x56); _delay_ms(1);
     5fe:	86 e5       	ldi	r24, 0x56	; 86
     600:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a0 e8       	ldi	r26, 0x80	; 128
     610:	bf e3       	ldi	r27, 0x3F	; 63
     612:	80 83       	st	Z, r24
     614:	91 83       	std	Z+1, r25	; 0x01
     616:	a2 83       	std	Z+2, r26	; 0x02
     618:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     61a:	8e 01       	movw	r16, r28
     61c:	01 5c       	subi	r16, 0xC1	; 193
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
     620:	fe 01       	movw	r30, r28
     622:	ed 5b       	subi	r30, 0xBD	; 189
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	60 81       	ld	r22, Z
     628:	71 81       	ldd	r23, Z+1	; 0x01
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	93 81       	ldd	r25, Z+3	; 0x03
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	4a e7       	ldi	r20, 0x7A	; 122
     634:	55 e4       	ldi	r21, 0x45	; 69
     636:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	f8 01       	movw	r30, r16
     640:	80 83       	st	Z, r24
     642:	91 83       	std	Z+1, r25	; 0x01
     644:	a2 83       	std	Z+2, r26	; 0x02
     646:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     648:	fe 01       	movw	r30, r28
     64a:	ff 96       	adiw	r30, 0x3f	; 63
     64c:	60 81       	ld	r22, Z
     64e:	71 81       	ldd	r23, Z+1	; 0x01
     650:	82 81       	ldd	r24, Z+2	; 0x02
     652:	93 81       	ldd	r25, Z+3	; 0x03
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e8       	ldi	r20, 0x80	; 128
     65a:	5f e3       	ldi	r21, 0x3F	; 63
     65c:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     660:	88 23       	and	r24, r24
     662:	2c f4       	brge	.+10     	; 0x66e <idle+0xd6>
		__ticks = 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	9e af       	std	Y+62, r25	; 0x3e
     66a:	8d af       	std	Y+61, r24	; 0x3d
     66c:	46 c0       	rjmp	.+140    	; 0x6fa <idle+0x162>
	else if (__tmp > 65535)
     66e:	fe 01       	movw	r30, r28
     670:	ff 96       	adiw	r30, 0x3f	; 63
     672:	60 81       	ld	r22, Z
     674:	71 81       	ldd	r23, Z+1	; 0x01
     676:	82 81       	ldd	r24, Z+2	; 0x02
     678:	93 81       	ldd	r25, Z+3	; 0x03
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	3f ef       	ldi	r19, 0xFF	; 255
     67e:	4f e7       	ldi	r20, 0x7F	; 127
     680:	57 e4       	ldi	r21, 0x47	; 71
     682:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     686:	18 16       	cp	r1, r24
     688:	64 f5       	brge	.+88     	; 0x6e2 <idle+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68a:	fe 01       	movw	r30, r28
     68c:	ed 5b       	subi	r30, 0xBD	; 189
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	60 81       	ld	r22, Z
     692:	71 81       	ldd	r23, Z+1	; 0x01
     694:	82 81       	ldd	r24, Z+2	; 0x02
     696:	93 81       	ldd	r25, Z+3	; 0x03
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e2       	ldi	r20, 0x20	; 32
     69e:	51 e4       	ldi	r21, 0x41	; 65
     6a0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	bc 01       	movw	r22, r24
     6aa:	cd 01       	movw	r24, r26
     6ac:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	9e af       	std	Y+62, r25	; 0x3e
     6b6:	8d af       	std	Y+61, r24	; 0x3d
     6b8:	0f c0       	rjmp	.+30     	; 0x6d8 <idle+0x140>
     6ba:	80 e9       	ldi	r24, 0x90	; 144
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	9c af       	std	Y+60, r25	; 0x3c
     6c0:	8b af       	std	Y+59, r24	; 0x3b
     6c2:	8b ad       	ldd	r24, Y+59	; 0x3b
     6c4:	9c ad       	ldd	r25, Y+60	; 0x3c
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <idle+0x12e>
     6ca:	9c af       	std	Y+60, r25	; 0x3c
     6cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ce:	8d ad       	ldd	r24, Y+61	; 0x3d
     6d0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	9e af       	std	Y+62, r25	; 0x3e
     6d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d8:	8d ad       	ldd	r24, Y+61	; 0x3d
     6da:	9e ad       	ldd	r25, Y+62	; 0x3e
     6dc:	00 97       	sbiw	r24, 0x00	; 0
     6de:	69 f7       	brne	.-38     	; 0x6ba <idle+0x122>
     6e0:	16 c0       	rjmp	.+44     	; 0x70e <idle+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e2:	fe 01       	movw	r30, r28
     6e4:	ff 96       	adiw	r30, 0x3f	; 63
     6e6:	60 81       	ld	r22, Z
     6e8:	71 81       	ldd	r23, Z+1	; 0x01
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	93 81       	ldd	r25, Z+3	; 0x03
     6ee:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	9e af       	std	Y+62, r25	; 0x3e
     6f8:	8d af       	std	Y+61, r24	; 0x3d
     6fa:	8d ad       	ldd	r24, Y+61	; 0x3d
     6fc:	9e ad       	ldd	r25, Y+62	; 0x3e
     6fe:	9a af       	std	Y+58, r25	; 0x3a
     700:	89 af       	std	Y+57, r24	; 0x39
     702:	89 ad       	ldd	r24, Y+57	; 0x39
     704:	9a ad       	ldd	r25, Y+58	; 0x3a
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <idle+0x16e>
     70a:	9a af       	std	Y+58, r25	; 0x3a
     70c:	89 af       	std	Y+57, r24	; 0x39
 putchar1(0x00); _delay_ms(1);
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	a0 e8       	ldi	r26, 0x80	; 128
     71a:	bf e3       	ldi	r27, 0x3F	; 63
     71c:	8d ab       	std	Y+53, r24	; 0x35
     71e:	9e ab       	std	Y+54, r25	; 0x36
     720:	af ab       	std	Y+55, r26	; 0x37
     722:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     724:	6d a9       	ldd	r22, Y+53	; 0x35
     726:	7e a9       	ldd	r23, Y+54	; 0x36
     728:	8f a9       	ldd	r24, Y+55	; 0x37
     72a:	98 ad       	ldd	r25, Y+56	; 0x38
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	4a e7       	ldi	r20, 0x7A	; 122
     732:	55 e4       	ldi	r21, 0x45	; 69
     734:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     738:	dc 01       	movw	r26, r24
     73a:	cb 01       	movw	r24, r22
     73c:	89 ab       	std	Y+49, r24	; 0x31
     73e:	9a ab       	std	Y+50, r25	; 0x32
     740:	ab ab       	std	Y+51, r26	; 0x33
     742:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     744:	69 a9       	ldd	r22, Y+49	; 0x31
     746:	7a a9       	ldd	r23, Y+50	; 0x32
     748:	8b a9       	ldd	r24, Y+51	; 0x33
     74a:	9c a9       	ldd	r25, Y+52	; 0x34
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e8       	ldi	r20, 0x80	; 128
     752:	5f e3       	ldi	r21, 0x3F	; 63
     754:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     758:	88 23       	and	r24, r24
     75a:	2c f4       	brge	.+10     	; 0x766 <idle+0x1ce>
		__ticks = 1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	98 ab       	std	Y+48, r25	; 0x30
     762:	8f a7       	std	Y+47, r24	; 0x2f
     764:	3f c0       	rjmp	.+126    	; 0x7e4 <idle+0x24c>
	else if (__tmp > 65535)
     766:	69 a9       	ldd	r22, Y+49	; 0x31
     768:	7a a9       	ldd	r23, Y+50	; 0x32
     76a:	8b a9       	ldd	r24, Y+51	; 0x33
     76c:	9c a9       	ldd	r25, Y+52	; 0x34
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	3f ef       	ldi	r19, 0xFF	; 255
     772:	4f e7       	ldi	r20, 0x7F	; 127
     774:	57 e4       	ldi	r21, 0x47	; 71
     776:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     77a:	18 16       	cp	r1, r24
     77c:	4c f5       	brge	.+82     	; 0x7d0 <idle+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     77e:	6d a9       	ldd	r22, Y+53	; 0x35
     780:	7e a9       	ldd	r23, Y+54	; 0x36
     782:	8f a9       	ldd	r24, Y+55	; 0x37
     784:	98 ad       	ldd	r25, Y+56	; 0x38
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e2       	ldi	r20, 0x20	; 32
     78c:	51 e4       	ldi	r21, 0x41	; 65
     78e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     792:	dc 01       	movw	r26, r24
     794:	cb 01       	movw	r24, r22
     796:	bc 01       	movw	r22, r24
     798:	cd 01       	movw	r24, r26
     79a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	98 ab       	std	Y+48, r25	; 0x30
     7a4:	8f a7       	std	Y+47, r24	; 0x2f
     7a6:	0f c0       	rjmp	.+30     	; 0x7c6 <idle+0x22e>
     7a8:	80 e9       	ldi	r24, 0x90	; 144
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	9e a7       	std	Y+46, r25	; 0x2e
     7ae:	8d a7       	std	Y+45, r24	; 0x2d
     7b0:	8d a5       	ldd	r24, Y+45	; 0x2d
     7b2:	9e a5       	ldd	r25, Y+46	; 0x2e
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <idle+0x21c>
     7b8:	9e a7       	std	Y+46, r25	; 0x2e
     7ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7bc:	8f a5       	ldd	r24, Y+47	; 0x2f
     7be:	98 a9       	ldd	r25, Y+48	; 0x30
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	98 ab       	std	Y+48, r25	; 0x30
     7c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c6:	8f a5       	ldd	r24, Y+47	; 0x2f
     7c8:	98 a9       	ldd	r25, Y+48	; 0x30
     7ca:	00 97       	sbiw	r24, 0x00	; 0
     7cc:	69 f7       	brne	.-38     	; 0x7a8 <idle+0x210>
     7ce:	14 c0       	rjmp	.+40     	; 0x7f8 <idle+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d0:	69 a9       	ldd	r22, Y+49	; 0x31
     7d2:	7a a9       	ldd	r23, Y+50	; 0x32
     7d4:	8b a9       	ldd	r24, Y+51	; 0x33
     7d6:	9c a9       	ldd	r25, Y+52	; 0x34
     7d8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	98 ab       	std	Y+48, r25	; 0x30
     7e2:	8f a7       	std	Y+47, r24	; 0x2f
     7e4:	8f a5       	ldd	r24, Y+47	; 0x2f
     7e6:	98 a9       	ldd	r25, Y+48	; 0x30
     7e8:	9c a7       	std	Y+44, r25	; 0x2c
     7ea:	8b a7       	std	Y+43, r24	; 0x2b
     7ec:	8b a5       	ldd	r24, Y+43	; 0x2b
     7ee:	9c a5       	ldd	r25, Y+44	; 0x2c
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <idle+0x258>
     7f4:	9c a7       	std	Y+44, r25	; 0x2c
     7f6:	8b a7       	std	Y+43, r24	; 0x2b
 putchar1(0x36); _delay_ms(1);
     7f8:	86 e3       	ldi	r24, 0x36	; 54
     7fa:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e8       	ldi	r26, 0x80	; 128
     804:	bf e3       	ldi	r27, 0x3F	; 63
     806:	8f a3       	std	Y+39, r24	; 0x27
     808:	98 a7       	std	Y+40, r25	; 0x28
     80a:	a9 a7       	std	Y+41, r26	; 0x29
     80c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     80e:	6f a1       	ldd	r22, Y+39	; 0x27
     810:	78 a5       	ldd	r23, Y+40	; 0x28
     812:	89 a5       	ldd	r24, Y+41	; 0x29
     814:	9a a5       	ldd	r25, Y+42	; 0x2a
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	4a e7       	ldi	r20, 0x7A	; 122
     81c:	55 e4       	ldi	r21, 0x45	; 69
     81e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	8b a3       	std	Y+35, r24	; 0x23
     828:	9c a3       	std	Y+36, r25	; 0x24
     82a:	ad a3       	std	Y+37, r26	; 0x25
     82c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     82e:	6b a1       	ldd	r22, Y+35	; 0x23
     830:	7c a1       	ldd	r23, Y+36	; 0x24
     832:	8d a1       	ldd	r24, Y+37	; 0x25
     834:	9e a1       	ldd	r25, Y+38	; 0x26
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e8       	ldi	r20, 0x80	; 128
     83c:	5f e3       	ldi	r21, 0x3F	; 63
     83e:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     842:	88 23       	and	r24, r24
     844:	2c f4       	brge	.+10     	; 0x850 <idle+0x2b8>
		__ticks = 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9a a3       	std	Y+34, r25	; 0x22
     84c:	89 a3       	std	Y+33, r24	; 0x21
     84e:	3f c0       	rjmp	.+126    	; 0x8ce <idle+0x336>
	else if (__tmp > 65535)
     850:	6b a1       	ldd	r22, Y+35	; 0x23
     852:	7c a1       	ldd	r23, Y+36	; 0x24
     854:	8d a1       	ldd	r24, Y+37	; 0x25
     856:	9e a1       	ldd	r25, Y+38	; 0x26
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	4f e7       	ldi	r20, 0x7F	; 127
     85e:	57 e4       	ldi	r21, 0x47	; 71
     860:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     864:	18 16       	cp	r1, r24
     866:	4c f5       	brge	.+82     	; 0x8ba <idle+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     868:	6f a1       	ldd	r22, Y+39	; 0x27
     86a:	78 a5       	ldd	r23, Y+40	; 0x28
     86c:	89 a5       	ldd	r24, Y+41	; 0x29
     86e:	9a a5       	ldd	r25, Y+42	; 0x2a
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e2       	ldi	r20, 0x20	; 32
     876:	51 e4       	ldi	r21, 0x41	; 65
     878:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	9a a3       	std	Y+34, r25	; 0x22
     88e:	89 a3       	std	Y+33, r24	; 0x21
     890:	0f c0       	rjmp	.+30     	; 0x8b0 <idle+0x318>
     892:	80 e9       	ldi	r24, 0x90	; 144
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	98 a3       	std	Y+32, r25	; 0x20
     898:	8f 8f       	std	Y+31, r24	; 0x1f
     89a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     89c:	98 a1       	ldd	r25, Y+32	; 0x20
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <idle+0x306>
     8a2:	98 a3       	std	Y+32, r25	; 0x20
     8a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a6:	89 a1       	ldd	r24, Y+33	; 0x21
     8a8:	9a a1       	ldd	r25, Y+34	; 0x22
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	9a a3       	std	Y+34, r25	; 0x22
     8ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b0:	89 a1       	ldd	r24, Y+33	; 0x21
     8b2:	9a a1       	ldd	r25, Y+34	; 0x22
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	69 f7       	brne	.-38     	; 0x892 <idle+0x2fa>
     8b8:	14 c0       	rjmp	.+40     	; 0x8e2 <idle+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ba:	6b a1       	ldd	r22, Y+35	; 0x23
     8bc:	7c a1       	ldd	r23, Y+36	; 0x24
     8be:	8d a1       	ldd	r24, Y+37	; 0x25
     8c0:	9e a1       	ldd	r25, Y+38	; 0x26
     8c2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	9a a3       	std	Y+34, r25	; 0x22
     8cc:	89 a3       	std	Y+33, r24	; 0x21
     8ce:	89 a1       	ldd	r24, Y+33	; 0x21
     8d0:	9a a1       	ldd	r25, Y+34	; 0x22
     8d2:	9e 8f       	std	Y+30, r25	; 0x1e
     8d4:	8d 8f       	std	Y+29, r24	; 0x1d
     8d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <idle+0x342>
     8de:	9e 8f       	std	Y+30, r25	; 0x1e
     8e0:	8d 8f       	std	Y+29, r24	; 0x1d
 putchar1(0x01); _delay_ms(1);
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a0 e8       	ldi	r26, 0x80	; 128
     8ee:	bf e3       	ldi	r27, 0x3F	; 63
     8f0:	89 8f       	std	Y+25, r24	; 0x19
     8f2:	9a 8f       	std	Y+26, r25	; 0x1a
     8f4:	ab 8f       	std	Y+27, r26	; 0x1b
     8f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8f8:	69 8d       	ldd	r22, Y+25	; 0x19
     8fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	4a e7       	ldi	r20, 0x7A	; 122
     906:	55 e4       	ldi	r21, 0x45	; 69
     908:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	8d 8b       	std	Y+21, r24	; 0x15
     912:	9e 8b       	std	Y+22, r25	; 0x16
     914:	af 8b       	std	Y+23, r26	; 0x17
     916:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     918:	6d 89       	ldd	r22, Y+21	; 0x15
     91a:	7e 89       	ldd	r23, Y+22	; 0x16
     91c:	8f 89       	ldd	r24, Y+23	; 0x17
     91e:	98 8d       	ldd	r25, Y+24	; 0x18
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e8       	ldi	r20, 0x80	; 128
     926:	5f e3       	ldi	r21, 0x3F	; 63
     928:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     92c:	88 23       	and	r24, r24
     92e:	2c f4       	brge	.+10     	; 0x93a <idle+0x3a2>
		__ticks = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	9c 8b       	std	Y+20, r25	; 0x14
     936:	8b 8b       	std	Y+19, r24	; 0x13
     938:	3f c0       	rjmp	.+126    	; 0x9b8 <idle+0x420>
	else if (__tmp > 65535)
     93a:	6d 89       	ldd	r22, Y+21	; 0x15
     93c:	7e 89       	ldd	r23, Y+22	; 0x16
     93e:	8f 89       	ldd	r24, Y+23	; 0x17
     940:	98 8d       	ldd	r25, Y+24	; 0x18
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	3f ef       	ldi	r19, 0xFF	; 255
     946:	4f e7       	ldi	r20, 0x7F	; 127
     948:	57 e4       	ldi	r21, 0x47	; 71
     94a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     94e:	18 16       	cp	r1, r24
     950:	4c f5       	brge	.+82     	; 0x9a4 <idle+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     952:	69 8d       	ldd	r22, Y+25	; 0x19
     954:	7a 8d       	ldd	r23, Y+26	; 0x1a
     956:	8b 8d       	ldd	r24, Y+27	; 0x1b
     958:	9c 8d       	ldd	r25, Y+28	; 0x1c
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e2       	ldi	r20, 0x20	; 32
     960:	51 e4       	ldi	r21, 0x41	; 65
     962:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	9c 8b       	std	Y+20, r25	; 0x14
     978:	8b 8b       	std	Y+19, r24	; 0x13
     97a:	0f c0       	rjmp	.+30     	; 0x99a <idle+0x402>
     97c:	80 e9       	ldi	r24, 0x90	; 144
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9a 8b       	std	Y+18, r25	; 0x12
     982:	89 8b       	std	Y+17, r24	; 0x11
     984:	89 89       	ldd	r24, Y+17	; 0x11
     986:	9a 89       	ldd	r25, Y+18	; 0x12
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <idle+0x3f0>
     98c:	9a 8b       	std	Y+18, r25	; 0x12
     98e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     990:	8b 89       	ldd	r24, Y+19	; 0x13
     992:	9c 89       	ldd	r25, Y+20	; 0x14
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99a:	8b 89       	ldd	r24, Y+19	; 0x13
     99c:	9c 89       	ldd	r25, Y+20	; 0x14
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	69 f7       	brne	.-38     	; 0x97c <idle+0x3e4>
     9a2:	14 c0       	rjmp	.+40     	; 0x9cc <idle+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a4:	6d 89       	ldd	r22, Y+21	; 0x15
     9a6:	7e 89       	ldd	r23, Y+22	; 0x16
     9a8:	8f 89       	ldd	r24, Y+23	; 0x17
     9aa:	98 8d       	ldd	r25, Y+24	; 0x18
     9ac:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	9c 8b       	std	Y+20, r25	; 0x14
     9b6:	8b 8b       	std	Y+19, r24	; 0x13
     9b8:	8b 89       	ldd	r24, Y+19	; 0x13
     9ba:	9c 89       	ldd	r25, Y+20	; 0x14
     9bc:	98 8b       	std	Y+16, r25	; 0x10
     9be:	8f 87       	std	Y+15, r24	; 0x0f
     9c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9c2:	98 89       	ldd	r25, Y+16	; 0x10
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <idle+0x42c>
     9c8:	98 8b       	std	Y+16, r25	; 0x10
     9ca:	8f 87       	std	Y+15, r24	; 0x0f
 putchar1(0x03); _delay_ms(1);
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a0 e8       	ldi	r26, 0x80	; 128
     9d8:	bf e3       	ldi	r27, 0x3F	; 63
     9da:	8b 87       	std	Y+11, r24	; 0x0b
     9dc:	9c 87       	std	Y+12, r25	; 0x0c
     9de:	ad 87       	std	Y+13, r26	; 0x0d
     9e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9e2:	6b 85       	ldd	r22, Y+11	; 0x0b
     9e4:	7c 85       	ldd	r23, Y+12	; 0x0c
     9e6:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e8:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	4a e7       	ldi	r20, 0x7A	; 122
     9f0:	55 e4       	ldi	r21, 0x45	; 69
     9f2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	8f 83       	std	Y+7, r24	; 0x07
     9fc:	98 87       	std	Y+8, r25	; 0x08
     9fe:	a9 87       	std	Y+9, r26	; 0x09
     a00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a02:	6f 81       	ldd	r22, Y+7	; 0x07
     a04:	78 85       	ldd	r23, Y+8	; 0x08
     a06:	89 85       	ldd	r24, Y+9	; 0x09
     a08:	9a 85       	ldd	r25, Y+10	; 0x0a
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e8       	ldi	r20, 0x80	; 128
     a10:	5f e3       	ldi	r21, 0x3F	; 63
     a12:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     a16:	88 23       	and	r24, r24
     a18:	2c f4       	brge	.+10     	; 0xa24 <idle+0x48c>
		__ticks = 1;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	9e 83       	std	Y+6, r25	; 0x06
     a20:	8d 83       	std	Y+5, r24	; 0x05
     a22:	3f c0       	rjmp	.+126    	; 0xaa2 <idle+0x50a>
	else if (__tmp > 65535)
     a24:	6f 81       	ldd	r22, Y+7	; 0x07
     a26:	78 85       	ldd	r23, Y+8	; 0x08
     a28:	89 85       	ldd	r24, Y+9	; 0x09
     a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	3f ef       	ldi	r19, 0xFF	; 255
     a30:	4f e7       	ldi	r20, 0x7F	; 127
     a32:	57 e4       	ldi	r21, 0x47	; 71
     a34:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     a38:	18 16       	cp	r1, r24
     a3a:	4c f5       	brge	.+82     	; 0xa8e <idle+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     a40:	8d 85       	ldd	r24, Y+13	; 0x0d
     a42:	9e 85       	ldd	r25, Y+14	; 0x0e
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e2       	ldi	r20, 0x20	; 32
     a4a:	51 e4       	ldi	r21, 0x41	; 65
     a4c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	bc 01       	movw	r22, r24
     a56:	cd 01       	movw	r24, r26
     a58:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	9e 83       	std	Y+6, r25	; 0x06
     a62:	8d 83       	std	Y+5, r24	; 0x05
     a64:	0f c0       	rjmp	.+30     	; 0xa84 <idle+0x4ec>
     a66:	80 e9       	ldi	r24, 0x90	; 144
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	9c 83       	std	Y+4, r25	; 0x04
     a6c:	8b 83       	std	Y+3, r24	; 0x03
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <idle+0x4da>
     a76:	9c 83       	std	Y+4, r25	; 0x04
     a78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7a:	8d 81       	ldd	r24, Y+5	; 0x05
     a7c:	9e 81       	ldd	r25, Y+6	; 0x06
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9e 83       	std	Y+6, r25	; 0x06
     a82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a84:	8d 81       	ldd	r24, Y+5	; 0x05
     a86:	9e 81       	ldd	r25, Y+6	; 0x06
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	69 f7       	brne	.-38     	; 0xa66 <idle+0x4ce>
     a8c:	14 c0       	rjmp	.+40     	; 0xab6 <idle+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a8e:	6f 81       	ldd	r22, Y+7	; 0x07
     a90:	78 85       	ldd	r23, Y+8	; 0x08
     a92:	89 85       	ldd	r24, Y+9	; 0x09
     a94:	9a 85       	ldd	r25, Y+10	; 0x0a
     a96:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	9e 83       	std	Y+6, r25	; 0x06
     aa0:	8d 83       	std	Y+5, r24	; 0x05
     aa2:	8d 81       	ldd	r24, Y+5	; 0x05
     aa4:	9e 81       	ldd	r25, Y+6	; 0x06
     aa6:	9a 83       	std	Y+2, r25	; 0x02
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <idle+0x516>
     ab2:	9a 83       	std	Y+2, r25	; 0x02
     ab4:	89 83       	std	Y+1, r24	; 0x01
 
 if(TEST)
 	printf("IDLE CALL!\\n");
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <idle+0x520>
     ab8:	ed b7       	in	r30, 0x3d	; 61
     aba:	fe b7       	in	r31, 0x3e	; 62
     abc:	31 96       	adiw	r30, 0x01	; 1
     abe:	80 e4       	ldi	r24, 0x40	; 64
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	91 83       	std	Z+1, r25	; 0x01
     ac4:	80 83       	st	Z, r24
     ac6:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
}
     ace:	ca 5b       	subi	r28, 0xBA	; 186
     ad0:	df 4f       	sbci	r29, 0xFF	; 255
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	cf 91       	pop	r28
     ade:	df 91       	pop	r29
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	08 95       	ret

00000ae6 <shot>:
 
void shot(){		//Camera Command(shot)
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
 printf("\r\nSHOT  ");
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <shot+0xa>
     af0:	ed b7       	in	r30, 0x3d	; 61
     af2:	fe b7       	in	r31, 0x3e	; 62
     af4:	31 96       	adiw	r30, 0x01	; 1
     af6:	8d e4       	ldi	r24, 0x4D	; 77
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	91 83       	std	Z+1, r25	; 0x01
     afc:	80 83       	st	Z, r24
     afe:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
 command = SHOT;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 2e 02 	sts	0x022E, r25
     b0e:	80 93 2d 02 	sts	0x022D, r24
 idle_cnt = 0;
     b12:	10 92 28 02 	sts	0x0228, r1
     b16:	10 92 27 02 	sts	0x0227, r1
 shot_cnt = 0;
     b1a:	10 92 2a 02 	sts	0x022A, r1
     b1e:	10 92 29 02 	sts	0x0229, r1
 putchar1(0x56);
     b22:	86 e5       	ldi	r24, 0x56	; 86
     b24:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x36);
     b2e:	86 e3       	ldi	r24, 0x36	; 54
     b30:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x01);
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 img_cnt = 0;
     b40:	10 92 1e 02 	sts	0x021E, r1
     b44:	10 92 1d 02 	sts	0x021D, r1
}
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <call_size>:
 
void call_size(){	//Camera Command(call_size)
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
 printf("\r\nCALL_SIZE ");
     b56:	00 d0       	rcall	.+0      	; 0xb58 <call_size+0xa>
     b58:	ed b7       	in	r30, 0x3d	; 61
     b5a:	fe b7       	in	r31, 0x3e	; 62
     b5c:	31 96       	adiw	r30, 0x01	; 1
     b5e:	86 e5       	ldi	r24, 0x56	; 86
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	91 83       	std	Z+1, r25	; 0x01
     b64:	80 83       	st	Z, r24
     b66:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
 command = CALL_SIZE;
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	90 93 2e 02 	sts	0x022E, r25
     b76:	80 93 2d 02 	sts	0x022D, r24
 shot_cnt = 0;
     b7a:	10 92 2a 02 	sts	0x022A, r1
     b7e:	10 92 29 02 	sts	0x0229, r1
 call_size_cnt = 0;
     b82:	10 92 2c 02 	sts	0x022C, r1
     b86:	10 92 2b 02 	sts	0x022B, r1
 call_size_flag = 1;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	90 93 20 02 	sts	0x0220, r25
     b92:	80 93 1f 02 	sts	0x021F, r24
 putchar1(0x56);
     b96:	86 e5       	ldi	r24, 0x56	; 86
     b98:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x34);
     ba2:	84 e3       	ldi	r24, 0x34	; 52
     ba4:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x01);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
}
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <call_img>:
 
void call_img(){	//Camera Command(call_img)
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
 printf("\r\nCALL_IMG ");
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <call_img+0xa>
     bc4:	ed b7       	in	r30, 0x3d	; 61
     bc6:	fe b7       	in	r31, 0x3e	; 62
     bc8:	31 96       	adiw	r30, 0x01	; 1
     bca:	83 e6       	ldi	r24, 0x63	; 99
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	80 83       	st	Z, r24
     bd2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
 command = 0;
     bda:	10 92 2e 02 	sts	0x022E, r1
     bde:	10 92 2d 02 	sts	0x022D, r1
 call_size_flag = 0;
     be2:	10 92 20 02 	sts	0x0220, r1
     be6:	10 92 1f 02 	sts	0x021F, r1
 call_img_flag = 1;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	90 93 22 02 	sts	0x0222, r25
     bf2:	80 93 21 02 	sts	0x0221, r24
 img_data_start_flag = 0;
     bf6:	10 92 24 02 	sts	0x0224, r1
     bfa:	10 92 23 02 	sts	0x0223, r1
 putchar1(0x56);
     bfe:	86 e5       	ldi	r24, 0x56	; 86
     c00:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x32);
     c0a:	82 e3       	ldi	r24, 0x32	; 50
     c0c:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x0c);
     c10:	8c e0       	ldi	r24, 0x0C	; 12
     c12:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x0A);
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(img_buffer[7]);
     c46:	80 91 07 01 	lds	r24, 0x0107
     c4a:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(img_buffer[8]);
     c4e:	80 91 08 01 	lds	r24, 0x0108
     c52:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x0A);
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 img_cnt = 0;
     c62:	10 92 1e 02 	sts	0x021E, r1
     c66:	10 92 1d 02 	sts	0x021D, r1
}
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <zip>:
 
void zip(){			//Camera Command(zip)
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nZIP  ");
 putchar1(0x56);
     c78:	86 e5       	ldi	r24, 0x56	; 86
     c7a:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x00);
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x31);
     c84:	81 e3       	ldi	r24, 0x31	; 49
     c86:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x05);
     c8a:	85 e0       	ldi	r24, 0x05	; 5
     c8c:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x01);
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x01);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x12);
     c9c:	82 e1       	ldi	r24, 0x12	; 18
     c9e:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0x04);
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 putchar1(0xFF);
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	0e 94 32 02 	call	0x464	; 0x464 <putchar1>
 img_cnt = 0;
     cae:	10 92 1e 02 	sts	0x021E, r1
     cb2:	10 92 1d 02 	sts	0x021D, r1
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <init_camera>:

void init_camera()
{
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	c6 54       	subi	r28, 0x46	; 70
     cca:	d0 40       	sbci	r29, 0x00	; 0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
 if(TEST)
 	printf("INIT CAMERA CALL!\n");
     cd6:	8f e6       	ldi	r24, 0x6F	; 111
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 12 13 	call	0x2624	; 0x2624 <puts>

 reset(); _delay_ms(1000);
     cde:	0e 94 4b 02 	call	0x496	; 0x496 <reset>
     ce2:	fe 01       	movw	r30, r28
     ce4:	ed 5b       	subi	r30, 0xBD	; 189
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	aa e7       	ldi	r26, 0x7A	; 122
     cee:	b4 e4       	ldi	r27, 0x44	; 68
     cf0:	80 83       	st	Z, r24
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	a2 83       	std	Z+2, r26	; 0x02
     cf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf8:	8e 01       	movw	r16, r28
     cfa:	01 5c       	subi	r16, 0xC1	; 193
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	fe 01       	movw	r30, r28
     d00:	ed 5b       	subi	r30, 0xBD	; 189
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	4a e7       	ldi	r20, 0x7A	; 122
     d12:	55 e4       	ldi	r21, 0x45	; 69
     d14:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	f8 01       	movw	r30, r16
     d1e:	80 83       	st	Z, r24
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	a2 83       	std	Z+2, r26	; 0x02
     d24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d26:	fe 01       	movw	r30, r28
     d28:	ff 96       	adiw	r30, 0x3f	; 63
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e8       	ldi	r20, 0x80	; 128
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     d3e:	88 23       	and	r24, r24
     d40:	2c f4       	brge	.+10     	; 0xd4c <init_camera+0x90>
		__ticks = 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9e af       	std	Y+62, r25	; 0x3e
     d48:	8d af       	std	Y+61, r24	; 0x3d
     d4a:	46 c0       	rjmp	.+140    	; 0xdd8 <init_camera+0x11c>
	else if (__tmp > 65535)
     d4c:	fe 01       	movw	r30, r28
     d4e:	ff 96       	adiw	r30, 0x3f	; 63
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	3f ef       	ldi	r19, 0xFF	; 255
     d5c:	4f e7       	ldi	r20, 0x7F	; 127
     d5e:	57 e4       	ldi	r21, 0x47	; 71
     d60:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     d64:	18 16       	cp	r1, r24
     d66:	64 f5       	brge	.+88     	; 0xdc0 <init_camera+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d68:	fe 01       	movw	r30, r28
     d6a:	ed 5b       	subi	r30, 0xBD	; 189
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e2       	ldi	r20, 0x20	; 32
     d7c:	51 e4       	ldi	r21, 0x41	; 65
     d7e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	bc 01       	movw	r22, r24
     d88:	cd 01       	movw	r24, r26
     d8a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	9e af       	std	Y+62, r25	; 0x3e
     d94:	8d af       	std	Y+61, r24	; 0x3d
     d96:	0f c0       	rjmp	.+30     	; 0xdb6 <init_camera+0xfa>
     d98:	80 e9       	ldi	r24, 0x90	; 144
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	9c af       	std	Y+60, r25	; 0x3c
     d9e:	8b af       	std	Y+59, r24	; 0x3b
     da0:	8b ad       	ldd	r24, Y+59	; 0x3b
     da2:	9c ad       	ldd	r25, Y+60	; 0x3c
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <init_camera+0xe8>
     da8:	9c af       	std	Y+60, r25	; 0x3c
     daa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dac:	8d ad       	ldd	r24, Y+61	; 0x3d
     dae:	9e ad       	ldd	r25, Y+62	; 0x3e
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	9e af       	std	Y+62, r25	; 0x3e
     db4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db6:	8d ad       	ldd	r24, Y+61	; 0x3d
     db8:	9e ad       	ldd	r25, Y+62	; 0x3e
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	69 f7       	brne	.-38     	; 0xd98 <init_camera+0xdc>
     dbe:	16 c0       	rjmp	.+44     	; 0xdec <init_camera+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc0:	fe 01       	movw	r30, r28
     dc2:	ff 96       	adiw	r30, 0x3f	; 63
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	9e af       	std	Y+62, r25	; 0x3e
     dd6:	8d af       	std	Y+61, r24	; 0x3d
     dd8:	8d ad       	ldd	r24, Y+61	; 0x3d
     dda:	9e ad       	ldd	r25, Y+62	; 0x3e
     ddc:	9a af       	std	Y+58, r25	; 0x3a
     dde:	89 af       	std	Y+57, r24	; 0x39
     de0:	89 ad       	ldd	r24, Y+57	; 0x39
     de2:	9a ad       	ldd	r25, Y+58	; 0x3a
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <init_camera+0x128>
     de8:	9a af       	std	Y+58, r25	; 0x3a
     dea:	89 af       	std	Y+57, r24	; 0x39
 resize(); _delay_ms(50);
     dec:	0e 94 6e 02 	call	0x4dc	; 0x4dc <resize>
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	a8 e4       	ldi	r26, 0x48	; 72
     df6:	b2 e4       	ldi	r27, 0x42	; 66
     df8:	8d ab       	std	Y+53, r24	; 0x35
     dfa:	9e ab       	std	Y+54, r25	; 0x36
     dfc:	af ab       	std	Y+55, r26	; 0x37
     dfe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e00:	6d a9       	ldd	r22, Y+53	; 0x35
     e02:	7e a9       	ldd	r23, Y+54	; 0x36
     e04:	8f a9       	ldd	r24, Y+55	; 0x37
     e06:	98 ad       	ldd	r25, Y+56	; 0x38
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	4a e7       	ldi	r20, 0x7A	; 122
     e0e:	55 e4       	ldi	r21, 0x45	; 69
     e10:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	89 ab       	std	Y+49, r24	; 0x31
     e1a:	9a ab       	std	Y+50, r25	; 0x32
     e1c:	ab ab       	std	Y+51, r26	; 0x33
     e1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e20:	69 a9       	ldd	r22, Y+49	; 0x31
     e22:	7a a9       	ldd	r23, Y+50	; 0x32
     e24:	8b a9       	ldd	r24, Y+51	; 0x33
     e26:	9c a9       	ldd	r25, Y+52	; 0x34
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e8       	ldi	r20, 0x80	; 128
     e2e:	5f e3       	ldi	r21, 0x3F	; 63
     e30:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     e34:	88 23       	and	r24, r24
     e36:	2c f4       	brge	.+10     	; 0xe42 <init_camera+0x186>
		__ticks = 1;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	98 ab       	std	Y+48, r25	; 0x30
     e3e:	8f a7       	std	Y+47, r24	; 0x2f
     e40:	3f c0       	rjmp	.+126    	; 0xec0 <init_camera+0x204>
	else if (__tmp > 65535)
     e42:	69 a9       	ldd	r22, Y+49	; 0x31
     e44:	7a a9       	ldd	r23, Y+50	; 0x32
     e46:	8b a9       	ldd	r24, Y+51	; 0x33
     e48:	9c a9       	ldd	r25, Y+52	; 0x34
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	3f ef       	ldi	r19, 0xFF	; 255
     e4e:	4f e7       	ldi	r20, 0x7F	; 127
     e50:	57 e4       	ldi	r21, 0x47	; 71
     e52:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     e56:	18 16       	cp	r1, r24
     e58:	4c f5       	brge	.+82     	; 0xeac <init_camera+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e5a:	6d a9       	ldd	r22, Y+53	; 0x35
     e5c:	7e a9       	ldd	r23, Y+54	; 0x36
     e5e:	8f a9       	ldd	r24, Y+55	; 0x37
     e60:	98 ad       	ldd	r25, Y+56	; 0x38
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e2       	ldi	r20, 0x20	; 32
     e68:	51 e4       	ldi	r21, 0x41	; 65
     e6a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	98 ab       	std	Y+48, r25	; 0x30
     e80:	8f a7       	std	Y+47, r24	; 0x2f
     e82:	0f c0       	rjmp	.+30     	; 0xea2 <init_camera+0x1e6>
     e84:	80 e9       	ldi	r24, 0x90	; 144
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	9e a7       	std	Y+46, r25	; 0x2e
     e8a:	8d a7       	std	Y+45, r24	; 0x2d
     e8c:	8d a5       	ldd	r24, Y+45	; 0x2d
     e8e:	9e a5       	ldd	r25, Y+46	; 0x2e
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <init_camera+0x1d4>
     e94:	9e a7       	std	Y+46, r25	; 0x2e
     e96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e98:	8f a5       	ldd	r24, Y+47	; 0x2f
     e9a:	98 a9       	ldd	r25, Y+48	; 0x30
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	98 ab       	std	Y+48, r25	; 0x30
     ea0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea4:	98 a9       	ldd	r25, Y+48	; 0x30
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	69 f7       	brne	.-38     	; 0xe84 <init_camera+0x1c8>
     eaa:	14 c0       	rjmp	.+40     	; 0xed4 <init_camera+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eac:	69 a9       	ldd	r22, Y+49	; 0x31
     eae:	7a a9       	ldd	r23, Y+50	; 0x32
     eb0:	8b a9       	ldd	r24, Y+51	; 0x33
     eb2:	9c a9       	ldd	r25, Y+52	; 0x34
     eb4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	98 ab       	std	Y+48, r25	; 0x30
     ebe:	8f a7       	std	Y+47, r24	; 0x2f
     ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
     ec2:	98 a9       	ldd	r25, Y+48	; 0x30
     ec4:	9c a7       	std	Y+44, r25	; 0x2c
     ec6:	8b a7       	std	Y+43, r24	; 0x2b
     ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
     eca:	9c a5       	ldd	r25, Y+44	; 0x2c
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <init_camera+0x210>
     ed0:	9c a7       	std	Y+44, r25	; 0x2c
     ed2:	8b a7       	std	Y+43, r24	; 0x2b
 zip(); _delay_ms(50);
     ed4:	0e 94 38 06 	call	0xc70	; 0xc70 <zip>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a8 e4       	ldi	r26, 0x48	; 72
     ede:	b2 e4       	ldi	r27, 0x42	; 66
     ee0:	8f a3       	std	Y+39, r24	; 0x27
     ee2:	98 a7       	std	Y+40, r25	; 0x28
     ee4:	a9 a7       	std	Y+41, r26	; 0x29
     ee6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee8:	6f a1       	ldd	r22, Y+39	; 0x27
     eea:	78 a5       	ldd	r23, Y+40	; 0x28
     eec:	89 a5       	ldd	r24, Y+41	; 0x29
     eee:	9a a5       	ldd	r25, Y+42	; 0x2a
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	55 e4       	ldi	r21, 0x45	; 69
     ef8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8b a3       	std	Y+35, r24	; 0x23
     f02:	9c a3       	std	Y+36, r25	; 0x24
     f04:	ad a3       	std	Y+37, r26	; 0x25
     f06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f08:	6b a1       	ldd	r22, Y+35	; 0x23
     f0a:	7c a1       	ldd	r23, Y+36	; 0x24
     f0c:	8d a1       	ldd	r24, Y+37	; 0x25
     f0e:	9e a1       	ldd	r25, Y+38	; 0x26
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <init_camera+0x26e>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9a a3       	std	Y+34, r25	; 0x22
     f26:	89 a3       	std	Y+33, r24	; 0x21
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <init_camera+0x2ec>
	else if (__tmp > 65535)
     f2a:	6b a1       	ldd	r22, Y+35	; 0x23
     f2c:	7c a1       	ldd	r23, Y+36	; 0x24
     f2e:	8d a1       	ldd	r24, Y+37	; 0x25
     f30:	9e a1       	ldd	r25, Y+38	; 0x26
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	4c f5       	brge	.+82     	; 0xf94 <init_camera+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	6f a1       	ldd	r22, Y+39	; 0x27
     f44:	78 a5       	ldd	r23, Y+40	; 0x28
     f46:	89 a5       	ldd	r24, Y+41	; 0x29
     f48:	9a a5       	ldd	r25, Y+42	; 0x2a
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9a a3       	std	Y+34, r25	; 0x22
     f68:	89 a3       	std	Y+33, r24	; 0x21
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <init_camera+0x2ce>
     f6c:	80 e9       	ldi	r24, 0x90	; 144
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	98 a3       	std	Y+32, r25	; 0x20
     f72:	8f 8f       	std	Y+31, r24	; 0x1f
     f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f76:	98 a1       	ldd	r25, Y+32	; 0x20
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <init_camera+0x2bc>
     f7c:	98 a3       	std	Y+32, r25	; 0x20
     f7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	89 a1       	ldd	r24, Y+33	; 0x21
     f82:	9a a1       	ldd	r25, Y+34	; 0x22
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	9a a3       	std	Y+34, r25	; 0x22
     f88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	89 a1       	ldd	r24, Y+33	; 0x21
     f8c:	9a a1       	ldd	r25, Y+34	; 0x22
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <init_camera+0x2b0>
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <init_camera+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f94:	6b a1       	ldd	r22, Y+35	; 0x23
     f96:	7c a1       	ldd	r23, Y+36	; 0x24
     f98:	8d a1       	ldd	r24, Y+37	; 0x25
     f9a:	9e a1       	ldd	r25, Y+38	; 0x26
     f9c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9a a3       	std	Y+34, r25	; 0x22
     fa6:	89 a3       	std	Y+33, r24	; 0x21
     fa8:	89 a1       	ldd	r24, Y+33	; 0x21
     faa:	9a a1       	ldd	r25, Y+34	; 0x22
     fac:	9e 8f       	std	Y+30, r25	; 0x1e
     fae:	8d 8f       	std	Y+29, r24	; 0x1d
     fb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <init_camera+0x2f8>
     fb8:	9e 8f       	std	Y+30, r25	; 0x1e
     fba:	8d 8f       	std	Y+29, r24	; 0x1d
 set_rate(); _delay_ms(50);		//
     fbc:	0e 94 a0 02 	call	0x540	; 0x540 <set_rate>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a8 e4       	ldi	r26, 0x48	; 72
     fc6:	b2 e4       	ldi	r27, 0x42	; 66
     fc8:	89 8f       	std	Y+25, r24	; 0x19
     fca:	9a 8f       	std	Y+26, r25	; 0x1a
     fcc:	ab 8f       	std	Y+27, r26	; 0x1b
     fce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	69 8d       	ldd	r22, Y+25	; 0x19
     fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a e7       	ldi	r20, 0x7A	; 122
     fde:	55 e4       	ldi	r21, 0x45	; 69
     fe0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8d 8b       	std	Y+21, r24	; 0x15
     fea:	9e 8b       	std	Y+22, r25	; 0x16
     fec:	af 8b       	std	Y+23, r26	; 0x17
     fee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ff0:	6d 89       	ldd	r22, Y+21	; 0x15
     ff2:	7e 89       	ldd	r23, Y+22	; 0x16
     ff4:	8f 89       	ldd	r24, Y+23	; 0x17
     ff6:	98 8d       	ldd	r25, Y+24	; 0x18
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <init_camera+0x356>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9c 8b       	std	Y+20, r25	; 0x14
    100e:	8b 8b       	std	Y+19, r24	; 0x13
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <init_camera+0x3d4>
	else if (__tmp > 65535)
    1012:	6d 89       	ldd	r22, Y+21	; 0x15
    1014:	7e 89       	ldd	r23, Y+22	; 0x16
    1016:	8f 89       	ldd	r24, Y+23	; 0x17
    1018:	98 8d       	ldd	r25, Y+24	; 0x18
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <init_camera+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	69 8d       	ldd	r22, Y+25	; 0x19
    102c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    102e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9c 8b       	std	Y+20, r25	; 0x14
    1050:	8b 8b       	std	Y+19, r24	; 0x13
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <init_camera+0x3b6>
    1054:	80 e9       	ldi	r24, 0x90	; 144
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	9a 8b       	std	Y+18, r25	; 0x12
    105a:	89 8b       	std	Y+17, r24	; 0x11
    105c:	89 89       	ldd	r24, Y+17	; 0x11
    105e:	9a 89       	ldd	r25, Y+18	; 0x12
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <init_camera+0x3a4>
    1064:	9a 8b       	std	Y+18, r25	; 0x12
    1066:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	9c 8b       	std	Y+20, r25	; 0x14
    1070:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8b 89       	ldd	r24, Y+19	; 0x13
    1074:	9c 89       	ldd	r25, Y+20	; 0x14
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <init_camera+0x398>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <init_camera+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	6d 89       	ldd	r22, Y+21	; 0x15
    107e:	7e 89       	ldd	r23, Y+22	; 0x16
    1080:	8f 89       	ldd	r24, Y+23	; 0x17
    1082:	98 8d       	ldd	r25, Y+24	; 0x18
    1084:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9c 8b       	std	Y+20, r25	; 0x14
    108e:	8b 8b       	std	Y+19, r24	; 0x13
    1090:	8b 89       	ldd	r24, Y+19	; 0x13
    1092:	9c 89       	ldd	r25, Y+20	; 0x14
    1094:	98 8b       	std	Y+16, r25	; 0x10
    1096:	8f 87       	std	Y+15, r24	; 0x0f
    1098:	8f 85       	ldd	r24, Y+15	; 0x0f
    109a:	98 89       	ldd	r25, Y+16	; 0x10
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <init_camera+0x3e0>
    10a0:	98 8b       	std	Y+16, r25	; 0x10
    10a2:	8f 87       	std	Y+15, r24	; 0x0f
 UBRR0L = 0x08; printf("\r\n chang boudrate"); _delay_ms(50);
    10a4:	e9 e2       	ldi	r30, 0x29	; 41
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	80 83       	st	Z, r24
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <init_camera+0x3f2>
    10ae:	ed b7       	in	r30, 0x3d	; 61
    10b0:	fe b7       	in	r31, 0x3e	; 62
    10b2:	31 96       	adiw	r30, 0x01	; 1
    10b4:	81 e8       	ldi	r24, 0x81	; 129
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
    10bc:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a8 e4       	ldi	r26, 0x48	; 72
    10ca:	b2 e4       	ldi	r27, 0x42	; 66
    10cc:	8b 87       	std	Y+11, r24	; 0x0b
    10ce:	9c 87       	std	Y+12, r25	; 0x0c
    10d0:	ad 87       	std	Y+13, r26	; 0x0d
    10d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10da:	9e 85       	ldd	r25, Y+14	; 0x0e
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a e7       	ldi	r20, 0x7A	; 122
    10e2:	55 e4       	ldi	r21, 0x45	; 69
    10e4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	8f 83       	std	Y+7, r24	; 0x07
    10ee:	98 87       	std	Y+8, r25	; 0x08
    10f0:	a9 87       	std	Y+9, r26	; 0x09
    10f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f4:	6f 81       	ldd	r22, Y+7	; 0x07
    10f6:	78 85       	ldd	r23, Y+8	; 0x08
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
    1108:	88 23       	and	r24, r24
    110a:	2c f4       	brge	.+10     	; 0x1116 <__stack+0x17>
		__ticks = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9e 83       	std	Y+6, r25	; 0x06
    1112:	8d 83       	std	Y+5, r24	; 0x05
    1114:	3f c0       	rjmp	.+126    	; 0x1194 <__stack+0x95>
	else if (__tmp > 65535)
    1116:	6f 81       	ldd	r22, Y+7	; 0x07
    1118:	78 85       	ldd	r23, Y+8	; 0x08
    111a:	89 85       	ldd	r24, Y+9	; 0x09
    111c:	9a 85       	ldd	r25, Y+10	; 0x0a
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	3f ef       	ldi	r19, 0xFF	; 255
    1122:	4f e7       	ldi	r20, 0x7F	; 127
    1124:	57 e4       	ldi	r21, 0x47	; 71
    1126:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
    112a:	18 16       	cp	r1, r24
    112c:	4c f5       	brge	.+82     	; 0x1180 <__stack+0x81>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1130:	7c 85       	ldd	r23, Y+12	; 0x0c
    1132:	8d 85       	ldd	r24, Y+13	; 0x0d
    1134:	9e 85       	ldd	r25, Y+14	; 0x0e
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e2       	ldi	r20, 0x20	; 32
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	bc 01       	movw	r22, r24
    1148:	cd 01       	movw	r24, r26
    114a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <__stack+0x77>
    1158:	80 e9       	ldi	r24, 0x90	; 144
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	9c 83       	std	Y+4, r25	; 0x04
    115e:	8b 83       	std	Y+3, r24	; 0x03
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <__stack+0x65>
    1168:	9c 83       	std	Y+4, r25	; 0x04
    116a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	9e 83       	std	Y+6, r25	; 0x06
    1174:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	69 f7       	brne	.-38     	; 0x1158 <__stack+0x59>
    117e:	14 c0       	rjmp	.+40     	; 0x11a8 <__stack+0xa9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1180:	6f 81       	ldd	r22, Y+7	; 0x07
    1182:	78 85       	ldd	r23, Y+8	; 0x08
    1184:	89 85       	ldd	r24, Y+9	; 0x09
    1186:	9a 85       	ldd	r25, Y+10	; 0x0a
    1188:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <__stack+0xa1>
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
 idle();
    11a8:	0e 94 cc 02 	call	0x598	; 0x598 <idle>
}
    11ac:	ca 5b       	subi	r28, 0xBA	; 186
    11ae:	df 4f       	sbci	r29, 0xFF	; 255
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <port_init>:

void port_init(void)
{}
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <Putchar>:
 
static int Putchar(char c, FILE *stream)//FILE 사용안함, 송신, avr->컴퓨터
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <Putchar+0x6>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	7b 83       	std	Y+3, r23	; 0x03
    11e2:	6a 83       	std	Y+2, r22	; 0x02
 if(c == '\n')
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	8a 30       	cpi	r24, 0x0A	; 10
    11e8:	29 f4       	brne	.+10     	; 0x11f4 <Putchar+0x22>
  Putchar('\r', 0); 
    11ea:	8d e0       	ldi	r24, 0x0D	; 13
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <Putchar>

 while(!(UCSR1A & 0x20)); // UDRE, data register empty
    11f4:	eb e9       	ldi	r30, 0x9B	; 155
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	80 72       	andi	r24, 0x20	; 32
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	b9 f3       	breq	.-18     	; 0x11f4 <Putchar+0x22>
   UDR1 = c;
    1206:	ec e9       	ldi	r30, 0x9C	; 156
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	80 83       	st	Z, r24
 return 0;
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <Getchar>:
 
static int Getchar(FILE *stream)//수신, 컴퓨터->avr
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <Getchar+0x6>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	9a 83       	std	Y+2, r25	; 0x02
    122a:	89 83       	std	Y+1, r24	; 0x01
 while(!(UCSR1A & 0x80));
    122c:	eb e9       	ldi	r30, 0x9B	; 155
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	88 23       	and	r24, r24
    1234:	dc f7       	brge	.-10     	; 0x122c <Getchar+0xe>
 return UDR1;
    1236:	ec e9       	ldi	r30, 0x9C	; 156
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <uart0_init>:

void uart0_init(void) //
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1252:	ea e2       	ldi	r30, 0x2A	; 42
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1258:	eb e2       	ldi	r30, 0x2B	; 43
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    125e:	e5 e9       	ldi	r30, 0x95	; 149
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	86 e0       	ldi	r24, 0x06	; 6
    1264:	80 83       	st	Z, r24
 UBRR0L = 0x08; //1152
    1266:	e9 e2       	ldi	r30, 0x29	; 41
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	88 e0       	ldi	r24, 0x08	; 8
    126c:	80 83       	st	Z, r24
 UBRR0H = 0x00; 
    126e:	e0 e9       	ldi	r30, 0x90	; 144
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	10 82       	st	Z, r1
 UCSR0B = 0b10011000; //수신만
    1274:	ea e2       	ldi	r30, 0x2A	; 42
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	88 e9       	ldi	r24, 0x98	; 152
    127a:	80 83       	st	Z, r24
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <uart1_init>:

void uart1_init(void) //PC와 통신
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
 UCSR1B = 0x00; //disable while setting baud rate
    128a:	ea e9       	ldi	r30, 0x9A	; 154
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	10 82       	st	Z, r1
 UCSR1A = 0x00;
    1290:	eb e9       	ldi	r30, 0x9B	; 155
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	10 82       	st	Z, r1
 UCSR1C = 0x06;
    1296:	ed e9       	ldi	r30, 0x9D	; 157
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	86 e0       	ldi	r24, 0x06	; 6
    129c:	80 83       	st	Z, r24
 UBRR1L = 0x08; //set baud rate 115200
    129e:	e9 e9       	ldi	r30, 0x99	; 153
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	88 e0       	ldi	r24, 0x08	; 8
    12a4:	80 83       	st	Z, r24
 UBRR1H = 0x00; 
    12a6:	e8 e9       	ldi	r30, 0x98	; 152
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	10 82       	st	Z, r1
 UCSR1B = 0b10011000; //송신 인터럽트 개방
    12ac:	ea e9       	ldi	r30, 0x9A	; 154
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	88 e9       	ldi	r24, 0x98	; 152
    12b2:	80 83       	st	Z, r24
}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <init_devices>:
 
void init_devices(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
  cli(); //disable all interrupts
    12c2:	f8 94       	cli
  port_init();
    12c4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <port_init>
  uart0_init();  
    12c8:	0e 94 25 09 	call	0x124a	; 0x124a <uart0_init>
  uart1_init();
    12cc:	0e 94 41 09 	call	0x1282	; 0x1282 <uart1_init>
  fdevopen(Putchar, Getchar);//file stream 0
    12d0:	89 ee       	ldi	r24, 0xE9	; 233
    12d2:	98 e0       	ldi	r25, 0x08	; 8
    12d4:	2f e0       	ldi	r18, 0x0F	; 15
    12d6:	39 e0       	ldi	r19, 0x09	; 9
    12d8:	b9 01       	movw	r22, r18
    12da:	0e 94 ad 12 	call	0x255a	; 0x255a <fdevopen>
  sei(); 
    12de:	78 94       	sei

  DDRF=0xF8;	//F 0, 1, 2(가슴)번 핀 입력 설정
    12e0:	e1 e6       	ldi	r30, 0x61	; 97
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	88 ef       	ldi	r24, 0xF8	; 248
    12e6:	80 83       	st	Z, r24
  //ADCSRA = 0xFF;

  DDRA=0x07;	//A 0, 1번 핀 출력 설정(진동) || 2번 핀 출력 설정 (LED)
    12e8:	ea e3       	ldi	r30, 0x3A	; 58
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	87 e0       	ldi	r24, 0x07	; 7
    12ee:	80 83       	st	Z, r24
  
  DDRE = 0x00;	//E 7, 6, 5, 4 입력 설정(인터럽트) -> e
    12f0:	e2 e2       	ldi	r30, 0x22	; 34
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	10 82       	st	Z, r1
  EICRB = 0x55;	//인터럽트 7, 6, 5, 4 하강,상승에지 인터럽트 요구 - O
    12f6:	ea e5       	ldi	r30, 0x5A	; 90
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	85 e5       	ldi	r24, 0x55	; 85
    12fc:	80 83       	st	Z, r24
  EIMSK |= 0xF0;	//INT7, 6, 5, 4인터럽트 요구
    12fe:	a9 e5       	ldi	r26, 0x59	; 89
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e9 e5       	ldi	r30, 0x59	; 89
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	80 6f       	ori	r24, 0xF0	; 240
    130a:	8c 93       	st	X, r24
  3 : ADIE : ***인터럽트 개별적으로 허용
  2~0 : 분주비 설정
  ADMUX = 0xC0;		//MUX 설정
  */

}
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <init_buffer>:

void init_buffer(int select)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <init_buffer+0x6>
    1318:	00 d0       	rcall	.+0      	; 0x131a <init_buffer+0x8>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	switch(select)
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	99 f4       	brne	.+38     	; 0x1350 <init_buffer+0x3e>
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    132a:	1a 82       	std	Y+2, r1	; 0x02
    132c:	19 82       	std	Y+1, r1	; 0x01
    132e:	0b c0       	rjmp	.+22     	; 0x1346 <init_buffer+0x34>
			img_buffer[i] = 0x00;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	fc 01       	movw	r30, r24
    1336:	e0 50       	subi	r30, 0x00	; 0
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	10 82       	st	Z, r1
	int i;
	
	switch(select)
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	89 30       	cpi	r24, 0x09	; 9
    134c:	91 05       	cpc	r25, r1
    134e:	84 f3       	brlt	.-32     	; 0x1330 <init_buffer+0x1e>
			img_buffer[i] = 0x00;
		break;
	}
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <main>:
 
int main(void)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	6c 97       	sbiw	r28, 0x1c	; 28
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
 init_devices();
    1372:	0e 94 5d 09 	call	0x12ba	; 0x12ba <init_devices>
 init_camera();
    1376:	0e 94 5e 06 	call	0xcbc	; 0xcbc <init_camera>
 
 printf("\r\n\r\nConnect with IronMan_Suit\r\n");
    137a:	83 e9       	ldi	r24, 0x93	; 147
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 12 13 	call	0x2624	; 0x2624 <puts>

 if(TEST)
 	printf("MAIN CALL_ME!\n");
    1382:	82 eb       	ldi	r24, 0xB2	; 178
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 12 13 	call	0x2624	; 0x2624 <puts>
		front_h = 0;
	}
	//ADCSRA = 0x00;
	*/
	// *** 카메라 관련 카운트*** //
	if(idle_cnt >= 3)	{
    138a:	80 91 27 02 	lds	r24, 0x0227
    138e:	90 91 28 02 	lds	r25, 0x0228
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	0c f4       	brge	.+2      	; 0x139a <main+0x3c>
    1398:	74 c0       	rjmp	.+232    	; 0x1482 <main+0x124>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a4 e3       	ldi	r26, 0x34	; 52
    13a0:	b2 e4       	ldi	r27, 0x42	; 66
    13a2:	89 8f       	std	Y+25, r24	; 0x19
    13a4:	9a 8f       	std	Y+26, r25	; 0x1a
    13a6:	ab 8f       	std	Y+27, r26	; 0x1b
    13a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	69 8d       	ldd	r22, Y+25	; 0x19
    13ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a e7       	ldi	r20, 0x7A	; 122
    13b8:	55 e4       	ldi	r21, 0x45	; 69
    13ba:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8d 8b       	std	Y+21, r24	; 0x15
    13c4:	9e 8b       	std	Y+22, r25	; 0x16
    13c6:	af 8b       	std	Y+23, r26	; 0x17
    13c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ca:	6d 89       	ldd	r22, Y+21	; 0x15
    13cc:	7e 89       	ldd	r23, Y+22	; 0x16
    13ce:	8f 89       	ldd	r24, Y+23	; 0x17
    13d0:	98 8d       	ldd	r25, Y+24	; 0x18
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <main+0x8e>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9c 8b       	std	Y+20, r25	; 0x14
    13e8:	8b 8b       	std	Y+19, r24	; 0x13
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <main+0x10c>
	else if (__tmp > 65535)
    13ec:	6d 89       	ldd	r22, Y+21	; 0x15
    13ee:	7e 89       	ldd	r23, Y+22	; 0x16
    13f0:	8f 89       	ldd	r24, Y+23	; 0x17
    13f2:	98 8d       	ldd	r25, Y+24	; 0x18
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	69 8d       	ldd	r22, Y+25	; 0x19
    1406:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9c 8b       	std	Y+20, r25	; 0x14
    142a:	8b 8b       	std	Y+19, r24	; 0x13
    142c:	0f c0       	rjmp	.+30     	; 0x144c <main+0xee>
    142e:	80 e9       	ldi	r24, 0x90	; 144
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	9a 8b       	std	Y+18, r25	; 0x12
    1434:	89 8b       	std	Y+17, r24	; 0x11
    1436:	89 89       	ldd	r24, Y+17	; 0x11
    1438:	9a 89       	ldd	r25, Y+18	; 0x12
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <main+0xdc>
    143e:	9a 8b       	std	Y+18, r25	; 0x12
    1440:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	8b 89       	ldd	r24, Y+19	; 0x13
    1444:	9c 89       	ldd	r25, Y+20	; 0x14
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9c 8b       	std	Y+20, r25	; 0x14
    144a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	8b 89       	ldd	r24, Y+19	; 0x13
    144e:	9c 89       	ldd	r25, Y+20	; 0x14
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <main+0xd0>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	6d 89       	ldd	r22, Y+21	; 0x15
    1458:	7e 89       	ldd	r23, Y+22	; 0x16
    145a:	8f 89       	ldd	r24, Y+23	; 0x17
    145c:	98 8d       	ldd	r25, Y+24	; 0x18
    145e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9c 8b       	std	Y+20, r25	; 0x14
    1468:	8b 8b       	std	Y+19, r24	; 0x13
    146a:	8b 89       	ldd	r24, Y+19	; 0x13
    146c:	9c 89       	ldd	r25, Y+20	; 0x14
    146e:	98 8b       	std	Y+16, r25	; 0x10
    1470:	8f 87       	std	Y+15, r24	; 0x0f
    1472:	8f 85       	ldd	r24, Y+15	; 0x0f
    1474:	98 89       	ldd	r25, Y+16	; 0x10
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <main+0x118>
    147a:	98 8b       	std	Y+16, r25	; 0x10
    147c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(45);
		shot();
    147e:	0e 94 73 05 	call	0xae6	; 0xae6 <shot>
	}
	
	if(shot_cnt == 5)
    1482:	80 91 29 02 	lds	r24, 0x0229
    1486:	90 91 2a 02 	lds	r25, 0x022A
    148a:	85 30       	cpi	r24, 0x05	; 5
    148c:	91 05       	cpc	r25, r1
    148e:	11 f4       	brne	.+4      	; 0x1494 <main+0x136>
		call_size();
    1490:	0e 94 a7 05 	call	0xb4e	; 0xb4e <call_size>

	if(call_size_cnt == 9)	{
    1494:	80 91 2b 02 	lds	r24, 0x022B
    1498:	90 91 2c 02 	lds	r25, 0x022C
    149c:	89 30       	cpi	r24, 0x09	; 9
    149e:	91 05       	cpc	r25, r1
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <main+0x146>
    14a2:	73 cf       	rjmp	.-282    	; 0x138a <main+0x2c>
	   //printf("#%x#%x\r\n", img_buffer[7], img_buffer[8]);
		call_size_cnt = 0;
    14a4:	10 92 2c 02 	sts	0x022C, r1
    14a8:	10 92 2b 02 	sts	0x022B, r1
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a8 e4       	ldi	r26, 0x48	; 72
    14b2:	b2 e4       	ldi	r27, 0x42	; 66
    14b4:	8b 87       	std	Y+11, r24	; 0x0b
    14b6:	9c 87       	std	Y+12, r25	; 0x0c
    14b8:	ad 87       	std	Y+13, r26	; 0x0d
    14ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14be:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4a e7       	ldi	r20, 0x7A	; 122
    14ca:	55 e4       	ldi	r21, 0x45	; 69
    14cc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8f 83       	std	Y+7, r24	; 0x07
    14d6:	98 87       	std	Y+8, r25	; 0x08
    14d8:	a9 87       	std	Y+9, r26	; 0x09
    14da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14dc:	6f 81       	ldd	r22, Y+7	; 0x07
    14de:	78 85       	ldd	r23, Y+8	; 0x08
    14e0:	89 85       	ldd	r24, Y+9	; 0x09
    14e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <main+0x1a0>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	3f c0       	rjmp	.+126    	; 0x157c <main+0x21e>
	else if (__tmp > 65535)
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	3f ef       	ldi	r19, 0xFF	; 255
    150a:	4f e7       	ldi	r20, 0x7F	; 127
    150c:	57 e4       	ldi	r21, 0x47	; 71
    150e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
    1512:	18 16       	cp	r1, r24
    1514:	4c f5       	brge	.+82     	; 0x1568 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e2       	ldi	r20, 0x20	; 32
    1524:	51 e4       	ldi	r21, 0x41	; 65
    1526:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	0f c0       	rjmp	.+30     	; 0x155e <main+0x200>
    1540:	80 e9       	ldi	r24, 0x90	; 144
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	9c 83       	std	Y+4, r25	; 0x04
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <main+0x1ee>
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	69 f7       	brne	.-38     	; 0x1540 <main+0x1e2>
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <main+0x22a>
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		call_img();
    1590:	0e 94 dd 05 	call	0xbba	; 0xbba <call_img>
    1594:	fa ce       	rjmp	.-524    	; 0x138a <main+0x2c>

00001596 <__vector_18>:
 return 0;

}

ISR(USART0_RX_vect)	//Camera의 수신완료 인터럽트
{
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	00 90 5b 00 	lds	r0, 0x005B
    15a2:	0f 92       	push	r0
    15a4:	11 24       	eor	r1, r1
    15a6:	2f 93       	push	r18
    15a8:	3f 93       	push	r19
    15aa:	4f 93       	push	r20
    15ac:	5f 93       	push	r21
    15ae:	6f 93       	push	r22
    15b0:	7f 93       	push	r23
    15b2:	8f 93       	push	r24
    15b4:	9f 93       	push	r25
    15b6:	af 93       	push	r26
    15b8:	bf 93       	push	r27
    15ba:	ef 93       	push	r30
    15bc:	ff 93       	push	r31
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	61 97       	sbiw	r28, 0x11	; 17
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	cd bf       	out	0x3d, r28	; 61
	char uart0_data = UDR0;
    15cc:	ec e2       	ldi	r30, 0x2C	; 44
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 87       	std	Y+15, r24	; 0x0f

	switch(command)
    15d4:	80 91 2d 02 	lds	r24, 0x022D
    15d8:	90 91 2e 02 	lds	r25, 0x022E
    15dc:	99 8b       	std	Y+17, r25	; 0x11
    15de:	88 8b       	std	Y+16, r24	; 0x10
    15e0:	88 89       	ldd	r24, Y+16	; 0x10
    15e2:	99 89       	ldd	r25, Y+17	; 0x11
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	91 05       	cpc	r25, r1
    15e8:	a1 f0       	breq	.+40     	; 0x1612 <__vector_18+0x7c>
    15ea:	88 89       	ldd	r24, Y+16	; 0x10
    15ec:	99 89       	ldd	r25, Y+17	; 0x11
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	c9 f0       	breq	.+50     	; 0x1626 <__vector_18+0x90>
    15f4:	88 89       	ldd	r24, Y+16	; 0x10
    15f6:	99 89       	ldd	r25, Y+17	; 0x11
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	91 05       	cpc	r25, r1
    15fc:	e9 f4       	brne	.+58     	; 0x1638 <__vector_18+0xa2>
	{
	case IDLE:
		idle_cnt++;
    15fe:	80 91 27 02 	lds	r24, 0x0227
    1602:	90 91 28 02 	lds	r25, 0x0228
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	90 93 28 02 	sts	0x0228, r25
    160c:	80 93 27 02 	sts	0x0227, r24
    1610:	13 c0       	rjmp	.+38     	; 0x1638 <__vector_18+0xa2>
		break;
	case SHOT:
		shot_cnt++;
    1612:	80 91 29 02 	lds	r24, 0x0229
    1616:	90 91 2a 02 	lds	r25, 0x022A
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	90 93 2a 02 	sts	0x022A, r25
    1620:	80 93 29 02 	sts	0x0229, r24
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <__vector_18+0xa2>
		break;
	case CALL_SIZE:
		call_size_cnt++;
    1626:	80 91 2b 02 	lds	r24, 0x022B
    162a:	90 91 2c 02 	lds	r25, 0x022C
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	90 93 2c 02 	sts	0x022C, r25
    1634:	80 93 2b 02 	sts	0x022B, r24
		break;
	}
	
	if(call_size_flag == 1)	{
    1638:	80 91 1f 02 	lds	r24, 0x021F
    163c:	90 91 20 02 	lds	r25, 0x0220
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	91 05       	cpc	r25, r1
    1644:	91 f4       	brne	.+36     	; 0x166a <__vector_18+0xd4>
		img_buffer[img_cnt] = uart0_data;
    1646:	80 91 1d 02 	lds	r24, 0x021D
    164a:	90 91 1e 02 	lds	r25, 0x021E
    164e:	fc 01       	movw	r30, r24
    1650:	e0 50       	subi	r30, 0x00	; 0
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	8f 85       	ldd	r24, Y+15	; 0x0f
    1656:	80 83       	st	Z, r24
		img_cnt++;
    1658:	80 91 1d 02 	lds	r24, 0x021D
    165c:	90 91 1e 02 	lds	r25, 0x021E
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	90 93 1e 02 	sts	0x021E, r25
    1666:	80 93 1d 02 	sts	0x021D, r24
	}

	if(uart0_data == 0xff)
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	8f 3f       	cpi	r24, 0xFF	; 255
    166e:	31 f4       	brne	.+12     	; 0x167c <__vector_18+0xe6>
		img_data_start_flag = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	90 93 24 02 	sts	0x0224, r25
    1678:	80 93 23 02 	sts	0x0223, r24
	
	if(uart0_data == 0xd9)
    167c:	8f 85       	ldd	r24, Y+15	; 0x0f
    167e:	89 3d       	cpi	r24, 0xD9	; 217
    1680:	39 f4       	brne	.+14     	; 0x1690 <__vector_18+0xfa>
		img_data_cnt = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	90 93 26 02 	sts	0x0226, r25
    168a:	80 93 25 02 	sts	0x0225, r24
    168e:	93 c0       	rjmp	.+294    	; 0x17b6 <__vector_18+0x220>
	else	{
		if(uart0_data == 0x76 && img_data_cnt == 1)	{
    1690:	8f 85       	ldd	r24, Y+15	; 0x0f
    1692:	86 37       	cpi	r24, 0x76	; 118
    1694:	09 f0       	breq	.+2      	; 0x1698 <__vector_18+0x102>
    1696:	8b c0       	rjmp	.+278    	; 0x17ae <__vector_18+0x218>
    1698:	80 91 25 02 	lds	r24, 0x0225
    169c:	90 91 26 02 	lds	r25, 0x0226
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <__vector_18+0x112>
    16a6:	83 c0       	rjmp	.+262    	; 0x17ae <__vector_18+0x218>
			img_data_start_flag = 0;
    16a8:	10 92 24 02 	sts	0x0224, r1
    16ac:	10 92 23 02 	sts	0x0223, r1
			img_data_cnt = 0;
    16b0:	10 92 26 02 	sts	0x0226, r1
    16b4:	10 92 25 02 	sts	0x0225, r1
			printf("\n");
    16b8:	8a e0       	ldi	r24, 0x0A	; 10
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 0b 13 	call	0x2616	; 0x2616 <putchar>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a8 ec       	ldi	r26, 0xC8	; 200
    16c6:	b2 e4       	ldi	r27, 0x42	; 66
    16c8:	8b 87       	std	Y+11, r24	; 0x0b
    16ca:	9c 87       	std	Y+12, r25	; 0x0c
    16cc:	ad 87       	std	Y+13, r26	; 0x0d
    16ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a e7       	ldi	r20, 0x7A	; 122
    16de:	55 e4       	ldi	r21, 0x45	; 69
    16e0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8f 83       	std	Y+7, r24	; 0x07
    16ea:	98 87       	std	Y+8, r25	; 0x08
    16ec:	a9 87       	std	Y+9, r26	; 0x09
    16ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <__vector_18+0x17c>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9e 83       	std	Y+6, r25	; 0x06
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <__vector_18+0x1fa>
	else if (__tmp > 65535)
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <__vector_18+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6b 85       	ldd	r22, Y+11	; 0x0b
    172c:	7c 85       	ldd	r23, Y+12	; 0x0c
    172e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1730:	9e 85       	ldd	r25, Y+14	; 0x0e
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <__vector_18+0x1dc>
    1754:	80 e9       	ldi	r24, 0x90	; 144
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <__vector_18+0x1ca>
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	9e 81       	ldd	r25, Y+6	; 0x06
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <__vector_18+0x1be>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <__vector_18+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6f 81       	ldd	r22, Y+7	; 0x07
    177e:	78 85       	ldd	r23, Y+8	; 0x08
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9e 83       	std	Y+6, r25	; 0x06
    178e:	8d 83       	std	Y+5, r24	; 0x05
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <__vector_18+0x206>
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			init_buffer(CAMERA);
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 89 09 	call	0x1312	; 0x1312 <init_buffer>
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <__vector_18+0x220>
		}
		else
			img_data_cnt = 0;
    17ae:	10 92 26 02 	sts	0x0226, r1
    17b2:	10 92 25 02 	sts	0x0225, r1
	}

	if(call_img_flag == 1 && img_data_start_flag == 1)
    17b6:	80 91 21 02 	lds	r24, 0x0221
    17ba:	90 91 22 02 	lds	r25, 0x0222
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	91 05       	cpc	r25, r1
    17c2:	59 f4       	brne	.+22     	; 0x17da <__vector_18+0x244>
    17c4:	80 91 23 02 	lds	r24, 0x0223
    17c8:	90 91 24 02 	lds	r25, 0x0224
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	91 05       	cpc	r25, r1
    17d0:	21 f4       	brne	.+8      	; 0x17da <__vector_18+0x244>
		UDR1 = uart0_data;
    17d2:	ec e9       	ldi	r30, 0x9C	; 156
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d8:	80 83       	st	Z, r24
}
    17da:	61 96       	adiw	r28, 0x11	; 17
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	0f 90       	pop	r0
    17fe:	00 92 5b 00 	sts	0x005B, r0
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <__vector_30>:

ISR(USART1_RX_vect)	//Computer
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	00 90 5b 00 	lds	r0, 0x005B
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	2f 93       	push	r18
    181e:	3f 93       	push	r19
    1820:	4f 93       	push	r20
    1822:	5f 93       	push	r21
    1824:	6f 93       	push	r22
    1826:	7f 93       	push	r23
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	af 93       	push	r26
    182e:	bf 93       	push	r27
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	61 97       	sbiw	r28, 0x11	; 17
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	cd bf       	out	0x3d, r28	; 61
	/*** 현재는 컴퓨터로부터 받는 데이터 ***/
	/*** 나중에는 스마트폰으로부터 받는 데이터 ***/
	
	char ch = UDR1;
    1842:	ec e9       	ldi	r30, 0x9C	; 156
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8f 87       	std	Y+15, r24	; 0x0f

	switch(ch)
    184a:	8f 85       	ldd	r24, Y+15	; 0x0f
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	39 8b       	std	Y+17, r19	; 0x11
    1852:	28 8b       	std	Y+16, r18	; 0x10
    1854:	88 89       	ldd	r24, Y+16	; 0x10
    1856:	99 89       	ldd	r25, Y+17	; 0x11
    1858:	83 36       	cpi	r24, 0x63	; 99
    185a:	91 05       	cpc	r25, r1
    185c:	39 f0       	breq	.+14     	; 0x186c <__vector_30+0x60>
    185e:	28 89       	ldd	r18, Y+16	; 0x10
    1860:	39 89       	ldd	r19, Y+17	; 0x11
    1862:	24 36       	cpi	r18, 0x64	; 100
    1864:	31 05       	cpc	r19, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <__vector_30+0x5e>
    1868:	80 c0       	rjmp	.+256    	; 0x196a <__vector_30+0x15e>
    186a:	c2 c0       	rjmp	.+388    	; 0x19f0 <__vector_30+0x1e4>
	{
			case 'c':
			printf("c\n");
    186c:	80 ec       	ldi	r24, 0xC0	; 192
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	0e 94 12 13 	call	0x2624	; 0x2624 <puts>
			ADCSRA = 0x00;	//ADC 인터럽트 디스에이블
    1874:	e6 e2       	ldi	r30, 0x26	; 38
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	10 82       	st	Z, r1
			EIMSK = 0x00;	//외부 인터럽트 디스에이블
    187a:	e9 e5       	ldi	r30, 0x59	; 89
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	10 82       	st	Z, r1
			idle();
    1880:	0e 94 cc 02 	call	0x598	; 0x598 <idle>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a8 ec       	ldi	r26, 0xC8	; 200
    188a:	b2 e4       	ldi	r27, 0x42	; 66
    188c:	8b 87       	std	Y+11, r24	; 0x0b
    188e:	9c 87       	std	Y+12, r25	; 0x0c
    1890:	ad 87       	std	Y+13, r26	; 0x0d
    1892:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1894:	6b 85       	ldd	r22, Y+11	; 0x0b
    1896:	7c 85       	ldd	r23, Y+12	; 0x0c
    1898:	8d 85       	ldd	r24, Y+13	; 0x0d
    189a:	9e 85       	ldd	r25, Y+14	; 0x0e
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a e7       	ldi	r20, 0x7A	; 122
    18a2:	55 e4       	ldi	r21, 0x45	; 69
    18a4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	8f 83       	std	Y+7, r24	; 0x07
    18ae:	98 87       	std	Y+8, r25	; 0x08
    18b0:	a9 87       	std	Y+9, r26	; 0x09
    18b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18b4:	6f 81       	ldd	r22, Y+7	; 0x07
    18b6:	78 85       	ldd	r23, Y+8	; 0x08
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 4c 10 	call	0x2098	; 0x2098 <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <__vector_30+0xca>
		__ticks = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9e 83       	std	Y+6, r25	; 0x06
    18d2:	8d 83       	std	Y+5, r24	; 0x05
    18d4:	3f c0       	rjmp	.+126    	; 0x1954 <__vector_30+0x148>
	else if (__tmp > 65535)
    18d6:	6f 81       	ldd	r22, Y+7	; 0x07
    18d8:	78 85       	ldd	r23, Y+8	; 0x08
    18da:	89 85       	ldd	r24, Y+9	; 0x09
    18dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__gtsf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	4c f5       	brge	.+82     	; 0x1940 <__vector_30+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e2       	ldi	r20, 0x20	; 32
    18fc:	51 e4       	ldi	r21, 0x41	; 65
    18fe:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <__vector_30+0x12a>
    1918:	80 e9       	ldi	r24, 0x90	; 144
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	9c 83       	std	Y+4, r25	; 0x04
    191e:	8b 83       	std	Y+3, r24	; 0x03
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <__vector_30+0x118>
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
    192e:	9e 81       	ldd	r25, Y+6	; 0x06
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	69 f7       	brne	.-38     	; 0x1918 <__vector_30+0x10c>
    193e:	58 c0       	rjmp	.+176    	; 0x19f0 <__vector_30+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1940:	6f 81       	ldd	r22, Y+7	; 0x07
    1942:	78 85       	ldd	r23, Y+8	; 0x08
    1944:	89 85       	ldd	r24, Y+9	; 0x09
    1946:	9a 85       	ldd	r25, Y+10	; 0x0a
    1948:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <__vector_30+0x154>
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	43 c0       	rjmp	.+134    	; 0x19f0 <__vector_30+0x1e4>
			_delay_ms(100);
			break;
			
			case 'd'://
			printf("d");
    196a:	84 e6       	ldi	r24, 0x64	; 100
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 0b 13 	call	0x2616	; 0x2616 <putchar>
			printf("idle cnt : %d\n", idle_cnt);
    1972:	20 91 27 02 	lds	r18, 0x0227
    1976:	30 91 28 02 	lds	r19, 0x0228
    197a:	00 d0       	rcall	.+0      	; 0x197c <__vector_30+0x170>
    197c:	00 d0       	rcall	.+0      	; 0x197e <__vector_30+0x172>
    197e:	ed b7       	in	r30, 0x3d	; 61
    1980:	fe b7       	in	r31, 0x3e	; 62
    1982:	31 96       	adiw	r30, 0x01	; 1
    1984:	82 ec       	ldi	r24, 0xC2	; 194
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	33 83       	std	Z+3, r19	; 0x03
    198e:	22 83       	std	Z+2, r18	; 0x02
    1990:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
			printf("shot_cnt : %d\n", shot_cnt);
    199c:	20 91 29 02 	lds	r18, 0x0229
    19a0:	30 91 2a 02 	lds	r19, 0x022A
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <__vector_30+0x19a>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <__vector_30+0x19c>
    19a8:	ed b7       	in	r30, 0x3d	; 61
    19aa:	fe b7       	in	r31, 0x3e	; 62
    19ac:	31 96       	adiw	r30, 0x01	; 1
    19ae:	81 ed       	ldi	r24, 0xD1	; 209
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	33 83       	std	Z+3, r19	; 0x03
    19b8:	22 83       	std	Z+2, r18	; 0x02
    19ba:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
			printf("call_size_cnt : %d\n", call_size_cnt);
    19c6:	20 91 2b 02 	lds	r18, 0x022B
    19ca:	30 91 2c 02 	lds	r19, 0x022C
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <__vector_30+0x1c4>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <__vector_30+0x1c6>
    19d2:	ed b7       	in	r30, 0x3d	; 61
    19d4:	fe b7       	in	r31, 0x3e	; 62
    19d6:	31 96       	adiw	r30, 0x01	; 1
    19d8:	80 ee       	ldi	r24, 0xE0	; 224
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
    19e0:	33 83       	std	Z+3, r19	; 0x03
    19e2:	22 83       	std	Z+2, r18	; 0x02
    19e4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <printf>
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
			break;
	}
	
	if(TEST)
		printf("%c", UDR1);	
    19f0:	ec e9       	ldi	r30, 0x9C	; 156
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 0b 13 	call	0x2616	; 0x2616 <putchar>
		printf("USART1 RX CALL!\n");
    19fe:	84 ef       	ldi	r24, 0xF4	; 244
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	0e 94 12 13 	call	0x2624	; 0x2624 <puts>

}
    1a06:	61 96       	adiw	r28, 0x11	; 17
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 90       	pop	r0
    1a2a:	00 92 5b 00 	sts	0x005B, r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	0f 90       	pop	r0
    1a34:	1f 90       	pop	r1
    1a36:	18 95       	reti

00001a38 <__fixunssfsi>:
    1a38:	ef 92       	push	r14
    1a3a:	ff 92       	push	r15
    1a3c:	0f 93       	push	r16
    1a3e:	1f 93       	push	r17
    1a40:	7b 01       	movw	r14, r22
    1a42:	8c 01       	movw	r16, r24
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	5f e4       	ldi	r21, 0x4F	; 79
    1a4c:	0e 94 1c 10 	call	0x2038	; 0x2038 <__gesf2>
    1a50:	88 23       	and	r24, r24
    1a52:	8c f0       	brlt	.+34     	; 0x1a76 <__fixunssfsi+0x3e>
    1a54:	c8 01       	movw	r24, r16
    1a56:	b7 01       	movw	r22, r14
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	5f e4       	ldi	r21, 0x4F	; 79
    1a60:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__subsf3>
    1a64:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__fixsfsi>
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	20 50       	subi	r18, 0x00	; 0
    1a6e:	30 40       	sbci	r19, 0x00	; 0
    1a70:	40 40       	sbci	r20, 0x00	; 0
    1a72:	50 48       	sbci	r21, 0x80	; 128
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <__fixunssfsi+0x4a>
    1a76:	c8 01       	movw	r24, r16
    1a78:	b7 01       	movw	r22, r14
    1a7a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__fixsfsi>
    1a7e:	9b 01       	movw	r18, r22
    1a80:	ac 01       	movw	r20, r24
    1a82:	b9 01       	movw	r22, r18
    1a84:	ca 01       	movw	r24, r20
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	08 95       	ret

00001a90 <_fpadd_parts>:
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	ee e4       	ldi	r30, 0x4E	; 78
    1a96:	fd e0       	ldi	r31, 0x0D	; 13
    1a98:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	2b 01       	movw	r4, r22
    1aa0:	fa 01       	movw	r30, r20
    1aa2:	9c 91       	ld	r25, X
    1aa4:	92 30       	cpi	r25, 0x02	; 2
    1aa6:	08 f4       	brcc	.+2      	; 0x1aaa <_fpadd_parts+0x1a>
    1aa8:	39 c1       	rjmp	.+626    	; 0x1d1c <_fpadd_parts+0x28c>
    1aaa:	eb 01       	movw	r28, r22
    1aac:	88 81       	ld	r24, Y
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	08 f4       	brcc	.+2      	; 0x1ab4 <_fpadd_parts+0x24>
    1ab2:	33 c1       	rjmp	.+614    	; 0x1d1a <_fpadd_parts+0x28a>
    1ab4:	94 30       	cpi	r25, 0x04	; 4
    1ab6:	69 f4       	brne	.+26     	; 0x1ad2 <_fpadd_parts+0x42>
    1ab8:	84 30       	cpi	r24, 0x04	; 4
    1aba:	09 f0       	breq	.+2      	; 0x1abe <_fpadd_parts+0x2e>
    1abc:	2f c1       	rjmp	.+606    	; 0x1d1c <_fpadd_parts+0x28c>
    1abe:	11 96       	adiw	r26, 0x01	; 1
    1ac0:	9c 91       	ld	r25, X
    1ac2:	11 97       	sbiw	r26, 0x01	; 1
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	98 17       	cp	r25, r24
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <_fpadd_parts+0x3c>
    1aca:	28 c1       	rjmp	.+592    	; 0x1d1c <_fpadd_parts+0x28c>
    1acc:	a4 e0       	ldi	r26, 0x04	; 4
    1ace:	b2 e0       	ldi	r27, 0x02	; 2
    1ad0:	25 c1       	rjmp	.+586    	; 0x1d1c <_fpadd_parts+0x28c>
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <_fpadd_parts+0x48>
    1ad6:	21 c1       	rjmp	.+578    	; 0x1d1a <_fpadd_parts+0x28a>
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	a9 f4       	brne	.+42     	; 0x1b06 <_fpadd_parts+0x76>
    1adc:	92 30       	cpi	r25, 0x02	; 2
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <_fpadd_parts+0x52>
    1ae0:	1d c1       	rjmp	.+570    	; 0x1d1c <_fpadd_parts+0x28c>
    1ae2:	9a 01       	movw	r18, r20
    1ae4:	ad 01       	movw	r20, r26
    1ae6:	88 e0       	ldi	r24, 0x08	; 8
    1ae8:	ea 01       	movw	r28, r20
    1aea:	09 90       	ld	r0, Y+
    1aec:	ae 01       	movw	r20, r28
    1aee:	e9 01       	movw	r28, r18
    1af0:	09 92       	st	Y+, r0
    1af2:	9e 01       	movw	r18, r28
    1af4:	81 50       	subi	r24, 0x01	; 1
    1af6:	c1 f7       	brne	.-16     	; 0x1ae8 <_fpadd_parts+0x58>
    1af8:	e2 01       	movw	r28, r4
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	11 96       	adiw	r26, 0x01	; 1
    1afe:	9c 91       	ld	r25, X
    1b00:	89 23       	and	r24, r25
    1b02:	81 83       	std	Z+1, r24	; 0x01
    1b04:	08 c1       	rjmp	.+528    	; 0x1d16 <_fpadd_parts+0x286>
    1b06:	92 30       	cpi	r25, 0x02	; 2
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <_fpadd_parts+0x7c>
    1b0a:	07 c1       	rjmp	.+526    	; 0x1d1a <_fpadd_parts+0x28a>
    1b0c:	12 96       	adiw	r26, 0x02	; 2
    1b0e:	2d 90       	ld	r2, X+
    1b10:	3c 90       	ld	r3, X
    1b12:	13 97       	sbiw	r26, 0x03	; 3
    1b14:	eb 01       	movw	r28, r22
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1a:	14 96       	adiw	r26, 0x04	; 4
    1b1c:	ad 90       	ld	r10, X+
    1b1e:	bd 90       	ld	r11, X+
    1b20:	cd 90       	ld	r12, X+
    1b22:	dc 90       	ld	r13, X
    1b24:	17 97       	sbiw	r26, 0x07	; 7
    1b26:	ec 80       	ldd	r14, Y+4	; 0x04
    1b28:	fd 80       	ldd	r15, Y+5	; 0x05
    1b2a:	0e 81       	ldd	r16, Y+6	; 0x06
    1b2c:	1f 81       	ldd	r17, Y+7	; 0x07
    1b2e:	91 01       	movw	r18, r2
    1b30:	28 1b       	sub	r18, r24
    1b32:	39 0b       	sbc	r19, r25
    1b34:	b9 01       	movw	r22, r18
    1b36:	37 ff       	sbrs	r19, 7
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <_fpadd_parts+0xb2>
    1b3a:	66 27       	eor	r22, r22
    1b3c:	77 27       	eor	r23, r23
    1b3e:	62 1b       	sub	r22, r18
    1b40:	73 0b       	sbc	r23, r19
    1b42:	60 32       	cpi	r22, 0x20	; 32
    1b44:	71 05       	cpc	r23, r1
    1b46:	0c f0       	brlt	.+2      	; 0x1b4a <_fpadd_parts+0xba>
    1b48:	61 c0       	rjmp	.+194    	; 0x1c0c <_fpadd_parts+0x17c>
    1b4a:	12 16       	cp	r1, r18
    1b4c:	13 06       	cpc	r1, r19
    1b4e:	6c f5       	brge	.+90     	; 0x1baa <_fpadd_parts+0x11a>
    1b50:	37 01       	movw	r6, r14
    1b52:	48 01       	movw	r8, r16
    1b54:	06 2e       	mov	r0, r22
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <_fpadd_parts+0xd0>
    1b58:	96 94       	lsr	r9
    1b5a:	87 94       	ror	r8
    1b5c:	77 94       	ror	r7
    1b5e:	67 94       	ror	r6
    1b60:	0a 94       	dec	r0
    1b62:	d2 f7       	brpl	.-12     	; 0x1b58 <_fpadd_parts+0xc8>
    1b64:	21 e0       	ldi	r18, 0x01	; 1
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <_fpadd_parts+0xe6>
    1b6e:	22 0f       	add	r18, r18
    1b70:	33 1f       	adc	r19, r19
    1b72:	44 1f       	adc	r20, r20
    1b74:	55 1f       	adc	r21, r21
    1b76:	6a 95       	dec	r22
    1b78:	d2 f7       	brpl	.-12     	; 0x1b6e <_fpadd_parts+0xde>
    1b7a:	21 50       	subi	r18, 0x01	; 1
    1b7c:	30 40       	sbci	r19, 0x00	; 0
    1b7e:	40 40       	sbci	r20, 0x00	; 0
    1b80:	50 40       	sbci	r21, 0x00	; 0
    1b82:	2e 21       	and	r18, r14
    1b84:	3f 21       	and	r19, r15
    1b86:	40 23       	and	r20, r16
    1b88:	51 23       	and	r21, r17
    1b8a:	21 15       	cp	r18, r1
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	41 05       	cpc	r20, r1
    1b90:	51 05       	cpc	r21, r1
    1b92:	21 f0       	breq	.+8      	; 0x1b9c <_fpadd_parts+0x10c>
    1b94:	21 e0       	ldi	r18, 0x01	; 1
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	79 01       	movw	r14, r18
    1b9e:	8a 01       	movw	r16, r20
    1ba0:	e6 28       	or	r14, r6
    1ba2:	f7 28       	or	r15, r7
    1ba4:	08 29       	or	r16, r8
    1ba6:	19 29       	or	r17, r9
    1ba8:	3c c0       	rjmp	.+120    	; 0x1c22 <_fpadd_parts+0x192>
    1baa:	23 2b       	or	r18, r19
    1bac:	d1 f1       	breq	.+116    	; 0x1c22 <_fpadd_parts+0x192>
    1bae:	26 0e       	add	r2, r22
    1bb0:	37 1e       	adc	r3, r23
    1bb2:	35 01       	movw	r6, r10
    1bb4:	46 01       	movw	r8, r12
    1bb6:	06 2e       	mov	r0, r22
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <_fpadd_parts+0x132>
    1bba:	96 94       	lsr	r9
    1bbc:	87 94       	ror	r8
    1bbe:	77 94       	ror	r7
    1bc0:	67 94       	ror	r6
    1bc2:	0a 94       	dec	r0
    1bc4:	d2 f7       	brpl	.-12     	; 0x1bba <_fpadd_parts+0x12a>
    1bc6:	21 e0       	ldi	r18, 0x01	; 1
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	04 c0       	rjmp	.+8      	; 0x1bd8 <_fpadd_parts+0x148>
    1bd0:	22 0f       	add	r18, r18
    1bd2:	33 1f       	adc	r19, r19
    1bd4:	44 1f       	adc	r20, r20
    1bd6:	55 1f       	adc	r21, r21
    1bd8:	6a 95       	dec	r22
    1bda:	d2 f7       	brpl	.-12     	; 0x1bd0 <_fpadd_parts+0x140>
    1bdc:	21 50       	subi	r18, 0x01	; 1
    1bde:	30 40       	sbci	r19, 0x00	; 0
    1be0:	40 40       	sbci	r20, 0x00	; 0
    1be2:	50 40       	sbci	r21, 0x00	; 0
    1be4:	2a 21       	and	r18, r10
    1be6:	3b 21       	and	r19, r11
    1be8:	4c 21       	and	r20, r12
    1bea:	5d 21       	and	r21, r13
    1bec:	21 15       	cp	r18, r1
    1bee:	31 05       	cpc	r19, r1
    1bf0:	41 05       	cpc	r20, r1
    1bf2:	51 05       	cpc	r21, r1
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <_fpadd_parts+0x16e>
    1bf6:	21 e0       	ldi	r18, 0x01	; 1
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	59 01       	movw	r10, r18
    1c00:	6a 01       	movw	r12, r20
    1c02:	a6 28       	or	r10, r6
    1c04:	b7 28       	or	r11, r7
    1c06:	c8 28       	or	r12, r8
    1c08:	d9 28       	or	r13, r9
    1c0a:	0b c0       	rjmp	.+22     	; 0x1c22 <_fpadd_parts+0x192>
    1c0c:	82 15       	cp	r24, r2
    1c0e:	93 05       	cpc	r25, r3
    1c10:	2c f0       	brlt	.+10     	; 0x1c1c <_fpadd_parts+0x18c>
    1c12:	1c 01       	movw	r2, r24
    1c14:	aa 24       	eor	r10, r10
    1c16:	bb 24       	eor	r11, r11
    1c18:	65 01       	movw	r12, r10
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <_fpadd_parts+0x192>
    1c1c:	ee 24       	eor	r14, r14
    1c1e:	ff 24       	eor	r15, r15
    1c20:	87 01       	movw	r16, r14
    1c22:	11 96       	adiw	r26, 0x01	; 1
    1c24:	9c 91       	ld	r25, X
    1c26:	d2 01       	movw	r26, r4
    1c28:	11 96       	adiw	r26, 0x01	; 1
    1c2a:	8c 91       	ld	r24, X
    1c2c:	98 17       	cp	r25, r24
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <_fpadd_parts+0x1a2>
    1c30:	45 c0       	rjmp	.+138    	; 0x1cbc <_fpadd_parts+0x22c>
    1c32:	99 23       	and	r25, r25
    1c34:	39 f0       	breq	.+14     	; 0x1c44 <_fpadd_parts+0x1b4>
    1c36:	a8 01       	movw	r20, r16
    1c38:	97 01       	movw	r18, r14
    1c3a:	2a 19       	sub	r18, r10
    1c3c:	3b 09       	sbc	r19, r11
    1c3e:	4c 09       	sbc	r20, r12
    1c40:	5d 09       	sbc	r21, r13
    1c42:	06 c0       	rjmp	.+12     	; 0x1c50 <_fpadd_parts+0x1c0>
    1c44:	a6 01       	movw	r20, r12
    1c46:	95 01       	movw	r18, r10
    1c48:	2e 19       	sub	r18, r14
    1c4a:	3f 09       	sbc	r19, r15
    1c4c:	40 0b       	sbc	r20, r16
    1c4e:	51 0b       	sbc	r21, r17
    1c50:	57 fd       	sbrc	r21, 7
    1c52:	08 c0       	rjmp	.+16     	; 0x1c64 <_fpadd_parts+0x1d4>
    1c54:	11 82       	std	Z+1, r1	; 0x01
    1c56:	33 82       	std	Z+3, r3	; 0x03
    1c58:	22 82       	std	Z+2, r2	; 0x02
    1c5a:	24 83       	std	Z+4, r18	; 0x04
    1c5c:	35 83       	std	Z+5, r19	; 0x05
    1c5e:	46 83       	std	Z+6, r20	; 0x06
    1c60:	57 83       	std	Z+7, r21	; 0x07
    1c62:	1d c0       	rjmp	.+58     	; 0x1c9e <_fpadd_parts+0x20e>
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	81 83       	std	Z+1, r24	; 0x01
    1c68:	33 82       	std	Z+3, r3	; 0x03
    1c6a:	22 82       	std	Z+2, r2	; 0x02
    1c6c:	88 27       	eor	r24, r24
    1c6e:	99 27       	eor	r25, r25
    1c70:	dc 01       	movw	r26, r24
    1c72:	82 1b       	sub	r24, r18
    1c74:	93 0b       	sbc	r25, r19
    1c76:	a4 0b       	sbc	r26, r20
    1c78:	b5 0b       	sbc	r27, r21
    1c7a:	84 83       	std	Z+4, r24	; 0x04
    1c7c:	95 83       	std	Z+5, r25	; 0x05
    1c7e:	a6 83       	std	Z+6, r26	; 0x06
    1c80:	b7 83       	std	Z+7, r27	; 0x07
    1c82:	0d c0       	rjmp	.+26     	; 0x1c9e <_fpadd_parts+0x20e>
    1c84:	22 0f       	add	r18, r18
    1c86:	33 1f       	adc	r19, r19
    1c88:	44 1f       	adc	r20, r20
    1c8a:	55 1f       	adc	r21, r21
    1c8c:	24 83       	std	Z+4, r18	; 0x04
    1c8e:	35 83       	std	Z+5, r19	; 0x05
    1c90:	46 83       	std	Z+6, r20	; 0x06
    1c92:	57 83       	std	Z+7, r21	; 0x07
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	93 83       	std	Z+3, r25	; 0x03
    1c9c:	82 83       	std	Z+2, r24	; 0x02
    1c9e:	24 81       	ldd	r18, Z+4	; 0x04
    1ca0:	35 81       	ldd	r19, Z+5	; 0x05
    1ca2:	46 81       	ldd	r20, Z+6	; 0x06
    1ca4:	57 81       	ldd	r21, Z+7	; 0x07
    1ca6:	da 01       	movw	r26, r20
    1ca8:	c9 01       	movw	r24, r18
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	a1 09       	sbc	r26, r1
    1cae:	b1 09       	sbc	r27, r1
    1cb0:	8f 5f       	subi	r24, 0xFF	; 255
    1cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb4:	af 4f       	sbci	r26, 0xFF	; 255
    1cb6:	bf 43       	sbci	r27, 0x3F	; 63
    1cb8:	28 f3       	brcs	.-54     	; 0x1c84 <_fpadd_parts+0x1f4>
    1cba:	0b c0       	rjmp	.+22     	; 0x1cd2 <_fpadd_parts+0x242>
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	33 82       	std	Z+3, r3	; 0x03
    1cc0:	22 82       	std	Z+2, r2	; 0x02
    1cc2:	ea 0c       	add	r14, r10
    1cc4:	fb 1c       	adc	r15, r11
    1cc6:	0c 1d       	adc	r16, r12
    1cc8:	1d 1d       	adc	r17, r13
    1cca:	e4 82       	std	Z+4, r14	; 0x04
    1ccc:	f5 82       	std	Z+5, r15	; 0x05
    1cce:	06 83       	std	Z+6, r16	; 0x06
    1cd0:	17 83       	std	Z+7, r17	; 0x07
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	80 83       	st	Z, r24
    1cd6:	24 81       	ldd	r18, Z+4	; 0x04
    1cd8:	35 81       	ldd	r19, Z+5	; 0x05
    1cda:	46 81       	ldd	r20, Z+6	; 0x06
    1cdc:	57 81       	ldd	r21, Z+7	; 0x07
    1cde:	57 ff       	sbrs	r21, 7
    1ce0:	1a c0       	rjmp	.+52     	; 0x1d16 <_fpadd_parts+0x286>
    1ce2:	c9 01       	movw	r24, r18
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	97 fd       	sbrc	r25, 7
    1ce8:	a0 95       	com	r26
    1cea:	ba 2f       	mov	r27, r26
    1cec:	81 70       	andi	r24, 0x01	; 1
    1cee:	90 70       	andi	r25, 0x00	; 0
    1cf0:	a0 70       	andi	r26, 0x00	; 0
    1cf2:	b0 70       	andi	r27, 0x00	; 0
    1cf4:	56 95       	lsr	r21
    1cf6:	47 95       	ror	r20
    1cf8:	37 95       	ror	r19
    1cfa:	27 95       	ror	r18
    1cfc:	82 2b       	or	r24, r18
    1cfe:	93 2b       	or	r25, r19
    1d00:	a4 2b       	or	r26, r20
    1d02:	b5 2b       	or	r27, r21
    1d04:	84 83       	std	Z+4, r24	; 0x04
    1d06:	95 83       	std	Z+5, r25	; 0x05
    1d08:	a6 83       	std	Z+6, r26	; 0x06
    1d0a:	b7 83       	std	Z+7, r27	; 0x07
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	93 83       	std	Z+3, r25	; 0x03
    1d14:	82 83       	std	Z+2, r24	; 0x02
    1d16:	df 01       	movw	r26, r30
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <_fpadd_parts+0x28c>
    1d1a:	d2 01       	movw	r26, r4
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	e2 e1       	ldi	r30, 0x12	; 18
    1d24:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__>

00001d28 <__subsf3>:
    1d28:	a0 e2       	ldi	r26, 0x20	; 32
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	ea e9       	ldi	r30, 0x9A	; 154
    1d2e:	fe e0       	ldi	r31, 0x0E	; 14
    1d30:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__prologue_saves__+0x18>
    1d34:	69 83       	std	Y+1, r22	; 0x01
    1d36:	7a 83       	std	Y+2, r23	; 0x02
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	2d 83       	std	Y+5, r18	; 0x05
    1d3e:	3e 83       	std	Y+6, r19	; 0x06
    1d40:	4f 83       	std	Y+7, r20	; 0x07
    1d42:	58 87       	std	Y+8, r21	; 0x08
    1d44:	e9 e0       	ldi	r30, 0x09	; 9
    1d46:	ee 2e       	mov	r14, r30
    1d48:	f1 2c       	mov	r15, r1
    1d4a:	ec 0e       	add	r14, r28
    1d4c:	fd 1e       	adc	r15, r29
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	b7 01       	movw	r22, r14
    1d54:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    1d58:	8e 01       	movw	r16, r28
    1d5a:	0f 5e       	subi	r16, 0xEF	; 239
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	ce 01       	movw	r24, r28
    1d60:	05 96       	adiw	r24, 0x05	; 5
    1d62:	b8 01       	movw	r22, r16
    1d64:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    1d68:	8a 89       	ldd	r24, Y+18	; 0x12
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	89 27       	eor	r24, r25
    1d6e:	8a 8b       	std	Y+18, r24	; 0x12
    1d70:	c7 01       	movw	r24, r14
    1d72:	b8 01       	movw	r22, r16
    1d74:	ae 01       	movw	r20, r28
    1d76:	47 5e       	subi	r20, 0xE7	; 231
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_fpadd_parts>
    1d7e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__pack_f>
    1d82:	a0 96       	adiw	r28, 0x20	; 32
    1d84:	e6 e0       	ldi	r30, 0x06	; 6
    1d86:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__epilogue_restores__+0x18>

00001d8a <__addsf3>:
    1d8a:	a0 e2       	ldi	r26, 0x20	; 32
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	eb ec       	ldi	r30, 0xCB	; 203
    1d90:	fe e0       	ldi	r31, 0x0E	; 14
    1d92:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__prologue_saves__+0x18>
    1d96:	69 83       	std	Y+1, r22	; 0x01
    1d98:	7a 83       	std	Y+2, r23	; 0x02
    1d9a:	8b 83       	std	Y+3, r24	; 0x03
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	2d 83       	std	Y+5, r18	; 0x05
    1da0:	3e 83       	std	Y+6, r19	; 0x06
    1da2:	4f 83       	std	Y+7, r20	; 0x07
    1da4:	58 87       	std	Y+8, r21	; 0x08
    1da6:	f9 e0       	ldi	r31, 0x09	; 9
    1da8:	ef 2e       	mov	r14, r31
    1daa:	f1 2c       	mov	r15, r1
    1dac:	ec 0e       	add	r14, r28
    1dae:	fd 1e       	adc	r15, r29
    1db0:	ce 01       	movw	r24, r28
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	b7 01       	movw	r22, r14
    1db6:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    1dba:	8e 01       	movw	r16, r28
    1dbc:	0f 5e       	subi	r16, 0xEF	; 239
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	05 96       	adiw	r24, 0x05	; 5
    1dc4:	b8 01       	movw	r22, r16
    1dc6:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    1dca:	c7 01       	movw	r24, r14
    1dcc:	b8 01       	movw	r22, r16
    1dce:	ae 01       	movw	r20, r28
    1dd0:	47 5e       	subi	r20, 0xE7	; 231
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_fpadd_parts>
    1dd8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__pack_f>
    1ddc:	a0 96       	adiw	r28, 0x20	; 32
    1dde:	e6 e0       	ldi	r30, 0x06	; 6
    1de0:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__epilogue_restores__+0x18>

00001de4 <__mulsf3>:
    1de4:	a0 e2       	ldi	r26, 0x20	; 32
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e8 ef       	ldi	r30, 0xF8	; 248
    1dea:	fe e0       	ldi	r31, 0x0E	; 14
    1dec:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__>
    1df0:	69 83       	std	Y+1, r22	; 0x01
    1df2:	7a 83       	std	Y+2, r23	; 0x02
    1df4:	8b 83       	std	Y+3, r24	; 0x03
    1df6:	9c 83       	std	Y+4, r25	; 0x04
    1df8:	2d 83       	std	Y+5, r18	; 0x05
    1dfa:	3e 83       	std	Y+6, r19	; 0x06
    1dfc:	4f 83       	std	Y+7, r20	; 0x07
    1dfe:	58 87       	std	Y+8, r21	; 0x08
    1e00:	ce 01       	movw	r24, r28
    1e02:	01 96       	adiw	r24, 0x01	; 1
    1e04:	be 01       	movw	r22, r28
    1e06:	67 5f       	subi	r22, 0xF7	; 247
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    1e0e:	ce 01       	movw	r24, r28
    1e10:	05 96       	adiw	r24, 0x05	; 5
    1e12:	be 01       	movw	r22, r28
    1e14:	6f 5e       	subi	r22, 0xEF	; 239
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    1e1c:	99 85       	ldd	r25, Y+9	; 0x09
    1e1e:	92 30       	cpi	r25, 0x02	; 2
    1e20:	88 f0       	brcs	.+34     	; 0x1e44 <__mulsf3+0x60>
    1e22:	89 89       	ldd	r24, Y+17	; 0x11
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	c8 f0       	brcs	.+50     	; 0x1e5a <__mulsf3+0x76>
    1e28:	94 30       	cpi	r25, 0x04	; 4
    1e2a:	19 f4       	brne	.+6      	; 0x1e32 <__mulsf3+0x4e>
    1e2c:	82 30       	cpi	r24, 0x02	; 2
    1e2e:	51 f4       	brne	.+20     	; 0x1e44 <__mulsf3+0x60>
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <__mulsf3+0x56>
    1e32:	84 30       	cpi	r24, 0x04	; 4
    1e34:	29 f4       	brne	.+10     	; 0x1e40 <__mulsf3+0x5c>
    1e36:	92 30       	cpi	r25, 0x02	; 2
    1e38:	81 f4       	brne	.+32     	; 0x1e5a <__mulsf3+0x76>
    1e3a:	84 e0       	ldi	r24, 0x04	; 4
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	c6 c0       	rjmp	.+396    	; 0x1fcc <__mulsf3+0x1e8>
    1e40:	92 30       	cpi	r25, 0x02	; 2
    1e42:	49 f4       	brne	.+18     	; 0x1e56 <__mulsf3+0x72>
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	8a 89       	ldd	r24, Y+18	; 0x12
    1e4a:	98 13       	cpse	r25, r24
    1e4c:	21 e0       	ldi	r18, 0x01	; 1
    1e4e:	2a 87       	std	Y+10, r18	; 0x0a
    1e50:	ce 01       	movw	r24, r28
    1e52:	09 96       	adiw	r24, 0x09	; 9
    1e54:	bb c0       	rjmp	.+374    	; 0x1fcc <__mulsf3+0x1e8>
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	49 f4       	brne	.+18     	; 0x1e6c <__mulsf3+0x88>
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	8a 89       	ldd	r24, Y+18	; 0x12
    1e60:	98 13       	cpse	r25, r24
    1e62:	21 e0       	ldi	r18, 0x01	; 1
    1e64:	2a 8b       	std	Y+18, r18	; 0x12
    1e66:	ce 01       	movw	r24, r28
    1e68:	41 96       	adiw	r24, 0x11	; 17
    1e6a:	b0 c0       	rjmp	.+352    	; 0x1fcc <__mulsf3+0x1e8>
    1e6c:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e6e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e70:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e72:	58 88       	ldd	r5, Y+16	; 0x10
    1e74:	6d 88       	ldd	r6, Y+21	; 0x15
    1e76:	7e 88       	ldd	r7, Y+22	; 0x16
    1e78:	8f 88       	ldd	r8, Y+23	; 0x17
    1e7a:	98 8c       	ldd	r9, Y+24	; 0x18
    1e7c:	ee 24       	eor	r14, r14
    1e7e:	ff 24       	eor	r15, r15
    1e80:	87 01       	movw	r16, r14
    1e82:	aa 24       	eor	r10, r10
    1e84:	bb 24       	eor	r11, r11
    1e86:	65 01       	movw	r12, r10
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	e0 e0       	ldi	r30, 0x00	; 0
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	c1 01       	movw	r24, r2
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	90 70       	andi	r25, 0x00	; 0
    1e9a:	89 2b       	or	r24, r25
    1e9c:	e9 f0       	breq	.+58     	; 0x1ed8 <__mulsf3+0xf4>
    1e9e:	e6 0c       	add	r14, r6
    1ea0:	f7 1c       	adc	r15, r7
    1ea2:	08 1d       	adc	r16, r8
    1ea4:	19 1d       	adc	r17, r9
    1ea6:	9a 01       	movw	r18, r20
    1ea8:	ab 01       	movw	r20, r22
    1eaa:	2a 0d       	add	r18, r10
    1eac:	3b 1d       	adc	r19, r11
    1eae:	4c 1d       	adc	r20, r12
    1eb0:	5d 1d       	adc	r21, r13
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e0       	ldi	r26, 0x00	; 0
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e6 14       	cp	r14, r6
    1ebc:	f7 04       	cpc	r15, r7
    1ebe:	08 05       	cpc	r16, r8
    1ec0:	19 05       	cpc	r17, r9
    1ec2:	20 f4       	brcc	.+8      	; 0x1ecc <__mulsf3+0xe8>
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e0       	ldi	r26, 0x00	; 0
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	ba 01       	movw	r22, r20
    1ece:	a9 01       	movw	r20, r18
    1ed0:	48 0f       	add	r20, r24
    1ed2:	59 1f       	adc	r21, r25
    1ed4:	6a 1f       	adc	r22, r26
    1ed6:	7b 1f       	adc	r23, r27
    1ed8:	aa 0c       	add	r10, r10
    1eda:	bb 1c       	adc	r11, r11
    1edc:	cc 1c       	adc	r12, r12
    1ede:	dd 1c       	adc	r13, r13
    1ee0:	97 fe       	sbrs	r9, 7
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <__mulsf3+0x110>
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e0       	ldi	r26, 0x00	; 0
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	a8 2a       	or	r10, r24
    1eee:	b9 2a       	or	r11, r25
    1ef0:	ca 2a       	or	r12, r26
    1ef2:	db 2a       	or	r13, r27
    1ef4:	31 96       	adiw	r30, 0x01	; 1
    1ef6:	e0 32       	cpi	r30, 0x20	; 32
    1ef8:	f1 05       	cpc	r31, r1
    1efa:	49 f0       	breq	.+18     	; 0x1f0e <__mulsf3+0x12a>
    1efc:	66 0c       	add	r6, r6
    1efe:	77 1c       	adc	r7, r7
    1f00:	88 1c       	adc	r8, r8
    1f02:	99 1c       	adc	r9, r9
    1f04:	56 94       	lsr	r5
    1f06:	47 94       	ror	r4
    1f08:	37 94       	ror	r3
    1f0a:	27 94       	ror	r2
    1f0c:	c3 cf       	rjmp	.-122    	; 0x1e94 <__mulsf3+0xb0>
    1f0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f10:	ea 89       	ldd	r30, Y+18	; 0x12
    1f12:	2b 89       	ldd	r18, Y+19	; 0x13
    1f14:	3c 89       	ldd	r19, Y+20	; 0x14
    1f16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f18:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1a:	28 0f       	add	r18, r24
    1f1c:	39 1f       	adc	r19, r25
    1f1e:	2e 5f       	subi	r18, 0xFE	; 254
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	17 c0       	rjmp	.+46     	; 0x1f52 <__mulsf3+0x16e>
    1f24:	ca 01       	movw	r24, r20
    1f26:	81 70       	andi	r24, 0x01	; 1
    1f28:	90 70       	andi	r25, 0x00	; 0
    1f2a:	89 2b       	or	r24, r25
    1f2c:	61 f0       	breq	.+24     	; 0x1f46 <__mulsf3+0x162>
    1f2e:	16 95       	lsr	r17
    1f30:	07 95       	ror	r16
    1f32:	f7 94       	ror	r15
    1f34:	e7 94       	ror	r14
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	b0 e8       	ldi	r27, 0x80	; 128
    1f3e:	e8 2a       	or	r14, r24
    1f40:	f9 2a       	or	r15, r25
    1f42:	0a 2b       	or	r16, r26
    1f44:	1b 2b       	or	r17, r27
    1f46:	76 95       	lsr	r23
    1f48:	67 95       	ror	r22
    1f4a:	57 95       	ror	r21
    1f4c:	47 95       	ror	r20
    1f4e:	2f 5f       	subi	r18, 0xFF	; 255
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	77 fd       	sbrc	r23, 7
    1f54:	e7 cf       	rjmp	.-50     	; 0x1f24 <__mulsf3+0x140>
    1f56:	0c c0       	rjmp	.+24     	; 0x1f70 <__mulsf3+0x18c>
    1f58:	44 0f       	add	r20, r20
    1f5a:	55 1f       	adc	r21, r21
    1f5c:	66 1f       	adc	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	17 fd       	sbrc	r17, 7
    1f62:	41 60       	ori	r20, 0x01	; 1
    1f64:	ee 0c       	add	r14, r14
    1f66:	ff 1c       	adc	r15, r15
    1f68:	00 1f       	adc	r16, r16
    1f6a:	11 1f       	adc	r17, r17
    1f6c:	21 50       	subi	r18, 0x01	; 1
    1f6e:	30 40       	sbci	r19, 0x00	; 0
    1f70:	40 30       	cpi	r20, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	59 07       	cpc	r21, r25
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	69 07       	cpc	r22, r25
    1f7a:	90 e4       	ldi	r25, 0x40	; 64
    1f7c:	79 07       	cpc	r23, r25
    1f7e:	60 f3       	brcs	.-40     	; 0x1f58 <__mulsf3+0x174>
    1f80:	2b 8f       	std	Y+27, r18	; 0x1b
    1f82:	3c 8f       	std	Y+28, r19	; 0x1c
    1f84:	db 01       	movw	r26, r22
    1f86:	ca 01       	movw	r24, r20
    1f88:	8f 77       	andi	r24, 0x7F	; 127
    1f8a:	90 70       	andi	r25, 0x00	; 0
    1f8c:	a0 70       	andi	r26, 0x00	; 0
    1f8e:	b0 70       	andi	r27, 0x00	; 0
    1f90:	80 34       	cpi	r24, 0x40	; 64
    1f92:	91 05       	cpc	r25, r1
    1f94:	a1 05       	cpc	r26, r1
    1f96:	b1 05       	cpc	r27, r1
    1f98:	61 f4       	brne	.+24     	; 0x1fb2 <__mulsf3+0x1ce>
    1f9a:	47 fd       	sbrc	r20, 7
    1f9c:	0a c0       	rjmp	.+20     	; 0x1fb2 <__mulsf3+0x1ce>
    1f9e:	e1 14       	cp	r14, r1
    1fa0:	f1 04       	cpc	r15, r1
    1fa2:	01 05       	cpc	r16, r1
    1fa4:	11 05       	cpc	r17, r1
    1fa6:	29 f0       	breq	.+10     	; 0x1fb2 <__mulsf3+0x1ce>
    1fa8:	40 5c       	subi	r20, 0xC0	; 192
    1faa:	5f 4f       	sbci	r21, 0xFF	; 255
    1fac:	6f 4f       	sbci	r22, 0xFF	; 255
    1fae:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb0:	40 78       	andi	r20, 0x80	; 128
    1fb2:	1a 8e       	std	Y+26, r1	; 0x1a
    1fb4:	fe 17       	cp	r31, r30
    1fb6:	11 f0       	breq	.+4      	; 0x1fbc <__mulsf3+0x1d8>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	8a 8f       	std	Y+26, r24	; 0x1a
    1fbc:	4d 8f       	std	Y+29, r20	; 0x1d
    1fbe:	5e 8f       	std	Y+30, r21	; 0x1e
    1fc0:	6f 8f       	std	Y+31, r22	; 0x1f
    1fc2:	78 a3       	std	Y+32, r23	; 0x20
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	89 8f       	std	Y+25, r24	; 0x19
    1fc8:	ce 01       	movw	r24, r28
    1fca:	49 96       	adiw	r24, 0x19	; 25
    1fcc:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__pack_f>
    1fd0:	a0 96       	adiw	r28, 0x20	; 32
    1fd2:	e2 e1       	ldi	r30, 0x12	; 18
    1fd4:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__>

00001fd8 <__gtsf2>:
    1fd8:	a8 e1       	ldi	r26, 0x18	; 24
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e2 ef       	ldi	r30, 0xF2	; 242
    1fde:	ff e0       	ldi	r31, 0x0F	; 15
    1fe0:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__prologue_saves__+0x18>
    1fe4:	69 83       	std	Y+1, r22	; 0x01
    1fe6:	7a 83       	std	Y+2, r23	; 0x02
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
    1fea:	9c 83       	std	Y+4, r25	; 0x04
    1fec:	2d 83       	std	Y+5, r18	; 0x05
    1fee:	3e 83       	std	Y+6, r19	; 0x06
    1ff0:	4f 83       	std	Y+7, r20	; 0x07
    1ff2:	58 87       	std	Y+8, r21	; 0x08
    1ff4:	89 e0       	ldi	r24, 0x09	; 9
    1ff6:	e8 2e       	mov	r14, r24
    1ff8:	f1 2c       	mov	r15, r1
    1ffa:	ec 0e       	add	r14, r28
    1ffc:	fd 1e       	adc	r15, r29
    1ffe:	ce 01       	movw	r24, r28
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	b7 01       	movw	r22, r14
    2004:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    2008:	8e 01       	movw	r16, r28
    200a:	0f 5e       	subi	r16, 0xEF	; 239
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	ce 01       	movw	r24, r28
    2010:	05 96       	adiw	r24, 0x05	; 5
    2012:	b8 01       	movw	r22, r16
    2014:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	40 f0       	brcs	.+16     	; 0x202e <__gtsf2+0x56>
    201e:	89 89       	ldd	r24, Y+17	; 0x11
    2020:	82 30       	cpi	r24, 0x02	; 2
    2022:	28 f0       	brcs	.+10     	; 0x202e <__gtsf2+0x56>
    2024:	c7 01       	movw	r24, r14
    2026:	b8 01       	movw	r22, r16
    2028:	0e 94 1d 12 	call	0x243a	; 0x243a <__fpcmp_parts_f>
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <__gtsf2+0x58>
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	68 96       	adiw	r28, 0x18	; 24
    2032:	e6 e0       	ldi	r30, 0x06	; 6
    2034:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__epilogue_restores__+0x18>

00002038 <__gesf2>:
    2038:	a8 e1       	ldi	r26, 0x18	; 24
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e2 e2       	ldi	r30, 0x22	; 34
    203e:	f0 e1       	ldi	r31, 0x10	; 16
    2040:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__prologue_saves__+0x18>
    2044:	69 83       	std	Y+1, r22	; 0x01
    2046:	7a 83       	std	Y+2, r23	; 0x02
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	9c 83       	std	Y+4, r25	; 0x04
    204c:	2d 83       	std	Y+5, r18	; 0x05
    204e:	3e 83       	std	Y+6, r19	; 0x06
    2050:	4f 83       	std	Y+7, r20	; 0x07
    2052:	58 87       	std	Y+8, r21	; 0x08
    2054:	89 e0       	ldi	r24, 0x09	; 9
    2056:	e8 2e       	mov	r14, r24
    2058:	f1 2c       	mov	r15, r1
    205a:	ec 0e       	add	r14, r28
    205c:	fd 1e       	adc	r15, r29
    205e:	ce 01       	movw	r24, r28
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	b7 01       	movw	r22, r14
    2064:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    2068:	8e 01       	movw	r16, r28
    206a:	0f 5e       	subi	r16, 0xEF	; 239
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	ce 01       	movw	r24, r28
    2070:	05 96       	adiw	r24, 0x05	; 5
    2072:	b8 01       	movw	r22, r16
    2074:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	40 f0       	brcs	.+16     	; 0x208e <__gesf2+0x56>
    207e:	89 89       	ldd	r24, Y+17	; 0x11
    2080:	82 30       	cpi	r24, 0x02	; 2
    2082:	28 f0       	brcs	.+10     	; 0x208e <__gesf2+0x56>
    2084:	c7 01       	movw	r24, r14
    2086:	b8 01       	movw	r22, r16
    2088:	0e 94 1d 12 	call	0x243a	; 0x243a <__fpcmp_parts_f>
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <__gesf2+0x58>
    208e:	8f ef       	ldi	r24, 0xFF	; 255
    2090:	68 96       	adiw	r28, 0x18	; 24
    2092:	e6 e0       	ldi	r30, 0x06	; 6
    2094:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__epilogue_restores__+0x18>

00002098 <__ltsf2>:
    2098:	a8 e1       	ldi	r26, 0x18	; 24
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e2 e5       	ldi	r30, 0x52	; 82
    209e:	f0 e1       	ldi	r31, 0x10	; 16
    20a0:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__prologue_saves__+0x18>
    20a4:	69 83       	std	Y+1, r22	; 0x01
    20a6:	7a 83       	std	Y+2, r23	; 0x02
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	9c 83       	std	Y+4, r25	; 0x04
    20ac:	2d 83       	std	Y+5, r18	; 0x05
    20ae:	3e 83       	std	Y+6, r19	; 0x06
    20b0:	4f 83       	std	Y+7, r20	; 0x07
    20b2:	58 87       	std	Y+8, r21	; 0x08
    20b4:	89 e0       	ldi	r24, 0x09	; 9
    20b6:	e8 2e       	mov	r14, r24
    20b8:	f1 2c       	mov	r15, r1
    20ba:	ec 0e       	add	r14, r28
    20bc:	fd 1e       	adc	r15, r29
    20be:	ce 01       	movw	r24, r28
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	b7 01       	movw	r22, r14
    20c4:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    20c8:	8e 01       	movw	r16, r28
    20ca:	0f 5e       	subi	r16, 0xEF	; 239
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	ce 01       	movw	r24, r28
    20d0:	05 96       	adiw	r24, 0x05	; 5
    20d2:	b8 01       	movw	r22, r16
    20d4:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	82 30       	cpi	r24, 0x02	; 2
    20dc:	40 f0       	brcs	.+16     	; 0x20ee <__ltsf2+0x56>
    20de:	89 89       	ldd	r24, Y+17	; 0x11
    20e0:	82 30       	cpi	r24, 0x02	; 2
    20e2:	28 f0       	brcs	.+10     	; 0x20ee <__ltsf2+0x56>
    20e4:	c7 01       	movw	r24, r14
    20e6:	b8 01       	movw	r22, r16
    20e8:	0e 94 1d 12 	call	0x243a	; 0x243a <__fpcmp_parts_f>
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <__ltsf2+0x58>
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	68 96       	adiw	r28, 0x18	; 24
    20f2:	e6 e0       	ldi	r30, 0x06	; 6
    20f4:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__epilogue_restores__+0x18>

000020f8 <__fixsfsi>:
    20f8:	ac e0       	ldi	r26, 0x0C	; 12
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e2 e8       	ldi	r30, 0x82	; 130
    20fe:	f0 e1       	ldi	r31, 0x10	; 16
    2100:	0c 94 86 12 	jmp	0x250c	; 0x250c <__prologue_saves__+0x20>
    2104:	69 83       	std	Y+1, r22	; 0x01
    2106:	7a 83       	std	Y+2, r23	; 0x02
    2108:	8b 83       	std	Y+3, r24	; 0x03
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	ce 01       	movw	r24, r28
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	be 01       	movw	r22, r28
    2112:	6b 5f       	subi	r22, 0xFB	; 251
    2114:	7f 4f       	sbci	r23, 0xFF	; 255
    2116:	0e 94 a5 11 	call	0x234a	; 0x234a <__unpack_f>
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	82 30       	cpi	r24, 0x02	; 2
    211e:	61 f1       	breq	.+88     	; 0x2178 <__fixsfsi+0x80>
    2120:	82 30       	cpi	r24, 0x02	; 2
    2122:	50 f1       	brcs	.+84     	; 0x2178 <__fixsfsi+0x80>
    2124:	84 30       	cpi	r24, 0x04	; 4
    2126:	21 f4       	brne	.+8      	; 0x2130 <__fixsfsi+0x38>
    2128:	8e 81       	ldd	r24, Y+6	; 0x06
    212a:	88 23       	and	r24, r24
    212c:	51 f1       	breq	.+84     	; 0x2182 <__fixsfsi+0x8a>
    212e:	2e c0       	rjmp	.+92     	; 0x218c <__fixsfsi+0x94>
    2130:	2f 81       	ldd	r18, Y+7	; 0x07
    2132:	38 85       	ldd	r19, Y+8	; 0x08
    2134:	37 fd       	sbrc	r19, 7
    2136:	20 c0       	rjmp	.+64     	; 0x2178 <__fixsfsi+0x80>
    2138:	6e 81       	ldd	r22, Y+6	; 0x06
    213a:	2f 31       	cpi	r18, 0x1F	; 31
    213c:	31 05       	cpc	r19, r1
    213e:	1c f0       	brlt	.+6      	; 0x2146 <__fixsfsi+0x4e>
    2140:	66 23       	and	r22, r22
    2142:	f9 f0       	breq	.+62     	; 0x2182 <__fixsfsi+0x8a>
    2144:	23 c0       	rjmp	.+70     	; 0x218c <__fixsfsi+0x94>
    2146:	8e e1       	ldi	r24, 0x1E	; 30
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	82 1b       	sub	r24, r18
    214c:	93 0b       	sbc	r25, r19
    214e:	29 85       	ldd	r18, Y+9	; 0x09
    2150:	3a 85       	ldd	r19, Y+10	; 0x0a
    2152:	4b 85       	ldd	r20, Y+11	; 0x0b
    2154:	5c 85       	ldd	r21, Y+12	; 0x0c
    2156:	04 c0       	rjmp	.+8      	; 0x2160 <__fixsfsi+0x68>
    2158:	56 95       	lsr	r21
    215a:	47 95       	ror	r20
    215c:	37 95       	ror	r19
    215e:	27 95       	ror	r18
    2160:	8a 95       	dec	r24
    2162:	d2 f7       	brpl	.-12     	; 0x2158 <__fixsfsi+0x60>
    2164:	66 23       	and	r22, r22
    2166:	b1 f0       	breq	.+44     	; 0x2194 <__fixsfsi+0x9c>
    2168:	50 95       	com	r21
    216a:	40 95       	com	r20
    216c:	30 95       	com	r19
    216e:	21 95       	neg	r18
    2170:	3f 4f       	sbci	r19, 0xFF	; 255
    2172:	4f 4f       	sbci	r20, 0xFF	; 255
    2174:	5f 4f       	sbci	r21, 0xFF	; 255
    2176:	0e c0       	rjmp	.+28     	; 0x2194 <__fixsfsi+0x9c>
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	09 c0       	rjmp	.+18     	; 0x2194 <__fixsfsi+0x9c>
    2182:	2f ef       	ldi	r18, 0xFF	; 255
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f ef       	ldi	r20, 0xFF	; 255
    2188:	5f e7       	ldi	r21, 0x7F	; 127
    218a:	04 c0       	rjmp	.+8      	; 0x2194 <__fixsfsi+0x9c>
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	50 e8       	ldi	r21, 0x80	; 128
    2194:	b9 01       	movw	r22, r18
    2196:	ca 01       	movw	r24, r20
    2198:	2c 96       	adiw	r28, 0x0c	; 12
    219a:	e2 e0       	ldi	r30, 0x02	; 2
    219c:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__epilogue_restores__+0x20>

000021a0 <__pack_f>:
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	fc 01       	movw	r30, r24
    21ac:	e4 80       	ldd	r14, Z+4	; 0x04
    21ae:	f5 80       	ldd	r15, Z+5	; 0x05
    21b0:	06 81       	ldd	r16, Z+6	; 0x06
    21b2:	17 81       	ldd	r17, Z+7	; 0x07
    21b4:	d1 80       	ldd	r13, Z+1	; 0x01
    21b6:	80 81       	ld	r24, Z
    21b8:	82 30       	cpi	r24, 0x02	; 2
    21ba:	48 f4       	brcc	.+18     	; 0x21ce <__pack_f+0x2e>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a0 e1       	ldi	r26, 0x10	; 16
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e8 2a       	or	r14, r24
    21c6:	f9 2a       	or	r15, r25
    21c8:	0a 2b       	or	r16, r26
    21ca:	1b 2b       	or	r17, r27
    21cc:	a5 c0       	rjmp	.+330    	; 0x2318 <__pack_f+0x178>
    21ce:	84 30       	cpi	r24, 0x04	; 4
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <__pack_f+0x34>
    21d2:	9f c0       	rjmp	.+318    	; 0x2312 <__pack_f+0x172>
    21d4:	82 30       	cpi	r24, 0x02	; 2
    21d6:	21 f4       	brne	.+8      	; 0x21e0 <__pack_f+0x40>
    21d8:	ee 24       	eor	r14, r14
    21da:	ff 24       	eor	r15, r15
    21dc:	87 01       	movw	r16, r14
    21de:	05 c0       	rjmp	.+10     	; 0x21ea <__pack_f+0x4a>
    21e0:	e1 14       	cp	r14, r1
    21e2:	f1 04       	cpc	r15, r1
    21e4:	01 05       	cpc	r16, r1
    21e6:	11 05       	cpc	r17, r1
    21e8:	19 f4       	brne	.+6      	; 0x21f0 <__pack_f+0x50>
    21ea:	e0 e0       	ldi	r30, 0x00	; 0
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	96 c0       	rjmp	.+300    	; 0x231c <__pack_f+0x17c>
    21f0:	62 81       	ldd	r22, Z+2	; 0x02
    21f2:	73 81       	ldd	r23, Z+3	; 0x03
    21f4:	9f ef       	ldi	r25, 0xFF	; 255
    21f6:	62 38       	cpi	r22, 0x82	; 130
    21f8:	79 07       	cpc	r23, r25
    21fa:	0c f0       	brlt	.+2      	; 0x21fe <__pack_f+0x5e>
    21fc:	5b c0       	rjmp	.+182    	; 0x22b4 <__pack_f+0x114>
    21fe:	22 e8       	ldi	r18, 0x82	; 130
    2200:	3f ef       	ldi	r19, 0xFF	; 255
    2202:	26 1b       	sub	r18, r22
    2204:	37 0b       	sbc	r19, r23
    2206:	2a 31       	cpi	r18, 0x1A	; 26
    2208:	31 05       	cpc	r19, r1
    220a:	2c f0       	brlt	.+10     	; 0x2216 <__pack_f+0x76>
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	2a c0       	rjmp	.+84     	; 0x226a <__pack_f+0xca>
    2216:	b8 01       	movw	r22, r16
    2218:	a7 01       	movw	r20, r14
    221a:	02 2e       	mov	r0, r18
    221c:	04 c0       	rjmp	.+8      	; 0x2226 <__pack_f+0x86>
    221e:	76 95       	lsr	r23
    2220:	67 95       	ror	r22
    2222:	57 95       	ror	r21
    2224:	47 95       	ror	r20
    2226:	0a 94       	dec	r0
    2228:	d2 f7       	brpl	.-12     	; 0x221e <__pack_f+0x7e>
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e0       	ldi	r26, 0x00	; 0
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	04 c0       	rjmp	.+8      	; 0x223c <__pack_f+0x9c>
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	aa 1f       	adc	r26, r26
    223a:	bb 1f       	adc	r27, r27
    223c:	2a 95       	dec	r18
    223e:	d2 f7       	brpl	.-12     	; 0x2234 <__pack_f+0x94>
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	a1 09       	sbc	r26, r1
    2244:	b1 09       	sbc	r27, r1
    2246:	8e 21       	and	r24, r14
    2248:	9f 21       	and	r25, r15
    224a:	a0 23       	and	r26, r16
    224c:	b1 23       	and	r27, r17
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	a1 05       	cpc	r26, r1
    2252:	b1 05       	cpc	r27, r1
    2254:	21 f0       	breq	.+8      	; 0x225e <__pack_f+0xbe>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e0       	ldi	r26, 0x00	; 0
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	9a 01       	movw	r18, r20
    2260:	ab 01       	movw	r20, r22
    2262:	28 2b       	or	r18, r24
    2264:	39 2b       	or	r19, r25
    2266:	4a 2b       	or	r20, r26
    2268:	5b 2b       	or	r21, r27
    226a:	da 01       	movw	r26, r20
    226c:	c9 01       	movw	r24, r18
    226e:	8f 77       	andi	r24, 0x7F	; 127
    2270:	90 70       	andi	r25, 0x00	; 0
    2272:	a0 70       	andi	r26, 0x00	; 0
    2274:	b0 70       	andi	r27, 0x00	; 0
    2276:	80 34       	cpi	r24, 0x40	; 64
    2278:	91 05       	cpc	r25, r1
    227a:	a1 05       	cpc	r26, r1
    227c:	b1 05       	cpc	r27, r1
    227e:	39 f4       	brne	.+14     	; 0x228e <__pack_f+0xee>
    2280:	27 ff       	sbrs	r18, 7
    2282:	09 c0       	rjmp	.+18     	; 0x2296 <__pack_f+0xf6>
    2284:	20 5c       	subi	r18, 0xC0	; 192
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	4f 4f       	sbci	r20, 0xFF	; 255
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	04 c0       	rjmp	.+8      	; 0x2296 <__pack_f+0xf6>
    228e:	21 5c       	subi	r18, 0xC1	; 193
    2290:	3f 4f       	sbci	r19, 0xFF	; 255
    2292:	4f 4f       	sbci	r20, 0xFF	; 255
    2294:	5f 4f       	sbci	r21, 0xFF	; 255
    2296:	e0 e0       	ldi	r30, 0x00	; 0
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	20 30       	cpi	r18, 0x00	; 0
    229c:	a0 e0       	ldi	r26, 0x00	; 0
    229e:	3a 07       	cpc	r19, r26
    22a0:	a0 e0       	ldi	r26, 0x00	; 0
    22a2:	4a 07       	cpc	r20, r26
    22a4:	a0 e4       	ldi	r26, 0x40	; 64
    22a6:	5a 07       	cpc	r21, r26
    22a8:	10 f0       	brcs	.+4      	; 0x22ae <__pack_f+0x10e>
    22aa:	e1 e0       	ldi	r30, 0x01	; 1
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	79 01       	movw	r14, r18
    22b0:	8a 01       	movw	r16, r20
    22b2:	27 c0       	rjmp	.+78     	; 0x2302 <__pack_f+0x162>
    22b4:	60 38       	cpi	r22, 0x80	; 128
    22b6:	71 05       	cpc	r23, r1
    22b8:	64 f5       	brge	.+88     	; 0x2312 <__pack_f+0x172>
    22ba:	fb 01       	movw	r30, r22
    22bc:	e1 58       	subi	r30, 0x81	; 129
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	d8 01       	movw	r26, r16
    22c2:	c7 01       	movw	r24, r14
    22c4:	8f 77       	andi	r24, 0x7F	; 127
    22c6:	90 70       	andi	r25, 0x00	; 0
    22c8:	a0 70       	andi	r26, 0x00	; 0
    22ca:	b0 70       	andi	r27, 0x00	; 0
    22cc:	80 34       	cpi	r24, 0x40	; 64
    22ce:	91 05       	cpc	r25, r1
    22d0:	a1 05       	cpc	r26, r1
    22d2:	b1 05       	cpc	r27, r1
    22d4:	39 f4       	brne	.+14     	; 0x22e4 <__pack_f+0x144>
    22d6:	e7 fe       	sbrs	r14, 7
    22d8:	0d c0       	rjmp	.+26     	; 0x22f4 <__pack_f+0x154>
    22da:	80 e4       	ldi	r24, 0x40	; 64
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <__pack_f+0x14c>
    22e4:	8f e3       	ldi	r24, 0x3F	; 63
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e0       	ldi	r26, 0x00	; 0
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e8 0e       	add	r14, r24
    22ee:	f9 1e       	adc	r15, r25
    22f0:	0a 1f       	adc	r16, r26
    22f2:	1b 1f       	adc	r17, r27
    22f4:	17 ff       	sbrs	r17, 7
    22f6:	05 c0       	rjmp	.+10     	; 0x2302 <__pack_f+0x162>
    22f8:	16 95       	lsr	r17
    22fa:	07 95       	ror	r16
    22fc:	f7 94       	ror	r15
    22fe:	e7 94       	ror	r14
    2300:	31 96       	adiw	r30, 0x01	; 1
    2302:	87 e0       	ldi	r24, 0x07	; 7
    2304:	16 95       	lsr	r17
    2306:	07 95       	ror	r16
    2308:	f7 94       	ror	r15
    230a:	e7 94       	ror	r14
    230c:	8a 95       	dec	r24
    230e:	d1 f7       	brne	.-12     	; 0x2304 <__pack_f+0x164>
    2310:	05 c0       	rjmp	.+10     	; 0x231c <__pack_f+0x17c>
    2312:	ee 24       	eor	r14, r14
    2314:	ff 24       	eor	r15, r15
    2316:	87 01       	movw	r16, r14
    2318:	ef ef       	ldi	r30, 0xFF	; 255
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	6e 2f       	mov	r22, r30
    231e:	67 95       	ror	r22
    2320:	66 27       	eor	r22, r22
    2322:	67 95       	ror	r22
    2324:	90 2f       	mov	r25, r16
    2326:	9f 77       	andi	r25, 0x7F	; 127
    2328:	d7 94       	ror	r13
    232a:	dd 24       	eor	r13, r13
    232c:	d7 94       	ror	r13
    232e:	8e 2f       	mov	r24, r30
    2330:	86 95       	lsr	r24
    2332:	49 2f       	mov	r20, r25
    2334:	46 2b       	or	r20, r22
    2336:	58 2f       	mov	r21, r24
    2338:	5d 29       	or	r21, r13
    233a:	b7 01       	movw	r22, r14
    233c:	ca 01       	movw	r24, r20
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	ff 90       	pop	r15
    2344:	ef 90       	pop	r14
    2346:	df 90       	pop	r13
    2348:	08 95       	ret

0000234a <__unpack_f>:
    234a:	fc 01       	movw	r30, r24
    234c:	db 01       	movw	r26, r22
    234e:	40 81       	ld	r20, Z
    2350:	51 81       	ldd	r21, Z+1	; 0x01
    2352:	22 81       	ldd	r18, Z+2	; 0x02
    2354:	62 2f       	mov	r22, r18
    2356:	6f 77       	andi	r22, 0x7F	; 127
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	22 1f       	adc	r18, r18
    235c:	22 27       	eor	r18, r18
    235e:	22 1f       	adc	r18, r18
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	89 2f       	mov	r24, r25
    2364:	88 0f       	add	r24, r24
    2366:	82 2b       	or	r24, r18
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	99 1f       	adc	r25, r25
    236e:	99 27       	eor	r25, r25
    2370:	99 1f       	adc	r25, r25
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 93       	st	X, r25
    2376:	11 97       	sbiw	r26, 0x01	; 1
    2378:	21 15       	cp	r18, r1
    237a:	31 05       	cpc	r19, r1
    237c:	a9 f5       	brne	.+106    	; 0x23e8 <__unpack_f+0x9e>
    237e:	41 15       	cp	r20, r1
    2380:	51 05       	cpc	r21, r1
    2382:	61 05       	cpc	r22, r1
    2384:	71 05       	cpc	r23, r1
    2386:	11 f4       	brne	.+4      	; 0x238c <__unpack_f+0x42>
    2388:	82 e0       	ldi	r24, 0x02	; 2
    238a:	37 c0       	rjmp	.+110    	; 0x23fa <__unpack_f+0xb0>
    238c:	82 e8       	ldi	r24, 0x82	; 130
    238e:	9f ef       	ldi	r25, 0xFF	; 255
    2390:	13 96       	adiw	r26, 0x03	; 3
    2392:	9c 93       	st	X, r25
    2394:	8e 93       	st	-X, r24
    2396:	12 97       	sbiw	r26, 0x02	; 2
    2398:	9a 01       	movw	r18, r20
    239a:	ab 01       	movw	r20, r22
    239c:	67 e0       	ldi	r22, 0x07	; 7
    239e:	22 0f       	add	r18, r18
    23a0:	33 1f       	adc	r19, r19
    23a2:	44 1f       	adc	r20, r20
    23a4:	55 1f       	adc	r21, r21
    23a6:	6a 95       	dec	r22
    23a8:	d1 f7       	brne	.-12     	; 0x239e <__unpack_f+0x54>
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	8c 93       	st	X, r24
    23ae:	0d c0       	rjmp	.+26     	; 0x23ca <__unpack_f+0x80>
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	44 1f       	adc	r20, r20
    23b6:	55 1f       	adc	r21, r21
    23b8:	12 96       	adiw	r26, 0x02	; 2
    23ba:	8d 91       	ld	r24, X+
    23bc:	9c 91       	ld	r25, X
    23be:	13 97       	sbiw	r26, 0x03	; 3
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	13 96       	adiw	r26, 0x03	; 3
    23c4:	9c 93       	st	X, r25
    23c6:	8e 93       	st	-X, r24
    23c8:	12 97       	sbiw	r26, 0x02	; 2
    23ca:	20 30       	cpi	r18, 0x00	; 0
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	38 07       	cpc	r19, r24
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	48 07       	cpc	r20, r24
    23d4:	80 e4       	ldi	r24, 0x40	; 64
    23d6:	58 07       	cpc	r21, r24
    23d8:	58 f3       	brcs	.-42     	; 0x23b0 <__unpack_f+0x66>
    23da:	14 96       	adiw	r26, 0x04	; 4
    23dc:	2d 93       	st	X+, r18
    23de:	3d 93       	st	X+, r19
    23e0:	4d 93       	st	X+, r20
    23e2:	5c 93       	st	X, r21
    23e4:	17 97       	sbiw	r26, 0x07	; 7
    23e6:	08 95       	ret
    23e8:	2f 3f       	cpi	r18, 0xFF	; 255
    23ea:	31 05       	cpc	r19, r1
    23ec:	79 f4       	brne	.+30     	; 0x240c <__unpack_f+0xc2>
    23ee:	41 15       	cp	r20, r1
    23f0:	51 05       	cpc	r21, r1
    23f2:	61 05       	cpc	r22, r1
    23f4:	71 05       	cpc	r23, r1
    23f6:	19 f4       	brne	.+6      	; 0x23fe <__unpack_f+0xb4>
    23f8:	84 e0       	ldi	r24, 0x04	; 4
    23fa:	8c 93       	st	X, r24
    23fc:	08 95       	ret
    23fe:	64 ff       	sbrs	r22, 4
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <__unpack_f+0xbe>
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	8c 93       	st	X, r24
    2406:	12 c0       	rjmp	.+36     	; 0x242c <__unpack_f+0xe2>
    2408:	1c 92       	st	X, r1
    240a:	10 c0       	rjmp	.+32     	; 0x242c <__unpack_f+0xe2>
    240c:	2f 57       	subi	r18, 0x7F	; 127
    240e:	30 40       	sbci	r19, 0x00	; 0
    2410:	13 96       	adiw	r26, 0x03	; 3
    2412:	3c 93       	st	X, r19
    2414:	2e 93       	st	-X, r18
    2416:	12 97       	sbiw	r26, 0x02	; 2
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	8c 93       	st	X, r24
    241c:	87 e0       	ldi	r24, 0x07	; 7
    241e:	44 0f       	add	r20, r20
    2420:	55 1f       	adc	r21, r21
    2422:	66 1f       	adc	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	8a 95       	dec	r24
    2428:	d1 f7       	brne	.-12     	; 0x241e <__unpack_f+0xd4>
    242a:	70 64       	ori	r23, 0x40	; 64
    242c:	14 96       	adiw	r26, 0x04	; 4
    242e:	4d 93       	st	X+, r20
    2430:	5d 93       	st	X+, r21
    2432:	6d 93       	st	X+, r22
    2434:	7c 93       	st	X, r23
    2436:	17 97       	sbiw	r26, 0x07	; 7
    2438:	08 95       	ret

0000243a <__fpcmp_parts_f>:
    243a:	1f 93       	push	r17
    243c:	dc 01       	movw	r26, r24
    243e:	fb 01       	movw	r30, r22
    2440:	9c 91       	ld	r25, X
    2442:	92 30       	cpi	r25, 0x02	; 2
    2444:	08 f4       	brcc	.+2      	; 0x2448 <__fpcmp_parts_f+0xe>
    2446:	47 c0       	rjmp	.+142    	; 0x24d6 <__fpcmp_parts_f+0x9c>
    2448:	80 81       	ld	r24, Z
    244a:	82 30       	cpi	r24, 0x02	; 2
    244c:	08 f4       	brcc	.+2      	; 0x2450 <__fpcmp_parts_f+0x16>
    244e:	43 c0       	rjmp	.+134    	; 0x24d6 <__fpcmp_parts_f+0x9c>
    2450:	94 30       	cpi	r25, 0x04	; 4
    2452:	51 f4       	brne	.+20     	; 0x2468 <__fpcmp_parts_f+0x2e>
    2454:	11 96       	adiw	r26, 0x01	; 1
    2456:	1c 91       	ld	r17, X
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	99 f5       	brne	.+102    	; 0x24c2 <__fpcmp_parts_f+0x88>
    245c:	81 81       	ldd	r24, Z+1	; 0x01
    245e:	68 2f       	mov	r22, r24
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	61 1b       	sub	r22, r17
    2464:	71 09       	sbc	r23, r1
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <__fpcmp_parts_f+0xac>
    2468:	84 30       	cpi	r24, 0x04	; 4
    246a:	21 f0       	breq	.+8      	; 0x2474 <__fpcmp_parts_f+0x3a>
    246c:	92 30       	cpi	r25, 0x02	; 2
    246e:	31 f4       	brne	.+12     	; 0x247c <__fpcmp_parts_f+0x42>
    2470:	82 30       	cpi	r24, 0x02	; 2
    2472:	b9 f1       	breq	.+110    	; 0x24e2 <__fpcmp_parts_f+0xa8>
    2474:	81 81       	ldd	r24, Z+1	; 0x01
    2476:	88 23       	and	r24, r24
    2478:	89 f1       	breq	.+98     	; 0x24dc <__fpcmp_parts_f+0xa2>
    247a:	2d c0       	rjmp	.+90     	; 0x24d6 <__fpcmp_parts_f+0x9c>
    247c:	11 96       	adiw	r26, 0x01	; 1
    247e:	1c 91       	ld	r17, X
    2480:	11 97       	sbiw	r26, 0x01	; 1
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	f1 f0       	breq	.+60     	; 0x24c2 <__fpcmp_parts_f+0x88>
    2486:	81 81       	ldd	r24, Z+1	; 0x01
    2488:	18 17       	cp	r17, r24
    248a:	d9 f4       	brne	.+54     	; 0x24c2 <__fpcmp_parts_f+0x88>
    248c:	12 96       	adiw	r26, 0x02	; 2
    248e:	2d 91       	ld	r18, X+
    2490:	3c 91       	ld	r19, X
    2492:	13 97       	sbiw	r26, 0x03	; 3
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	82 17       	cp	r24, r18
    249a:	93 07       	cpc	r25, r19
    249c:	94 f0       	brlt	.+36     	; 0x24c2 <__fpcmp_parts_f+0x88>
    249e:	28 17       	cp	r18, r24
    24a0:	39 07       	cpc	r19, r25
    24a2:	bc f0       	brlt	.+46     	; 0x24d2 <__fpcmp_parts_f+0x98>
    24a4:	14 96       	adiw	r26, 0x04	; 4
    24a6:	8d 91       	ld	r24, X+
    24a8:	9d 91       	ld	r25, X+
    24aa:	0d 90       	ld	r0, X+
    24ac:	bc 91       	ld	r27, X
    24ae:	a0 2d       	mov	r26, r0
    24b0:	24 81       	ldd	r18, Z+4	; 0x04
    24b2:	35 81       	ldd	r19, Z+5	; 0x05
    24b4:	46 81       	ldd	r20, Z+6	; 0x06
    24b6:	57 81       	ldd	r21, Z+7	; 0x07
    24b8:	28 17       	cp	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	4a 07       	cpc	r20, r26
    24be:	5b 07       	cpc	r21, r27
    24c0:	18 f4       	brcc	.+6      	; 0x24c8 <__fpcmp_parts_f+0x8e>
    24c2:	11 23       	and	r17, r17
    24c4:	41 f0       	breq	.+16     	; 0x24d6 <__fpcmp_parts_f+0x9c>
    24c6:	0a c0       	rjmp	.+20     	; 0x24dc <__fpcmp_parts_f+0xa2>
    24c8:	82 17       	cp	r24, r18
    24ca:	93 07       	cpc	r25, r19
    24cc:	a4 07       	cpc	r26, r20
    24ce:	b5 07       	cpc	r27, r21
    24d0:	40 f4       	brcc	.+16     	; 0x24e2 <__fpcmp_parts_f+0xa8>
    24d2:	11 23       	and	r17, r17
    24d4:	19 f0       	breq	.+6      	; 0x24dc <__fpcmp_parts_f+0xa2>
    24d6:	61 e0       	ldi	r22, 0x01	; 1
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	05 c0       	rjmp	.+10     	; 0x24e6 <__fpcmp_parts_f+0xac>
    24dc:	6f ef       	ldi	r22, 0xFF	; 255
    24de:	7f ef       	ldi	r23, 0xFF	; 255
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <__fpcmp_parts_f+0xac>
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	cb 01       	movw	r24, r22
    24e8:	1f 91       	pop	r17
    24ea:	08 95       	ret

000024ec <__prologue_saves__>:
    24ec:	2f 92       	push	r2
    24ee:	3f 92       	push	r3
    24f0:	4f 92       	push	r4
    24f2:	5f 92       	push	r5
    24f4:	6f 92       	push	r6
    24f6:	7f 92       	push	r7
    24f8:	8f 92       	push	r8
    24fa:	9f 92       	push	r9
    24fc:	af 92       	push	r10
    24fe:	bf 92       	push	r11
    2500:	cf 92       	push	r12
    2502:	df 92       	push	r13
    2504:	ef 92       	push	r14
    2506:	ff 92       	push	r15
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	ca 1b       	sub	r28, r26
    2516:	db 0b       	sbc	r29, r27
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	09 94       	ijmp

00002524 <__epilogue_restores__>:
    2524:	2a 88       	ldd	r2, Y+18	; 0x12
    2526:	39 88       	ldd	r3, Y+17	; 0x11
    2528:	48 88       	ldd	r4, Y+16	; 0x10
    252a:	5f 84       	ldd	r5, Y+15	; 0x0f
    252c:	6e 84       	ldd	r6, Y+14	; 0x0e
    252e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2530:	8c 84       	ldd	r8, Y+12	; 0x0c
    2532:	9b 84       	ldd	r9, Y+11	; 0x0b
    2534:	aa 84       	ldd	r10, Y+10	; 0x0a
    2536:	b9 84       	ldd	r11, Y+9	; 0x09
    2538:	c8 84       	ldd	r12, Y+8	; 0x08
    253a:	df 80       	ldd	r13, Y+7	; 0x07
    253c:	ee 80       	ldd	r14, Y+6	; 0x06
    253e:	fd 80       	ldd	r15, Y+5	; 0x05
    2540:	0c 81       	ldd	r16, Y+4	; 0x04
    2542:	1b 81       	ldd	r17, Y+3	; 0x03
    2544:	aa 81       	ldd	r26, Y+2	; 0x02
    2546:	b9 81       	ldd	r27, Y+1	; 0x01
    2548:	ce 0f       	add	r28, r30
    254a:	d1 1d       	adc	r29, r1
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	ed 01       	movw	r28, r26
    2558:	08 95       	ret

0000255a <fdevopen>:
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	8c 01       	movw	r16, r24
    2564:	eb 01       	movw	r28, r22
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	31 f4       	brne	.+12     	; 0x2576 <fdevopen+0x1c>
    256a:	61 15       	cp	r22, r1
    256c:	71 05       	cpc	r23, r1
    256e:	19 f4       	brne	.+6      	; 0x2576 <fdevopen+0x1c>
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	38 c0       	rjmp	.+112    	; 0x25e6 <fdevopen+0x8c>
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	6e e0       	ldi	r22, 0x0E	; 14
    257c:	70 e0       	ldi	r23, 0x00	; 0
    257e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <calloc>
    2582:	fc 01       	movw	r30, r24
    2584:	9c 01       	movw	r18, r24
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	71 f1       	breq	.+92     	; 0x25e6 <fdevopen+0x8c>
    258a:	80 e8       	ldi	r24, 0x80	; 128
    258c:	83 83       	std	Z+3, r24	; 0x03
    258e:	20 97       	sbiw	r28, 0x00	; 0
    2590:	71 f0       	breq	.+28     	; 0x25ae <fdevopen+0x54>
    2592:	d3 87       	std	Z+11, r29	; 0x0b
    2594:	c2 87       	std	Z+10, r28	; 0x0a
    2596:	81 e8       	ldi	r24, 0x81	; 129
    2598:	83 83       	std	Z+3, r24	; 0x03
    259a:	80 91 2f 02 	lds	r24, 0x022F
    259e:	90 91 30 02 	lds	r25, 0x0230
    25a2:	89 2b       	or	r24, r25
    25a4:	21 f4       	brne	.+8      	; 0x25ae <fdevopen+0x54>
    25a6:	f0 93 30 02 	sts	0x0230, r31
    25aa:	e0 93 2f 02 	sts	0x022F, r30
    25ae:	01 15       	cp	r16, r1
    25b0:	11 05       	cpc	r17, r1
    25b2:	c9 f0       	breq	.+50     	; 0x25e6 <fdevopen+0x8c>
    25b4:	11 87       	std	Z+9, r17	; 0x09
    25b6:	00 87       	std	Z+8, r16	; 0x08
    25b8:	83 81       	ldd	r24, Z+3	; 0x03
    25ba:	82 60       	ori	r24, 0x02	; 2
    25bc:	83 83       	std	Z+3, r24	; 0x03
    25be:	80 91 31 02 	lds	r24, 0x0231
    25c2:	90 91 32 02 	lds	r25, 0x0232
    25c6:	89 2b       	or	r24, r25
    25c8:	71 f4       	brne	.+28     	; 0x25e6 <fdevopen+0x8c>
    25ca:	f0 93 32 02 	sts	0x0232, r31
    25ce:	e0 93 31 02 	sts	0x0231, r30
    25d2:	80 91 33 02 	lds	r24, 0x0233
    25d6:	90 91 34 02 	lds	r25, 0x0234
    25da:	89 2b       	or	r24, r25
    25dc:	21 f4       	brne	.+8      	; 0x25e6 <fdevopen+0x8c>
    25de:	f0 93 34 02 	sts	0x0234, r31
    25e2:	e0 93 33 02 	sts	0x0233, r30
    25e6:	c9 01       	movw	r24, r18
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	08 95       	ret

000025f2 <printf>:
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	fe 01       	movw	r30, r28
    25fc:	35 96       	adiw	r30, 0x05	; 5
    25fe:	61 91       	ld	r22, Z+
    2600:	71 91       	ld	r23, Z+
    2602:	80 91 31 02 	lds	r24, 0x0231
    2606:	90 91 32 02 	lds	r25, 0x0232
    260a:	af 01       	movw	r20, r30
    260c:	0e 94 47 13 	call	0x268e	; 0x268e <vfprintf>
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <putchar>:
    2616:	60 91 31 02 	lds	r22, 0x0231
    261a:	70 91 32 02 	lds	r23, 0x0232
    261e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2622:	08 95       	ret

00002624 <puts>:
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	8c 01       	movw	r16, r24
    262e:	e0 91 31 02 	lds	r30, 0x0231
    2632:	f0 91 32 02 	lds	r31, 0x0232
    2636:	83 81       	ldd	r24, Z+3	; 0x03
    2638:	81 ff       	sbrs	r24, 1
    263a:	21 c0       	rjmp	.+66     	; 0x267e <puts+0x5a>
    263c:	c0 e0       	ldi	r28, 0x00	; 0
    263e:	d0 e0       	ldi	r29, 0x00	; 0
    2640:	0d c0       	rjmp	.+26     	; 0x265c <puts+0x38>
    2642:	e0 91 31 02 	lds	r30, 0x0231
    2646:	f0 91 32 02 	lds	r31, 0x0232
    264a:	20 85       	ldd	r18, Z+8	; 0x08
    264c:	31 85       	ldd	r19, Z+9	; 0x09
    264e:	bf 01       	movw	r22, r30
    2650:	f9 01       	movw	r30, r18
    2652:	09 95       	icall
    2654:	89 2b       	or	r24, r25
    2656:	11 f0       	breq	.+4      	; 0x265c <puts+0x38>
    2658:	cf ef       	ldi	r28, 0xFF	; 255
    265a:	df ef       	ldi	r29, 0xFF	; 255
    265c:	f8 01       	movw	r30, r16
    265e:	81 91       	ld	r24, Z+
    2660:	8f 01       	movw	r16, r30
    2662:	88 23       	and	r24, r24
    2664:	71 f7       	brne	.-36     	; 0x2642 <puts+0x1e>
    2666:	e0 91 31 02 	lds	r30, 0x0231
    266a:	f0 91 32 02 	lds	r31, 0x0232
    266e:	20 85       	ldd	r18, Z+8	; 0x08
    2670:	31 85       	ldd	r19, Z+9	; 0x09
    2672:	8a e0       	ldi	r24, 0x0A	; 10
    2674:	bf 01       	movw	r22, r30
    2676:	f9 01       	movw	r30, r18
    2678:	09 95       	icall
    267a:	89 2b       	or	r24, r25
    267c:	11 f0       	breq	.+4      	; 0x2682 <puts+0x5e>
    267e:	cf ef       	ldi	r28, 0xFF	; 255
    2680:	df ef       	ldi	r29, 0xFF	; 255
    2682:	ce 01       	movw	r24, r28
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	08 95       	ret

0000268e <vfprintf>:
    268e:	2f 92       	push	r2
    2690:	3f 92       	push	r3
    2692:	4f 92       	push	r4
    2694:	5f 92       	push	r5
    2696:	6f 92       	push	r6
    2698:	7f 92       	push	r7
    269a:	8f 92       	push	r8
    269c:	9f 92       	push	r9
    269e:	af 92       	push	r10
    26a0:	bf 92       	push	r11
    26a2:	cf 92       	push	r12
    26a4:	df 92       	push	r13
    26a6:	ef 92       	push	r14
    26a8:	ff 92       	push	r15
    26aa:	0f 93       	push	r16
    26ac:	1f 93       	push	r17
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	2b 97       	sbiw	r28, 0x0b	; 11
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	3c 01       	movw	r6, r24
    26c4:	2b 01       	movw	r4, r22
    26c6:	5a 01       	movw	r10, r20
    26c8:	fc 01       	movw	r30, r24
    26ca:	17 82       	std	Z+7, r1	; 0x07
    26cc:	16 82       	std	Z+6, r1	; 0x06
    26ce:	83 81       	ldd	r24, Z+3	; 0x03
    26d0:	81 fd       	sbrc	r24, 1
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <vfprintf+0x4c>
    26d4:	6f ef       	ldi	r22, 0xFF	; 255
    26d6:	7f ef       	ldi	r23, 0xFF	; 255
    26d8:	c6 c1       	rjmp	.+908    	; 0x2a66 <vfprintf+0x3d8>
    26da:	9a e0       	ldi	r25, 0x0A	; 10
    26dc:	89 2e       	mov	r8, r25
    26de:	1e 01       	movw	r2, r28
    26e0:	08 94       	sec
    26e2:	21 1c       	adc	r2, r1
    26e4:	31 1c       	adc	r3, r1
    26e6:	f3 01       	movw	r30, r6
    26e8:	23 81       	ldd	r18, Z+3	; 0x03
    26ea:	f2 01       	movw	r30, r4
    26ec:	23 fd       	sbrc	r18, 3
    26ee:	85 91       	lpm	r24, Z+
    26f0:	23 ff       	sbrs	r18, 3
    26f2:	81 91       	ld	r24, Z+
    26f4:	2f 01       	movw	r4, r30
    26f6:	88 23       	and	r24, r24
    26f8:	09 f4       	brne	.+2      	; 0x26fc <vfprintf+0x6e>
    26fa:	b2 c1       	rjmp	.+868    	; 0x2a60 <vfprintf+0x3d2>
    26fc:	85 32       	cpi	r24, 0x25	; 37
    26fe:	39 f4       	brne	.+14     	; 0x270e <vfprintf+0x80>
    2700:	23 fd       	sbrc	r18, 3
    2702:	85 91       	lpm	r24, Z+
    2704:	23 ff       	sbrs	r18, 3
    2706:	81 91       	ld	r24, Z+
    2708:	2f 01       	movw	r4, r30
    270a:	85 32       	cpi	r24, 0x25	; 37
    270c:	29 f4       	brne	.+10     	; 0x2718 <vfprintf+0x8a>
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	b3 01       	movw	r22, r6
    2712:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2716:	e7 cf       	rjmp	.-50     	; 0x26e6 <vfprintf+0x58>
    2718:	98 2f       	mov	r25, r24
    271a:	ff 24       	eor	r15, r15
    271c:	ee 24       	eor	r14, r14
    271e:	99 24       	eor	r9, r9
    2720:	ff e1       	ldi	r31, 0x1F	; 31
    2722:	ff 15       	cp	r31, r15
    2724:	d0 f0       	brcs	.+52     	; 0x275a <vfprintf+0xcc>
    2726:	9b 32       	cpi	r25, 0x2B	; 43
    2728:	69 f0       	breq	.+26     	; 0x2744 <vfprintf+0xb6>
    272a:	9c 32       	cpi	r25, 0x2C	; 44
    272c:	28 f4       	brcc	.+10     	; 0x2738 <vfprintf+0xaa>
    272e:	90 32       	cpi	r25, 0x20	; 32
    2730:	59 f0       	breq	.+22     	; 0x2748 <vfprintf+0xba>
    2732:	93 32       	cpi	r25, 0x23	; 35
    2734:	91 f4       	brne	.+36     	; 0x275a <vfprintf+0xcc>
    2736:	0e c0       	rjmp	.+28     	; 0x2754 <vfprintf+0xc6>
    2738:	9d 32       	cpi	r25, 0x2D	; 45
    273a:	49 f0       	breq	.+18     	; 0x274e <vfprintf+0xc0>
    273c:	90 33       	cpi	r25, 0x30	; 48
    273e:	69 f4       	brne	.+26     	; 0x275a <vfprintf+0xcc>
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	24 c0       	rjmp	.+72     	; 0x278c <vfprintf+0xfe>
    2744:	52 e0       	ldi	r21, 0x02	; 2
    2746:	f5 2a       	or	r15, r21
    2748:	84 e0       	ldi	r24, 0x04	; 4
    274a:	f8 2a       	or	r15, r24
    274c:	28 c0       	rjmp	.+80     	; 0x279e <vfprintf+0x110>
    274e:	98 e0       	ldi	r25, 0x08	; 8
    2750:	f9 2a       	or	r15, r25
    2752:	25 c0       	rjmp	.+74     	; 0x279e <vfprintf+0x110>
    2754:	e0 e1       	ldi	r30, 0x10	; 16
    2756:	fe 2a       	or	r15, r30
    2758:	22 c0       	rjmp	.+68     	; 0x279e <vfprintf+0x110>
    275a:	f7 fc       	sbrc	r15, 7
    275c:	29 c0       	rjmp	.+82     	; 0x27b0 <vfprintf+0x122>
    275e:	89 2f       	mov	r24, r25
    2760:	80 53       	subi	r24, 0x30	; 48
    2762:	8a 30       	cpi	r24, 0x0A	; 10
    2764:	70 f4       	brcc	.+28     	; 0x2782 <vfprintf+0xf4>
    2766:	f6 fe       	sbrs	r15, 6
    2768:	05 c0       	rjmp	.+10     	; 0x2774 <vfprintf+0xe6>
    276a:	98 9c       	mul	r9, r8
    276c:	90 2c       	mov	r9, r0
    276e:	11 24       	eor	r1, r1
    2770:	98 0e       	add	r9, r24
    2772:	15 c0       	rjmp	.+42     	; 0x279e <vfprintf+0x110>
    2774:	e8 9c       	mul	r14, r8
    2776:	e0 2c       	mov	r14, r0
    2778:	11 24       	eor	r1, r1
    277a:	e8 0e       	add	r14, r24
    277c:	f0 e2       	ldi	r31, 0x20	; 32
    277e:	ff 2a       	or	r15, r31
    2780:	0e c0       	rjmp	.+28     	; 0x279e <vfprintf+0x110>
    2782:	9e 32       	cpi	r25, 0x2E	; 46
    2784:	29 f4       	brne	.+10     	; 0x2790 <vfprintf+0x102>
    2786:	f6 fc       	sbrc	r15, 6
    2788:	6b c1       	rjmp	.+726    	; 0x2a60 <vfprintf+0x3d2>
    278a:	40 e4       	ldi	r20, 0x40	; 64
    278c:	f4 2a       	or	r15, r20
    278e:	07 c0       	rjmp	.+14     	; 0x279e <vfprintf+0x110>
    2790:	9c 36       	cpi	r25, 0x6C	; 108
    2792:	19 f4       	brne	.+6      	; 0x279a <vfprintf+0x10c>
    2794:	50 e8       	ldi	r21, 0x80	; 128
    2796:	f5 2a       	or	r15, r21
    2798:	02 c0       	rjmp	.+4      	; 0x279e <vfprintf+0x110>
    279a:	98 36       	cpi	r25, 0x68	; 104
    279c:	49 f4       	brne	.+18     	; 0x27b0 <vfprintf+0x122>
    279e:	f2 01       	movw	r30, r4
    27a0:	23 fd       	sbrc	r18, 3
    27a2:	95 91       	lpm	r25, Z+
    27a4:	23 ff       	sbrs	r18, 3
    27a6:	91 91       	ld	r25, Z+
    27a8:	2f 01       	movw	r4, r30
    27aa:	99 23       	and	r25, r25
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <vfprintf+0x122>
    27ae:	b8 cf       	rjmp	.-144    	; 0x2720 <vfprintf+0x92>
    27b0:	89 2f       	mov	r24, r25
    27b2:	85 54       	subi	r24, 0x45	; 69
    27b4:	83 30       	cpi	r24, 0x03	; 3
    27b6:	18 f0       	brcs	.+6      	; 0x27be <vfprintf+0x130>
    27b8:	80 52       	subi	r24, 0x20	; 32
    27ba:	83 30       	cpi	r24, 0x03	; 3
    27bc:	38 f4       	brcc	.+14     	; 0x27cc <vfprintf+0x13e>
    27be:	44 e0       	ldi	r20, 0x04	; 4
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	a4 0e       	add	r10, r20
    27c4:	b5 1e       	adc	r11, r21
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	59 83       	std	Y+1, r21	; 0x01
    27ca:	0f c0       	rjmp	.+30     	; 0x27ea <vfprintf+0x15c>
    27cc:	93 36       	cpi	r25, 0x63	; 99
    27ce:	31 f0       	breq	.+12     	; 0x27dc <vfprintf+0x14e>
    27d0:	93 37       	cpi	r25, 0x73	; 115
    27d2:	79 f0       	breq	.+30     	; 0x27f2 <vfprintf+0x164>
    27d4:	93 35       	cpi	r25, 0x53	; 83
    27d6:	09 f0       	breq	.+2      	; 0x27da <vfprintf+0x14c>
    27d8:	56 c0       	rjmp	.+172    	; 0x2886 <vfprintf+0x1f8>
    27da:	20 c0       	rjmp	.+64     	; 0x281c <vfprintf+0x18e>
    27dc:	f5 01       	movw	r30, r10
    27de:	80 81       	ld	r24, Z
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	42 e0       	ldi	r20, 0x02	; 2
    27e4:	50 e0       	ldi	r21, 0x00	; 0
    27e6:	a4 0e       	add	r10, r20
    27e8:	b5 1e       	adc	r11, r21
    27ea:	61 01       	movw	r12, r2
    27ec:	01 e0       	ldi	r16, 0x01	; 1
    27ee:	10 e0       	ldi	r17, 0x00	; 0
    27f0:	12 c0       	rjmp	.+36     	; 0x2816 <vfprintf+0x188>
    27f2:	f5 01       	movw	r30, r10
    27f4:	c0 80       	ld	r12, Z
    27f6:	d1 80       	ldd	r13, Z+1	; 0x01
    27f8:	f6 fc       	sbrc	r15, 6
    27fa:	03 c0       	rjmp	.+6      	; 0x2802 <vfprintf+0x174>
    27fc:	6f ef       	ldi	r22, 0xFF	; 255
    27fe:	7f ef       	ldi	r23, 0xFF	; 255
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <vfprintf+0x178>
    2802:	69 2d       	mov	r22, r9
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	42 e0       	ldi	r20, 0x02	; 2
    2808:	50 e0       	ldi	r21, 0x00	; 0
    280a:	a4 0e       	add	r10, r20
    280c:	b5 1e       	adc	r11, r21
    280e:	c6 01       	movw	r24, r12
    2810:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strnlen>
    2814:	8c 01       	movw	r16, r24
    2816:	5f e7       	ldi	r21, 0x7F	; 127
    2818:	f5 22       	and	r15, r21
    281a:	14 c0       	rjmp	.+40     	; 0x2844 <vfprintf+0x1b6>
    281c:	f5 01       	movw	r30, r10
    281e:	c0 80       	ld	r12, Z
    2820:	d1 80       	ldd	r13, Z+1	; 0x01
    2822:	f6 fc       	sbrc	r15, 6
    2824:	03 c0       	rjmp	.+6      	; 0x282c <vfprintf+0x19e>
    2826:	6f ef       	ldi	r22, 0xFF	; 255
    2828:	7f ef       	ldi	r23, 0xFF	; 255
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <vfprintf+0x1a2>
    282c:	69 2d       	mov	r22, r9
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	42 e0       	ldi	r20, 0x02	; 2
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	a4 0e       	add	r10, r20
    2836:	b5 1e       	adc	r11, r21
    2838:	c6 01       	movw	r24, r12
    283a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <strnlen_P>
    283e:	8c 01       	movw	r16, r24
    2840:	50 e8       	ldi	r21, 0x80	; 128
    2842:	f5 2a       	or	r15, r21
    2844:	f3 fe       	sbrs	r15, 3
    2846:	07 c0       	rjmp	.+14     	; 0x2856 <vfprintf+0x1c8>
    2848:	1a c0       	rjmp	.+52     	; 0x287e <vfprintf+0x1f0>
    284a:	80 e2       	ldi	r24, 0x20	; 32
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	b3 01       	movw	r22, r6
    2850:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2854:	ea 94       	dec	r14
    2856:	8e 2d       	mov	r24, r14
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	08 17       	cp	r16, r24
    285c:	19 07       	cpc	r17, r25
    285e:	a8 f3       	brcs	.-22     	; 0x284a <vfprintf+0x1bc>
    2860:	0e c0       	rjmp	.+28     	; 0x287e <vfprintf+0x1f0>
    2862:	f6 01       	movw	r30, r12
    2864:	f7 fc       	sbrc	r15, 7
    2866:	85 91       	lpm	r24, Z+
    2868:	f7 fe       	sbrs	r15, 7
    286a:	81 91       	ld	r24, Z+
    286c:	6f 01       	movw	r12, r30
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	b3 01       	movw	r22, r6
    2872:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2876:	e1 10       	cpse	r14, r1
    2878:	ea 94       	dec	r14
    287a:	01 50       	subi	r16, 0x01	; 1
    287c:	10 40       	sbci	r17, 0x00	; 0
    287e:	01 15       	cp	r16, r1
    2880:	11 05       	cpc	r17, r1
    2882:	79 f7       	brne	.-34     	; 0x2862 <vfprintf+0x1d4>
    2884:	ea c0       	rjmp	.+468    	; 0x2a5a <vfprintf+0x3cc>
    2886:	94 36       	cpi	r25, 0x64	; 100
    2888:	11 f0       	breq	.+4      	; 0x288e <vfprintf+0x200>
    288a:	99 36       	cpi	r25, 0x69	; 105
    288c:	69 f5       	brne	.+90     	; 0x28e8 <vfprintf+0x25a>
    288e:	f7 fe       	sbrs	r15, 7
    2890:	08 c0       	rjmp	.+16     	; 0x28a2 <vfprintf+0x214>
    2892:	f5 01       	movw	r30, r10
    2894:	20 81       	ld	r18, Z
    2896:	31 81       	ldd	r19, Z+1	; 0x01
    2898:	42 81       	ldd	r20, Z+2	; 0x02
    289a:	53 81       	ldd	r21, Z+3	; 0x03
    289c:	84 e0       	ldi	r24, 0x04	; 4
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0a c0       	rjmp	.+20     	; 0x28b6 <vfprintf+0x228>
    28a2:	f5 01       	movw	r30, r10
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	9c 01       	movw	r18, r24
    28aa:	44 27       	eor	r20, r20
    28ac:	37 fd       	sbrc	r19, 7
    28ae:	40 95       	com	r20
    28b0:	54 2f       	mov	r21, r20
    28b2:	82 e0       	ldi	r24, 0x02	; 2
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a8 0e       	add	r10, r24
    28b8:	b9 1e       	adc	r11, r25
    28ba:	9f e6       	ldi	r25, 0x6F	; 111
    28bc:	f9 22       	and	r15, r25
    28be:	57 ff       	sbrs	r21, 7
    28c0:	09 c0       	rjmp	.+18     	; 0x28d4 <vfprintf+0x246>
    28c2:	50 95       	com	r21
    28c4:	40 95       	com	r20
    28c6:	30 95       	com	r19
    28c8:	21 95       	neg	r18
    28ca:	3f 4f       	sbci	r19, 0xFF	; 255
    28cc:	4f 4f       	sbci	r20, 0xFF	; 255
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	e0 e8       	ldi	r30, 0x80	; 128
    28d2:	fe 2a       	or	r15, r30
    28d4:	ca 01       	movw	r24, r20
    28d6:	b9 01       	movw	r22, r18
    28d8:	a1 01       	movw	r20, r2
    28da:	2a e0       	ldi	r18, 0x0A	; 10
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__ultoa_invert>
    28e2:	d8 2e       	mov	r13, r24
    28e4:	d2 18       	sub	r13, r2
    28e6:	40 c0       	rjmp	.+128    	; 0x2968 <vfprintf+0x2da>
    28e8:	95 37       	cpi	r25, 0x75	; 117
    28ea:	29 f4       	brne	.+10     	; 0x28f6 <vfprintf+0x268>
    28ec:	1f 2d       	mov	r17, r15
    28ee:	1f 7e       	andi	r17, 0xEF	; 239
    28f0:	2a e0       	ldi	r18, 0x0A	; 10
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	1d c0       	rjmp	.+58     	; 0x2930 <vfprintf+0x2a2>
    28f6:	1f 2d       	mov	r17, r15
    28f8:	19 7f       	andi	r17, 0xF9	; 249
    28fa:	9f 36       	cpi	r25, 0x6F	; 111
    28fc:	61 f0       	breq	.+24     	; 0x2916 <vfprintf+0x288>
    28fe:	90 37       	cpi	r25, 0x70	; 112
    2900:	20 f4       	brcc	.+8      	; 0x290a <vfprintf+0x27c>
    2902:	98 35       	cpi	r25, 0x58	; 88
    2904:	09 f0       	breq	.+2      	; 0x2908 <vfprintf+0x27a>
    2906:	ac c0       	rjmp	.+344    	; 0x2a60 <vfprintf+0x3d2>
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <vfprintf+0x29a>
    290a:	90 37       	cpi	r25, 0x70	; 112
    290c:	39 f0       	breq	.+14     	; 0x291c <vfprintf+0x28e>
    290e:	98 37       	cpi	r25, 0x78	; 120
    2910:	09 f0       	breq	.+2      	; 0x2914 <vfprintf+0x286>
    2912:	a6 c0       	rjmp	.+332    	; 0x2a60 <vfprintf+0x3d2>
    2914:	04 c0       	rjmp	.+8      	; 0x291e <vfprintf+0x290>
    2916:	28 e0       	ldi	r18, 0x08	; 8
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	0a c0       	rjmp	.+20     	; 0x2930 <vfprintf+0x2a2>
    291c:	10 61       	ori	r17, 0x10	; 16
    291e:	14 fd       	sbrc	r17, 4
    2920:	14 60       	ori	r17, 0x04	; 4
    2922:	20 e1       	ldi	r18, 0x10	; 16
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	04 c0       	rjmp	.+8      	; 0x2930 <vfprintf+0x2a2>
    2928:	14 fd       	sbrc	r17, 4
    292a:	16 60       	ori	r17, 0x06	; 6
    292c:	20 e1       	ldi	r18, 0x10	; 16
    292e:	32 e0       	ldi	r19, 0x02	; 2
    2930:	17 ff       	sbrs	r17, 7
    2932:	08 c0       	rjmp	.+16     	; 0x2944 <vfprintf+0x2b6>
    2934:	f5 01       	movw	r30, r10
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	44 e0       	ldi	r20, 0x04	; 4
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	08 c0       	rjmp	.+16     	; 0x2954 <vfprintf+0x2c6>
    2944:	f5 01       	movw	r30, r10
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	bc 01       	movw	r22, r24
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	42 e0       	ldi	r20, 0x02	; 2
    2952:	50 e0       	ldi	r21, 0x00	; 0
    2954:	a4 0e       	add	r10, r20
    2956:	b5 1e       	adc	r11, r21
    2958:	a1 01       	movw	r20, r2
    295a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__ultoa_invert>
    295e:	d8 2e       	mov	r13, r24
    2960:	d2 18       	sub	r13, r2
    2962:	8f e7       	ldi	r24, 0x7F	; 127
    2964:	f8 2e       	mov	r15, r24
    2966:	f1 22       	and	r15, r17
    2968:	f6 fe       	sbrs	r15, 6
    296a:	0b c0       	rjmp	.+22     	; 0x2982 <vfprintf+0x2f4>
    296c:	5e ef       	ldi	r21, 0xFE	; 254
    296e:	f5 22       	and	r15, r21
    2970:	d9 14       	cp	r13, r9
    2972:	38 f4       	brcc	.+14     	; 0x2982 <vfprintf+0x2f4>
    2974:	f4 fe       	sbrs	r15, 4
    2976:	07 c0       	rjmp	.+14     	; 0x2986 <vfprintf+0x2f8>
    2978:	f2 fc       	sbrc	r15, 2
    297a:	05 c0       	rjmp	.+10     	; 0x2986 <vfprintf+0x2f8>
    297c:	8f ee       	ldi	r24, 0xEF	; 239
    297e:	f8 22       	and	r15, r24
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <vfprintf+0x2f8>
    2982:	1d 2d       	mov	r17, r13
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <vfprintf+0x2fa>
    2986:	19 2d       	mov	r17, r9
    2988:	f4 fe       	sbrs	r15, 4
    298a:	0d c0       	rjmp	.+26     	; 0x29a6 <vfprintf+0x318>
    298c:	fe 01       	movw	r30, r28
    298e:	ed 0d       	add	r30, r13
    2990:	f1 1d       	adc	r31, r1
    2992:	80 81       	ld	r24, Z
    2994:	80 33       	cpi	r24, 0x30	; 48
    2996:	19 f4       	brne	.+6      	; 0x299e <vfprintf+0x310>
    2998:	99 ee       	ldi	r25, 0xE9	; 233
    299a:	f9 22       	and	r15, r25
    299c:	08 c0       	rjmp	.+16     	; 0x29ae <vfprintf+0x320>
    299e:	1f 5f       	subi	r17, 0xFF	; 255
    29a0:	f2 fe       	sbrs	r15, 2
    29a2:	05 c0       	rjmp	.+10     	; 0x29ae <vfprintf+0x320>
    29a4:	03 c0       	rjmp	.+6      	; 0x29ac <vfprintf+0x31e>
    29a6:	8f 2d       	mov	r24, r15
    29a8:	86 78       	andi	r24, 0x86	; 134
    29aa:	09 f0       	breq	.+2      	; 0x29ae <vfprintf+0x320>
    29ac:	1f 5f       	subi	r17, 0xFF	; 255
    29ae:	0f 2d       	mov	r16, r15
    29b0:	f3 fc       	sbrc	r15, 3
    29b2:	14 c0       	rjmp	.+40     	; 0x29dc <vfprintf+0x34e>
    29b4:	f0 fe       	sbrs	r15, 0
    29b6:	0f c0       	rjmp	.+30     	; 0x29d6 <vfprintf+0x348>
    29b8:	1e 15       	cp	r17, r14
    29ba:	10 f0       	brcs	.+4      	; 0x29c0 <vfprintf+0x332>
    29bc:	9d 2c       	mov	r9, r13
    29be:	0b c0       	rjmp	.+22     	; 0x29d6 <vfprintf+0x348>
    29c0:	9d 2c       	mov	r9, r13
    29c2:	9e 0c       	add	r9, r14
    29c4:	91 1a       	sub	r9, r17
    29c6:	1e 2d       	mov	r17, r14
    29c8:	06 c0       	rjmp	.+12     	; 0x29d6 <vfprintf+0x348>
    29ca:	80 e2       	ldi	r24, 0x20	; 32
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	b3 01       	movw	r22, r6
    29d0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    29d4:	1f 5f       	subi	r17, 0xFF	; 255
    29d6:	1e 15       	cp	r17, r14
    29d8:	c0 f3       	brcs	.-16     	; 0x29ca <vfprintf+0x33c>
    29da:	04 c0       	rjmp	.+8      	; 0x29e4 <vfprintf+0x356>
    29dc:	1e 15       	cp	r17, r14
    29de:	10 f4       	brcc	.+4      	; 0x29e4 <vfprintf+0x356>
    29e0:	e1 1a       	sub	r14, r17
    29e2:	01 c0       	rjmp	.+2      	; 0x29e6 <vfprintf+0x358>
    29e4:	ee 24       	eor	r14, r14
    29e6:	04 ff       	sbrs	r16, 4
    29e8:	0f c0       	rjmp	.+30     	; 0x2a08 <vfprintf+0x37a>
    29ea:	80 e3       	ldi	r24, 0x30	; 48
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	b3 01       	movw	r22, r6
    29f0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    29f4:	02 ff       	sbrs	r16, 2
    29f6:	1d c0       	rjmp	.+58     	; 0x2a32 <vfprintf+0x3a4>
    29f8:	01 fd       	sbrc	r16, 1
    29fa:	03 c0       	rjmp	.+6      	; 0x2a02 <vfprintf+0x374>
    29fc:	88 e7       	ldi	r24, 0x78	; 120
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e c0       	rjmp	.+28     	; 0x2a1e <vfprintf+0x390>
    2a02:	88 e5       	ldi	r24, 0x58	; 88
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0b c0       	rjmp	.+22     	; 0x2a1e <vfprintf+0x390>
    2a08:	80 2f       	mov	r24, r16
    2a0a:	86 78       	andi	r24, 0x86	; 134
    2a0c:	91 f0       	breq	.+36     	; 0x2a32 <vfprintf+0x3a4>
    2a0e:	01 ff       	sbrs	r16, 1
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <vfprintf+0x388>
    2a12:	8b e2       	ldi	r24, 0x2B	; 43
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <vfprintf+0x38a>
    2a16:	80 e2       	ldi	r24, 0x20	; 32
    2a18:	f7 fc       	sbrc	r15, 7
    2a1a:	8d e2       	ldi	r24, 0x2D	; 45
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	b3 01       	movw	r22, r6
    2a20:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2a24:	06 c0       	rjmp	.+12     	; 0x2a32 <vfprintf+0x3a4>
    2a26:	80 e3       	ldi	r24, 0x30	; 48
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	b3 01       	movw	r22, r6
    2a2c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2a30:	9a 94       	dec	r9
    2a32:	d9 14       	cp	r13, r9
    2a34:	c0 f3       	brcs	.-16     	; 0x2a26 <vfprintf+0x398>
    2a36:	da 94       	dec	r13
    2a38:	f1 01       	movw	r30, r2
    2a3a:	ed 0d       	add	r30, r13
    2a3c:	f1 1d       	adc	r31, r1
    2a3e:	80 81       	ld	r24, Z
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	b3 01       	movw	r22, r6
    2a44:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2a48:	dd 20       	and	r13, r13
    2a4a:	a9 f7       	brne	.-22     	; 0x2a36 <vfprintf+0x3a8>
    2a4c:	06 c0       	rjmp	.+12     	; 0x2a5a <vfprintf+0x3cc>
    2a4e:	80 e2       	ldi	r24, 0x20	; 32
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	b3 01       	movw	r22, r6
    2a54:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2a58:	ea 94       	dec	r14
    2a5a:	ee 20       	and	r14, r14
    2a5c:	c1 f7       	brne	.-16     	; 0x2a4e <vfprintf+0x3c0>
    2a5e:	43 ce       	rjmp	.-890    	; 0x26e6 <vfprintf+0x58>
    2a60:	f3 01       	movw	r30, r6
    2a62:	66 81       	ldd	r22, Z+6	; 0x06
    2a64:	77 81       	ldd	r23, Z+7	; 0x07
    2a66:	cb 01       	movw	r24, r22
    2a68:	2b 96       	adiw	r28, 0x0b	; 11
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	bf 90       	pop	r11
    2a86:	af 90       	pop	r10
    2a88:	9f 90       	pop	r9
    2a8a:	8f 90       	pop	r8
    2a8c:	7f 90       	pop	r7
    2a8e:	6f 90       	pop	r6
    2a90:	5f 90       	pop	r5
    2a92:	4f 90       	pop	r4
    2a94:	3f 90       	pop	r3
    2a96:	2f 90       	pop	r2
    2a98:	08 95       	ret

00002a9a <calloc>:
    2a9a:	0f 93       	push	r16
    2a9c:	1f 93       	push	r17
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	68 9f       	mul	r22, r24
    2aa4:	80 01       	movw	r16, r0
    2aa6:	69 9f       	mul	r22, r25
    2aa8:	10 0d       	add	r17, r0
    2aaa:	78 9f       	mul	r23, r24
    2aac:	10 0d       	add	r17, r0
    2aae:	11 24       	eor	r1, r1
    2ab0:	c8 01       	movw	r24, r16
    2ab2:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <malloc>
    2ab6:	ec 01       	movw	r28, r24
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	29 f0       	breq	.+10     	; 0x2ac6 <calloc+0x2c>
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	70 e0       	ldi	r23, 0x00	; 0
    2ac0:	a8 01       	movw	r20, r16
    2ac2:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <memset>
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	1f 91       	pop	r17
    2ace:	0f 91       	pop	r16
    2ad0:	08 95       	ret

00002ad2 <malloc>:
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	82 30       	cpi	r24, 0x02	; 2
    2ada:	91 05       	cpc	r25, r1
    2adc:	10 f4       	brcc	.+4      	; 0x2ae2 <malloc+0x10>
    2ade:	62 e0       	ldi	r22, 0x02	; 2
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	a0 91 37 02 	lds	r26, 0x0237
    2ae6:	b0 91 38 02 	lds	r27, 0x0238
    2aea:	ed 01       	movw	r28, r26
    2aec:	e0 e0       	ldi	r30, 0x00	; 0
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	21 c0       	rjmp	.+66     	; 0x2b38 <malloc+0x66>
    2af6:	88 81       	ld	r24, Y
    2af8:	99 81       	ldd	r25, Y+1	; 0x01
    2afa:	86 17       	cp	r24, r22
    2afc:	97 07       	cpc	r25, r23
    2afe:	69 f4       	brne	.+26     	; 0x2b1a <malloc+0x48>
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	9b 81       	ldd	r25, Y+3	; 0x03
    2b04:	30 97       	sbiw	r30, 0x00	; 0
    2b06:	19 f0       	breq	.+6      	; 0x2b0e <malloc+0x3c>
    2b08:	93 83       	std	Z+3, r25	; 0x03
    2b0a:	82 83       	std	Z+2, r24	; 0x02
    2b0c:	04 c0       	rjmp	.+8      	; 0x2b16 <malloc+0x44>
    2b0e:	90 93 38 02 	sts	0x0238, r25
    2b12:	80 93 37 02 	sts	0x0237, r24
    2b16:	fe 01       	movw	r30, r28
    2b18:	34 c0       	rjmp	.+104    	; 0x2b82 <malloc+0xb0>
    2b1a:	68 17       	cp	r22, r24
    2b1c:	79 07       	cpc	r23, r25
    2b1e:	38 f4       	brcc	.+14     	; 0x2b2e <malloc+0x5c>
    2b20:	41 15       	cp	r20, r1
    2b22:	51 05       	cpc	r21, r1
    2b24:	19 f0       	breq	.+6      	; 0x2b2c <malloc+0x5a>
    2b26:	84 17       	cp	r24, r20
    2b28:	95 07       	cpc	r25, r21
    2b2a:	08 f4       	brcc	.+2      	; 0x2b2e <malloc+0x5c>
    2b2c:	ac 01       	movw	r20, r24
    2b2e:	fe 01       	movw	r30, r28
    2b30:	8a 81       	ldd	r24, Y+2	; 0x02
    2b32:	9b 81       	ldd	r25, Y+3	; 0x03
    2b34:	9c 01       	movw	r18, r24
    2b36:	e9 01       	movw	r28, r18
    2b38:	20 97       	sbiw	r28, 0x00	; 0
    2b3a:	e9 f6       	brne	.-70     	; 0x2af6 <malloc+0x24>
    2b3c:	41 15       	cp	r20, r1
    2b3e:	51 05       	cpc	r21, r1
    2b40:	a9 f1       	breq	.+106    	; 0x2bac <malloc+0xda>
    2b42:	ca 01       	movw	r24, r20
    2b44:	86 1b       	sub	r24, r22
    2b46:	97 0b       	sbc	r25, r23
    2b48:	04 97       	sbiw	r24, 0x04	; 4
    2b4a:	08 f4       	brcc	.+2      	; 0x2b4e <malloc+0x7c>
    2b4c:	ba 01       	movw	r22, r20
    2b4e:	e0 e0       	ldi	r30, 0x00	; 0
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	2a c0       	rjmp	.+84     	; 0x2ba8 <malloc+0xd6>
    2b54:	8d 91       	ld	r24, X+
    2b56:	9c 91       	ld	r25, X
    2b58:	11 97       	sbiw	r26, 0x01	; 1
    2b5a:	84 17       	cp	r24, r20
    2b5c:	95 07       	cpc	r25, r21
    2b5e:	f9 f4       	brne	.+62     	; 0x2b9e <malloc+0xcc>
    2b60:	64 17       	cp	r22, r20
    2b62:	75 07       	cpc	r23, r21
    2b64:	81 f4       	brne	.+32     	; 0x2b86 <malloc+0xb4>
    2b66:	12 96       	adiw	r26, 0x02	; 2
    2b68:	8d 91       	ld	r24, X+
    2b6a:	9c 91       	ld	r25, X
    2b6c:	13 97       	sbiw	r26, 0x03	; 3
    2b6e:	30 97       	sbiw	r30, 0x00	; 0
    2b70:	19 f0       	breq	.+6      	; 0x2b78 <malloc+0xa6>
    2b72:	93 83       	std	Z+3, r25	; 0x03
    2b74:	82 83       	std	Z+2, r24	; 0x02
    2b76:	04 c0       	rjmp	.+8      	; 0x2b80 <malloc+0xae>
    2b78:	90 93 38 02 	sts	0x0238, r25
    2b7c:	80 93 37 02 	sts	0x0237, r24
    2b80:	fd 01       	movw	r30, r26
    2b82:	32 96       	adiw	r30, 0x02	; 2
    2b84:	4f c0       	rjmp	.+158    	; 0x2c24 <malloc+0x152>
    2b86:	ca 01       	movw	r24, r20
    2b88:	86 1b       	sub	r24, r22
    2b8a:	97 0b       	sbc	r25, r23
    2b8c:	fd 01       	movw	r30, r26
    2b8e:	e8 0f       	add	r30, r24
    2b90:	f9 1f       	adc	r31, r25
    2b92:	61 93       	st	Z+, r22
    2b94:	71 93       	st	Z+, r23
    2b96:	02 97       	sbiw	r24, 0x02	; 2
    2b98:	8d 93       	st	X+, r24
    2b9a:	9c 93       	st	X, r25
    2b9c:	43 c0       	rjmp	.+134    	; 0x2c24 <malloc+0x152>
    2b9e:	fd 01       	movw	r30, r26
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	9c 01       	movw	r18, r24
    2ba6:	d9 01       	movw	r26, r18
    2ba8:	10 97       	sbiw	r26, 0x00	; 0
    2baa:	a1 f6       	brne	.-88     	; 0x2b54 <malloc+0x82>
    2bac:	80 91 35 02 	lds	r24, 0x0235
    2bb0:	90 91 36 02 	lds	r25, 0x0236
    2bb4:	89 2b       	or	r24, r25
    2bb6:	41 f4       	brne	.+16     	; 0x2bc8 <malloc+0xf6>
    2bb8:	80 91 0e 02 	lds	r24, 0x020E
    2bbc:	90 91 0f 02 	lds	r25, 0x020F
    2bc0:	90 93 36 02 	sts	0x0236, r25
    2bc4:	80 93 35 02 	sts	0x0235, r24
    2bc8:	40 91 10 02 	lds	r20, 0x0210
    2bcc:	50 91 11 02 	lds	r21, 0x0211
    2bd0:	41 15       	cp	r20, r1
    2bd2:	51 05       	cpc	r21, r1
    2bd4:	41 f4       	brne	.+16     	; 0x2be6 <malloc+0x114>
    2bd6:	4d b7       	in	r20, 0x3d	; 61
    2bd8:	5e b7       	in	r21, 0x3e	; 62
    2bda:	80 91 0c 02 	lds	r24, 0x020C
    2bde:	90 91 0d 02 	lds	r25, 0x020D
    2be2:	48 1b       	sub	r20, r24
    2be4:	59 0b       	sbc	r21, r25
    2be6:	20 91 35 02 	lds	r18, 0x0235
    2bea:	30 91 36 02 	lds	r19, 0x0236
    2bee:	24 17       	cp	r18, r20
    2bf0:	35 07       	cpc	r19, r21
    2bf2:	b0 f4       	brcc	.+44     	; 0x2c20 <malloc+0x14e>
    2bf4:	ca 01       	movw	r24, r20
    2bf6:	82 1b       	sub	r24, r18
    2bf8:	93 0b       	sbc	r25, r19
    2bfa:	86 17       	cp	r24, r22
    2bfc:	97 07       	cpc	r25, r23
    2bfe:	80 f0       	brcs	.+32     	; 0x2c20 <malloc+0x14e>
    2c00:	ab 01       	movw	r20, r22
    2c02:	4e 5f       	subi	r20, 0xFE	; 254
    2c04:	5f 4f       	sbci	r21, 0xFF	; 255
    2c06:	84 17       	cp	r24, r20
    2c08:	95 07       	cpc	r25, r21
    2c0a:	50 f0       	brcs	.+20     	; 0x2c20 <malloc+0x14e>
    2c0c:	42 0f       	add	r20, r18
    2c0e:	53 1f       	adc	r21, r19
    2c10:	50 93 36 02 	sts	0x0236, r21
    2c14:	40 93 35 02 	sts	0x0235, r20
    2c18:	f9 01       	movw	r30, r18
    2c1a:	61 93       	st	Z+, r22
    2c1c:	71 93       	st	Z+, r23
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <malloc+0x152>
    2c20:	e0 e0       	ldi	r30, 0x00	; 0
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	cf 01       	movw	r24, r30
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	08 95       	ret

00002c2c <free>:
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <free+0xa>
    2c34:	50 c0       	rjmp	.+160    	; 0x2cd6 <free+0xaa>
    2c36:	ec 01       	movw	r28, r24
    2c38:	22 97       	sbiw	r28, 0x02	; 2
    2c3a:	1b 82       	std	Y+3, r1	; 0x03
    2c3c:	1a 82       	std	Y+2, r1	; 0x02
    2c3e:	a0 91 37 02 	lds	r26, 0x0237
    2c42:	b0 91 38 02 	lds	r27, 0x0238
    2c46:	10 97       	sbiw	r26, 0x00	; 0
    2c48:	09 f1       	breq	.+66     	; 0x2c8c <free+0x60>
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	ac 17       	cp	r26, r28
    2c50:	bd 07       	cpc	r27, r29
    2c52:	08 f1       	brcs	.+66     	; 0x2c96 <free+0x6a>
    2c54:	bb 83       	std	Y+3, r27	; 0x03
    2c56:	aa 83       	std	Y+2, r26	; 0x02
    2c58:	fe 01       	movw	r30, r28
    2c5a:	21 91       	ld	r18, Z+
    2c5c:	31 91       	ld	r19, Z+
    2c5e:	e2 0f       	add	r30, r18
    2c60:	f3 1f       	adc	r31, r19
    2c62:	ae 17       	cp	r26, r30
    2c64:	bf 07       	cpc	r27, r31
    2c66:	79 f4       	brne	.+30     	; 0x2c86 <free+0x5a>
    2c68:	8d 91       	ld	r24, X+
    2c6a:	9c 91       	ld	r25, X
    2c6c:	11 97       	sbiw	r26, 0x01	; 1
    2c6e:	28 0f       	add	r18, r24
    2c70:	39 1f       	adc	r19, r25
    2c72:	2e 5f       	subi	r18, 0xFE	; 254
    2c74:	3f 4f       	sbci	r19, 0xFF	; 255
    2c76:	39 83       	std	Y+1, r19	; 0x01
    2c78:	28 83       	st	Y, r18
    2c7a:	12 96       	adiw	r26, 0x02	; 2
    2c7c:	8d 91       	ld	r24, X+
    2c7e:	9c 91       	ld	r25, X
    2c80:	13 97       	sbiw	r26, 0x03	; 3
    2c82:	9b 83       	std	Y+3, r25	; 0x03
    2c84:	8a 83       	std	Y+2, r24	; 0x02
    2c86:	41 15       	cp	r20, r1
    2c88:	51 05       	cpc	r21, r1
    2c8a:	71 f4       	brne	.+28     	; 0x2ca8 <free+0x7c>
    2c8c:	d0 93 38 02 	sts	0x0238, r29
    2c90:	c0 93 37 02 	sts	0x0237, r28
    2c94:	20 c0       	rjmp	.+64     	; 0x2cd6 <free+0xaa>
    2c96:	12 96       	adiw	r26, 0x02	; 2
    2c98:	8d 91       	ld	r24, X+
    2c9a:	9c 91       	ld	r25, X
    2c9c:	13 97       	sbiw	r26, 0x03	; 3
    2c9e:	ad 01       	movw	r20, r26
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	11 f0       	breq	.+4      	; 0x2ca8 <free+0x7c>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	d3 cf       	rjmp	.-90     	; 0x2c4e <free+0x22>
    2ca8:	fa 01       	movw	r30, r20
    2caa:	d3 83       	std	Z+3, r29	; 0x03
    2cac:	c2 83       	std	Z+2, r28	; 0x02
    2cae:	21 91       	ld	r18, Z+
    2cb0:	31 91       	ld	r19, Z+
    2cb2:	e2 0f       	add	r30, r18
    2cb4:	f3 1f       	adc	r31, r19
    2cb6:	ce 17       	cp	r28, r30
    2cb8:	df 07       	cpc	r29, r31
    2cba:	69 f4       	brne	.+26     	; 0x2cd6 <free+0xaa>
    2cbc:	88 81       	ld	r24, Y
    2cbe:	99 81       	ldd	r25, Y+1	; 0x01
    2cc0:	28 0f       	add	r18, r24
    2cc2:	39 1f       	adc	r19, r25
    2cc4:	2e 5f       	subi	r18, 0xFE	; 254
    2cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc8:	fa 01       	movw	r30, r20
    2cca:	31 83       	std	Z+1, r19	; 0x01
    2ccc:	20 83       	st	Z, r18
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd2:	93 83       	std	Z+3, r25	; 0x03
    2cd4:	82 83       	std	Z+2, r24	; 0x02
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	08 95       	ret

00002cdc <strnlen_P>:
    2cdc:	fc 01       	movw	r30, r24
    2cde:	05 90       	lpm	r0, Z+
    2ce0:	61 50       	subi	r22, 0x01	; 1
    2ce2:	70 40       	sbci	r23, 0x00	; 0
    2ce4:	01 10       	cpse	r0, r1
    2ce6:	d8 f7       	brcc	.-10     	; 0x2cde <strnlen_P+0x2>
    2ce8:	80 95       	com	r24
    2cea:	90 95       	com	r25
    2cec:	8e 0f       	add	r24, r30
    2cee:	9f 1f       	adc	r25, r31
    2cf0:	08 95       	ret

00002cf2 <memset>:
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	01 c0       	rjmp	.+2      	; 0x2cf8 <memset+0x6>
    2cf6:	6d 93       	st	X+, r22
    2cf8:	41 50       	subi	r20, 0x01	; 1
    2cfa:	50 40       	sbci	r21, 0x00	; 0
    2cfc:	e0 f7       	brcc	.-8      	; 0x2cf6 <memset+0x4>
    2cfe:	08 95       	ret

00002d00 <strnlen>:
    2d00:	fc 01       	movw	r30, r24
    2d02:	61 50       	subi	r22, 0x01	; 1
    2d04:	70 40       	sbci	r23, 0x00	; 0
    2d06:	01 90       	ld	r0, Z+
    2d08:	01 10       	cpse	r0, r1
    2d0a:	d8 f7       	brcc	.-10     	; 0x2d02 <strnlen+0x2>
    2d0c:	80 95       	com	r24
    2d0e:	90 95       	com	r25
    2d10:	8e 0f       	add	r24, r30
    2d12:	9f 1f       	adc	r25, r31
    2d14:	08 95       	ret

00002d16 <fputc>:
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	8c 01       	movw	r16, r24
    2d20:	eb 01       	movw	r28, r22
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	81 ff       	sbrs	r24, 1
    2d26:	1b c0       	rjmp	.+54     	; 0x2d5e <fputc+0x48>
    2d28:	82 ff       	sbrs	r24, 2
    2d2a:	0d c0       	rjmp	.+26     	; 0x2d46 <fputc+0x30>
    2d2c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d2e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d30:	8c 81       	ldd	r24, Y+4	; 0x04
    2d32:	9d 81       	ldd	r25, Y+5	; 0x05
    2d34:	28 17       	cp	r18, r24
    2d36:	39 07       	cpc	r19, r25
    2d38:	64 f4       	brge	.+24     	; 0x2d52 <fputc+0x3c>
    2d3a:	e8 81       	ld	r30, Y
    2d3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2d3e:	01 93       	st	Z+, r16
    2d40:	f9 83       	std	Y+1, r31	; 0x01
    2d42:	e8 83       	st	Y, r30
    2d44:	06 c0       	rjmp	.+12     	; 0x2d52 <fputc+0x3c>
    2d46:	e8 85       	ldd	r30, Y+8	; 0x08
    2d48:	f9 85       	ldd	r31, Y+9	; 0x09
    2d4a:	80 2f       	mov	r24, r16
    2d4c:	09 95       	icall
    2d4e:	89 2b       	or	r24, r25
    2d50:	31 f4       	brne	.+12     	; 0x2d5e <fputc+0x48>
    2d52:	8e 81       	ldd	r24, Y+6	; 0x06
    2d54:	9f 81       	ldd	r25, Y+7	; 0x07
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	9f 83       	std	Y+7, r25	; 0x07
    2d5a:	8e 83       	std	Y+6, r24	; 0x06
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <fputc+0x4c>
    2d5e:	0f ef       	ldi	r16, 0xFF	; 255
    2d60:	1f ef       	ldi	r17, 0xFF	; 255
    2d62:	c8 01       	movw	r24, r16
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	08 95       	ret

00002d6e <__ultoa_invert>:
    2d6e:	fa 01       	movw	r30, r20
    2d70:	aa 27       	eor	r26, r26
    2d72:	28 30       	cpi	r18, 0x08	; 8
    2d74:	51 f1       	breq	.+84     	; 0x2dca <__ultoa_invert+0x5c>
    2d76:	20 31       	cpi	r18, 0x10	; 16
    2d78:	81 f1       	breq	.+96     	; 0x2dda <__ultoa_invert+0x6c>
    2d7a:	e8 94       	clt
    2d7c:	6f 93       	push	r22
    2d7e:	6e 7f       	andi	r22, 0xFE	; 254
    2d80:	6e 5f       	subi	r22, 0xFE	; 254
    2d82:	7f 4f       	sbci	r23, 0xFF	; 255
    2d84:	8f 4f       	sbci	r24, 0xFF	; 255
    2d86:	9f 4f       	sbci	r25, 0xFF	; 255
    2d88:	af 4f       	sbci	r26, 0xFF	; 255
    2d8a:	b1 e0       	ldi	r27, 0x01	; 1
    2d8c:	3e d0       	rcall	.+124    	; 0x2e0a <__ultoa_invert+0x9c>
    2d8e:	b4 e0       	ldi	r27, 0x04	; 4
    2d90:	3c d0       	rcall	.+120    	; 0x2e0a <__ultoa_invert+0x9c>
    2d92:	67 0f       	add	r22, r23
    2d94:	78 1f       	adc	r23, r24
    2d96:	89 1f       	adc	r24, r25
    2d98:	9a 1f       	adc	r25, r26
    2d9a:	a1 1d       	adc	r26, r1
    2d9c:	68 0f       	add	r22, r24
    2d9e:	79 1f       	adc	r23, r25
    2da0:	8a 1f       	adc	r24, r26
    2da2:	91 1d       	adc	r25, r1
    2da4:	a1 1d       	adc	r26, r1
    2da6:	6a 0f       	add	r22, r26
    2da8:	71 1d       	adc	r23, r1
    2daa:	81 1d       	adc	r24, r1
    2dac:	91 1d       	adc	r25, r1
    2dae:	a1 1d       	adc	r26, r1
    2db0:	20 d0       	rcall	.+64     	; 0x2df2 <__ultoa_invert+0x84>
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <__ultoa_invert+0x48>
    2db4:	68 94       	set
    2db6:	3f 91       	pop	r19
    2db8:	2a e0       	ldi	r18, 0x0A	; 10
    2dba:	26 9f       	mul	r18, r22
    2dbc:	11 24       	eor	r1, r1
    2dbe:	30 19       	sub	r19, r0
    2dc0:	30 5d       	subi	r19, 0xD0	; 208
    2dc2:	31 93       	st	Z+, r19
    2dc4:	de f6       	brtc	.-74     	; 0x2d7c <__ultoa_invert+0xe>
    2dc6:	cf 01       	movw	r24, r30
    2dc8:	08 95       	ret
    2dca:	46 2f       	mov	r20, r22
    2dcc:	47 70       	andi	r20, 0x07	; 7
    2dce:	40 5d       	subi	r20, 0xD0	; 208
    2dd0:	41 93       	st	Z+, r20
    2dd2:	b3 e0       	ldi	r27, 0x03	; 3
    2dd4:	0f d0       	rcall	.+30     	; 0x2df4 <__ultoa_invert+0x86>
    2dd6:	c9 f7       	brne	.-14     	; 0x2dca <__ultoa_invert+0x5c>
    2dd8:	f6 cf       	rjmp	.-20     	; 0x2dc6 <__ultoa_invert+0x58>
    2dda:	46 2f       	mov	r20, r22
    2ddc:	4f 70       	andi	r20, 0x0F	; 15
    2dde:	40 5d       	subi	r20, 0xD0	; 208
    2de0:	4a 33       	cpi	r20, 0x3A	; 58
    2de2:	18 f0       	brcs	.+6      	; 0x2dea <__ultoa_invert+0x7c>
    2de4:	49 5d       	subi	r20, 0xD9	; 217
    2de6:	31 fd       	sbrc	r19, 1
    2de8:	40 52       	subi	r20, 0x20	; 32
    2dea:	41 93       	st	Z+, r20
    2dec:	02 d0       	rcall	.+4      	; 0x2df2 <__ultoa_invert+0x84>
    2dee:	a9 f7       	brne	.-22     	; 0x2dda <__ultoa_invert+0x6c>
    2df0:	ea cf       	rjmp	.-44     	; 0x2dc6 <__ultoa_invert+0x58>
    2df2:	b4 e0       	ldi	r27, 0x04	; 4
    2df4:	a6 95       	lsr	r26
    2df6:	97 95       	ror	r25
    2df8:	87 95       	ror	r24
    2dfa:	77 95       	ror	r23
    2dfc:	67 95       	ror	r22
    2dfe:	ba 95       	dec	r27
    2e00:	c9 f7       	brne	.-14     	; 0x2df4 <__ultoa_invert+0x86>
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	61 05       	cpc	r22, r1
    2e06:	71 05       	cpc	r23, r1
    2e08:	08 95       	ret
    2e0a:	9b 01       	movw	r18, r22
    2e0c:	ac 01       	movw	r20, r24
    2e0e:	0a 2e       	mov	r0, r26
    2e10:	06 94       	lsr	r0
    2e12:	57 95       	ror	r21
    2e14:	47 95       	ror	r20
    2e16:	37 95       	ror	r19
    2e18:	27 95       	ror	r18
    2e1a:	ba 95       	dec	r27
    2e1c:	c9 f7       	brne	.-14     	; 0x2e10 <__ultoa_invert+0xa2>
    2e1e:	62 0f       	add	r22, r18
    2e20:	73 1f       	adc	r23, r19
    2e22:	84 1f       	adc	r24, r20
    2e24:	95 1f       	adc	r25, r21
    2e26:	a0 1d       	adc	r26, r0
    2e28:	08 95       	ret

00002e2a <_exit>:
    2e2a:	f8 94       	cli

00002e2c <__stop_program>:
    2e2c:	ff cf       	rjmp	.-2      	; 0x2e2c <__stop_program>
