
IronMan_1011.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00002e30  00002ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080018c  0080018c  00002f50  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002cc  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002613  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000114d  00000000  00000000  0000598f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cab  00000000  00000000  00006adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00008788  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004aa  00000000  00000000  00008a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00008ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000096c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	fe e2       	ldi	r31, 0x2E	; 46
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 38       	cpi	r26, 0x8C	; 140
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	ac e8       	ldi	r26, 0x8C	; 140
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3b       	cpi	r26, 0xB3	; 179
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <main>
      c6:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Putchar>:
static int shot_cnt;
static int call_size_cnt;
static int command;

static int Putchar(char c, FILE *stream)//FILE 사용안함, 송신, avr->컴퓨터
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <Putchar+0x6>
      d4:	0f 92       	push	r0
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	89 83       	std	Y+1, r24	; 0x01
      dc:	7b 83       	std	Y+3, r23	; 0x03
      de:	6a 83       	std	Y+2, r22	; 0x02
 if(c == '\n')
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	8a 30       	cpi	r24, 0x0A	; 10
      e4:	29 f4       	brne	.+10     	; 0xf0 <Putchar+0x22>
  Putchar('\r', 0); 
      e6:	8d e0       	ldi	r24, 0x0D	; 13
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	0e 94 67 00 	call	0xce	; 0xce <Putchar>

 while(!(UCSR1A & 0x20)); // UDRE, data register empty
      f0:	eb e9       	ldi	r30, 0x9B	; 155
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	88 2f       	mov	r24, r24
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	80 72       	andi	r24, 0x20	; 32
      fc:	90 70       	andi	r25, 0x00	; 0
      fe:	00 97       	sbiw	r24, 0x00	; 0
     100:	b9 f3       	breq	.-18     	; 0xf0 <Putchar+0x22>
   UDR1 = c;
     102:	ec e9       	ldi	r30, 0x9C	; 156
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	80 83       	st	Z, r24
 return 0;
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	90 e0       	ldi	r25, 0x00	; 0
}
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	cf 91       	pop	r28
     116:	df 91       	pop	r29
     118:	08 95       	ret

0000011a <Getchar>:
 
static int Getchar(FILE *stream)//수신, 컴퓨터->avr
{
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	00 d0       	rcall	.+0      	; 0x120 <Getchar+0x6>
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	9a 83       	std	Y+2, r25	; 0x02
     126:	89 83       	std	Y+1, r24	; 0x01
 while(!(UCSR1A & 0x80));
     128:	eb e9       	ldi	r30, 0x9B	; 155
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	88 23       	and	r24, r24
     130:	dc f7       	brge	.-10     	; 0x128 <Getchar+0xe>
 return UDR1;
     132:	ec e9       	ldi	r30, 0x9C	; 156
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	88 2f       	mov	r24, r24
     13a:	90 e0       	ldi	r25, 0x00	; 0
}
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	cf 91       	pop	r28
     142:	df 91       	pop	r29
     144:	08 95       	ret

00000146 <port_init>:

void port_init(void)
{
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
  DDRF=0xF0;	//F 0, 1, 2(가슴)번 핀 입력 설정	/ BUZZER 세팅 
     14e:	e1 e6       	ldi	r30, 0x61	; 97
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 ef       	ldi	r24, 0xF0	; 240
     154:	80 83       	st	Z, r24
  ADCSRA = 0x00;	//처음에는 DISABLE -> 타이머 카운트를 이용하여 ENABLE 할 예정
     156:	e6 e2       	ldi	r30, 0x26	; 38
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	10 82       	st	Z, r1

  DDRA=0x07;	//A 0, 1번 핀 출력 설정(진동) || 2번 핀 출력 설정 (LED)
     15c:	ea e3       	ldi	r30, 0x3A	; 58
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	87 e0       	ldi	r24, 0x07	; 7
     162:	80 83       	st	Z, r24

  TIMSK = 0x04;		// 타이머, 카운트 1 오버플로 인터럽트 허용
     164:	e7 e5       	ldi	r30, 0x57	; 87
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	84 e0       	ldi	r24, 0x04	; 4
     16a:	80 83       	st	Z, r24
  TCCR1A = 0x00;	//
     16c:	ef e4       	ldi	r30, 0x4F	; 79
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	10 82       	st	Z, r1
  TCCR1B = 0x03;	//분주비 64		
     172:	ee e4       	ldi	r30, 0x4E	; 78
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	80 83       	st	Z, r24

  DDRB = 0x00;	//B 포트 입력
     17a:	e7 e3       	ldi	r30, 0x37	; 55
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	10 82       	st	Z, r1
}
     180:	cf 91       	pop	r28
     182:	df 91       	pop	r29
     184:	08 95       	ret

00000186 <uart0_init>:

void uart0_init(void) //Camera
{
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     18e:	ea e2       	ldi	r30, 0x2A	; 42
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     194:	eb e2       	ldi	r30, 0x2B	; 43
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     19a:	e5 e9       	ldi	r30, 0x95	; 149
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	86 e0       	ldi	r24, 0x06	; 6
     1a0:	80 83       	st	Z, r24
 UBRR0L = 0x19; //384
     1a2:	e9 e2       	ldi	r30, 0x29	; 41
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	89 e1       	ldi	r24, 0x19	; 25
     1a8:	80 83       	st	Z, r24
 UBRR0H = 0x00; 
     1aa:	e0 e9       	ldi	r30, 0x90	; 144
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
 UCSR0B = 0b10011000; //수신만
     1b0:	ea e2       	ldi	r30, 0x2A	; 42
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	88 e9       	ldi	r24, 0x98	; 152
     1b6:	80 83       	st	Z, r24
}
     1b8:	cf 91       	pop	r28
     1ba:	df 91       	pop	r29
     1bc:	08 95       	ret

000001be <uart1_init>:

void uart1_init(void) //PC와 통신
{
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
 UCSR1B = 0x00; //disable while setting baud rate
     1c6:	ea e9       	ldi	r30, 0x9A	; 154
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	10 82       	st	Z, r1
 UCSR1A = 0x00;
     1cc:	eb e9       	ldi	r30, 0x9B	; 155
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	10 82       	st	Z, r1
 UCSR1C = 0x06;
     1d2:	ed e9       	ldi	r30, 0x9D	; 157
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	86 e0       	ldi	r24, 0x06	; 6
     1d8:	80 83       	st	Z, r24
 UBRR1L = 0x08; //set baud rate 115200
     1da:	e9 e9       	ldi	r30, 0x99	; 153
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	80 83       	st	Z, r24
 UBRR1H = 0x00; 
     1e2:	e8 e9       	ldi	r30, 0x98	; 152
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	10 82       	st	Z, r1
 UCSR1B = 0b10011000; //송신 인터럽트 개방
     1e8:	ea e9       	ldi	r30, 0x9A	; 154
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	88 e9       	ldi	r24, 0x98	; 152
     1ee:	80 83       	st	Z, r24
}
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	00 90 5b 00 	lds	r0, 0x005B
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	00 d0       	rcall	.+0      	; 0x214 <__vector_14+0x1e>
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0xFF;
     218:	e6 e2       	ldi	r30, 0x26	; 38
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	80 83       	st	Z, r24
	
	if(TEST)
		printf("TIMER1_OVF_vect!\n");

	switch(sensor_flag)
     220:	80 91 92 01 	lds	r24, 0x0192
     224:	90 91 93 01 	lds	r25, 0x0193
     228:	9a 83       	std	Y+2, r25	; 0x02
     22a:	89 83       	std	Y+1, r24	; 0x01
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	9a 81       	ldd	r25, Y+2	; 0x02
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	91 05       	cpc	r25, r1
     234:	71 f1       	breq	.+92     	; 0x292 <__vector_14+0x9c>
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	9a 81       	ldd	r25, Y+2	; 0x02
     23a:	82 30       	cpi	r24, 0x02	; 2
     23c:	91 05       	cpc	r25, r1
     23e:	09 f4       	brne	.+2      	; 0x242 <__vector_14+0x4c>
     240:	4b c0       	rjmp	.+150    	; 0x2d8 <__vector_14+0xe2>
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	9a 81       	ldd	r25, Y+2	; 0x02
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	09 f0       	breq	.+2      	; 0x24c <__vector_14+0x56>
     24a:	63 c0       	rjmp	.+198    	; 0x312 <__vector_14+0x11c>
	{
	case 0: 
	  ADMUX = 0xC0;	//// 내부 클럭 사용, 오른쪽 
     24c:	e7 e2       	ldi	r30, 0x27	; 39
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 ec       	ldi	r24, 0xC0	; 192
     252:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     254:	e6 e2       	ldi	r30, 0x26	; 38
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	88 2f       	mov	r24, r24
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	80 71       	andi	r24, 0x10	; 16
     260:	90 70       	andi	r25, 0x00	; 0
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	b9 f3       	breq	.-18     	; 0x254 <__vector_14+0x5e>
	  	val0 = ADCW;
     266:	e4 e2       	ldi	r30, 0x24	; 36
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	91 81       	ldd	r25, Z+1	; 0x01
     26e:	90 93 8d 01 	sts	0x018D, r25
     272:	80 93 8c 01 	sts	0x018C, r24
		ADCW = 0;
     276:	e4 e2       	ldi	r30, 0x24	; 36
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	11 82       	std	Z+1, r1	; 0x01
     27c:	10 82       	st	Z, r1
		sensor_flag++;
     27e:	80 91 92 01 	lds	r24, 0x0192
     282:	90 91 93 01 	lds	r25, 0x0193
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	90 93 93 01 	sts	0x0193, r25
     28c:	80 93 92 01 	sts	0x0192, r24
     290:	40 c0       	rjmp	.+128    	; 0x312 <__vector_14+0x11c>
	  break;
	case 1:
	  ADMUX = 0xC1;	//// 왼쪽
     292:	e7 e2       	ldi	r30, 0x27	; 39
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	81 ec       	ldi	r24, 0xC1	; 193
     298:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     29a:	e6 e2       	ldi	r30, 0x26	; 38
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	88 2f       	mov	r24, r24
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	80 71       	andi	r24, 0x10	; 16
     2a6:	90 70       	andi	r25, 0x00	; 0
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	b9 f3       	breq	.-18     	; 0x29a <__vector_14+0xa4>
	  	val1 = ADCW;
     2ac:	e4 e2       	ldi	r30, 0x24	; 36
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	91 81       	ldd	r25, Z+1	; 0x01
     2b4:	90 93 8f 01 	sts	0x018F, r25
     2b8:	80 93 8e 01 	sts	0x018E, r24
		ADCW = 0;
     2bc:	e4 e2       	ldi	r30, 0x24	; 36
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	11 82       	std	Z+1, r1	; 0x01
     2c2:	10 82       	st	Z, r1
		sensor_flag++;
     2c4:	80 91 92 01 	lds	r24, 0x0192
     2c8:	90 91 93 01 	lds	r25, 0x0193
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	90 93 93 01 	sts	0x0193, r25
     2d2:	80 93 92 01 	sts	0x0192, r24
     2d6:	1d c0       	rjmp	.+58     	; 0x312 <__vector_14+0x11c>
	  break;
	case 2:
	  ADMUX = 0xC2; // 가슴 적외선
     2d8:	e7 e2       	ldi	r30, 0x27	; 39
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	82 ec       	ldi	r24, 0xC2	; 194
     2de:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     2e0:	e6 e2       	ldi	r30, 0x26	; 38
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	88 2f       	mov	r24, r24
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	80 71       	andi	r24, 0x10	; 16
     2ec:	90 70       	andi	r25, 0x00	; 0
     2ee:	00 97       	sbiw	r24, 0x00	; 0
     2f0:	b9 f3       	breq	.-18     	; 0x2e0 <__vector_14+0xea>
	  val2 = ADCW;
     2f2:	e4 e2       	ldi	r30, 0x24	; 36
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	91 81       	ldd	r25, Z+1	; 0x01
     2fa:	90 93 91 01 	sts	0x0191, r25
     2fe:	80 93 90 01 	sts	0x0190, r24
	  ADCW = 0;
     302:	e4 e2       	ldi	r30, 0x24	; 36
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	11 82       	std	Z+1, r1	; 0x01
     308:	10 82       	st	Z, r1
	  sensor_flag = 0;
     30a:	10 92 93 01 	sts	0x0193, r1
     30e:	10 92 92 01 	sts	0x0192, r1
	  break;
	}

	ADCSRA = 0x00;
     312:	e6 e2       	ldi	r30, 0x26	; 38
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	10 82       	st	Z, r1
}
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	cf 91       	pop	r28
     31e:	df 91       	pop	r29
     320:	ff 91       	pop	r31
     322:	ef 91       	pop	r30
     324:	9f 91       	pop	r25
     326:	8f 91       	pop	r24
     328:	0f 90       	pop	r0
     32a:	00 92 5b 00 	sts	0x005B, r0
     32e:	0f 90       	pop	r0
     330:	0f be       	out	0x3f, r0	; 63
     332:	0f 90       	pop	r0
     334:	1f 90       	pop	r1
     336:	18 95       	reti

00000338 <init_devices>:

void init_devices(void)
{
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
  cli(); //disable all interrupts
     340:	f8 94       	cli
  port_init();
     342:	0e 94 a3 00 	call	0x146	; 0x146 <port_init>
  uart0_init();  
     346:	0e 94 c3 00 	call	0x186	; 0x186 <uart0_init>
  uart1_init();
     34a:	0e 94 df 00 	call	0x1be	; 0x1be <uart1_init>
  fdevopen(Putchar, Getchar); //file stream 0
     34e:	87 e6       	ldi	r24, 0x67	; 103
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	2d e8       	ldi	r18, 0x8D	; 141
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	b9 01       	movw	r22, r18
     358:	0e 94 ae 12 	call	0x255c	; 0x255c <fdevopen>
  sei();
     35c:	78 94       	sei
  port_init();
     35e:	0e 94 a3 00 	call	0x146	; 0x146 <port_init>

}
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <putchar1>:

//*** 카메라 관련 함수 ***//
static int putchar1(char c)	//카메라에 명령어 전송
{
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	0f 92       	push	r0
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
     374:	eb e2       	ldi	r30, 0x2B	; 43
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	80 72       	andi	r24, 0x20	; 32
     380:	90 70       	andi	r25, 0x00	; 0
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	b9 f3       	breq	.-18     	; 0x374 <putchar1+0xc>
		UDR0 = c;
     386:	ec e2       	ldi	r30, 0x2C	; 44
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	80 83       	st	Z, r24
	return 0;
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
}
     392:	0f 90       	pop	r0
     394:	cf 91       	pop	r28
     396:	df 91       	pop	r29
     398:	08 95       	ret

0000039a <reset>:


void reset(){		//Camera Command(reset)
     39a:	df 93       	push	r29
     39c:	cf 93       	push	r28
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nRESET  ");
 putchar1(0x56);
     3a2:	86 e5       	ldi	r24, 0x56	; 86
     3a4:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x26);
     3ae:	86 e2       	ldi	r24, 0x26	; 38
     3b0:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 img_cnt = 0;
     3ba:	10 92 98 01 	sts	0x0198, r1
     3be:	10 92 97 01 	sts	0x0197, r1
}
     3c2:	cf 91       	pop	r28
     3c4:	df 91       	pop	r29
     3c6:	08 95       	ret

000003c8 <resize>:
 
void resize(){		//Camera Command(resize)
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nRESIZE  ");
 putchar1(0x56);
     3d0:	86 e5       	ldi	r24, 0x56	; 86
     3d2:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x31);
     3dc:	81 e3       	ldi	r24, 0x31	; 49
     3de:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x05);
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x04);
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x01);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x19);
     3fa:	89 e1       	ldi	r24, 0x19	; 25
     3fc:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x11);
     400:	81 e1       	ldi	r24, 0x11	; 17
     402:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 img_cnt = 0;
     406:	10 92 98 01 	sts	0x0198, r1
     40a:	10 92 97 01 	sts	0x0197, r1
}
     40e:	cf 91       	pop	r28
     410:	df 91       	pop	r29
     412:	08 95       	ret

00000414 <set_rate>:
 
void set_rate(){	//Camera Command(set_rate 115200)
     414:	df 93       	push	r29
     416:	cf 93       	push	r28
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nSET_RATE ");
 putchar1(0x56);
     41c:	86 e5       	ldi	r24, 0x56	; 86
     41e:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x24);
     428:	84 e2       	ldi	r24, 0x24	; 36
     42a:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x03);
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x01);
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x0D);
     43a:	8d e0       	ldi	r24, 0x0D	; 13
     43c:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0xA6);
     440:	86 ea       	ldi	r24, 0xA6	; 166
     442:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 img_cnt = 0;
     446:	10 92 98 01 	sts	0x0198, r1
     44a:	10 92 97 01 	sts	0x0197, r1
}
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	08 95       	ret

00000454 <idle>:

void idle(){		//Camera Command(Idle)
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	df 93       	push	r29
     45a:	cf 93       	push	r28
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	c6 54       	subi	r28, 0x46	; 70
     462:	d0 40       	sbci	r29, 0x00	; 0
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
 //printf("\r\nIDLE  ");
 init_buffer(CAMERA);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 fe 07 	call	0xffc	; 0xffc <init_buffer>
 command = IDLE;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 a8 01 	sts	0x01A8, r25
     47e:	80 93 a7 01 	sts	0x01A7, r24
 idle_cnt = 0;
     482:	10 92 a2 01 	sts	0x01A2, r1
     486:	10 92 a1 01 	sts	0x01A1, r1
 img_cnt = 0;
     48a:	10 92 98 01 	sts	0x0198, r1
     48e:	10 92 97 01 	sts	0x0197, r1
 call_img_flag = 0;
     492:	10 92 9c 01 	sts	0x019C, r1
     496:	10 92 9b 01 	sts	0x019B, r1
 img_data_start_flag = 0;
     49a:	10 92 9e 01 	sts	0x019E, r1
     49e:	10 92 9d 01 	sts	0x019D, r1
 
 putchar1(0x56); _delay_ms(1);
     4a2:	86 e5       	ldi	r24, 0x56	; 86
     4a4:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
     4a8:	fe 01       	movw	r30, r28
     4aa:	ed 5b       	subi	r30, 0xBD	; 189
     4ac:	ff 4f       	sbci	r31, 0xFF	; 255
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	a0 e8       	ldi	r26, 0x80	; 128
     4b4:	bf e3       	ldi	r27, 0x3F	; 63
     4b6:	80 83       	st	Z, r24
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	a2 83       	std	Z+2, r26	; 0x02
     4bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4be:	8e 01       	movw	r16, r28
     4c0:	01 5c       	subi	r16, 0xC1	; 193
     4c2:	1f 4f       	sbci	r17, 0xFF	; 255
     4c4:	fe 01       	movw	r30, r28
     4c6:	ed 5b       	subi	r30, 0xBD	; 189
     4c8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ca:	60 81       	ld	r22, Z
     4cc:	71 81       	ldd	r23, Z+1	; 0x01
     4ce:	82 81       	ldd	r24, Z+2	; 0x02
     4d0:	93 81       	ldd	r25, Z+3	; 0x03
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	4a e7       	ldi	r20, 0x7A	; 122
     4d8:	55 e4       	ldi	r21, 0x45	; 69
     4da:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	f8 01       	movw	r30, r16
     4e4:	80 83       	st	Z, r24
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	a2 83       	std	Z+2, r26	; 0x02
     4ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4ec:	fe 01       	movw	r30, r28
     4ee:	ff 96       	adiw	r30, 0x3f	; 63
     4f0:	60 81       	ld	r22, Z
     4f2:	71 81       	ldd	r23, Z+1	; 0x01
     4f4:	82 81       	ldd	r24, Z+2	; 0x02
     4f6:	93 81       	ldd	r25, Z+3	; 0x03
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e8       	ldi	r20, 0x80	; 128
     4fe:	5f e3       	ldi	r21, 0x3F	; 63
     500:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     504:	88 23       	and	r24, r24
     506:	2c f4       	brge	.+10     	; 0x512 <idle+0xbe>
		__ticks = 1;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	9e af       	std	Y+62, r25	; 0x3e
     50e:	8d af       	std	Y+61, r24	; 0x3d
     510:	46 c0       	rjmp	.+140    	; 0x59e <idle+0x14a>
	else if (__tmp > 65535)
     512:	fe 01       	movw	r30, r28
     514:	ff 96       	adiw	r30, 0x3f	; 63
     516:	60 81       	ld	r22, Z
     518:	71 81       	ldd	r23, Z+1	; 0x01
     51a:	82 81       	ldd	r24, Z+2	; 0x02
     51c:	93 81       	ldd	r25, Z+3	; 0x03
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	3f ef       	ldi	r19, 0xFF	; 255
     522:	4f e7       	ldi	r20, 0x7F	; 127
     524:	57 e4       	ldi	r21, 0x47	; 71
     526:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     52a:	18 16       	cp	r1, r24
     52c:	64 f5       	brge	.+88     	; 0x586 <idle+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     52e:	fe 01       	movw	r30, r28
     530:	ed 5b       	subi	r30, 0xBD	; 189
     532:	ff 4f       	sbci	r31, 0xFF	; 255
     534:	60 81       	ld	r22, Z
     536:	71 81       	ldd	r23, Z+1	; 0x01
     538:	82 81       	ldd	r24, Z+2	; 0x02
     53a:	93 81       	ldd	r25, Z+3	; 0x03
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e2       	ldi	r20, 0x20	; 32
     542:	51 e4       	ldi	r21, 0x41	; 65
     544:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	9e af       	std	Y+62, r25	; 0x3e
     55a:	8d af       	std	Y+61, r24	; 0x3d
     55c:	0f c0       	rjmp	.+30     	; 0x57c <idle+0x128>
     55e:	80 e9       	ldi	r24, 0x90	; 144
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	9c af       	std	Y+60, r25	; 0x3c
     564:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     566:	8b ad       	ldd	r24, Y+59	; 0x3b
     568:	9c ad       	ldd	r25, Y+60	; 0x3c
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <idle+0x116>
     56e:	9c af       	std	Y+60, r25	; 0x3c
     570:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     572:	8d ad       	ldd	r24, Y+61	; 0x3d
     574:	9e ad       	ldd	r25, Y+62	; 0x3e
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	9e af       	std	Y+62, r25	; 0x3e
     57a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57c:	8d ad       	ldd	r24, Y+61	; 0x3d
     57e:	9e ad       	ldd	r25, Y+62	; 0x3e
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	69 f7       	brne	.-38     	; 0x55e <idle+0x10a>
     584:	16 c0       	rjmp	.+44     	; 0x5b2 <idle+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     586:	fe 01       	movw	r30, r28
     588:	ff 96       	adiw	r30, 0x3f	; 63
     58a:	60 81       	ld	r22, Z
     58c:	71 81       	ldd	r23, Z+1	; 0x01
     58e:	82 81       	ldd	r24, Z+2	; 0x02
     590:	93 81       	ldd	r25, Z+3	; 0x03
     592:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	9e af       	std	Y+62, r25	; 0x3e
     59c:	8d af       	std	Y+61, r24	; 0x3d
     59e:	8d ad       	ldd	r24, Y+61	; 0x3d
     5a0:	9e ad       	ldd	r25, Y+62	; 0x3e
     5a2:	9a af       	std	Y+58, r25	; 0x3a
     5a4:	89 af       	std	Y+57, r24	; 0x39
     5a6:	89 ad       	ldd	r24, Y+57	; 0x39
     5a8:	9a ad       	ldd	r25, Y+58	; 0x3a
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <idle+0x156>
     5ae:	9a af       	std	Y+58, r25	; 0x3a
     5b0:	89 af       	std	Y+57, r24	; 0x39
 putchar1(0x00); _delay_ms(1);
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	a0 e8       	ldi	r26, 0x80	; 128
     5be:	bf e3       	ldi	r27, 0x3F	; 63
     5c0:	8d ab       	std	Y+53, r24	; 0x35
     5c2:	9e ab       	std	Y+54, r25	; 0x36
     5c4:	af ab       	std	Y+55, r26	; 0x37
     5c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5c8:	6d a9       	ldd	r22, Y+53	; 0x35
     5ca:	7e a9       	ldd	r23, Y+54	; 0x36
     5cc:	8f a9       	ldd	r24, Y+55	; 0x37
     5ce:	98 ad       	ldd	r25, Y+56	; 0x38
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	4a e7       	ldi	r20, 0x7A	; 122
     5d6:	55 e4       	ldi	r21, 0x45	; 69
     5d8:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	89 ab       	std	Y+49, r24	; 0x31
     5e2:	9a ab       	std	Y+50, r25	; 0x32
     5e4:	ab ab       	std	Y+51, r26	; 0x33
     5e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     5e8:	69 a9       	ldd	r22, Y+49	; 0x31
     5ea:	7a a9       	ldd	r23, Y+50	; 0x32
     5ec:	8b a9       	ldd	r24, Y+51	; 0x33
     5ee:	9c a9       	ldd	r25, Y+52	; 0x34
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	40 e8       	ldi	r20, 0x80	; 128
     5f6:	5f e3       	ldi	r21, 0x3F	; 63
     5f8:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     5fc:	88 23       	and	r24, r24
     5fe:	2c f4       	brge	.+10     	; 0x60a <idle+0x1b6>
		__ticks = 1;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	98 ab       	std	Y+48, r25	; 0x30
     606:	8f a7       	std	Y+47, r24	; 0x2f
     608:	3f c0       	rjmp	.+126    	; 0x688 <idle+0x234>
	else if (__tmp > 65535)
     60a:	69 a9       	ldd	r22, Y+49	; 0x31
     60c:	7a a9       	ldd	r23, Y+50	; 0x32
     60e:	8b a9       	ldd	r24, Y+51	; 0x33
     610:	9c a9       	ldd	r25, Y+52	; 0x34
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	3f ef       	ldi	r19, 0xFF	; 255
     616:	4f e7       	ldi	r20, 0x7F	; 127
     618:	57 e4       	ldi	r21, 0x47	; 71
     61a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     61e:	18 16       	cp	r1, r24
     620:	4c f5       	brge	.+82     	; 0x674 <idle+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     622:	6d a9       	ldd	r22, Y+53	; 0x35
     624:	7e a9       	ldd	r23, Y+54	; 0x36
     626:	8f a9       	ldd	r24, Y+55	; 0x37
     628:	98 ad       	ldd	r25, Y+56	; 0x38
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	40 e2       	ldi	r20, 0x20	; 32
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	bc 01       	movw	r22, r24
     63c:	cd 01       	movw	r24, r26
     63e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	98 ab       	std	Y+48, r25	; 0x30
     648:	8f a7       	std	Y+47, r24	; 0x2f
     64a:	0f c0       	rjmp	.+30     	; 0x66a <idle+0x216>
     64c:	80 e9       	ldi	r24, 0x90	; 144
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	9e a7       	std	Y+46, r25	; 0x2e
     652:	8d a7       	std	Y+45, r24	; 0x2d
     654:	8d a5       	ldd	r24, Y+45	; 0x2d
     656:	9e a5       	ldd	r25, Y+46	; 0x2e
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <idle+0x204>
     65c:	9e a7       	std	Y+46, r25	; 0x2e
     65e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     660:	8f a5       	ldd	r24, Y+47	; 0x2f
     662:	98 a9       	ldd	r25, Y+48	; 0x30
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	98 ab       	std	Y+48, r25	; 0x30
     668:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     66a:	8f a5       	ldd	r24, Y+47	; 0x2f
     66c:	98 a9       	ldd	r25, Y+48	; 0x30
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	69 f7       	brne	.-38     	; 0x64c <idle+0x1f8>
     672:	14 c0       	rjmp	.+40     	; 0x69c <idle+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     674:	69 a9       	ldd	r22, Y+49	; 0x31
     676:	7a a9       	ldd	r23, Y+50	; 0x32
     678:	8b a9       	ldd	r24, Y+51	; 0x33
     67a:	9c a9       	ldd	r25, Y+52	; 0x34
     67c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     680:	dc 01       	movw	r26, r24
     682:	cb 01       	movw	r24, r22
     684:	98 ab       	std	Y+48, r25	; 0x30
     686:	8f a7       	std	Y+47, r24	; 0x2f
     688:	8f a5       	ldd	r24, Y+47	; 0x2f
     68a:	98 a9       	ldd	r25, Y+48	; 0x30
     68c:	9c a7       	std	Y+44, r25	; 0x2c
     68e:	8b a7       	std	Y+43, r24	; 0x2b
     690:	8b a5       	ldd	r24, Y+43	; 0x2b
     692:	9c a5       	ldd	r25, Y+44	; 0x2c
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <idle+0x240>
     698:	9c a7       	std	Y+44, r25	; 0x2c
     69a:	8b a7       	std	Y+43, r24	; 0x2b
 putchar1(0x36); _delay_ms(1);
     69c:	86 e3       	ldi	r24, 0x36	; 54
     69e:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	a0 e8       	ldi	r26, 0x80	; 128
     6a8:	bf e3       	ldi	r27, 0x3F	; 63
     6aa:	8f a3       	std	Y+39, r24	; 0x27
     6ac:	98 a7       	std	Y+40, r25	; 0x28
     6ae:	a9 a7       	std	Y+41, r26	; 0x29
     6b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6b2:	6f a1       	ldd	r22, Y+39	; 0x27
     6b4:	78 a5       	ldd	r23, Y+40	; 0x28
     6b6:	89 a5       	ldd	r24, Y+41	; 0x29
     6b8:	9a a5       	ldd	r25, Y+42	; 0x2a
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	4a e7       	ldi	r20, 0x7A	; 122
     6c0:	55 e4       	ldi	r21, 0x45	; 69
     6c2:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	8b a3       	std	Y+35, r24	; 0x23
     6cc:	9c a3       	std	Y+36, r25	; 0x24
     6ce:	ad a3       	std	Y+37, r26	; 0x25
     6d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     6d2:	6b a1       	ldd	r22, Y+35	; 0x23
     6d4:	7c a1       	ldd	r23, Y+36	; 0x24
     6d6:	8d a1       	ldd	r24, Y+37	; 0x25
     6d8:	9e a1       	ldd	r25, Y+38	; 0x26
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e8       	ldi	r20, 0x80	; 128
     6e0:	5f e3       	ldi	r21, 0x3F	; 63
     6e2:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     6e6:	88 23       	and	r24, r24
     6e8:	2c f4       	brge	.+10     	; 0x6f4 <idle+0x2a0>
		__ticks = 1;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	9a a3       	std	Y+34, r25	; 0x22
     6f0:	89 a3       	std	Y+33, r24	; 0x21
     6f2:	3f c0       	rjmp	.+126    	; 0x772 <idle+0x31e>
	else if (__tmp > 65535)
     6f4:	6b a1       	ldd	r22, Y+35	; 0x23
     6f6:	7c a1       	ldd	r23, Y+36	; 0x24
     6f8:	8d a1       	ldd	r24, Y+37	; 0x25
     6fa:	9e a1       	ldd	r25, Y+38	; 0x26
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	3f ef       	ldi	r19, 0xFF	; 255
     700:	4f e7       	ldi	r20, 0x7F	; 127
     702:	57 e4       	ldi	r21, 0x47	; 71
     704:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     708:	18 16       	cp	r1, r24
     70a:	4c f5       	brge	.+82     	; 0x75e <idle+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     70c:	6f a1       	ldd	r22, Y+39	; 0x27
     70e:	78 a5       	ldd	r23, Y+40	; 0x28
     710:	89 a5       	ldd	r24, Y+41	; 0x29
     712:	9a a5       	ldd	r25, Y+42	; 0x2a
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e2       	ldi	r20, 0x20	; 32
     71a:	51 e4       	ldi	r21, 0x41	; 65
     71c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	bc 01       	movw	r22, r24
     726:	cd 01       	movw	r24, r26
     728:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     72c:	dc 01       	movw	r26, r24
     72e:	cb 01       	movw	r24, r22
     730:	9a a3       	std	Y+34, r25	; 0x22
     732:	89 a3       	std	Y+33, r24	; 0x21
     734:	0f c0       	rjmp	.+30     	; 0x754 <idle+0x300>
     736:	80 e9       	ldi	r24, 0x90	; 144
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	98 a3       	std	Y+32, r25	; 0x20
     73c:	8f 8f       	std	Y+31, r24	; 0x1f
     73e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     740:	98 a1       	ldd	r25, Y+32	; 0x20
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <idle+0x2ee>
     746:	98 a3       	std	Y+32, r25	; 0x20
     748:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     74a:	89 a1       	ldd	r24, Y+33	; 0x21
     74c:	9a a1       	ldd	r25, Y+34	; 0x22
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	9a a3       	std	Y+34, r25	; 0x22
     752:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     754:	89 a1       	ldd	r24, Y+33	; 0x21
     756:	9a a1       	ldd	r25, Y+34	; 0x22
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	69 f7       	brne	.-38     	; 0x736 <idle+0x2e2>
     75c:	14 c0       	rjmp	.+40     	; 0x786 <idle+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     75e:	6b a1       	ldd	r22, Y+35	; 0x23
     760:	7c a1       	ldd	r23, Y+36	; 0x24
     762:	8d a1       	ldd	r24, Y+37	; 0x25
     764:	9e a1       	ldd	r25, Y+38	; 0x26
     766:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	9a a3       	std	Y+34, r25	; 0x22
     770:	89 a3       	std	Y+33, r24	; 0x21
     772:	89 a1       	ldd	r24, Y+33	; 0x21
     774:	9a a1       	ldd	r25, Y+34	; 0x22
     776:	9e 8f       	std	Y+30, r25	; 0x1e
     778:	8d 8f       	std	Y+29, r24	; 0x1d
     77a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     77c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <idle+0x32a>
     782:	9e 8f       	std	Y+30, r25	; 0x1e
     784:	8d 8f       	std	Y+29, r24	; 0x1d
 putchar1(0x01); _delay_ms(1);
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e8       	ldi	r26, 0x80	; 128
     792:	bf e3       	ldi	r27, 0x3F	; 63
     794:	89 8f       	std	Y+25, r24	; 0x19
     796:	9a 8f       	std	Y+26, r25	; 0x1a
     798:	ab 8f       	std	Y+27, r26	; 0x1b
     79a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     79c:	69 8d       	ldd	r22, Y+25	; 0x19
     79e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	4a e7       	ldi	r20, 0x7A	; 122
     7aa:	55 e4       	ldi	r21, 0x45	; 69
     7ac:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	8d 8b       	std	Y+21, r24	; 0x15
     7b6:	9e 8b       	std	Y+22, r25	; 0x16
     7b8:	af 8b       	std	Y+23, r26	; 0x17
     7ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     7bc:	6d 89       	ldd	r22, Y+21	; 0x15
     7be:	7e 89       	ldd	r23, Y+22	; 0x16
     7c0:	8f 89       	ldd	r24, Y+23	; 0x17
     7c2:	98 8d       	ldd	r25, Y+24	; 0x18
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e8       	ldi	r20, 0x80	; 128
     7ca:	5f e3       	ldi	r21, 0x3F	; 63
     7cc:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     7d0:	88 23       	and	r24, r24
     7d2:	2c f4       	brge	.+10     	; 0x7de <idle+0x38a>
		__ticks = 1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	9c 8b       	std	Y+20, r25	; 0x14
     7da:	8b 8b       	std	Y+19, r24	; 0x13
     7dc:	3f c0       	rjmp	.+126    	; 0x85c <idle+0x408>
	else if (__tmp > 65535)
     7de:	6d 89       	ldd	r22, Y+21	; 0x15
     7e0:	7e 89       	ldd	r23, Y+22	; 0x16
     7e2:	8f 89       	ldd	r24, Y+23	; 0x17
     7e4:	98 8d       	ldd	r25, Y+24	; 0x18
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	3f ef       	ldi	r19, 0xFF	; 255
     7ea:	4f e7       	ldi	r20, 0x7F	; 127
     7ec:	57 e4       	ldi	r21, 0x47	; 71
     7ee:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     7f2:	18 16       	cp	r1, r24
     7f4:	4c f5       	brge	.+82     	; 0x848 <idle+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f6:	69 8d       	ldd	r22, Y+25	; 0x19
     7f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e2       	ldi	r20, 0x20	; 32
     804:	51 e4       	ldi	r21, 0x41	; 65
     806:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	9c 8b       	std	Y+20, r25	; 0x14
     81c:	8b 8b       	std	Y+19, r24	; 0x13
     81e:	0f c0       	rjmp	.+30     	; 0x83e <idle+0x3ea>
     820:	80 e9       	ldi	r24, 0x90	; 144
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	9a 8b       	std	Y+18, r25	; 0x12
     826:	89 8b       	std	Y+17, r24	; 0x11
     828:	89 89       	ldd	r24, Y+17	; 0x11
     82a:	9a 89       	ldd	r25, Y+18	; 0x12
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <idle+0x3d8>
     830:	9a 8b       	std	Y+18, r25	; 0x12
     832:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     834:	8b 89       	ldd	r24, Y+19	; 0x13
     836:	9c 89       	ldd	r25, Y+20	; 0x14
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	9c 8b       	std	Y+20, r25	; 0x14
     83c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     83e:	8b 89       	ldd	r24, Y+19	; 0x13
     840:	9c 89       	ldd	r25, Y+20	; 0x14
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	69 f7       	brne	.-38     	; 0x820 <idle+0x3cc>
     846:	14 c0       	rjmp	.+40     	; 0x870 <idle+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     848:	6d 89       	ldd	r22, Y+21	; 0x15
     84a:	7e 89       	ldd	r23, Y+22	; 0x16
     84c:	8f 89       	ldd	r24, Y+23	; 0x17
     84e:	98 8d       	ldd	r25, Y+24	; 0x18
     850:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     854:	dc 01       	movw	r26, r24
     856:	cb 01       	movw	r24, r22
     858:	9c 8b       	std	Y+20, r25	; 0x14
     85a:	8b 8b       	std	Y+19, r24	; 0x13
     85c:	8b 89       	ldd	r24, Y+19	; 0x13
     85e:	9c 89       	ldd	r25, Y+20	; 0x14
     860:	98 8b       	std	Y+16, r25	; 0x10
     862:	8f 87       	std	Y+15, r24	; 0x0f
     864:	8f 85       	ldd	r24, Y+15	; 0x0f
     866:	98 89       	ldd	r25, Y+16	; 0x10
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <idle+0x414>
     86c:	98 8b       	std	Y+16, r25	; 0x10
     86e:	8f 87       	std	Y+15, r24	; 0x0f
 putchar1(0x03); _delay_ms(1);
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a0 e8       	ldi	r26, 0x80	; 128
     87c:	bf e3       	ldi	r27, 0x3F	; 63
     87e:	8b 87       	std	Y+11, r24	; 0x0b
     880:	9c 87       	std	Y+12, r25	; 0x0c
     882:	ad 87       	std	Y+13, r26	; 0x0d
     884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     886:	6b 85       	ldd	r22, Y+11	; 0x0b
     888:	7c 85       	ldd	r23, Y+12	; 0x0c
     88a:	8d 85       	ldd	r24, Y+13	; 0x0d
     88c:	9e 85       	ldd	r25, Y+14	; 0x0e
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	4a e7       	ldi	r20, 0x7A	; 122
     894:	55 e4       	ldi	r21, 0x45	; 69
     896:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	8f 83       	std	Y+7, r24	; 0x07
     8a0:	98 87       	std	Y+8, r25	; 0x08
     8a2:	a9 87       	std	Y+9, r26	; 0x09
     8a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8a6:	6f 81       	ldd	r22, Y+7	; 0x07
     8a8:	78 85       	ldd	r23, Y+8	; 0x08
     8aa:	89 85       	ldd	r24, Y+9	; 0x09
     8ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e8       	ldi	r20, 0x80	; 128
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     8ba:	88 23       	and	r24, r24
     8bc:	2c f4       	brge	.+10     	; 0x8c8 <idle+0x474>
		__ticks = 1;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9e 83       	std	Y+6, r25	; 0x06
     8c4:	8d 83       	std	Y+5, r24	; 0x05
     8c6:	3f c0       	rjmp	.+126    	; 0x946 <idle+0x4f2>
	else if (__tmp > 65535)
     8c8:	6f 81       	ldd	r22, Y+7	; 0x07
     8ca:	78 85       	ldd	r23, Y+8	; 0x08
     8cc:	89 85       	ldd	r24, Y+9	; 0x09
     8ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	3f ef       	ldi	r19, 0xFF	; 255
     8d4:	4f e7       	ldi	r20, 0x7F	; 127
     8d6:	57 e4       	ldi	r21, 0x47	; 71
     8d8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     8dc:	18 16       	cp	r1, r24
     8de:	4c f5       	brge	.+82     	; 0x932 <idle+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8e0:	6b 85       	ldd	r22, Y+11	; 0x0b
     8e2:	7c 85       	ldd	r23, Y+12	; 0x0c
     8e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e2       	ldi	r20, 0x20	; 32
     8ee:	51 e4       	ldi	r21, 0x41	; 65
     8f0:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	bc 01       	movw	r22, r24
     8fa:	cd 01       	movw	r24, r26
     8fc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     900:	dc 01       	movw	r26, r24
     902:	cb 01       	movw	r24, r22
     904:	9e 83       	std	Y+6, r25	; 0x06
     906:	8d 83       	std	Y+5, r24	; 0x05
     908:	0f c0       	rjmp	.+30     	; 0x928 <idle+0x4d4>
     90a:	80 e9       	ldi	r24, 0x90	; 144
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	9c 83       	std	Y+4, r25	; 0x04
     910:	8b 83       	std	Y+3, r24	; 0x03
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <idle+0x4c2>
     91a:	9c 83       	std	Y+4, r25	; 0x04
     91c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	9e 81       	ldd	r25, Y+6	; 0x06
     922:	01 97       	sbiw	r24, 0x01	; 1
     924:	9e 83       	std	Y+6, r25	; 0x06
     926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	9e 81       	ldd	r25, Y+6	; 0x06
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	69 f7       	brne	.-38     	; 0x90a <idle+0x4b6>
     930:	14 c0       	rjmp	.+40     	; 0x95a <idle+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     932:	6f 81       	ldd	r22, Y+7	; 0x07
     934:	78 85       	ldd	r23, Y+8	; 0x08
     936:	89 85       	ldd	r24, Y+9	; 0x09
     938:	9a 85       	ldd	r25, Y+10	; 0x0a
     93a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	9e 83       	std	Y+6, r25	; 0x06
     944:	8d 83       	std	Y+5, r24	; 0x05
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	9a 81       	ldd	r25, Y+2	; 0x02
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <idle+0x4fe>
     956:	9a 83       	std	Y+2, r25	; 0x02
     958:	89 83       	std	Y+1, r24	; 0x01
 
 if(TEST)
 	printf("IDLE CALL!\\n");
}
     95a:	ca 5b       	subi	r28, 0xBA	; 186
     95c:	df 4f       	sbci	r29, 0xFF	; 255
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <shot>:
 
void shot(){		//Camera Command(shot)
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nSHOT  ");
 command = SHOT;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 a8 01 	sts	0x01A8, r25
     982:	80 93 a7 01 	sts	0x01A7, r24
 idle_cnt = 0;
     986:	10 92 a2 01 	sts	0x01A2, r1
     98a:	10 92 a1 01 	sts	0x01A1, r1
 shot_cnt = 0;
     98e:	10 92 a4 01 	sts	0x01A4, r1
     992:	10 92 a3 01 	sts	0x01A3, r1
 putchar1(0x56);
     996:	86 e5       	ldi	r24, 0x56	; 86
     998:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x36);
     9a2:	86 e3       	ldi	r24, 0x36	; 54
     9a4:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x01);
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 img_cnt = 0;
     9b4:	10 92 98 01 	sts	0x0198, r1
     9b8:	10 92 97 01 	sts	0x0197, r1
}
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	08 95       	ret

000009c2 <call_size>:
 
void call_size(){	//Camera Command(call_size)
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nCALL_SIZE ");
 command = CALL_SIZE;
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	90 93 a8 01 	sts	0x01A8, r25
     9d2:	80 93 a7 01 	sts	0x01A7, r24
 shot_cnt = 0;
     9d6:	10 92 a4 01 	sts	0x01A4, r1
     9da:	10 92 a3 01 	sts	0x01A3, r1
 call_size_cnt = 0;
     9de:	10 92 a6 01 	sts	0x01A6, r1
     9e2:	10 92 a5 01 	sts	0x01A5, r1
 call_size_flag = 1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	90 93 9a 01 	sts	0x019A, r25
     9ee:	80 93 99 01 	sts	0x0199, r24
 putchar1(0x56);
     9f2:	86 e5       	ldi	r24, 0x56	; 86
     9f4:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x34);
     9fe:	84 e3       	ldi	r24, 0x34	; 52
     a00:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x01);
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
}
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	08 95       	ret

00000a16 <call_img>:
 
void call_img(){	//Camera Command(call_img)
     a16:	df 93       	push	r29
     a18:	cf 93       	push	r28
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nCALL_IMG ");
 command = 0;
     a1e:	10 92 a8 01 	sts	0x01A8, r1
     a22:	10 92 a7 01 	sts	0x01A7, r1
 call_size_flag = 0;
     a26:	10 92 9a 01 	sts	0x019A, r1
     a2a:	10 92 99 01 	sts	0x0199, r1
 call_img_flag = 1;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	90 93 9c 01 	sts	0x019C, r25
     a36:	80 93 9b 01 	sts	0x019B, r24
 img_data_start_flag = 0;
     a3a:	10 92 9e 01 	sts	0x019E, r1
     a3e:	10 92 9d 01 	sts	0x019D, r1
 putchar1(0x56);
     a42:	86 e5       	ldi	r24, 0x56	; 86
     a44:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x32);
     a4e:	82 e3       	ldi	r24, 0x32	; 50
     a50:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x0c);
     a54:	8c e0       	ldi	r24, 0x0C	; 12
     a56:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x0A);
     a60:	8a e0       	ldi	r24, 0x0A	; 10
     a62:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(img_buffer[7]);
     a8a:	80 91 07 01 	lds	r24, 0x0107
     a8e:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(img_buffer[8]);
     a92:	80 91 08 01 	lds	r24, 0x0108
     a96:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x0A);
     aa0:	8a e0       	ldi	r24, 0x0A	; 10
     aa2:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 img_cnt = 0;
     aa6:	10 92 98 01 	sts	0x0198, r1
     aaa:	10 92 97 01 	sts	0x0197, r1
}
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	08 95       	ret

00000ab4 <zip>:
 
void zip(){			//Camera Command(zip)
     ab4:	df 93       	push	r29
     ab6:	cf 93       	push	r28
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nZIP  ");
 putchar1(0x56);
     abc:	86 e5       	ldi	r24, 0x56	; 86
     abe:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x00);
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x31);
     ac8:	81 e3       	ldi	r24, 0x31	; 49
     aca:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x05);
     ace:	85 e0       	ldi	r24, 0x05	; 5
     ad0:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x01);
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x01);
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x12);
     ae0:	82 e1       	ldi	r24, 0x12	; 18
     ae2:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0x04);
     ae6:	84 e0       	ldi	r24, 0x04	; 4
     ae8:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 putchar1(0xFF);
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	0e 94 b4 01 	call	0x368	; 0x368 <putchar1>
 img_cnt = 0;
     af2:	10 92 98 01 	sts	0x0198, r1
     af6:	10 92 97 01 	sts	0x0197, r1
}
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	08 95       	ret

00000b00 <init_camera>:

void init_camera()
{
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	df 93       	push	r29
     b06:	cf 93       	push	r28
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	c6 54       	subi	r28, 0x46	; 70
     b0e:	d0 40       	sbci	r29, 0x00	; 0
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
 if(TEST)
 	printf("INIT CAMERA CALL!\n");

	 reset(); _delay_ms(1000);
     b1a:	0e 94 cd 01 	call	0x39a	; 0x39a <reset>
     b1e:	fe 01       	movw	r30, r28
     b20:	ed 5b       	subi	r30, 0xBD	; 189
     b22:	ff 4f       	sbci	r31, 0xFF	; 255
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	aa e7       	ldi	r26, 0x7A	; 122
     b2a:	b4 e4       	ldi	r27, 0x44	; 68
     b2c:	80 83       	st	Z, r24
     b2e:	91 83       	std	Z+1, r25	; 0x01
     b30:	a2 83       	std	Z+2, r26	; 0x02
     b32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b34:	8e 01       	movw	r16, r28
     b36:	01 5c       	subi	r16, 0xC1	; 193
     b38:	1f 4f       	sbci	r17, 0xFF	; 255
     b3a:	fe 01       	movw	r30, r28
     b3c:	ed 5b       	subi	r30, 0xBD	; 189
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	60 81       	ld	r22, Z
     b42:	71 81       	ldd	r23, Z+1	; 0x01
     b44:	82 81       	ldd	r24, Z+2	; 0x02
     b46:	93 81       	ldd	r25, Z+3	; 0x03
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	4a e7       	ldi	r20, 0x7A	; 122
     b4e:	55 e4       	ldi	r21, 0x45	; 69
     b50:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	f8 01       	movw	r30, r16
     b5a:	80 83       	st	Z, r24
     b5c:	91 83       	std	Z+1, r25	; 0x01
     b5e:	a2 83       	std	Z+2, r26	; 0x02
     b60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b62:	fe 01       	movw	r30, r28
     b64:	ff 96       	adiw	r30, 0x3f	; 63
     b66:	60 81       	ld	r22, Z
     b68:	71 81       	ldd	r23, Z+1	; 0x01
     b6a:	82 81       	ldd	r24, Z+2	; 0x02
     b6c:	93 81       	ldd	r25, Z+3	; 0x03
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e8       	ldi	r20, 0x80	; 128
     b74:	5f e3       	ldi	r21, 0x3F	; 63
     b76:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     b7a:	88 23       	and	r24, r24
     b7c:	2c f4       	brge	.+10     	; 0xb88 <init_camera+0x88>
		__ticks = 1;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	9e af       	std	Y+62, r25	; 0x3e
     b84:	8d af       	std	Y+61, r24	; 0x3d
     b86:	46 c0       	rjmp	.+140    	; 0xc14 <init_camera+0x114>
	else if (__tmp > 65535)
     b88:	fe 01       	movw	r30, r28
     b8a:	ff 96       	adiw	r30, 0x3f	; 63
     b8c:	60 81       	ld	r22, Z
     b8e:	71 81       	ldd	r23, Z+1	; 0x01
     b90:	82 81       	ldd	r24, Z+2	; 0x02
     b92:	93 81       	ldd	r25, Z+3	; 0x03
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	3f ef       	ldi	r19, 0xFF	; 255
     b98:	4f e7       	ldi	r20, 0x7F	; 127
     b9a:	57 e4       	ldi	r21, 0x47	; 71
     b9c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     ba0:	18 16       	cp	r1, r24
     ba2:	64 f5       	brge	.+88     	; 0xbfc <init_camera+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba4:	fe 01       	movw	r30, r28
     ba6:	ed 5b       	subi	r30, 0xBD	; 189
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	60 81       	ld	r22, Z
     bac:	71 81       	ldd	r23, Z+1	; 0x01
     bae:	82 81       	ldd	r24, Z+2	; 0x02
     bb0:	93 81       	ldd	r25, Z+3	; 0x03
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e2       	ldi	r20, 0x20	; 32
     bb8:	51 e4       	ldi	r21, 0x41	; 65
     bba:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	bc 01       	movw	r22, r24
     bc4:	cd 01       	movw	r24, r26
     bc6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	9e af       	std	Y+62, r25	; 0x3e
     bd0:	8d af       	std	Y+61, r24	; 0x3d
     bd2:	0f c0       	rjmp	.+30     	; 0xbf2 <init_camera+0xf2>
     bd4:	80 e9       	ldi	r24, 0x90	; 144
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	9c af       	std	Y+60, r25	; 0x3c
     bda:	8b af       	std	Y+59, r24	; 0x3b
     bdc:	8b ad       	ldd	r24, Y+59	; 0x3b
     bde:	9c ad       	ldd	r25, Y+60	; 0x3c
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <init_camera+0xe0>
     be4:	9c af       	std	Y+60, r25	; 0x3c
     be6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be8:	8d ad       	ldd	r24, Y+61	; 0x3d
     bea:	9e ad       	ldd	r25, Y+62	; 0x3e
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	9e af       	std	Y+62, r25	; 0x3e
     bf0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf2:	8d ad       	ldd	r24, Y+61	; 0x3d
     bf4:	9e ad       	ldd	r25, Y+62	; 0x3e
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	69 f7       	brne	.-38     	; 0xbd4 <init_camera+0xd4>
     bfa:	16 c0       	rjmp	.+44     	; 0xc28 <init_camera+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bfc:	fe 01       	movw	r30, r28
     bfe:	ff 96       	adiw	r30, 0x3f	; 63
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e af       	std	Y+62, r25	; 0x3e
     c12:	8d af       	std	Y+61, r24	; 0x3d
     c14:	8d ad       	ldd	r24, Y+61	; 0x3d
     c16:	9e ad       	ldd	r25, Y+62	; 0x3e
     c18:	9a af       	std	Y+58, r25	; 0x3a
     c1a:	89 af       	std	Y+57, r24	; 0x39
     c1c:	89 ad       	ldd	r24, Y+57	; 0x39
     c1e:	9a ad       	ldd	r25, Y+58	; 0x3a
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <init_camera+0x120>
     c24:	9a af       	std	Y+58, r25	; 0x3a
     c26:	89 af       	std	Y+57, r24	; 0x39
	 resize(); _delay_ms(50);
     c28:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <resize>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a8 e4       	ldi	r26, 0x48	; 72
     c32:	b2 e4       	ldi	r27, 0x42	; 66
     c34:	8d ab       	std	Y+53, r24	; 0x35
     c36:	9e ab       	std	Y+54, r25	; 0x36
     c38:	af ab       	std	Y+55, r26	; 0x37
     c3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c3c:	6d a9       	ldd	r22, Y+53	; 0x35
     c3e:	7e a9       	ldd	r23, Y+54	; 0x36
     c40:	8f a9       	ldd	r24, Y+55	; 0x37
     c42:	98 ad       	ldd	r25, Y+56	; 0x38
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	4a e7       	ldi	r20, 0x7A	; 122
     c4a:	55 e4       	ldi	r21, 0x45	; 69
     c4c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	89 ab       	std	Y+49, r24	; 0x31
     c56:	9a ab       	std	Y+50, r25	; 0x32
     c58:	ab ab       	std	Y+51, r26	; 0x33
     c5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c5c:	69 a9       	ldd	r22, Y+49	; 0x31
     c5e:	7a a9       	ldd	r23, Y+50	; 0x32
     c60:	8b a9       	ldd	r24, Y+51	; 0x33
     c62:	9c a9       	ldd	r25, Y+52	; 0x34
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e8       	ldi	r20, 0x80	; 128
     c6a:	5f e3       	ldi	r21, 0x3F	; 63
     c6c:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     c70:	88 23       	and	r24, r24
     c72:	2c f4       	brge	.+10     	; 0xc7e <init_camera+0x17e>
		__ticks = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	98 ab       	std	Y+48, r25	; 0x30
     c7a:	8f a7       	std	Y+47, r24	; 0x2f
     c7c:	3f c0       	rjmp	.+126    	; 0xcfc <init_camera+0x1fc>
	else if (__tmp > 65535)
     c7e:	69 a9       	ldd	r22, Y+49	; 0x31
     c80:	7a a9       	ldd	r23, Y+50	; 0x32
     c82:	8b a9       	ldd	r24, Y+51	; 0x33
     c84:	9c a9       	ldd	r25, Y+52	; 0x34
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	3f ef       	ldi	r19, 0xFF	; 255
     c8a:	4f e7       	ldi	r20, 0x7F	; 127
     c8c:	57 e4       	ldi	r21, 0x47	; 71
     c8e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     c92:	18 16       	cp	r1, r24
     c94:	4c f5       	brge	.+82     	; 0xce8 <init_camera+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c96:	6d a9       	ldd	r22, Y+53	; 0x35
     c98:	7e a9       	ldd	r23, Y+54	; 0x36
     c9a:	8f a9       	ldd	r24, Y+55	; 0x37
     c9c:	98 ad       	ldd	r25, Y+56	; 0x38
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e2       	ldi	r20, 0x20	; 32
     ca4:	51 e4       	ldi	r21, 0x41	; 65
     ca6:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	98 ab       	std	Y+48, r25	; 0x30
     cbc:	8f a7       	std	Y+47, r24	; 0x2f
     cbe:	0f c0       	rjmp	.+30     	; 0xcde <init_camera+0x1de>
     cc0:	80 e9       	ldi	r24, 0x90	; 144
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	9e a7       	std	Y+46, r25	; 0x2e
     cc6:	8d a7       	std	Y+45, r24	; 0x2d
     cc8:	8d a5       	ldd	r24, Y+45	; 0x2d
     cca:	9e a5       	ldd	r25, Y+46	; 0x2e
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <init_camera+0x1cc>
     cd0:	9e a7       	std	Y+46, r25	; 0x2e
     cd2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
     cd6:	98 a9       	ldd	r25, Y+48	; 0x30
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	98 ab       	std	Y+48, r25	; 0x30
     cdc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cde:	8f a5       	ldd	r24, Y+47	; 0x2f
     ce0:	98 a9       	ldd	r25, Y+48	; 0x30
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	69 f7       	brne	.-38     	; 0xcc0 <init_camera+0x1c0>
     ce6:	14 c0       	rjmp	.+40     	; 0xd10 <init_camera+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce8:	69 a9       	ldd	r22, Y+49	; 0x31
     cea:	7a a9       	ldd	r23, Y+50	; 0x32
     cec:	8b a9       	ldd	r24, Y+51	; 0x33
     cee:	9c a9       	ldd	r25, Y+52	; 0x34
     cf0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	98 ab       	std	Y+48, r25	; 0x30
     cfa:	8f a7       	std	Y+47, r24	; 0x2f
     cfc:	8f a5       	ldd	r24, Y+47	; 0x2f
     cfe:	98 a9       	ldd	r25, Y+48	; 0x30
     d00:	9c a7       	std	Y+44, r25	; 0x2c
     d02:	8b a7       	std	Y+43, r24	; 0x2b
     d04:	8b a5       	ldd	r24, Y+43	; 0x2b
     d06:	9c a5       	ldd	r25, Y+44	; 0x2c
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <init_camera+0x208>
     d0c:	9c a7       	std	Y+44, r25	; 0x2c
     d0e:	8b a7       	std	Y+43, r24	; 0x2b
	 zip(); _delay_ms(50);
     d10:	0e 94 5a 05 	call	0xab4	; 0xab4 <zip>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a8 e4       	ldi	r26, 0x48	; 72
     d1a:	b2 e4       	ldi	r27, 0x42	; 66
     d1c:	8f a3       	std	Y+39, r24	; 0x27
     d1e:	98 a7       	std	Y+40, r25	; 0x28
     d20:	a9 a7       	std	Y+41, r26	; 0x29
     d22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d24:	6f a1       	ldd	r22, Y+39	; 0x27
     d26:	78 a5       	ldd	r23, Y+40	; 0x28
     d28:	89 a5       	ldd	r24, Y+41	; 0x29
     d2a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	4a e7       	ldi	r20, 0x7A	; 122
     d32:	55 e4       	ldi	r21, 0x45	; 69
     d34:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	8b a3       	std	Y+35, r24	; 0x23
     d3e:	9c a3       	std	Y+36, r25	; 0x24
     d40:	ad a3       	std	Y+37, r26	; 0x25
     d42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d44:	6b a1       	ldd	r22, Y+35	; 0x23
     d46:	7c a1       	ldd	r23, Y+36	; 0x24
     d48:	8d a1       	ldd	r24, Y+37	; 0x25
     d4a:	9e a1       	ldd	r25, Y+38	; 0x26
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     d58:	88 23       	and	r24, r24
     d5a:	2c f4       	brge	.+10     	; 0xd66 <init_camera+0x266>
		__ticks = 1;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	9a a3       	std	Y+34, r25	; 0x22
     d62:	89 a3       	std	Y+33, r24	; 0x21
     d64:	3f c0       	rjmp	.+126    	; 0xde4 <init_camera+0x2e4>
	else if (__tmp > 65535)
     d66:	6b a1       	ldd	r22, Y+35	; 0x23
     d68:	7c a1       	ldd	r23, Y+36	; 0x24
     d6a:	8d a1       	ldd	r24, Y+37	; 0x25
     d6c:	9e a1       	ldd	r25, Y+38	; 0x26
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	4f e7       	ldi	r20, 0x7F	; 127
     d74:	57 e4       	ldi	r21, 0x47	; 71
     d76:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	4c f5       	brge	.+82     	; 0xdd0 <init_camera+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7e:	6f a1       	ldd	r22, Y+39	; 0x27
     d80:	78 a5       	ldd	r23, Y+40	; 0x28
     d82:	89 a5       	ldd	r24, Y+41	; 0x29
     d84:	9a a5       	ldd	r25, Y+42	; 0x2a
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e2       	ldi	r20, 0x20	; 32
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	bc 01       	movw	r22, r24
     d98:	cd 01       	movw	r24, r26
     d9a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	9a a3       	std	Y+34, r25	; 0x22
     da4:	89 a3       	std	Y+33, r24	; 0x21
     da6:	0f c0       	rjmp	.+30     	; 0xdc6 <init_camera+0x2c6>
     da8:	80 e9       	ldi	r24, 0x90	; 144
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	98 a3       	std	Y+32, r25	; 0x20
     dae:	8f 8f       	std	Y+31, r24	; 0x1f
     db0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db2:	98 a1       	ldd	r25, Y+32	; 0x20
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <init_camera+0x2b4>
     db8:	98 a3       	std	Y+32, r25	; 0x20
     dba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbc:	89 a1       	ldd	r24, Y+33	; 0x21
     dbe:	9a a1       	ldd	r25, Y+34	; 0x22
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	9a a3       	std	Y+34, r25	; 0x22
     dc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc6:	89 a1       	ldd	r24, Y+33	; 0x21
     dc8:	9a a1       	ldd	r25, Y+34	; 0x22
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	69 f7       	brne	.-38     	; 0xda8 <init_camera+0x2a8>
     dce:	14 c0       	rjmp	.+40     	; 0xdf8 <init_camera+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd0:	6b a1       	ldd	r22, Y+35	; 0x23
     dd2:	7c a1       	ldd	r23, Y+36	; 0x24
     dd4:	8d a1       	ldd	r24, Y+37	; 0x25
     dd6:	9e a1       	ldd	r25, Y+38	; 0x26
     dd8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	9a a3       	std	Y+34, r25	; 0x22
     de2:	89 a3       	std	Y+33, r24	; 0x21
     de4:	89 a1       	ldd	r24, Y+33	; 0x21
     de6:	9a a1       	ldd	r25, Y+34	; 0x22
     de8:	9e 8f       	std	Y+30, r25	; 0x1e
     dea:	8d 8f       	std	Y+29, r24	; 0x1d
     dec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <init_camera+0x2f0>
     df4:	9e 8f       	std	Y+30, r25	; 0x1e
     df6:	8d 8f       	std	Y+29, r24	; 0x1d
	 set_rate(); _delay_ms(50);		//
     df8:	0e 94 0a 02 	call	0x414	; 0x414 <set_rate>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a8 e4       	ldi	r26, 0x48	; 72
     e02:	b2 e4       	ldi	r27, 0x42	; 66
     e04:	89 8f       	std	Y+25, r24	; 0x19
     e06:	9a 8f       	std	Y+26, r25	; 0x1a
     e08:	ab 8f       	std	Y+27, r26	; 0x1b
     e0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0c:	69 8d       	ldd	r22, Y+25	; 0x19
     e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	4a e7       	ldi	r20, 0x7A	; 122
     e1a:	55 e4       	ldi	r21, 0x45	; 69
     e1c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	8d 8b       	std	Y+21, r24	; 0x15
     e26:	9e 8b       	std	Y+22, r25	; 0x16
     e28:	af 8b       	std	Y+23, r26	; 0x17
     e2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e2c:	6d 89       	ldd	r22, Y+21	; 0x15
     e2e:	7e 89       	ldd	r23, Y+22	; 0x16
     e30:	8f 89       	ldd	r24, Y+23	; 0x17
     e32:	98 8d       	ldd	r25, Y+24	; 0x18
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e8       	ldi	r20, 0x80	; 128
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     e40:	88 23       	and	r24, r24
     e42:	2c f4       	brge	.+10     	; 0xe4e <init_camera+0x34e>
		__ticks = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9c 8b       	std	Y+20, r25	; 0x14
     e4a:	8b 8b       	std	Y+19, r24	; 0x13
     e4c:	3f c0       	rjmp	.+126    	; 0xecc <init_camera+0x3cc>
	else if (__tmp > 65535)
     e4e:	6d 89       	ldd	r22, Y+21	; 0x15
     e50:	7e 89       	ldd	r23, Y+22	; 0x16
     e52:	8f 89       	ldd	r24, Y+23	; 0x17
     e54:	98 8d       	ldd	r25, Y+24	; 0x18
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	3f ef       	ldi	r19, 0xFF	; 255
     e5a:	4f e7       	ldi	r20, 0x7F	; 127
     e5c:	57 e4       	ldi	r21, 0x47	; 71
     e5e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     e62:	18 16       	cp	r1, r24
     e64:	4c f5       	brge	.+82     	; 0xeb8 <init_camera+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e66:	69 8d       	ldd	r22, Y+25	; 0x19
     e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e2       	ldi	r20, 0x20	; 32
     e74:	51 e4       	ldi	r21, 0x41	; 65
     e76:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	9c 8b       	std	Y+20, r25	; 0x14
     e8c:	8b 8b       	std	Y+19, r24	; 0x13
     e8e:	0f c0       	rjmp	.+30     	; 0xeae <init_camera+0x3ae>
     e90:	80 e9       	ldi	r24, 0x90	; 144
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	9a 8b       	std	Y+18, r25	; 0x12
     e96:	89 8b       	std	Y+17, r24	; 0x11
     e98:	89 89       	ldd	r24, Y+17	; 0x11
     e9a:	9a 89       	ldd	r25, Y+18	; 0x12
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <init_camera+0x39c>
     ea0:	9a 8b       	std	Y+18, r25	; 0x12
     ea2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea4:	8b 89       	ldd	r24, Y+19	; 0x13
     ea6:	9c 89       	ldd	r25, Y+20	; 0x14
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	9c 8b       	std	Y+20, r25	; 0x14
     eac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eae:	8b 89       	ldd	r24, Y+19	; 0x13
     eb0:	9c 89       	ldd	r25, Y+20	; 0x14
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	69 f7       	brne	.-38     	; 0xe90 <init_camera+0x390>
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <init_camera+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb8:	6d 89       	ldd	r22, Y+21	; 0x15
     eba:	7e 89       	ldd	r23, Y+22	; 0x16
     ebc:	8f 89       	ldd	r24, Y+23	; 0x17
     ebe:	98 8d       	ldd	r25, Y+24	; 0x18
     ec0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	9c 8b       	std	Y+20, r25	; 0x14
     eca:	8b 8b       	std	Y+19, r24	; 0x13
     ecc:	8b 89       	ldd	r24, Y+19	; 0x13
     ece:	9c 89       	ldd	r25, Y+20	; 0x14
     ed0:	98 8b       	std	Y+16, r25	; 0x10
     ed2:	8f 87       	std	Y+15, r24	; 0x0f
     ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed6:	98 89       	ldd	r25, Y+16	; 0x10
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <init_camera+0x3d8>
     edc:	98 8b       	std	Y+16, r25	; 0x10
     ede:	8f 87       	std	Y+15, r24	; 0x0f
	 UBRR0L = 0x08; printf("\r\n chang boudrate"); _delay_ms(50);
     ee0:	e9 e2       	ldi	r30, 0x29	; 41
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	88 e0       	ldi	r24, 0x08	; 8
     ee6:	80 83       	st	Z, r24
     ee8:	00 d0       	rcall	.+0      	; 0xeea <init_camera+0x3ea>
     eea:	ed b7       	in	r30, 0x3d	; 61
     eec:	fe b7       	in	r31, 0x3e	; 62
     eee:	31 96       	adiw	r30, 0x01	; 1
     ef0:	89 e0       	ldi	r24, 0x09	; 9
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
     ef8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <printf>
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a8 e4       	ldi	r26, 0x48	; 72
     f06:	b2 e4       	ldi	r27, 0x42	; 66
     f08:	8b 87       	std	Y+11, r24	; 0x0b
     f0a:	9c 87       	std	Y+12, r25	; 0x0c
     f0c:	ad 87       	std	Y+13, r26	; 0x0d
     f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f10:	6b 85       	ldd	r22, Y+11	; 0x0b
     f12:	7c 85       	ldd	r23, Y+12	; 0x0c
     f14:	8d 85       	ldd	r24, Y+13	; 0x0d
     f16:	9e 85       	ldd	r25, Y+14	; 0x0e
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	4a e7       	ldi	r20, 0x7A	; 122
     f1e:	55 e4       	ldi	r21, 0x45	; 69
     f20:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	8f 83       	std	Y+7, r24	; 0x07
     f2a:	98 87       	std	Y+8, r25	; 0x08
     f2c:	a9 87       	std	Y+9, r26	; 0x09
     f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f30:	6f 81       	ldd	r22, Y+7	; 0x07
     f32:	78 85       	ldd	r23, Y+8	; 0x08
     f34:	89 85       	ldd	r24, Y+9	; 0x09
     f36:	9a 85       	ldd	r25, Y+10	; 0x0a
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e8       	ldi	r20, 0x80	; 128
     f3e:	5f e3       	ldi	r21, 0x3F	; 63
     f40:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
     f44:	88 23       	and	r24, r24
     f46:	2c f4       	brge	.+10     	; 0xf52 <init_camera+0x452>
		__ticks = 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	9e 83       	std	Y+6, r25	; 0x06
     f4e:	8d 83       	std	Y+5, r24	; 0x05
     f50:	3f c0       	rjmp	.+126    	; 0xfd0 <init_camera+0x4d0>
	else if (__tmp > 65535)
     f52:	6f 81       	ldd	r22, Y+7	; 0x07
     f54:	78 85       	ldd	r23, Y+8	; 0x08
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	3f ef       	ldi	r19, 0xFF	; 255
     f5e:	4f e7       	ldi	r20, 0x7F	; 127
     f60:	57 e4       	ldi	r21, 0x47	; 71
     f62:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
     f66:	18 16       	cp	r1, r24
     f68:	4c f5       	brge	.+82     	; 0xfbc <init_camera+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f70:	9e 85       	ldd	r25, Y+14	; 0x0e
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e2       	ldi	r20, 0x20	; 32
     f78:	51 e4       	ldi	r21, 0x41	; 65
     f7a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	bc 01       	movw	r22, r24
     f84:	cd 01       	movw	r24, r26
     f86:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	0f c0       	rjmp	.+30     	; 0xfb2 <init_camera+0x4b2>
     f94:	80 e9       	ldi	r24, 0x90	; 144
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <init_camera+0x4a0>
     fa4:	9c 83       	std	Y+4, r25	; 0x04
     fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	69 f7       	brne	.-38     	; 0xf94 <init_camera+0x494>
     fba:	14 c0       	rjmp	.+40     	; 0xfe4 <init_camera+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fbc:	6f 81       	ldd	r22, Y+7	; 0x07
     fbe:	78 85       	ldd	r23, Y+8	; 0x08
     fc0:	89 85       	ldd	r24, Y+9	; 0x09
     fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	9e 83       	std	Y+6, r25	; 0x06
     fce:	8d 83       	std	Y+5, r24	; 0x05
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	9e 81       	ldd	r25, Y+6	; 0x06
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <init_camera+0x4dc>
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	 //idle();
}
     fe4:	ca 5b       	subi	r28, 0xBA	; 186
     fe6:	df 4f       	sbci	r29, 0xFF	; 255
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <init_buffer>:



void init_buffer(int select)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <init_buffer+0x6>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <init_buffer+0x8>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	9c 83       	std	Y+4, r25	; 0x04
    100a:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	switch(select)
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	9c 81       	ldd	r25, Y+4	; 0x04
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	99 f4       	brne	.+38     	; 0x103a <init_buffer+0x3e>
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    1014:	1a 82       	std	Y+2, r1	; 0x02
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	0b c0       	rjmp	.+22     	; 0x1030 <init_buffer+0x34>
			img_buffer[i] = 0x00;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	fc 01       	movw	r30, r24
    1020:	e0 50       	subi	r30, 0x00	; 0
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	10 82       	st	Z, r1
	int i;
	
	switch(select)
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	89 30       	cpi	r24, 0x09	; 9
    1036:	91 05       	cpc	r25, r1
    1038:	84 f3       	brlt	.-32     	; 0x101a <init_buffer+0x1e>
			img_buffer[i] = 0x00;
		break;
	}
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <__vector_18>:


// *** USART 인터럽트
ISR(USART0_RX_vect)	//Camera의 수신완료 인터럽트
{
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	00 90 5b 00 	lds	r0, 0x005B
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	61 97       	sbiw	r28, 0x11	; 17
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	cd bf       	out	0x3d, r28	; 61
	char uart0_data = UDR0;
    107e:	ec e2       	ldi	r30, 0x2C	; 44
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 87       	std	Y+15, r24	; 0x0f

	switch(command)
    1086:	80 91 a7 01 	lds	r24, 0x01A7
    108a:	90 91 a8 01 	lds	r25, 0x01A8
    108e:	99 8b       	std	Y+17, r25	; 0x11
    1090:	88 8b       	std	Y+16, r24	; 0x10
    1092:	88 89       	ldd	r24, Y+16	; 0x10
    1094:	99 89       	ldd	r25, Y+17	; 0x11
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	91 05       	cpc	r25, r1
    109a:	a1 f0       	breq	.+40     	; 0x10c4 <__vector_18+0x7c>
    109c:	88 89       	ldd	r24, Y+16	; 0x10
    109e:	99 89       	ldd	r25, Y+17	; 0x11
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	c9 f0       	breq	.+50     	; 0x10d8 <__vector_18+0x90>
    10a6:	88 89       	ldd	r24, Y+16	; 0x10
    10a8:	99 89       	ldd	r25, Y+17	; 0x11
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	e9 f4       	brne	.+58     	; 0x10ea <__vector_18+0xa2>
	{
	case IDLE:
		idle_cnt++;
    10b0:	80 91 a1 01 	lds	r24, 0x01A1
    10b4:	90 91 a2 01 	lds	r25, 0x01A2
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	90 93 a2 01 	sts	0x01A2, r25
    10be:	80 93 a1 01 	sts	0x01A1, r24
    10c2:	13 c0       	rjmp	.+38     	; 0x10ea <__vector_18+0xa2>
		break;
	case SHOT:
		shot_cnt++;
    10c4:	80 91 a3 01 	lds	r24, 0x01A3
    10c8:	90 91 a4 01 	lds	r25, 0x01A4
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	90 93 a4 01 	sts	0x01A4, r25
    10d2:	80 93 a3 01 	sts	0x01A3, r24
    10d6:	09 c0       	rjmp	.+18     	; 0x10ea <__vector_18+0xa2>
		break;
	case CALL_SIZE:
		call_size_cnt++;
    10d8:	80 91 a5 01 	lds	r24, 0x01A5
    10dc:	90 91 a6 01 	lds	r25, 0x01A6
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	90 93 a6 01 	sts	0x01A6, r25
    10e6:	80 93 a5 01 	sts	0x01A5, r24
		break;
	}
	
	if(call_size_flag == 1)	{
    10ea:	80 91 99 01 	lds	r24, 0x0199
    10ee:	90 91 9a 01 	lds	r25, 0x019A
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	91 f4       	brne	.+36     	; 0x111c <__stack+0x1d>
		img_buffer[img_cnt] = uart0_data;
    10f8:	80 91 97 01 	lds	r24, 0x0197
    10fc:	90 91 98 01 	lds	r25, 0x0198
    1100:	fc 01       	movw	r30, r24
    1102:	e0 50       	subi	r30, 0x00	; 0
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	8f 85       	ldd	r24, Y+15	; 0x0f
    1108:	80 83       	st	Z, r24
		img_cnt++;
    110a:	80 91 97 01 	lds	r24, 0x0197
    110e:	90 91 98 01 	lds	r25, 0x0198
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	90 93 98 01 	sts	0x0198, r25
    1118:	80 93 97 01 	sts	0x0197, r24
	}

	if(uart0_data == 0xff)
    111c:	8f 85       	ldd	r24, Y+15	; 0x0f
    111e:	8f 3f       	cpi	r24, 0xFF	; 255
    1120:	31 f4       	brne	.+12     	; 0x112e <__stack+0x2f>
		img_data_start_flag = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	90 93 9e 01 	sts	0x019E, r25
    112a:	80 93 9d 01 	sts	0x019D, r24
	
	if(uart0_data == 0xd9)
    112e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1130:	89 3d       	cpi	r24, 0xD9	; 217
    1132:	39 f4       	brne	.+14     	; 0x1142 <__stack+0x43>
		img_data_cnt = 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	90 93 a0 01 	sts	0x01A0, r25
    113c:	80 93 9f 01 	sts	0x019F, r24
    1140:	97 c0       	rjmp	.+302    	; 0x1270 <__stack+0x171>
	else	{
		if(uart0_data == 0x76 && img_data_cnt == 1)	{
    1142:	8f 85       	ldd	r24, Y+15	; 0x0f
    1144:	86 37       	cpi	r24, 0x76	; 118
    1146:	09 f0       	breq	.+2      	; 0x114a <__stack+0x4b>
    1148:	8f c0       	rjmp	.+286    	; 0x1268 <__stack+0x169>
    114a:	80 91 9f 01 	lds	r24, 0x019F
    114e:	90 91 a0 01 	lds	r25, 0x01A0
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	09 f0       	breq	.+2      	; 0x115a <__stack+0x5b>
    1158:	87 c0       	rjmp	.+270    	; 0x1268 <__stack+0x169>
			img_data_start_flag = 0;
    115a:	10 92 9e 01 	sts	0x019E, r1
    115e:	10 92 9d 01 	sts	0x019D, r1
			img_data_cnt = 0;
    1162:	10 92 a0 01 	sts	0x01A0, r1
    1166:	10 92 9f 01 	sts	0x019F, r1
			printf("\n");
    116a:	8a e0       	ldi	r24, 0x0A	; 10
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 0c 13 	call	0x2618	; 0x2618 <putchar>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a8 ec       	ldi	r26, 0xC8	; 200
    1178:	b2 e4       	ldi	r27, 0x42	; 66
    117a:	8b 87       	std	Y+11, r24	; 0x0b
    117c:	9c 87       	std	Y+12, r25	; 0x0c
    117e:	ad 87       	std	Y+13, r26	; 0x0d
    1180:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1182:	6b 85       	ldd	r22, Y+11	; 0x0b
    1184:	7c 85       	ldd	r23, Y+12	; 0x0c
    1186:	8d 85       	ldd	r24, Y+13	; 0x0d
    1188:	9e 85       	ldd	r25, Y+14	; 0x0e
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	4a e7       	ldi	r20, 0x7A	; 122
    1190:	55 e4       	ldi	r21, 0x45	; 69
    1192:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	8f 83       	std	Y+7, r24	; 0x07
    119c:	98 87       	std	Y+8, r25	; 0x08
    119e:	a9 87       	std	Y+9, r26	; 0x09
    11a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a2:	6f 81       	ldd	r22, Y+7	; 0x07
    11a4:	78 85       	ldd	r23, Y+8	; 0x08
    11a6:	89 85       	ldd	r24, Y+9	; 0x09
    11a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e8       	ldi	r20, 0x80	; 128
    11b0:	5f e3       	ldi	r21, 0x3F	; 63
    11b2:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
    11b6:	88 23       	and	r24, r24
    11b8:	2c f4       	brge	.+10     	; 0x11c4 <__stack+0xc5>
		__ticks = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	9e 83       	std	Y+6, r25	; 0x06
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	3f c0       	rjmp	.+126    	; 0x1242 <__stack+0x143>
	else if (__tmp > 65535)
    11c4:	6f 81       	ldd	r22, Y+7	; 0x07
    11c6:	78 85       	ldd	r23, Y+8	; 0x08
    11c8:	89 85       	ldd	r24, Y+9	; 0x09
    11ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	3f ef       	ldi	r19, 0xFF	; 255
    11d0:	4f e7       	ldi	r20, 0x7F	; 127
    11d2:	57 e4       	ldi	r21, 0x47	; 71
    11d4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
    11d8:	18 16       	cp	r1, r24
    11da:	4c f5       	brge	.+82     	; 0x122e <__stack+0x12f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11de:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e2       	ldi	r20, 0x20	; 32
    11ea:	51 e4       	ldi	r21, 0x41	; 65
    11ec:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 83       	std	Y+5, r24	; 0x05
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <__stack+0x125>
    1206:	80 e9       	ldi	r24, 0x90	; 144
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <__stack+0x113>
    1216:	9c 83       	std	Y+4, r25	; 0x04
    1218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	9e 83       	std	Y+6, r25	; 0x06
    1222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	69 f7       	brne	.-38     	; 0x1206 <__stack+0x107>
    122c:	14 c0       	rjmp	.+40     	; 0x1256 <__stack+0x157>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122e:	6f 81       	ldd	r22, Y+7	; 0x07
    1230:	78 85       	ldd	r23, Y+8	; 0x08
    1232:	89 85       	ldd	r24, Y+9	; 0x09
    1234:	9a 85       	ldd	r25, Y+10	; 0x0a
    1236:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	9e 83       	std	Y+6, r25	; 0x06
    1240:	8d 83       	std	Y+5, r24	; 0x05
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <__stack+0x14f>
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			init_buffer(CAMERA);
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 fe 07 	call	0xffc	; 0xffc <init_buffer>

			TIMSK = 0x04;	//타이머 인에이블
    125e:	e7 e5       	ldi	r30, 0x57	; 87
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	84 e0       	ldi	r24, 0x04	; 4
    1264:	80 83       	st	Z, r24
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <__stack+0x171>

		}
		else
			img_data_cnt = 0;
    1268:	10 92 a0 01 	sts	0x01A0, r1
    126c:	10 92 9f 01 	sts	0x019F, r1
	}

	if(call_img_flag == 1 && img_data_start_flag == 1)
    1270:	80 91 9b 01 	lds	r24, 0x019B
    1274:	90 91 9c 01 	lds	r25, 0x019C
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	59 f4       	brne	.+22     	; 0x1294 <__stack+0x195>
    127e:	80 91 9d 01 	lds	r24, 0x019D
    1282:	90 91 9e 01 	lds	r25, 0x019E
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	21 f4       	brne	.+8      	; 0x1294 <__stack+0x195>
		UDR1 = uart0_data;
    128c:	ec e9       	ldi	r30, 0x9C	; 156
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8f 85       	ldd	r24, Y+15	; 0x0f
    1292:	80 83       	st	Z, r24
}
    1294:	61 96       	adiw	r28, 0x11	; 17
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	0f 90       	pop	r0
    12b8:	00 92 5b 00 	sts	0x005B, r0
    12bc:	0f 90       	pop	r0
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	0f 90       	pop	r0
    12c2:	1f 90       	pop	r1
    12c4:	18 95       	reti

000012c6 <__vector_30>:


ISR(USART1_RX_vect)	//Computer
{
    12c6:	1f 92       	push	r1
    12c8:	0f 92       	push	r0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	0f 92       	push	r0
    12ce:	00 90 5b 00 	lds	r0, 0x005B
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	2f 93       	push	r18
    12d8:	3f 93       	push	r19
    12da:	4f 93       	push	r20
    12dc:	5f 93       	push	r21
    12de:	6f 93       	push	r22
    12e0:	7f 93       	push	r23
    12e2:	8f 93       	push	r24
    12e4:	9f 93       	push	r25
    12e6:	af 93       	push	r26
    12e8:	bf 93       	push	r27
    12ea:	ef 93       	push	r30
    12ec:	ff 93       	push	r31
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <__vector_30+0x2e>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	/*** 현재는 컴퓨터로부터 받는 데이터 ***/
	/*** 나중에는 스마트폰으로부터 받는 데이터 ***/
	
	char ch = UDR1;
    12fa:	ec e9       	ldi	r30, 0x9C	; 156
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	89 83       	std	Y+1, r24	; 0x01

	switch(ch)
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3b 83       	std	Y+3, r19	; 0x03
    130a:	2a 83       	std	Y+2, r18	; 0x02
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	83 36       	cpi	r24, 0x63	; 99
    1312:	91 05       	cpc	r25, r1
    1314:	31 f0       	breq	.+12     	; 0x1322 <__vector_30+0x5c>
    1316:	2a 81       	ldd	r18, Y+2	; 0x02
    1318:	3b 81       	ldd	r19, Y+3	; 0x03
    131a:	24 36       	cpi	r18, 0x64	; 100
    131c:	31 05       	cpc	r19, r1
    131e:	51 f0       	breq	.+20     	; 0x1334 <__vector_30+0x6e>
    1320:	48 c0       	rjmp	.+144    	; 0x13b2 <__vector_30+0xec>
	{
			case 'c':
				TIMSK = 0x00;	//타이머 디스에이블
    1322:	e7 e5       	ldi	r30, 0x57	; 87
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	10 82       	st	Z, r1
				ADCSRA = 0x00;	//ADC 인터럽트 디스에이블
    1328:	e6 e2       	ldi	r30, 0x26	; 38
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	10 82       	st	Z, r1
				idle();
    132e:	0e 94 2a 02 	call	0x454	; 0x454 <idle>
    1332:	3f c0       	rjmp	.+126    	; 0x13b2 <__vector_30+0xec>
			break;
			case 'd'://
				printf("idle cnt : %d\n", idle_cnt);
    1334:	20 91 a1 01 	lds	r18, 0x01A1
    1338:	30 91 a2 01 	lds	r19, 0x01A2
    133c:	00 d0       	rcall	.+0      	; 0x133e <__vector_30+0x78>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <__vector_30+0x7a>
    1340:	ed b7       	in	r30, 0x3d	; 61
    1342:	fe b7       	in	r31, 0x3e	; 62
    1344:	31 96       	adiw	r30, 0x01	; 1
    1346:	8b e1       	ldi	r24, 0x1B	; 27
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
    134e:	33 83       	std	Z+3, r19	; 0x03
    1350:	22 83       	std	Z+2, r18	; 0x02
    1352:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <printf>
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
				printf("shot_cnt : %d\n", shot_cnt);
    135e:	20 91 a3 01 	lds	r18, 0x01A3
    1362:	30 91 a4 01 	lds	r19, 0x01A4
    1366:	00 d0       	rcall	.+0      	; 0x1368 <__vector_30+0xa2>
    1368:	00 d0       	rcall	.+0      	; 0x136a <__vector_30+0xa4>
    136a:	ed b7       	in	r30, 0x3d	; 61
    136c:	fe b7       	in	r31, 0x3e	; 62
    136e:	31 96       	adiw	r30, 0x01	; 1
    1370:	8a e2       	ldi	r24, 0x2A	; 42
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	80 83       	st	Z, r24
    1378:	33 83       	std	Z+3, r19	; 0x03
    137a:	22 83       	std	Z+2, r18	; 0x02
    137c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <printf>
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
				printf("call_size_cnt : %d\n", call_size_cnt);
    1388:	20 91 a5 01 	lds	r18, 0x01A5
    138c:	30 91 a6 01 	lds	r19, 0x01A6
    1390:	00 d0       	rcall	.+0      	; 0x1392 <__vector_30+0xcc>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <__vector_30+0xce>
    1394:	ed b7       	in	r30, 0x3d	; 61
    1396:	fe b7       	in	r31, 0x3e	; 62
    1398:	31 96       	adiw	r30, 0x01	; 1
    139a:	89 e3       	ldi	r24, 0x39	; 57
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	33 83       	std	Z+3, r19	; 0x03
    13a4:	22 83       	std	Z+2, r18	; 0x02
    13a6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <printf>
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
			break;
	}
	
	if(TEST)
		printf("%c", UDR1);	
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	00 92 5b 00 	sts	0x005B, r0
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <main>:


int main(void)
{
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	c6 54       	subi	r28, 0x46	; 70
    13f2:	d0 40       	sbci	r29, 0x00	; 0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    13fe:	0e 94 9c 01 	call	0x338	; 0x338 <init_devices>
	init_camera();
    1402:	0e 94 80 05 	call	0xb00	; 0xb00 <init_camera>

	printf("\r\n\r\nConnect with IronMan_Suit\r\n");
    1406:	8d e4       	ldi	r24, 0x4D	; 77
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	0e 94 13 13 	call	0x2626	; 0x2626 <puts>

	while(1)
	{
	// *** 카메라 관련 카운트*** //
	if(idle_cnt >= 3)	{
    140e:	80 91 a1 01 	lds	r24, 0x01A1
    1412:	90 91 a2 01 	lds	r25, 0x01A2
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	0c f4       	brge	.+2      	; 0x141e <main+0x3a>
    141c:	88 c0       	rjmp	.+272    	; 0x152e <main+0x14a>
    141e:	fe 01       	movw	r30, r28
    1420:	ed 5b       	subi	r30, 0xBD	; 189
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a4 e3       	ldi	r26, 0x34	; 52
    142a:	b2 e4       	ldi	r27, 0x42	; 66
    142c:	80 83       	st	Z, r24
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	a2 83       	std	Z+2, r26	; 0x02
    1432:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	8e 01       	movw	r16, r28
    1436:	01 5c       	subi	r16, 0xC1	; 193
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	fe 01       	movw	r30, r28
    143c:	ed 5b       	subi	r30, 0xBD	; 189
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	60 81       	ld	r22, Z
    1442:	71 81       	ldd	r23, Z+1	; 0x01
    1444:	82 81       	ldd	r24, Z+2	; 0x02
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4a e7       	ldi	r20, 0x7A	; 122
    144e:	55 e4       	ldi	r21, 0x45	; 69
    1450:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	f8 01       	movw	r30, r16
    145a:	80 83       	st	Z, r24
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	a2 83       	std	Z+2, r26	; 0x02
    1460:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1462:	fe 01       	movw	r30, r28
    1464:	ff 96       	adiw	r30, 0x3f	; 63
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	2c f4       	brge	.+10     	; 0x1488 <main+0xa4>
		__ticks = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9e af       	std	Y+62, r25	; 0x3e
    1484:	8d af       	std	Y+61, r24	; 0x3d
    1486:	46 c0       	rjmp	.+140    	; 0x1514 <main+0x130>
	else if (__tmp > 65535)
    1488:	fe 01       	movw	r30, r28
    148a:	ff 96       	adiw	r30, 0x3f	; 63
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	64 f5       	brge	.+88     	; 0x14fc <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	fe 01       	movw	r30, r28
    14a6:	ed 5b       	subi	r30, 0xBD	; 189
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e2       	ldi	r20, 0x20	; 32
    14b8:	51 e4       	ldi	r21, 0x41	; 65
    14ba:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9e af       	std	Y+62, r25	; 0x3e
    14d0:	8d af       	std	Y+61, r24	; 0x3d
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <main+0x10e>
    14d4:	80 e9       	ldi	r24, 0x90	; 144
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	9c af       	std	Y+60, r25	; 0x3c
    14da:	8b af       	std	Y+59, r24	; 0x3b
    14dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    14de:	9c ad       	ldd	r25, Y+60	; 0x3c
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <main+0xfc>
    14e4:	9c af       	std	Y+60, r25	; 0x3c
    14e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    14ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	9e af       	std	Y+62, r25	; 0x3e
    14f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    14f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	69 f7       	brne	.-38     	; 0x14d4 <main+0xf0>
    14fa:	16 c0       	rjmp	.+44     	; 0x1528 <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fc:	fe 01       	movw	r30, r28
    14fe:	ff 96       	adiw	r30, 0x3f	; 63
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9e af       	std	Y+62, r25	; 0x3e
    1512:	8d af       	std	Y+61, r24	; 0x3d
    1514:	8d ad       	ldd	r24, Y+61	; 0x3d
    1516:	9e ad       	ldd	r25, Y+62	; 0x3e
    1518:	9a af       	std	Y+58, r25	; 0x3a
    151a:	89 af       	std	Y+57, r24	; 0x39
    151c:	89 ad       	ldd	r24, Y+57	; 0x39
    151e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <main+0x13c>
    1524:	9a af       	std	Y+58, r25	; 0x3a
    1526:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(45);
		shot();
    1528:	0e 94 b9 04 	call	0x972	; 0x972 <shot>
    152c:	70 cf       	rjmp	.-288    	; 0x140e <main+0x2a>
		continue;
	}
	else if(shot_cnt == 5)	{
    152e:	80 91 a3 01 	lds	r24, 0x01A3
    1532:	90 91 a4 01 	lds	r25, 0x01A4
    1536:	85 30       	cpi	r24, 0x05	; 5
    1538:	91 05       	cpc	r25, r1
    153a:	19 f4       	brne	.+6      	; 0x1542 <main+0x15e>
		call_size();
    153c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <call_size>
    1540:	66 cf       	rjmp	.-308    	; 0x140e <main+0x2a>
		continue;
	}
	else if(call_size_cnt == 9)	{
    1542:	80 91 a5 01 	lds	r24, 0x01A5
    1546:	90 91 a6 01 	lds	r25, 0x01A6
    154a:	89 30       	cpi	r24, 0x09	; 9
    154c:	91 05       	cpc	r25, r1
    154e:	09 f0       	breq	.+2      	; 0x1552 <main+0x16e>
    1550:	79 c0       	rjmp	.+242    	; 0x1644 <main+0x260>
		call_size_cnt = 0;
    1552:	10 92 a6 01 	sts	0x01A6, r1
    1556:	10 92 a5 01 	sts	0x01A5, r1
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a8 e4       	ldi	r26, 0x48	; 72
    1560:	b2 e4       	ldi	r27, 0x42	; 66
    1562:	8d ab       	std	Y+53, r24	; 0x35
    1564:	9e ab       	std	Y+54, r25	; 0x36
    1566:	af ab       	std	Y+55, r26	; 0x37
    1568:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	6d a9       	ldd	r22, Y+53	; 0x35
    156c:	7e a9       	ldd	r23, Y+54	; 0x36
    156e:	8f a9       	ldd	r24, Y+55	; 0x37
    1570:	98 ad       	ldd	r25, Y+56	; 0x38
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a e7       	ldi	r20, 0x7A	; 122
    1578:	55 e4       	ldi	r21, 0x45	; 69
    157a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	89 ab       	std	Y+49, r24	; 0x31
    1584:	9a ab       	std	Y+50, r25	; 0x32
    1586:	ab ab       	std	Y+51, r26	; 0x33
    1588:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    158a:	69 a9       	ldd	r22, Y+49	; 0x31
    158c:	7a a9       	ldd	r23, Y+50	; 0x32
    158e:	8b a9       	ldd	r24, Y+51	; 0x33
    1590:	9c a9       	ldd	r25, Y+52	; 0x34
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <main+0x1c8>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	98 ab       	std	Y+48, r25	; 0x30
    15a8:	8f a7       	std	Y+47, r24	; 0x2f
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <main+0x246>
	else if (__tmp > 65535)
    15ac:	69 a9       	ldd	r22, Y+49	; 0x31
    15ae:	7a a9       	ldd	r23, Y+50	; 0x32
    15b0:	8b a9       	ldd	r24, Y+51	; 0x33
    15b2:	9c a9       	ldd	r25, Y+52	; 0x34
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <main+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	6d a9       	ldd	r22, Y+53	; 0x35
    15c6:	7e a9       	ldd	r23, Y+54	; 0x36
    15c8:	8f a9       	ldd	r24, Y+55	; 0x37
    15ca:	98 ad       	ldd	r25, Y+56	; 0x38
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	98 ab       	std	Y+48, r25	; 0x30
    15ea:	8f a7       	std	Y+47, r24	; 0x2f
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <main+0x228>
    15ee:	80 e9       	ldi	r24, 0x90	; 144
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	9e a7       	std	Y+46, r25	; 0x2e
    15f4:	8d a7       	std	Y+45, r24	; 0x2d
    15f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <main+0x216>
    15fe:	9e a7       	std	Y+46, r25	; 0x2e
    1600:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8f a5       	ldd	r24, Y+47	; 0x2f
    1604:	98 a9       	ldd	r25, Y+48	; 0x30
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	98 ab       	std	Y+48, r25	; 0x30
    160a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8f a5       	ldd	r24, Y+47	; 0x2f
    160e:	98 a9       	ldd	r25, Y+48	; 0x30
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <main+0x20a>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <main+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	69 a9       	ldd	r22, Y+49	; 0x31
    1618:	7a a9       	ldd	r23, Y+50	; 0x32
    161a:	8b a9       	ldd	r24, Y+51	; 0x33
    161c:	9c a9       	ldd	r25, Y+52	; 0x34
    161e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	98 ab       	std	Y+48, r25	; 0x30
    1628:	8f a7       	std	Y+47, r24	; 0x2f
    162a:	8f a5       	ldd	r24, Y+47	; 0x2f
    162c:	98 a9       	ldd	r25, Y+48	; 0x30
    162e:	9c a7       	std	Y+44, r25	; 0x2c
    1630:	8b a7       	std	Y+43, r24	; 0x2b
    1632:	8b a5       	ldd	r24, Y+43	; 0x2b
    1634:	9c a5       	ldd	r25, Y+44	; 0x2c
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <main+0x252>
    163a:	9c a7       	std	Y+44, r25	; 0x2c
    163c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		call_img();
    163e:	0e 94 0b 05 	call	0xa16	; 0xa16 <call_img>
    1642:	e5 ce       	rjmp	.-566    	; 0x140e <main+0x2a>
	}
		

	// *** 센서부분 *** //
	
	if(val0 > 300)	{	//왼쪽
    1644:	80 91 8c 01 	lds	r24, 0x018C
    1648:	90 91 8d 01 	lds	r25, 0x018D
    164c:	f1 e0       	ldi	r31, 0x01	; 1
    164e:	8d 32       	cpi	r24, 0x2D	; 45
    1650:	9f 07       	cpc	r25, r31
    1652:	5c f0       	brlt	.+22     	; 0x166a <main+0x286>
		PORTA |= 0x01;
    1654:	ab e3       	ldi	r26, 0x3B	; 59
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	eb e3       	ldi	r30, 0x3B	; 59
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	8c 93       	st	X, r24
		right_h = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	80 93 94 01 	sts	0x0194, r24
    1668:	0e c0       	rjmp	.+28     	; 0x1686 <main+0x2a2>
	}
	else if(right_h == 1)	{
    166a:	80 91 94 01 	lds	r24, 0x0194
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	51 f4       	brne	.+20     	; 0x1686 <main+0x2a2>
		PORTA ^= 0x01;
    1672:	ab e3       	ldi	r26, 0x3B	; 59
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	eb e3       	ldi	r30, 0x3B	; 59
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	90 81       	ld	r25, Z
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	89 27       	eor	r24, r25
    1680:	8c 93       	st	X, r24
		right_h = 0;
    1682:	10 92 94 01 	sts	0x0194, r1
	}
	if(val1 > 300)	{	//오른쪽
    1686:	80 91 8e 01 	lds	r24, 0x018E
    168a:	90 91 8f 01 	lds	r25, 0x018F
    168e:	21 e0       	ldi	r18, 0x01	; 1
    1690:	8d 32       	cpi	r24, 0x2D	; 45
    1692:	92 07       	cpc	r25, r18
    1694:	5c f0       	brlt	.+22     	; 0x16ac <main+0x2c8>
		PORTA |= 0x02;
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	82 60       	ori	r24, 0x02	; 2
    16a2:	8c 93       	st	X, r24
		left_h = 1;	//진동없는 상태 : 0, 진동있는 상태 : 1
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 95 01 	sts	0x0195, r24
    16aa:	0e c0       	rjmp	.+28     	; 0x16c8 <main+0x2e4>
	}
	else if(left_h == 1)	{
    16ac:	80 91 95 01 	lds	r24, 0x0195
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	51 f4       	brne	.+20     	; 0x16c8 <main+0x2e4>
		PORTA ^= 0x02;
    16b4:	ab e3       	ldi	r26, 0x3B	; 59
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	eb e3       	ldi	r30, 0x3B	; 59
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	90 81       	ld	r25, Z
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	89 27       	eor	r24, r25
    16c2:	8c 93       	st	X, r24
		left_h = 0;
    16c4:	10 92 95 01 	sts	0x0195, r1
	}
	if(val2 > 500)	{	//가슴
    16c8:	80 91 90 01 	lds	r24, 0x0190
    16cc:	90 91 91 01 	lds	r25, 0x0191
    16d0:	e1 e0       	ldi	r30, 0x01	; 1
    16d2:	85 3f       	cpi	r24, 0xF5	; 245
    16d4:	9e 07       	cpc	r25, r30
    16d6:	5c f0       	brlt	.+22     	; 0x16ee <main+0x30a>
		PORTA |= 0x03;
    16d8:	ab e3       	ldi	r26, 0x3B	; 59
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	eb e3       	ldi	r30, 0x3B	; 59
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	83 60       	ori	r24, 0x03	; 3
    16e4:	8c 93       	st	X, r24
		front_h = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 93 96 01 	sts	0x0196, r24
    16ec:	0e c0       	rjmp	.+28     	; 0x170a <main+0x326>
	}
	else if(front_h == 1)	{
    16ee:	80 91 96 01 	lds	r24, 0x0196
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	51 f4       	brne	.+20     	; 0x170a <main+0x326>
		PORTA ^= 0x03;
    16f6:	ab e3       	ldi	r26, 0x3B	; 59
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	eb e3       	ldi	r30, 0x3B	; 59
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	90 81       	ld	r25, Z
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	89 27       	eor	r24, r25
    1704:	8c 93       	st	X, r24
		front_h = 0;
    1706:	10 92 96 01 	sts	0x0196, r1
	}
	
	
	//버튼 부분
	if(PINB == 0x01)	{	//1. 카메라 버튼
    170a:	e6 e3       	ldi	r30, 0x36	; 54
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	09 f0       	breq	.+2      	; 0x1716 <main+0x332>
    1714:	7a c0       	rjmp	.+244    	; 0x180a <main+0x426>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	aa e7       	ldi	r26, 0x7A	; 122
    171c:	b4 e4       	ldi	r27, 0x44	; 68
    171e:	8f a3       	std	Y+39, r24	; 0x27
    1720:	98 a7       	std	Y+40, r25	; 0x28
    1722:	a9 a7       	std	Y+41, r26	; 0x29
    1724:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1726:	6f a1       	ldd	r22, Y+39	; 0x27
    1728:	78 a5       	ldd	r23, Y+40	; 0x28
    172a:	89 a5       	ldd	r24, Y+41	; 0x29
    172c:	9a a5       	ldd	r25, Y+42	; 0x2a
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4a e7       	ldi	r20, 0x7A	; 122
    1734:	55 e4       	ldi	r21, 0x45	; 69
    1736:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	8b a3       	std	Y+35, r24	; 0x23
    1740:	9c a3       	std	Y+36, r25	; 0x24
    1742:	ad a3       	std	Y+37, r26	; 0x25
    1744:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1746:	6b a1       	ldd	r22, Y+35	; 0x23
    1748:	7c a1       	ldd	r23, Y+36	; 0x24
    174a:	8d a1       	ldd	r24, Y+37	; 0x25
    174c:	9e a1       	ldd	r25, Y+38	; 0x26
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <main+0x384>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9a a3       	std	Y+34, r25	; 0x22
    1764:	89 a3       	std	Y+33, r24	; 0x21
    1766:	3f c0       	rjmp	.+126    	; 0x17e6 <main+0x402>
	else if (__tmp > 65535)
    1768:	6b a1       	ldd	r22, Y+35	; 0x23
    176a:	7c a1       	ldd	r23, Y+36	; 0x24
    176c:	8d a1       	ldd	r24, Y+37	; 0x25
    176e:	9e a1       	ldd	r25, Y+38	; 0x26
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	4c f5       	brge	.+82     	; 0x17d2 <main+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1780:	6f a1       	ldd	r22, Y+39	; 0x27
    1782:	78 a5       	ldd	r23, Y+40	; 0x28
    1784:	89 a5       	ldd	r24, Y+41	; 0x29
    1786:	9a a5       	ldd	r25, Y+42	; 0x2a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9a a3       	std	Y+34, r25	; 0x22
    17a6:	89 a3       	std	Y+33, r24	; 0x21
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <main+0x3e4>
    17aa:	80 e9       	ldi	r24, 0x90	; 144
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	98 a3       	std	Y+32, r25	; 0x20
    17b0:	8f 8f       	std	Y+31, r24	; 0x1f
    17b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b4:	98 a1       	ldd	r25, Y+32	; 0x20
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <main+0x3d2>
    17ba:	98 a3       	std	Y+32, r25	; 0x20
    17bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	89 a1       	ldd	r24, Y+33	; 0x21
    17c0:	9a a1       	ldd	r25, Y+34	; 0x22
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	9a a3       	std	Y+34, r25	; 0x22
    17c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ca:	9a a1       	ldd	r25, Y+34	; 0x22
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f7       	brne	.-38     	; 0x17aa <main+0x3c6>
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <main+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	6b a1       	ldd	r22, Y+35	; 0x23
    17d4:	7c a1       	ldd	r23, Y+36	; 0x24
    17d6:	8d a1       	ldd	r24, Y+37	; 0x25
    17d8:	9e a1       	ldd	r25, Y+38	; 0x26
    17da:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9a a3       	std	Y+34, r25	; 0x22
    17e4:	89 a3       	std	Y+33, r24	; 0x21
    17e6:	89 a1       	ldd	r24, Y+33	; 0x21
    17e8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ea:	9e 8f       	std	Y+30, r25	; 0x1e
    17ec:	8d 8f       	std	Y+29, r24	; 0x1d
    17ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <main+0x40e>
    17f6:	9e 8f       	std	Y+30, r25	; 0x1e
    17f8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		TIMSK = 0x00;	//타이머 디스에이블
    17fa:	e7 e5       	ldi	r30, 0x57	; 87
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	10 82       	st	Z, r1
		ADCSRA = 0x00;	//ADC 인터럽트 디스에이블
    1800:	e6 e2       	ldi	r30, 0x26	; 38
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	10 82       	st	Z, r1
		
		idle();
    1806:	0e 94 2a 02 	call	0x454	; 0x454 <idle>
	}
	
	if(PINB == 0x02)	{	//2. 비상사태 버튼
    180a:	e6 e3       	ldi	r30, 0x36	; 54
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	09 f0       	breq	.+2      	; 0x1816 <main+0x432>
    1814:	85 c0       	rjmp	.+266    	; 0x1920 <main+0x53c>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	aa e7       	ldi	r26, 0x7A	; 122
    181c:	b4 e4       	ldi	r27, 0x44	; 68
    181e:	89 8f       	std	Y+25, r24	; 0x19
    1820:	9a 8f       	std	Y+26, r25	; 0x1a
    1822:	ab 8f       	std	Y+27, r26	; 0x1b
    1824:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	69 8d       	ldd	r22, Y+25	; 0x19
    1828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    182a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a e7       	ldi	r20, 0x7A	; 122
    1834:	55 e4       	ldi	r21, 0x45	; 69
    1836:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8d 8b       	std	Y+21, r24	; 0x15
    1840:	9e 8b       	std	Y+22, r25	; 0x16
    1842:	af 8b       	std	Y+23, r26	; 0x17
    1844:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1846:	6d 89       	ldd	r22, Y+21	; 0x15
    1848:	7e 89       	ldd	r23, Y+22	; 0x16
    184a:	8f 89       	ldd	r24, Y+23	; 0x17
    184c:	98 8d       	ldd	r25, Y+24	; 0x18
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <main+0x484>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9c 8b       	std	Y+20, r25	; 0x14
    1864:	8b 8b       	std	Y+19, r24	; 0x13
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <main+0x502>
	else if (__tmp > 65535)
    1868:	6d 89       	ldd	r22, Y+21	; 0x15
    186a:	7e 89       	ldd	r23, Y+22	; 0x16
    186c:	8f 89       	ldd	r24, Y+23	; 0x17
    186e:	98 8d       	ldd	r25, Y+24	; 0x18
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <main+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	69 8d       	ldd	r22, Y+25	; 0x19
    1882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <main+0x4e4>
    18aa:	80 e9       	ldi	r24, 0x90	; 144
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	9a 8b       	std	Y+18, r25	; 0x12
    18b0:	89 8b       	std	Y+17, r24	; 0x11
    18b2:	89 89       	ldd	r24, Y+17	; 0x11
    18b4:	9a 89       	ldd	r25, Y+18	; 0x12
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <main+0x4d2>
    18ba:	9a 8b       	std	Y+18, r25	; 0x12
    18bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	8b 89       	ldd	r24, Y+19	; 0x13
    18c0:	9c 89       	ldd	r25, Y+20	; 0x14
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	9c 8b       	std	Y+20, r25	; 0x14
    18c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <main+0x4c6>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <main+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	6d 89       	ldd	r22, Y+21	; 0x15
    18d4:	7e 89       	ldd	r23, Y+22	; 0x16
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	98 8d       	ldd	r25, Y+24	; 0x18
    18da:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ea:	98 8b       	std	Y+16, r25	; 0x10
    18ec:	8f 87       	std	Y+15, r24	; 0x0f
    18ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f0:	98 89       	ldd	r25, Y+16	; 0x10
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <main+0x50e>
    18f6:	98 8b       	std	Y+16, r25	; 0x10
    18f8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		printf("emergency");	//비상사태 버튼 emergency
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <main+0x518>
    18fc:	ed b7       	in	r30, 0x3d	; 61
    18fe:	fe b7       	in	r31, 0x3e	; 62
    1900:	31 96       	adiw	r30, 0x01	; 1
    1902:	8c e6       	ldi	r24, 0x6C	; 108
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
    190a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <printf>
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
		DDRF |= 0x08;
    1912:	a1 e6       	ldi	r26, 0x61	; 97
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e1 e6       	ldi	r30, 0x61	; 97
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	88 60       	ori	r24, 0x08	; 8
    191e:	8c 93       	st	X, r24
	}

	if(PINB == 0x04)	{	
    1920:	e6 e3       	ldi	r30, 0x36	; 54
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	09 f0       	breq	.+2      	; 0x192c <main+0x548>
    192a:	71 cd       	rjmp	.-1310   	; 0x140e <main+0x2a>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	aa e7       	ldi	r26, 0x7A	; 122
    1932:	b4 e4       	ldi	r27, 0x44	; 68
    1934:	8b 87       	std	Y+11, r24	; 0x0b
    1936:	9c 87       	std	Y+12, r25	; 0x0c
    1938:	ad 87       	std	Y+13, r26	; 0x0d
    193a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193c:	6b 85       	ldd	r22, Y+11	; 0x0b
    193e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1940:	8d 85       	ldd	r24, Y+13	; 0x0d
    1942:	9e 85       	ldd	r25, Y+14	; 0x0e
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	4a e7       	ldi	r20, 0x7A	; 122
    194a:	55 e4       	ldi	r21, 0x45	; 69
    194c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	8f 83       	std	Y+7, r24	; 0x07
    1956:	98 87       	std	Y+8, r25	; 0x08
    1958:	a9 87       	std	Y+9, r26	; 0x09
    195a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    195c:	6f 81       	ldd	r22, Y+7	; 0x07
    195e:	78 85       	ldd	r23, Y+8	; 0x08
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e8       	ldi	r20, 0x80	; 128
    196a:	5f e3       	ldi	r21, 0x3F	; 63
    196c:	0e 94 4d 10 	call	0x209a	; 0x209a <__ltsf2>
    1970:	88 23       	and	r24, r24
    1972:	2c f4       	brge	.+10     	; 0x197e <main+0x59a>
		__ticks = 1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	3f c0       	rjmp	.+126    	; 0x19fc <main+0x618>
	else if (__tmp > 65535)
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	3f ef       	ldi	r19, 0xFF	; 255
    198a:	4f e7       	ldi	r20, 0x7F	; 127
    198c:	57 e4       	ldi	r21, 0x47	; 71
    198e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__gtsf2>
    1992:	18 16       	cp	r1, r24
    1994:	4c f5       	brge	.+82     	; 0x19e8 <main+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1996:	6b 85       	ldd	r22, Y+11	; 0x0b
    1998:	7c 85       	ldd	r23, Y+12	; 0x0c
    199a:	8d 85       	ldd	r24, Y+13	; 0x0d
    199c:	9e 85       	ldd	r25, Y+14	; 0x0e
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e2       	ldi	r20, 0x20	; 32
    19a4:	51 e4       	ldi	r21, 0x41	; 65
    19a6:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	9e 83       	std	Y+6, r25	; 0x06
    19bc:	8d 83       	std	Y+5, r24	; 0x05
    19be:	0f c0       	rjmp	.+30     	; 0x19de <main+0x5fa>
    19c0:	80 e9       	ldi	r24, 0x90	; 144
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	9c 83       	std	Y+4, r25	; 0x04
    19c6:	8b 83       	std	Y+3, r24	; 0x03
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <main+0x5e8>
    19d0:	9c 83       	std	Y+4, r25	; 0x04
    19d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	9e 83       	std	Y+6, r25	; 0x06
    19dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	69 f7       	brne	.-38     	; 0x19c0 <main+0x5dc>
    19e6:	14 c0       	rjmp	.+40     	; 0x1a10 <main+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ea:	78 85       	ldd	r23, Y+8	; 0x08
    19ec:	89 85       	ldd	r24, Y+9	; 0x09
    19ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <main+0x624>
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		printf("release"); // 비상사태 해제 버튼 release
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <main+0x62e>
    1a12:	ed b7       	in	r30, 0x3d	; 61
    1a14:	fe b7       	in	r31, 0x3e	; 62
    1a16:	31 96       	adiw	r30, 0x01	; 1
    1a18:	86 e7       	ldi	r24, 0x76	; 118
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
    1a20:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <printf>
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
		DDRF ^= 0x08;
    1a28:	a1 e6       	ldi	r26, 0x61	; 97
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e1 e6       	ldi	r30, 0x61	; 97
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	90 81       	ld	r25, Z
    1a32:	88 e0       	ldi	r24, 0x08	; 8
    1a34:	89 27       	eor	r24, r25
    1a36:	8c 93       	st	X, r24
    1a38:	ea cc       	rjmp	.-1580   	; 0x140e <main+0x2a>

00001a3a <__fixunssfsi>:
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	7b 01       	movw	r14, r22
    1a44:	8c 01       	movw	r16, r24
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	5f e4       	ldi	r21, 0x4F	; 79
    1a4e:	0e 94 1d 10 	call	0x203a	; 0x203a <__gesf2>
    1a52:	88 23       	and	r24, r24
    1a54:	8c f0       	brlt	.+34     	; 0x1a78 <__fixunssfsi+0x3e>
    1a56:	c8 01       	movw	r24, r16
    1a58:	b7 01       	movw	r22, r14
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	5f e4       	ldi	r21, 0x4F	; 79
    1a62:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__subsf3>
    1a66:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fixsfsi>
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	20 50       	subi	r18, 0x00	; 0
    1a70:	30 40       	sbci	r19, 0x00	; 0
    1a72:	40 40       	sbci	r20, 0x00	; 0
    1a74:	50 48       	sbci	r21, 0x80	; 128
    1a76:	06 c0       	rjmp	.+12     	; 0x1a84 <__fixunssfsi+0x4a>
    1a78:	c8 01       	movw	r24, r16
    1a7a:	b7 01       	movw	r22, r14
    1a7c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fixsfsi>
    1a80:	9b 01       	movw	r18, r22
    1a82:	ac 01       	movw	r20, r24
    1a84:	b9 01       	movw	r22, r18
    1a86:	ca 01       	movw	r24, r20
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	ff 90       	pop	r15
    1a8e:	ef 90       	pop	r14
    1a90:	08 95       	ret

00001a92 <_fpadd_parts>:
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef e4       	ldi	r30, 0x4F	; 79
    1a98:	fd e0       	ldi	r31, 0x0D	; 13
    1a9a:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__prologue_saves__>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	2b 01       	movw	r4, r22
    1aa2:	fa 01       	movw	r30, r20
    1aa4:	9c 91       	ld	r25, X
    1aa6:	92 30       	cpi	r25, 0x02	; 2
    1aa8:	08 f4       	brcc	.+2      	; 0x1aac <_fpadd_parts+0x1a>
    1aaa:	39 c1       	rjmp	.+626    	; 0x1d1e <_fpadd_parts+0x28c>
    1aac:	eb 01       	movw	r28, r22
    1aae:	88 81       	ld	r24, Y
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	08 f4       	brcc	.+2      	; 0x1ab6 <_fpadd_parts+0x24>
    1ab4:	33 c1       	rjmp	.+614    	; 0x1d1c <_fpadd_parts+0x28a>
    1ab6:	94 30       	cpi	r25, 0x04	; 4
    1ab8:	69 f4       	brne	.+26     	; 0x1ad4 <_fpadd_parts+0x42>
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <_fpadd_parts+0x2e>
    1abe:	2f c1       	rjmp	.+606    	; 0x1d1e <_fpadd_parts+0x28c>
    1ac0:	11 96       	adiw	r26, 0x01	; 1
    1ac2:	9c 91       	ld	r25, X
    1ac4:	11 97       	sbiw	r26, 0x01	; 1
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	98 17       	cp	r25, r24
    1aca:	09 f4       	brne	.+2      	; 0x1ace <_fpadd_parts+0x3c>
    1acc:	28 c1       	rjmp	.+592    	; 0x1d1e <_fpadd_parts+0x28c>
    1ace:	ae e7       	ldi	r26, 0x7E	; 126
    1ad0:	b1 e0       	ldi	r27, 0x01	; 1
    1ad2:	25 c1       	rjmp	.+586    	; 0x1d1e <_fpadd_parts+0x28c>
    1ad4:	84 30       	cpi	r24, 0x04	; 4
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <_fpadd_parts+0x48>
    1ad8:	21 c1       	rjmp	.+578    	; 0x1d1c <_fpadd_parts+0x28a>
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	a9 f4       	brne	.+42     	; 0x1b08 <_fpadd_parts+0x76>
    1ade:	92 30       	cpi	r25, 0x02	; 2
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <_fpadd_parts+0x52>
    1ae2:	1d c1       	rjmp	.+570    	; 0x1d1e <_fpadd_parts+0x28c>
    1ae4:	9a 01       	movw	r18, r20
    1ae6:	ad 01       	movw	r20, r26
    1ae8:	88 e0       	ldi	r24, 0x08	; 8
    1aea:	ea 01       	movw	r28, r20
    1aec:	09 90       	ld	r0, Y+
    1aee:	ae 01       	movw	r20, r28
    1af0:	e9 01       	movw	r28, r18
    1af2:	09 92       	st	Y+, r0
    1af4:	9e 01       	movw	r18, r28
    1af6:	81 50       	subi	r24, 0x01	; 1
    1af8:	c1 f7       	brne	.-16     	; 0x1aea <_fpadd_parts+0x58>
    1afa:	e2 01       	movw	r28, r4
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	9c 91       	ld	r25, X
    1b02:	89 23       	and	r24, r25
    1b04:	81 83       	std	Z+1, r24	; 0x01
    1b06:	08 c1       	rjmp	.+528    	; 0x1d18 <_fpadd_parts+0x286>
    1b08:	92 30       	cpi	r25, 0x02	; 2
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <_fpadd_parts+0x7c>
    1b0c:	07 c1       	rjmp	.+526    	; 0x1d1c <_fpadd_parts+0x28a>
    1b0e:	12 96       	adiw	r26, 0x02	; 2
    1b10:	2d 90       	ld	r2, X+
    1b12:	3c 90       	ld	r3, X
    1b14:	13 97       	sbiw	r26, 0x03	; 3
    1b16:	eb 01       	movw	r28, r22
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1c:	14 96       	adiw	r26, 0x04	; 4
    1b1e:	ad 90       	ld	r10, X+
    1b20:	bd 90       	ld	r11, X+
    1b22:	cd 90       	ld	r12, X+
    1b24:	dc 90       	ld	r13, X
    1b26:	17 97       	sbiw	r26, 0x07	; 7
    1b28:	ec 80       	ldd	r14, Y+4	; 0x04
    1b2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b2c:	0e 81       	ldd	r16, Y+6	; 0x06
    1b2e:	1f 81       	ldd	r17, Y+7	; 0x07
    1b30:	91 01       	movw	r18, r2
    1b32:	28 1b       	sub	r18, r24
    1b34:	39 0b       	sbc	r19, r25
    1b36:	b9 01       	movw	r22, r18
    1b38:	37 ff       	sbrs	r19, 7
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <_fpadd_parts+0xb2>
    1b3c:	66 27       	eor	r22, r22
    1b3e:	77 27       	eor	r23, r23
    1b40:	62 1b       	sub	r22, r18
    1b42:	73 0b       	sbc	r23, r19
    1b44:	60 32       	cpi	r22, 0x20	; 32
    1b46:	71 05       	cpc	r23, r1
    1b48:	0c f0       	brlt	.+2      	; 0x1b4c <_fpadd_parts+0xba>
    1b4a:	61 c0       	rjmp	.+194    	; 0x1c0e <_fpadd_parts+0x17c>
    1b4c:	12 16       	cp	r1, r18
    1b4e:	13 06       	cpc	r1, r19
    1b50:	6c f5       	brge	.+90     	; 0x1bac <_fpadd_parts+0x11a>
    1b52:	37 01       	movw	r6, r14
    1b54:	48 01       	movw	r8, r16
    1b56:	06 2e       	mov	r0, r22
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <_fpadd_parts+0xd0>
    1b5a:	96 94       	lsr	r9
    1b5c:	87 94       	ror	r8
    1b5e:	77 94       	ror	r7
    1b60:	67 94       	ror	r6
    1b62:	0a 94       	dec	r0
    1b64:	d2 f7       	brpl	.-12     	; 0x1b5a <_fpadd_parts+0xc8>
    1b66:	21 e0       	ldi	r18, 0x01	; 1
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <_fpadd_parts+0xe6>
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	44 1f       	adc	r20, r20
    1b76:	55 1f       	adc	r21, r21
    1b78:	6a 95       	dec	r22
    1b7a:	d2 f7       	brpl	.-12     	; 0x1b70 <_fpadd_parts+0xde>
    1b7c:	21 50       	subi	r18, 0x01	; 1
    1b7e:	30 40       	sbci	r19, 0x00	; 0
    1b80:	40 40       	sbci	r20, 0x00	; 0
    1b82:	50 40       	sbci	r21, 0x00	; 0
    1b84:	2e 21       	and	r18, r14
    1b86:	3f 21       	and	r19, r15
    1b88:	40 23       	and	r20, r16
    1b8a:	51 23       	and	r21, r17
    1b8c:	21 15       	cp	r18, r1
    1b8e:	31 05       	cpc	r19, r1
    1b90:	41 05       	cpc	r20, r1
    1b92:	51 05       	cpc	r21, r1
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <_fpadd_parts+0x10c>
    1b96:	21 e0       	ldi	r18, 0x01	; 1
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	79 01       	movw	r14, r18
    1ba0:	8a 01       	movw	r16, r20
    1ba2:	e6 28       	or	r14, r6
    1ba4:	f7 28       	or	r15, r7
    1ba6:	08 29       	or	r16, r8
    1ba8:	19 29       	or	r17, r9
    1baa:	3c c0       	rjmp	.+120    	; 0x1c24 <_fpadd_parts+0x192>
    1bac:	23 2b       	or	r18, r19
    1bae:	d1 f1       	breq	.+116    	; 0x1c24 <_fpadd_parts+0x192>
    1bb0:	26 0e       	add	r2, r22
    1bb2:	37 1e       	adc	r3, r23
    1bb4:	35 01       	movw	r6, r10
    1bb6:	46 01       	movw	r8, r12
    1bb8:	06 2e       	mov	r0, r22
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <_fpadd_parts+0x132>
    1bbc:	96 94       	lsr	r9
    1bbe:	87 94       	ror	r8
    1bc0:	77 94       	ror	r7
    1bc2:	67 94       	ror	r6
    1bc4:	0a 94       	dec	r0
    1bc6:	d2 f7       	brpl	.-12     	; 0x1bbc <_fpadd_parts+0x12a>
    1bc8:	21 e0       	ldi	r18, 0x01	; 1
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <_fpadd_parts+0x148>
    1bd2:	22 0f       	add	r18, r18
    1bd4:	33 1f       	adc	r19, r19
    1bd6:	44 1f       	adc	r20, r20
    1bd8:	55 1f       	adc	r21, r21
    1bda:	6a 95       	dec	r22
    1bdc:	d2 f7       	brpl	.-12     	; 0x1bd2 <_fpadd_parts+0x140>
    1bde:	21 50       	subi	r18, 0x01	; 1
    1be0:	30 40       	sbci	r19, 0x00	; 0
    1be2:	40 40       	sbci	r20, 0x00	; 0
    1be4:	50 40       	sbci	r21, 0x00	; 0
    1be6:	2a 21       	and	r18, r10
    1be8:	3b 21       	and	r19, r11
    1bea:	4c 21       	and	r20, r12
    1bec:	5d 21       	and	r21, r13
    1bee:	21 15       	cp	r18, r1
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	41 05       	cpc	r20, r1
    1bf4:	51 05       	cpc	r21, r1
    1bf6:	21 f0       	breq	.+8      	; 0x1c00 <_fpadd_parts+0x16e>
    1bf8:	21 e0       	ldi	r18, 0x01	; 1
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	59 01       	movw	r10, r18
    1c02:	6a 01       	movw	r12, r20
    1c04:	a6 28       	or	r10, r6
    1c06:	b7 28       	or	r11, r7
    1c08:	c8 28       	or	r12, r8
    1c0a:	d9 28       	or	r13, r9
    1c0c:	0b c0       	rjmp	.+22     	; 0x1c24 <_fpadd_parts+0x192>
    1c0e:	82 15       	cp	r24, r2
    1c10:	93 05       	cpc	r25, r3
    1c12:	2c f0       	brlt	.+10     	; 0x1c1e <_fpadd_parts+0x18c>
    1c14:	1c 01       	movw	r2, r24
    1c16:	aa 24       	eor	r10, r10
    1c18:	bb 24       	eor	r11, r11
    1c1a:	65 01       	movw	r12, r10
    1c1c:	03 c0       	rjmp	.+6      	; 0x1c24 <_fpadd_parts+0x192>
    1c1e:	ee 24       	eor	r14, r14
    1c20:	ff 24       	eor	r15, r15
    1c22:	87 01       	movw	r16, r14
    1c24:	11 96       	adiw	r26, 0x01	; 1
    1c26:	9c 91       	ld	r25, X
    1c28:	d2 01       	movw	r26, r4
    1c2a:	11 96       	adiw	r26, 0x01	; 1
    1c2c:	8c 91       	ld	r24, X
    1c2e:	98 17       	cp	r25, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <_fpadd_parts+0x1a2>
    1c32:	45 c0       	rjmp	.+138    	; 0x1cbe <_fpadd_parts+0x22c>
    1c34:	99 23       	and	r25, r25
    1c36:	39 f0       	breq	.+14     	; 0x1c46 <_fpadd_parts+0x1b4>
    1c38:	a8 01       	movw	r20, r16
    1c3a:	97 01       	movw	r18, r14
    1c3c:	2a 19       	sub	r18, r10
    1c3e:	3b 09       	sbc	r19, r11
    1c40:	4c 09       	sbc	r20, r12
    1c42:	5d 09       	sbc	r21, r13
    1c44:	06 c0       	rjmp	.+12     	; 0x1c52 <_fpadd_parts+0x1c0>
    1c46:	a6 01       	movw	r20, r12
    1c48:	95 01       	movw	r18, r10
    1c4a:	2e 19       	sub	r18, r14
    1c4c:	3f 09       	sbc	r19, r15
    1c4e:	40 0b       	sbc	r20, r16
    1c50:	51 0b       	sbc	r21, r17
    1c52:	57 fd       	sbrc	r21, 7
    1c54:	08 c0       	rjmp	.+16     	; 0x1c66 <_fpadd_parts+0x1d4>
    1c56:	11 82       	std	Z+1, r1	; 0x01
    1c58:	33 82       	std	Z+3, r3	; 0x03
    1c5a:	22 82       	std	Z+2, r2	; 0x02
    1c5c:	24 83       	std	Z+4, r18	; 0x04
    1c5e:	35 83       	std	Z+5, r19	; 0x05
    1c60:	46 83       	std	Z+6, r20	; 0x06
    1c62:	57 83       	std	Z+7, r21	; 0x07
    1c64:	1d c0       	rjmp	.+58     	; 0x1ca0 <_fpadd_parts+0x20e>
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	81 83       	std	Z+1, r24	; 0x01
    1c6a:	33 82       	std	Z+3, r3	; 0x03
    1c6c:	22 82       	std	Z+2, r2	; 0x02
    1c6e:	88 27       	eor	r24, r24
    1c70:	99 27       	eor	r25, r25
    1c72:	dc 01       	movw	r26, r24
    1c74:	82 1b       	sub	r24, r18
    1c76:	93 0b       	sbc	r25, r19
    1c78:	a4 0b       	sbc	r26, r20
    1c7a:	b5 0b       	sbc	r27, r21
    1c7c:	84 83       	std	Z+4, r24	; 0x04
    1c7e:	95 83       	std	Z+5, r25	; 0x05
    1c80:	a6 83       	std	Z+6, r26	; 0x06
    1c82:	b7 83       	std	Z+7, r27	; 0x07
    1c84:	0d c0       	rjmp	.+26     	; 0x1ca0 <_fpadd_parts+0x20e>
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	44 1f       	adc	r20, r20
    1c8c:	55 1f       	adc	r21, r21
    1c8e:	24 83       	std	Z+4, r18	; 0x04
    1c90:	35 83       	std	Z+5, r19	; 0x05
    1c92:	46 83       	std	Z+6, r20	; 0x06
    1c94:	57 83       	std	Z+7, r21	; 0x07
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	93 83       	std	Z+3, r25	; 0x03
    1c9e:	82 83       	std	Z+2, r24	; 0x02
    1ca0:	24 81       	ldd	r18, Z+4	; 0x04
    1ca2:	35 81       	ldd	r19, Z+5	; 0x05
    1ca4:	46 81       	ldd	r20, Z+6	; 0x06
    1ca6:	57 81       	ldd	r21, Z+7	; 0x07
    1ca8:	da 01       	movw	r26, r20
    1caa:	c9 01       	movw	r24, r18
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	a1 09       	sbc	r26, r1
    1cb0:	b1 09       	sbc	r27, r1
    1cb2:	8f 5f       	subi	r24, 0xFF	; 255
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	af 4f       	sbci	r26, 0xFF	; 255
    1cb8:	bf 43       	sbci	r27, 0x3F	; 63
    1cba:	28 f3       	brcs	.-54     	; 0x1c86 <_fpadd_parts+0x1f4>
    1cbc:	0b c0       	rjmp	.+22     	; 0x1cd4 <_fpadd_parts+0x242>
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	33 82       	std	Z+3, r3	; 0x03
    1cc2:	22 82       	std	Z+2, r2	; 0x02
    1cc4:	ea 0c       	add	r14, r10
    1cc6:	fb 1c       	adc	r15, r11
    1cc8:	0c 1d       	adc	r16, r12
    1cca:	1d 1d       	adc	r17, r13
    1ccc:	e4 82       	std	Z+4, r14	; 0x04
    1cce:	f5 82       	std	Z+5, r15	; 0x05
    1cd0:	06 83       	std	Z+6, r16	; 0x06
    1cd2:	17 83       	std	Z+7, r17	; 0x07
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	80 83       	st	Z, r24
    1cd8:	24 81       	ldd	r18, Z+4	; 0x04
    1cda:	35 81       	ldd	r19, Z+5	; 0x05
    1cdc:	46 81       	ldd	r20, Z+6	; 0x06
    1cde:	57 81       	ldd	r21, Z+7	; 0x07
    1ce0:	57 ff       	sbrs	r21, 7
    1ce2:	1a c0       	rjmp	.+52     	; 0x1d18 <_fpadd_parts+0x286>
    1ce4:	c9 01       	movw	r24, r18
    1ce6:	aa 27       	eor	r26, r26
    1ce8:	97 fd       	sbrc	r25, 7
    1cea:	a0 95       	com	r26
    1cec:	ba 2f       	mov	r27, r26
    1cee:	81 70       	andi	r24, 0x01	; 1
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	a0 70       	andi	r26, 0x00	; 0
    1cf4:	b0 70       	andi	r27, 0x00	; 0
    1cf6:	56 95       	lsr	r21
    1cf8:	47 95       	ror	r20
    1cfa:	37 95       	ror	r19
    1cfc:	27 95       	ror	r18
    1cfe:	82 2b       	or	r24, r18
    1d00:	93 2b       	or	r25, r19
    1d02:	a4 2b       	or	r26, r20
    1d04:	b5 2b       	or	r27, r21
    1d06:	84 83       	std	Z+4, r24	; 0x04
    1d08:	95 83       	std	Z+5, r25	; 0x05
    1d0a:	a6 83       	std	Z+6, r26	; 0x06
    1d0c:	b7 83       	std	Z+7, r27	; 0x07
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	93 83       	std	Z+3, r25	; 0x03
    1d16:	82 83       	std	Z+2, r24	; 0x02
    1d18:	df 01       	movw	r26, r30
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <_fpadd_parts+0x28c>
    1d1c:	d2 01       	movw	r26, r4
    1d1e:	cd 01       	movw	r24, r26
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	e2 e1       	ldi	r30, 0x12	; 18
    1d26:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__epilogue_restores__>

00001d2a <__subsf3>:
    1d2a:	a0 e2       	ldi	r26, 0x20	; 32
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	eb e9       	ldi	r30, 0x9B	; 155
    1d30:	fe e0       	ldi	r31, 0x0E	; 14
    1d32:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__prologue_saves__+0x18>
    1d36:	69 83       	std	Y+1, r22	; 0x01
    1d38:	7a 83       	std	Y+2, r23	; 0x02
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	9c 83       	std	Y+4, r25	; 0x04
    1d3e:	2d 83       	std	Y+5, r18	; 0x05
    1d40:	3e 83       	std	Y+6, r19	; 0x06
    1d42:	4f 83       	std	Y+7, r20	; 0x07
    1d44:	58 87       	std	Y+8, r21	; 0x08
    1d46:	e9 e0       	ldi	r30, 0x09	; 9
    1d48:	ee 2e       	mov	r14, r30
    1d4a:	f1 2c       	mov	r15, r1
    1d4c:	ec 0e       	add	r14, r28
    1d4e:	fd 1e       	adc	r15, r29
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	b7 01       	movw	r22, r14
    1d56:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    1d5a:	8e 01       	movw	r16, r28
    1d5c:	0f 5e       	subi	r16, 0xEF	; 239
    1d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d60:	ce 01       	movw	r24, r28
    1d62:	05 96       	adiw	r24, 0x05	; 5
    1d64:	b8 01       	movw	r22, r16
    1d66:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    1d6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	89 27       	eor	r24, r25
    1d70:	8a 8b       	std	Y+18, r24	; 0x12
    1d72:	c7 01       	movw	r24, r14
    1d74:	b8 01       	movw	r22, r16
    1d76:	ae 01       	movw	r20, r28
    1d78:	47 5e       	subi	r20, 0xE7	; 231
    1d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_fpadd_parts>
    1d80:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__pack_f>
    1d84:	a0 96       	adiw	r28, 0x20	; 32
    1d86:	e6 e0       	ldi	r30, 0x06	; 6
    1d88:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__epilogue_restores__+0x18>

00001d8c <__addsf3>:
    1d8c:	a0 e2       	ldi	r26, 0x20	; 32
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ec ec       	ldi	r30, 0xCC	; 204
    1d92:	fe e0       	ldi	r31, 0x0E	; 14
    1d94:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__prologue_saves__+0x18>
    1d98:	69 83       	std	Y+1, r22	; 0x01
    1d9a:	7a 83       	std	Y+2, r23	; 0x02
    1d9c:	8b 83       	std	Y+3, r24	; 0x03
    1d9e:	9c 83       	std	Y+4, r25	; 0x04
    1da0:	2d 83       	std	Y+5, r18	; 0x05
    1da2:	3e 83       	std	Y+6, r19	; 0x06
    1da4:	4f 83       	std	Y+7, r20	; 0x07
    1da6:	58 87       	std	Y+8, r21	; 0x08
    1da8:	f9 e0       	ldi	r31, 0x09	; 9
    1daa:	ef 2e       	mov	r14, r31
    1dac:	f1 2c       	mov	r15, r1
    1dae:	ec 0e       	add	r14, r28
    1db0:	fd 1e       	adc	r15, r29
    1db2:	ce 01       	movw	r24, r28
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	b7 01       	movw	r22, r14
    1db8:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    1dbc:	8e 01       	movw	r16, r28
    1dbe:	0f 5e       	subi	r16, 0xEF	; 239
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	05 96       	adiw	r24, 0x05	; 5
    1dc6:	b8 01       	movw	r22, r16
    1dc8:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    1dcc:	c7 01       	movw	r24, r14
    1dce:	b8 01       	movw	r22, r16
    1dd0:	ae 01       	movw	r20, r28
    1dd2:	47 5e       	subi	r20, 0xE7	; 231
    1dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd6:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_fpadd_parts>
    1dda:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__pack_f>
    1dde:	a0 96       	adiw	r28, 0x20	; 32
    1de0:	e6 e0       	ldi	r30, 0x06	; 6
    1de2:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__epilogue_restores__+0x18>

00001de6 <__mulsf3>:
    1de6:	a0 e2       	ldi	r26, 0x20	; 32
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 ef       	ldi	r30, 0xF9	; 249
    1dec:	fe e0       	ldi	r31, 0x0E	; 14
    1dee:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__prologue_saves__>
    1df2:	69 83       	std	Y+1, r22	; 0x01
    1df4:	7a 83       	std	Y+2, r23	; 0x02
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	2d 83       	std	Y+5, r18	; 0x05
    1dfc:	3e 83       	std	Y+6, r19	; 0x06
    1dfe:	4f 83       	std	Y+7, r20	; 0x07
    1e00:	58 87       	std	Y+8, r21	; 0x08
    1e02:	ce 01       	movw	r24, r28
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	be 01       	movw	r22, r28
    1e08:	67 5f       	subi	r22, 0xF7	; 247
    1e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0c:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    1e10:	ce 01       	movw	r24, r28
    1e12:	05 96       	adiw	r24, 0x05	; 5
    1e14:	be 01       	movw	r22, r28
    1e16:	6f 5e       	subi	r22, 0xEF	; 239
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    1e1e:	99 85       	ldd	r25, Y+9	; 0x09
    1e20:	92 30       	cpi	r25, 0x02	; 2
    1e22:	88 f0       	brcs	.+34     	; 0x1e46 <__mulsf3+0x60>
    1e24:	89 89       	ldd	r24, Y+17	; 0x11
    1e26:	82 30       	cpi	r24, 0x02	; 2
    1e28:	c8 f0       	brcs	.+50     	; 0x1e5c <__mulsf3+0x76>
    1e2a:	94 30       	cpi	r25, 0x04	; 4
    1e2c:	19 f4       	brne	.+6      	; 0x1e34 <__mulsf3+0x4e>
    1e2e:	82 30       	cpi	r24, 0x02	; 2
    1e30:	51 f4       	brne	.+20     	; 0x1e46 <__mulsf3+0x60>
    1e32:	04 c0       	rjmp	.+8      	; 0x1e3c <__mulsf3+0x56>
    1e34:	84 30       	cpi	r24, 0x04	; 4
    1e36:	29 f4       	brne	.+10     	; 0x1e42 <__mulsf3+0x5c>
    1e38:	92 30       	cpi	r25, 0x02	; 2
    1e3a:	81 f4       	brne	.+32     	; 0x1e5c <__mulsf3+0x76>
    1e3c:	8e e7       	ldi	r24, 0x7E	; 126
    1e3e:	91 e0       	ldi	r25, 0x01	; 1
    1e40:	c6 c0       	rjmp	.+396    	; 0x1fce <__mulsf3+0x1e8>
    1e42:	92 30       	cpi	r25, 0x02	; 2
    1e44:	49 f4       	brne	.+18     	; 0x1e58 <__mulsf3+0x72>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e4c:	98 13       	cpse	r25, r24
    1e4e:	21 e0       	ldi	r18, 0x01	; 1
    1e50:	2a 87       	std	Y+10, r18	; 0x0a
    1e52:	ce 01       	movw	r24, r28
    1e54:	09 96       	adiw	r24, 0x09	; 9
    1e56:	bb c0       	rjmp	.+374    	; 0x1fce <__mulsf3+0x1e8>
    1e58:	82 30       	cpi	r24, 0x02	; 2
    1e5a:	49 f4       	brne	.+18     	; 0x1e6e <__mulsf3+0x88>
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e60:	8a 89       	ldd	r24, Y+18	; 0x12
    1e62:	98 13       	cpse	r25, r24
    1e64:	21 e0       	ldi	r18, 0x01	; 1
    1e66:	2a 8b       	std	Y+18, r18	; 0x12
    1e68:	ce 01       	movw	r24, r28
    1e6a:	41 96       	adiw	r24, 0x11	; 17
    1e6c:	b0 c0       	rjmp	.+352    	; 0x1fce <__mulsf3+0x1e8>
    1e6e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e70:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e72:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e74:	58 88       	ldd	r5, Y+16	; 0x10
    1e76:	6d 88       	ldd	r6, Y+21	; 0x15
    1e78:	7e 88       	ldd	r7, Y+22	; 0x16
    1e7a:	8f 88       	ldd	r8, Y+23	; 0x17
    1e7c:	98 8c       	ldd	r9, Y+24	; 0x18
    1e7e:	ee 24       	eor	r14, r14
    1e80:	ff 24       	eor	r15, r15
    1e82:	87 01       	movw	r16, r14
    1e84:	aa 24       	eor	r10, r10
    1e86:	bb 24       	eor	r11, r11
    1e88:	65 01       	movw	r12, r10
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	e0 e0       	ldi	r30, 0x00	; 0
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	c1 01       	movw	r24, r2
    1e98:	81 70       	andi	r24, 0x01	; 1
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	89 2b       	or	r24, r25
    1e9e:	e9 f0       	breq	.+58     	; 0x1eda <__mulsf3+0xf4>
    1ea0:	e6 0c       	add	r14, r6
    1ea2:	f7 1c       	adc	r15, r7
    1ea4:	08 1d       	adc	r16, r8
    1ea6:	19 1d       	adc	r17, r9
    1ea8:	9a 01       	movw	r18, r20
    1eaa:	ab 01       	movw	r20, r22
    1eac:	2a 0d       	add	r18, r10
    1eae:	3b 1d       	adc	r19, r11
    1eb0:	4c 1d       	adc	r20, r12
    1eb2:	5d 1d       	adc	r21, r13
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 e0       	ldi	r26, 0x00	; 0
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e6 14       	cp	r14, r6
    1ebe:	f7 04       	cpc	r15, r7
    1ec0:	08 05       	cpc	r16, r8
    1ec2:	19 05       	cpc	r17, r9
    1ec4:	20 f4       	brcc	.+8      	; 0x1ece <__mulsf3+0xe8>
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	ba 01       	movw	r22, r20
    1ed0:	a9 01       	movw	r20, r18
    1ed2:	48 0f       	add	r20, r24
    1ed4:	59 1f       	adc	r21, r25
    1ed6:	6a 1f       	adc	r22, r26
    1ed8:	7b 1f       	adc	r23, r27
    1eda:	aa 0c       	add	r10, r10
    1edc:	bb 1c       	adc	r11, r11
    1ede:	cc 1c       	adc	r12, r12
    1ee0:	dd 1c       	adc	r13, r13
    1ee2:	97 fe       	sbrs	r9, 7
    1ee4:	08 c0       	rjmp	.+16     	; 0x1ef6 <__mulsf3+0x110>
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e0       	ldi	r26, 0x00	; 0
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	a8 2a       	or	r10, r24
    1ef0:	b9 2a       	or	r11, r25
    1ef2:	ca 2a       	or	r12, r26
    1ef4:	db 2a       	or	r13, r27
    1ef6:	31 96       	adiw	r30, 0x01	; 1
    1ef8:	e0 32       	cpi	r30, 0x20	; 32
    1efa:	f1 05       	cpc	r31, r1
    1efc:	49 f0       	breq	.+18     	; 0x1f10 <__mulsf3+0x12a>
    1efe:	66 0c       	add	r6, r6
    1f00:	77 1c       	adc	r7, r7
    1f02:	88 1c       	adc	r8, r8
    1f04:	99 1c       	adc	r9, r9
    1f06:	56 94       	lsr	r5
    1f08:	47 94       	ror	r4
    1f0a:	37 94       	ror	r3
    1f0c:	27 94       	ror	r2
    1f0e:	c3 cf       	rjmp	.-122    	; 0x1e96 <__mulsf3+0xb0>
    1f10:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f12:	ea 89       	ldd	r30, Y+18	; 0x12
    1f14:	2b 89       	ldd	r18, Y+19	; 0x13
    1f16:	3c 89       	ldd	r19, Y+20	; 0x14
    1f18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1c:	28 0f       	add	r18, r24
    1f1e:	39 1f       	adc	r19, r25
    1f20:	2e 5f       	subi	r18, 0xFE	; 254
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	17 c0       	rjmp	.+46     	; 0x1f54 <__mulsf3+0x16e>
    1f26:	ca 01       	movw	r24, r20
    1f28:	81 70       	andi	r24, 0x01	; 1
    1f2a:	90 70       	andi	r25, 0x00	; 0
    1f2c:	89 2b       	or	r24, r25
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <__mulsf3+0x162>
    1f30:	16 95       	lsr	r17
    1f32:	07 95       	ror	r16
    1f34:	f7 94       	ror	r15
    1f36:	e7 94       	ror	r14
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e0       	ldi	r26, 0x00	; 0
    1f3e:	b0 e8       	ldi	r27, 0x80	; 128
    1f40:	e8 2a       	or	r14, r24
    1f42:	f9 2a       	or	r15, r25
    1f44:	0a 2b       	or	r16, r26
    1f46:	1b 2b       	or	r17, r27
    1f48:	76 95       	lsr	r23
    1f4a:	67 95       	ror	r22
    1f4c:	57 95       	ror	r21
    1f4e:	47 95       	ror	r20
    1f50:	2f 5f       	subi	r18, 0xFF	; 255
    1f52:	3f 4f       	sbci	r19, 0xFF	; 255
    1f54:	77 fd       	sbrc	r23, 7
    1f56:	e7 cf       	rjmp	.-50     	; 0x1f26 <__mulsf3+0x140>
    1f58:	0c c0       	rjmp	.+24     	; 0x1f72 <__mulsf3+0x18c>
    1f5a:	44 0f       	add	r20, r20
    1f5c:	55 1f       	adc	r21, r21
    1f5e:	66 1f       	adc	r22, r22
    1f60:	77 1f       	adc	r23, r23
    1f62:	17 fd       	sbrc	r17, 7
    1f64:	41 60       	ori	r20, 0x01	; 1
    1f66:	ee 0c       	add	r14, r14
    1f68:	ff 1c       	adc	r15, r15
    1f6a:	00 1f       	adc	r16, r16
    1f6c:	11 1f       	adc	r17, r17
    1f6e:	21 50       	subi	r18, 0x01	; 1
    1f70:	30 40       	sbci	r19, 0x00	; 0
    1f72:	40 30       	cpi	r20, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	59 07       	cpc	r21, r25
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	69 07       	cpc	r22, r25
    1f7c:	90 e4       	ldi	r25, 0x40	; 64
    1f7e:	79 07       	cpc	r23, r25
    1f80:	60 f3       	brcs	.-40     	; 0x1f5a <__mulsf3+0x174>
    1f82:	2b 8f       	std	Y+27, r18	; 0x1b
    1f84:	3c 8f       	std	Y+28, r19	; 0x1c
    1f86:	db 01       	movw	r26, r22
    1f88:	ca 01       	movw	r24, r20
    1f8a:	8f 77       	andi	r24, 0x7F	; 127
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	a0 70       	andi	r26, 0x00	; 0
    1f90:	b0 70       	andi	r27, 0x00	; 0
    1f92:	80 34       	cpi	r24, 0x40	; 64
    1f94:	91 05       	cpc	r25, r1
    1f96:	a1 05       	cpc	r26, r1
    1f98:	b1 05       	cpc	r27, r1
    1f9a:	61 f4       	brne	.+24     	; 0x1fb4 <__mulsf3+0x1ce>
    1f9c:	47 fd       	sbrc	r20, 7
    1f9e:	0a c0       	rjmp	.+20     	; 0x1fb4 <__mulsf3+0x1ce>
    1fa0:	e1 14       	cp	r14, r1
    1fa2:	f1 04       	cpc	r15, r1
    1fa4:	01 05       	cpc	r16, r1
    1fa6:	11 05       	cpc	r17, r1
    1fa8:	29 f0       	breq	.+10     	; 0x1fb4 <__mulsf3+0x1ce>
    1faa:	40 5c       	subi	r20, 0xC0	; 192
    1fac:	5f 4f       	sbci	r21, 0xFF	; 255
    1fae:	6f 4f       	sbci	r22, 0xFF	; 255
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	40 78       	andi	r20, 0x80	; 128
    1fb4:	1a 8e       	std	Y+26, r1	; 0x1a
    1fb6:	fe 17       	cp	r31, r30
    1fb8:	11 f0       	breq	.+4      	; 0x1fbe <__mulsf3+0x1d8>
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	8a 8f       	std	Y+26, r24	; 0x1a
    1fbe:	4d 8f       	std	Y+29, r20	; 0x1d
    1fc0:	5e 8f       	std	Y+30, r21	; 0x1e
    1fc2:	6f 8f       	std	Y+31, r22	; 0x1f
    1fc4:	78 a3       	std	Y+32, r23	; 0x20
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	89 8f       	std	Y+25, r24	; 0x19
    1fca:	ce 01       	movw	r24, r28
    1fcc:	49 96       	adiw	r24, 0x19	; 25
    1fce:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__pack_f>
    1fd2:	a0 96       	adiw	r28, 0x20	; 32
    1fd4:	e2 e1       	ldi	r30, 0x12	; 18
    1fd6:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__epilogue_restores__>

00001fda <__gtsf2>:
    1fda:	a8 e1       	ldi	r26, 0x18	; 24
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e3 ef       	ldi	r30, 0xF3	; 243
    1fe0:	ff e0       	ldi	r31, 0x0F	; 15
    1fe2:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__prologue_saves__+0x18>
    1fe6:	69 83       	std	Y+1, r22	; 0x01
    1fe8:	7a 83       	std	Y+2, r23	; 0x02
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	9c 83       	std	Y+4, r25	; 0x04
    1fee:	2d 83       	std	Y+5, r18	; 0x05
    1ff0:	3e 83       	std	Y+6, r19	; 0x06
    1ff2:	4f 83       	std	Y+7, r20	; 0x07
    1ff4:	58 87       	std	Y+8, r21	; 0x08
    1ff6:	89 e0       	ldi	r24, 0x09	; 9
    1ff8:	e8 2e       	mov	r14, r24
    1ffa:	f1 2c       	mov	r15, r1
    1ffc:	ec 0e       	add	r14, r28
    1ffe:	fd 1e       	adc	r15, r29
    2000:	ce 01       	movw	r24, r28
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	b7 01       	movw	r22, r14
    2006:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    200a:	8e 01       	movw	r16, r28
    200c:	0f 5e       	subi	r16, 0xEF	; 239
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	ce 01       	movw	r24, r28
    2012:	05 96       	adiw	r24, 0x05	; 5
    2014:	b8 01       	movw	r22, r16
    2016:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    201a:	89 85       	ldd	r24, Y+9	; 0x09
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	40 f0       	brcs	.+16     	; 0x2030 <__gtsf2+0x56>
    2020:	89 89       	ldd	r24, Y+17	; 0x11
    2022:	82 30       	cpi	r24, 0x02	; 2
    2024:	28 f0       	brcs	.+10     	; 0x2030 <__gtsf2+0x56>
    2026:	c7 01       	movw	r24, r14
    2028:	b8 01       	movw	r22, r16
    202a:	0e 94 1e 12 	call	0x243c	; 0x243c <__fpcmp_parts_f>
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <__gtsf2+0x58>
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	68 96       	adiw	r28, 0x18	; 24
    2034:	e6 e0       	ldi	r30, 0x06	; 6
    2036:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__epilogue_restores__+0x18>

0000203a <__gesf2>:
    203a:	a8 e1       	ldi	r26, 0x18	; 24
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e2       	ldi	r30, 0x23	; 35
    2040:	f0 e1       	ldi	r31, 0x10	; 16
    2042:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__prologue_saves__+0x18>
    2046:	69 83       	std	Y+1, r22	; 0x01
    2048:	7a 83       	std	Y+2, r23	; 0x02
    204a:	8b 83       	std	Y+3, r24	; 0x03
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	2d 83       	std	Y+5, r18	; 0x05
    2050:	3e 83       	std	Y+6, r19	; 0x06
    2052:	4f 83       	std	Y+7, r20	; 0x07
    2054:	58 87       	std	Y+8, r21	; 0x08
    2056:	89 e0       	ldi	r24, 0x09	; 9
    2058:	e8 2e       	mov	r14, r24
    205a:	f1 2c       	mov	r15, r1
    205c:	ec 0e       	add	r14, r28
    205e:	fd 1e       	adc	r15, r29
    2060:	ce 01       	movw	r24, r28
    2062:	01 96       	adiw	r24, 0x01	; 1
    2064:	b7 01       	movw	r22, r14
    2066:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    206a:	8e 01       	movw	r16, r28
    206c:	0f 5e       	subi	r16, 0xEF	; 239
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	ce 01       	movw	r24, r28
    2072:	05 96       	adiw	r24, 0x05	; 5
    2074:	b8 01       	movw	r22, r16
    2076:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	82 30       	cpi	r24, 0x02	; 2
    207e:	40 f0       	brcs	.+16     	; 0x2090 <__gesf2+0x56>
    2080:	89 89       	ldd	r24, Y+17	; 0x11
    2082:	82 30       	cpi	r24, 0x02	; 2
    2084:	28 f0       	brcs	.+10     	; 0x2090 <__gesf2+0x56>
    2086:	c7 01       	movw	r24, r14
    2088:	b8 01       	movw	r22, r16
    208a:	0e 94 1e 12 	call	0x243c	; 0x243c <__fpcmp_parts_f>
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <__gesf2+0x58>
    2090:	8f ef       	ldi	r24, 0xFF	; 255
    2092:	68 96       	adiw	r28, 0x18	; 24
    2094:	e6 e0       	ldi	r30, 0x06	; 6
    2096:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__epilogue_restores__+0x18>

0000209a <__ltsf2>:
    209a:	a8 e1       	ldi	r26, 0x18	; 24
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e3 e5       	ldi	r30, 0x53	; 83
    20a0:	f0 e1       	ldi	r31, 0x10	; 16
    20a2:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__prologue_saves__+0x18>
    20a6:	69 83       	std	Y+1, r22	; 0x01
    20a8:	7a 83       	std	Y+2, r23	; 0x02
    20aa:	8b 83       	std	Y+3, r24	; 0x03
    20ac:	9c 83       	std	Y+4, r25	; 0x04
    20ae:	2d 83       	std	Y+5, r18	; 0x05
    20b0:	3e 83       	std	Y+6, r19	; 0x06
    20b2:	4f 83       	std	Y+7, r20	; 0x07
    20b4:	58 87       	std	Y+8, r21	; 0x08
    20b6:	89 e0       	ldi	r24, 0x09	; 9
    20b8:	e8 2e       	mov	r14, r24
    20ba:	f1 2c       	mov	r15, r1
    20bc:	ec 0e       	add	r14, r28
    20be:	fd 1e       	adc	r15, r29
    20c0:	ce 01       	movw	r24, r28
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	b7 01       	movw	r22, r14
    20c6:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    20ca:	8e 01       	movw	r16, r28
    20cc:	0f 5e       	subi	r16, 0xEF	; 239
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	ce 01       	movw	r24, r28
    20d2:	05 96       	adiw	r24, 0x05	; 5
    20d4:	b8 01       	movw	r22, r16
    20d6:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	40 f0       	brcs	.+16     	; 0x20f0 <__ltsf2+0x56>
    20e0:	89 89       	ldd	r24, Y+17	; 0x11
    20e2:	82 30       	cpi	r24, 0x02	; 2
    20e4:	28 f0       	brcs	.+10     	; 0x20f0 <__ltsf2+0x56>
    20e6:	c7 01       	movw	r24, r14
    20e8:	b8 01       	movw	r22, r16
    20ea:	0e 94 1e 12 	call	0x243c	; 0x243c <__fpcmp_parts_f>
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <__ltsf2+0x58>
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	68 96       	adiw	r28, 0x18	; 24
    20f4:	e6 e0       	ldi	r30, 0x06	; 6
    20f6:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__epilogue_restores__+0x18>

000020fa <__fixsfsi>:
    20fa:	ac e0       	ldi	r26, 0x0C	; 12
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x20>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	ce 01       	movw	r24, r28
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	be 01       	movw	r22, r28
    2114:	6b 5f       	subi	r22, 0xFB	; 251
    2116:	7f 4f       	sbci	r23, 0xFF	; 255
    2118:	0e 94 a6 11 	call	0x234c	; 0x234c <__unpack_f>
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	82 30       	cpi	r24, 0x02	; 2
    2120:	61 f1       	breq	.+88     	; 0x217a <__fixsfsi+0x80>
    2122:	82 30       	cpi	r24, 0x02	; 2
    2124:	50 f1       	brcs	.+84     	; 0x217a <__fixsfsi+0x80>
    2126:	84 30       	cpi	r24, 0x04	; 4
    2128:	21 f4       	brne	.+8      	; 0x2132 <__fixsfsi+0x38>
    212a:	8e 81       	ldd	r24, Y+6	; 0x06
    212c:	88 23       	and	r24, r24
    212e:	51 f1       	breq	.+84     	; 0x2184 <__fixsfsi+0x8a>
    2130:	2e c0       	rjmp	.+92     	; 0x218e <__fixsfsi+0x94>
    2132:	2f 81       	ldd	r18, Y+7	; 0x07
    2134:	38 85       	ldd	r19, Y+8	; 0x08
    2136:	37 fd       	sbrc	r19, 7
    2138:	20 c0       	rjmp	.+64     	; 0x217a <__fixsfsi+0x80>
    213a:	6e 81       	ldd	r22, Y+6	; 0x06
    213c:	2f 31       	cpi	r18, 0x1F	; 31
    213e:	31 05       	cpc	r19, r1
    2140:	1c f0       	brlt	.+6      	; 0x2148 <__fixsfsi+0x4e>
    2142:	66 23       	and	r22, r22
    2144:	f9 f0       	breq	.+62     	; 0x2184 <__fixsfsi+0x8a>
    2146:	23 c0       	rjmp	.+70     	; 0x218e <__fixsfsi+0x94>
    2148:	8e e1       	ldi	r24, 0x1E	; 30
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	82 1b       	sub	r24, r18
    214e:	93 0b       	sbc	r25, r19
    2150:	29 85       	ldd	r18, Y+9	; 0x09
    2152:	3a 85       	ldd	r19, Y+10	; 0x0a
    2154:	4b 85       	ldd	r20, Y+11	; 0x0b
    2156:	5c 85       	ldd	r21, Y+12	; 0x0c
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <__fixsfsi+0x68>
    215a:	56 95       	lsr	r21
    215c:	47 95       	ror	r20
    215e:	37 95       	ror	r19
    2160:	27 95       	ror	r18
    2162:	8a 95       	dec	r24
    2164:	d2 f7       	brpl	.-12     	; 0x215a <__fixsfsi+0x60>
    2166:	66 23       	and	r22, r22
    2168:	b1 f0       	breq	.+44     	; 0x2196 <__fixsfsi+0x9c>
    216a:	50 95       	com	r21
    216c:	40 95       	com	r20
    216e:	30 95       	com	r19
    2170:	21 95       	neg	r18
    2172:	3f 4f       	sbci	r19, 0xFF	; 255
    2174:	4f 4f       	sbci	r20, 0xFF	; 255
    2176:	5f 4f       	sbci	r21, 0xFF	; 255
    2178:	0e c0       	rjmp	.+28     	; 0x2196 <__fixsfsi+0x9c>
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	50 e0       	ldi	r21, 0x00	; 0
    2182:	09 c0       	rjmp	.+18     	; 0x2196 <__fixsfsi+0x9c>
    2184:	2f ef       	ldi	r18, 0xFF	; 255
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f ef       	ldi	r20, 0xFF	; 255
    218a:	5f e7       	ldi	r21, 0x7F	; 127
    218c:	04 c0       	rjmp	.+8      	; 0x2196 <__fixsfsi+0x9c>
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	50 e8       	ldi	r21, 0x80	; 128
    2196:	b9 01       	movw	r22, r18
    2198:	ca 01       	movw	r24, r20
    219a:	2c 96       	adiw	r28, 0x0c	; 12
    219c:	e2 e0       	ldi	r30, 0x02	; 2
    219e:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x20>

000021a2 <__pack_f>:
    21a2:	df 92       	push	r13
    21a4:	ef 92       	push	r14
    21a6:	ff 92       	push	r15
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	fc 01       	movw	r30, r24
    21ae:	e4 80       	ldd	r14, Z+4	; 0x04
    21b0:	f5 80       	ldd	r15, Z+5	; 0x05
    21b2:	06 81       	ldd	r16, Z+6	; 0x06
    21b4:	17 81       	ldd	r17, Z+7	; 0x07
    21b6:	d1 80       	ldd	r13, Z+1	; 0x01
    21b8:	80 81       	ld	r24, Z
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	48 f4       	brcc	.+18     	; 0x21d0 <__pack_f+0x2e>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a0 e1       	ldi	r26, 0x10	; 16
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e8 2a       	or	r14, r24
    21c8:	f9 2a       	or	r15, r25
    21ca:	0a 2b       	or	r16, r26
    21cc:	1b 2b       	or	r17, r27
    21ce:	a5 c0       	rjmp	.+330    	; 0x231a <__pack_f+0x178>
    21d0:	84 30       	cpi	r24, 0x04	; 4
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <__pack_f+0x34>
    21d4:	9f c0       	rjmp	.+318    	; 0x2314 <__pack_f+0x172>
    21d6:	82 30       	cpi	r24, 0x02	; 2
    21d8:	21 f4       	brne	.+8      	; 0x21e2 <__pack_f+0x40>
    21da:	ee 24       	eor	r14, r14
    21dc:	ff 24       	eor	r15, r15
    21de:	87 01       	movw	r16, r14
    21e0:	05 c0       	rjmp	.+10     	; 0x21ec <__pack_f+0x4a>
    21e2:	e1 14       	cp	r14, r1
    21e4:	f1 04       	cpc	r15, r1
    21e6:	01 05       	cpc	r16, r1
    21e8:	11 05       	cpc	r17, r1
    21ea:	19 f4       	brne	.+6      	; 0x21f2 <__pack_f+0x50>
    21ec:	e0 e0       	ldi	r30, 0x00	; 0
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	96 c0       	rjmp	.+300    	; 0x231e <__pack_f+0x17c>
    21f2:	62 81       	ldd	r22, Z+2	; 0x02
    21f4:	73 81       	ldd	r23, Z+3	; 0x03
    21f6:	9f ef       	ldi	r25, 0xFF	; 255
    21f8:	62 38       	cpi	r22, 0x82	; 130
    21fa:	79 07       	cpc	r23, r25
    21fc:	0c f0       	brlt	.+2      	; 0x2200 <__pack_f+0x5e>
    21fe:	5b c0       	rjmp	.+182    	; 0x22b6 <__pack_f+0x114>
    2200:	22 e8       	ldi	r18, 0x82	; 130
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	26 1b       	sub	r18, r22
    2206:	37 0b       	sbc	r19, r23
    2208:	2a 31       	cpi	r18, 0x1A	; 26
    220a:	31 05       	cpc	r19, r1
    220c:	2c f0       	brlt	.+10     	; 0x2218 <__pack_f+0x76>
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	2a c0       	rjmp	.+84     	; 0x226c <__pack_f+0xca>
    2218:	b8 01       	movw	r22, r16
    221a:	a7 01       	movw	r20, r14
    221c:	02 2e       	mov	r0, r18
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <__pack_f+0x86>
    2220:	76 95       	lsr	r23
    2222:	67 95       	ror	r22
    2224:	57 95       	ror	r21
    2226:	47 95       	ror	r20
    2228:	0a 94       	dec	r0
    222a:	d2 f7       	brpl	.-12     	; 0x2220 <__pack_f+0x7e>
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e0       	ldi	r26, 0x00	; 0
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	04 c0       	rjmp	.+8      	; 0x223e <__pack_f+0x9c>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	aa 1f       	adc	r26, r26
    223c:	bb 1f       	adc	r27, r27
    223e:	2a 95       	dec	r18
    2240:	d2 f7       	brpl	.-12     	; 0x2236 <__pack_f+0x94>
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	a1 09       	sbc	r26, r1
    2246:	b1 09       	sbc	r27, r1
    2248:	8e 21       	and	r24, r14
    224a:	9f 21       	and	r25, r15
    224c:	a0 23       	and	r26, r16
    224e:	b1 23       	and	r27, r17
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	a1 05       	cpc	r26, r1
    2254:	b1 05       	cpc	r27, r1
    2256:	21 f0       	breq	.+8      	; 0x2260 <__pack_f+0xbe>
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	a0 e0       	ldi	r26, 0x00	; 0
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	9a 01       	movw	r18, r20
    2262:	ab 01       	movw	r20, r22
    2264:	28 2b       	or	r18, r24
    2266:	39 2b       	or	r19, r25
    2268:	4a 2b       	or	r20, r26
    226a:	5b 2b       	or	r21, r27
    226c:	da 01       	movw	r26, r20
    226e:	c9 01       	movw	r24, r18
    2270:	8f 77       	andi	r24, 0x7F	; 127
    2272:	90 70       	andi	r25, 0x00	; 0
    2274:	a0 70       	andi	r26, 0x00	; 0
    2276:	b0 70       	andi	r27, 0x00	; 0
    2278:	80 34       	cpi	r24, 0x40	; 64
    227a:	91 05       	cpc	r25, r1
    227c:	a1 05       	cpc	r26, r1
    227e:	b1 05       	cpc	r27, r1
    2280:	39 f4       	brne	.+14     	; 0x2290 <__pack_f+0xee>
    2282:	27 ff       	sbrs	r18, 7
    2284:	09 c0       	rjmp	.+18     	; 0x2298 <__pack_f+0xf6>
    2286:	20 5c       	subi	r18, 0xC0	; 192
    2288:	3f 4f       	sbci	r19, 0xFF	; 255
    228a:	4f 4f       	sbci	r20, 0xFF	; 255
    228c:	5f 4f       	sbci	r21, 0xFF	; 255
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <__pack_f+0xf6>
    2290:	21 5c       	subi	r18, 0xC1	; 193
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	4f 4f       	sbci	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	e0 e0       	ldi	r30, 0x00	; 0
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	20 30       	cpi	r18, 0x00	; 0
    229e:	a0 e0       	ldi	r26, 0x00	; 0
    22a0:	3a 07       	cpc	r19, r26
    22a2:	a0 e0       	ldi	r26, 0x00	; 0
    22a4:	4a 07       	cpc	r20, r26
    22a6:	a0 e4       	ldi	r26, 0x40	; 64
    22a8:	5a 07       	cpc	r21, r26
    22aa:	10 f0       	brcs	.+4      	; 0x22b0 <__pack_f+0x10e>
    22ac:	e1 e0       	ldi	r30, 0x01	; 1
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	79 01       	movw	r14, r18
    22b2:	8a 01       	movw	r16, r20
    22b4:	27 c0       	rjmp	.+78     	; 0x2304 <__pack_f+0x162>
    22b6:	60 38       	cpi	r22, 0x80	; 128
    22b8:	71 05       	cpc	r23, r1
    22ba:	64 f5       	brge	.+88     	; 0x2314 <__pack_f+0x172>
    22bc:	fb 01       	movw	r30, r22
    22be:	e1 58       	subi	r30, 0x81	; 129
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	d8 01       	movw	r26, r16
    22c4:	c7 01       	movw	r24, r14
    22c6:	8f 77       	andi	r24, 0x7F	; 127
    22c8:	90 70       	andi	r25, 0x00	; 0
    22ca:	a0 70       	andi	r26, 0x00	; 0
    22cc:	b0 70       	andi	r27, 0x00	; 0
    22ce:	80 34       	cpi	r24, 0x40	; 64
    22d0:	91 05       	cpc	r25, r1
    22d2:	a1 05       	cpc	r26, r1
    22d4:	b1 05       	cpc	r27, r1
    22d6:	39 f4       	brne	.+14     	; 0x22e6 <__pack_f+0x144>
    22d8:	e7 fe       	sbrs	r14, 7
    22da:	0d c0       	rjmp	.+26     	; 0x22f6 <__pack_f+0x154>
    22dc:	80 e4       	ldi	r24, 0x40	; 64
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <__pack_f+0x14c>
    22e6:	8f e3       	ldi	r24, 0x3F	; 63
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e0       	ldi	r26, 0x00	; 0
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e8 0e       	add	r14, r24
    22f0:	f9 1e       	adc	r15, r25
    22f2:	0a 1f       	adc	r16, r26
    22f4:	1b 1f       	adc	r17, r27
    22f6:	17 ff       	sbrs	r17, 7
    22f8:	05 c0       	rjmp	.+10     	; 0x2304 <__pack_f+0x162>
    22fa:	16 95       	lsr	r17
    22fc:	07 95       	ror	r16
    22fe:	f7 94       	ror	r15
    2300:	e7 94       	ror	r14
    2302:	31 96       	adiw	r30, 0x01	; 1
    2304:	87 e0       	ldi	r24, 0x07	; 7
    2306:	16 95       	lsr	r17
    2308:	07 95       	ror	r16
    230a:	f7 94       	ror	r15
    230c:	e7 94       	ror	r14
    230e:	8a 95       	dec	r24
    2310:	d1 f7       	brne	.-12     	; 0x2306 <__pack_f+0x164>
    2312:	05 c0       	rjmp	.+10     	; 0x231e <__pack_f+0x17c>
    2314:	ee 24       	eor	r14, r14
    2316:	ff 24       	eor	r15, r15
    2318:	87 01       	movw	r16, r14
    231a:	ef ef       	ldi	r30, 0xFF	; 255
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	6e 2f       	mov	r22, r30
    2320:	67 95       	ror	r22
    2322:	66 27       	eor	r22, r22
    2324:	67 95       	ror	r22
    2326:	90 2f       	mov	r25, r16
    2328:	9f 77       	andi	r25, 0x7F	; 127
    232a:	d7 94       	ror	r13
    232c:	dd 24       	eor	r13, r13
    232e:	d7 94       	ror	r13
    2330:	8e 2f       	mov	r24, r30
    2332:	86 95       	lsr	r24
    2334:	49 2f       	mov	r20, r25
    2336:	46 2b       	or	r20, r22
    2338:	58 2f       	mov	r21, r24
    233a:	5d 29       	or	r21, r13
    233c:	b7 01       	movw	r22, r14
    233e:	ca 01       	movw	r24, r20
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	ff 90       	pop	r15
    2346:	ef 90       	pop	r14
    2348:	df 90       	pop	r13
    234a:	08 95       	ret

0000234c <__unpack_f>:
    234c:	fc 01       	movw	r30, r24
    234e:	db 01       	movw	r26, r22
    2350:	40 81       	ld	r20, Z
    2352:	51 81       	ldd	r21, Z+1	; 0x01
    2354:	22 81       	ldd	r18, Z+2	; 0x02
    2356:	62 2f       	mov	r22, r18
    2358:	6f 77       	andi	r22, 0x7F	; 127
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	22 1f       	adc	r18, r18
    235e:	22 27       	eor	r18, r18
    2360:	22 1f       	adc	r18, r18
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	89 2f       	mov	r24, r25
    2366:	88 0f       	add	r24, r24
    2368:	82 2b       	or	r24, r18
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	99 1f       	adc	r25, r25
    2370:	99 27       	eor	r25, r25
    2372:	99 1f       	adc	r25, r25
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	9c 93       	st	X, r25
    2378:	11 97       	sbiw	r26, 0x01	; 1
    237a:	21 15       	cp	r18, r1
    237c:	31 05       	cpc	r19, r1
    237e:	a9 f5       	brne	.+106    	; 0x23ea <__unpack_f+0x9e>
    2380:	41 15       	cp	r20, r1
    2382:	51 05       	cpc	r21, r1
    2384:	61 05       	cpc	r22, r1
    2386:	71 05       	cpc	r23, r1
    2388:	11 f4       	brne	.+4      	; 0x238e <__unpack_f+0x42>
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	37 c0       	rjmp	.+110    	; 0x23fc <__unpack_f+0xb0>
    238e:	82 e8       	ldi	r24, 0x82	; 130
    2390:	9f ef       	ldi	r25, 0xFF	; 255
    2392:	13 96       	adiw	r26, 0x03	; 3
    2394:	9c 93       	st	X, r25
    2396:	8e 93       	st	-X, r24
    2398:	12 97       	sbiw	r26, 0x02	; 2
    239a:	9a 01       	movw	r18, r20
    239c:	ab 01       	movw	r20, r22
    239e:	67 e0       	ldi	r22, 0x07	; 7
    23a0:	22 0f       	add	r18, r18
    23a2:	33 1f       	adc	r19, r19
    23a4:	44 1f       	adc	r20, r20
    23a6:	55 1f       	adc	r21, r21
    23a8:	6a 95       	dec	r22
    23aa:	d1 f7       	brne	.-12     	; 0x23a0 <__unpack_f+0x54>
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	8c 93       	st	X, r24
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <__unpack_f+0x80>
    23b2:	22 0f       	add	r18, r18
    23b4:	33 1f       	adc	r19, r19
    23b6:	44 1f       	adc	r20, r20
    23b8:	55 1f       	adc	r21, r21
    23ba:	12 96       	adiw	r26, 0x02	; 2
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	13 97       	sbiw	r26, 0x03	; 3
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	13 96       	adiw	r26, 0x03	; 3
    23c6:	9c 93       	st	X, r25
    23c8:	8e 93       	st	-X, r24
    23ca:	12 97       	sbiw	r26, 0x02	; 2
    23cc:	20 30       	cpi	r18, 0x00	; 0
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	38 07       	cpc	r19, r24
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	48 07       	cpc	r20, r24
    23d6:	80 e4       	ldi	r24, 0x40	; 64
    23d8:	58 07       	cpc	r21, r24
    23da:	58 f3       	brcs	.-42     	; 0x23b2 <__unpack_f+0x66>
    23dc:	14 96       	adiw	r26, 0x04	; 4
    23de:	2d 93       	st	X+, r18
    23e0:	3d 93       	st	X+, r19
    23e2:	4d 93       	st	X+, r20
    23e4:	5c 93       	st	X, r21
    23e6:	17 97       	sbiw	r26, 0x07	; 7
    23e8:	08 95       	ret
    23ea:	2f 3f       	cpi	r18, 0xFF	; 255
    23ec:	31 05       	cpc	r19, r1
    23ee:	79 f4       	brne	.+30     	; 0x240e <__unpack_f+0xc2>
    23f0:	41 15       	cp	r20, r1
    23f2:	51 05       	cpc	r21, r1
    23f4:	61 05       	cpc	r22, r1
    23f6:	71 05       	cpc	r23, r1
    23f8:	19 f4       	brne	.+6      	; 0x2400 <__unpack_f+0xb4>
    23fa:	84 e0       	ldi	r24, 0x04	; 4
    23fc:	8c 93       	st	X, r24
    23fe:	08 95       	ret
    2400:	64 ff       	sbrs	r22, 4
    2402:	03 c0       	rjmp	.+6      	; 0x240a <__unpack_f+0xbe>
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	8c 93       	st	X, r24
    2408:	12 c0       	rjmp	.+36     	; 0x242e <__unpack_f+0xe2>
    240a:	1c 92       	st	X, r1
    240c:	10 c0       	rjmp	.+32     	; 0x242e <__unpack_f+0xe2>
    240e:	2f 57       	subi	r18, 0x7F	; 127
    2410:	30 40       	sbci	r19, 0x00	; 0
    2412:	13 96       	adiw	r26, 0x03	; 3
    2414:	3c 93       	st	X, r19
    2416:	2e 93       	st	-X, r18
    2418:	12 97       	sbiw	r26, 0x02	; 2
    241a:	83 e0       	ldi	r24, 0x03	; 3
    241c:	8c 93       	st	X, r24
    241e:	87 e0       	ldi	r24, 0x07	; 7
    2420:	44 0f       	add	r20, r20
    2422:	55 1f       	adc	r21, r21
    2424:	66 1f       	adc	r22, r22
    2426:	77 1f       	adc	r23, r23
    2428:	8a 95       	dec	r24
    242a:	d1 f7       	brne	.-12     	; 0x2420 <__unpack_f+0xd4>
    242c:	70 64       	ori	r23, 0x40	; 64
    242e:	14 96       	adiw	r26, 0x04	; 4
    2430:	4d 93       	st	X+, r20
    2432:	5d 93       	st	X+, r21
    2434:	6d 93       	st	X+, r22
    2436:	7c 93       	st	X, r23
    2438:	17 97       	sbiw	r26, 0x07	; 7
    243a:	08 95       	ret

0000243c <__fpcmp_parts_f>:
    243c:	1f 93       	push	r17
    243e:	dc 01       	movw	r26, r24
    2440:	fb 01       	movw	r30, r22
    2442:	9c 91       	ld	r25, X
    2444:	92 30       	cpi	r25, 0x02	; 2
    2446:	08 f4       	brcc	.+2      	; 0x244a <__fpcmp_parts_f+0xe>
    2448:	47 c0       	rjmp	.+142    	; 0x24d8 <__fpcmp_parts_f+0x9c>
    244a:	80 81       	ld	r24, Z
    244c:	82 30       	cpi	r24, 0x02	; 2
    244e:	08 f4       	brcc	.+2      	; 0x2452 <__fpcmp_parts_f+0x16>
    2450:	43 c0       	rjmp	.+134    	; 0x24d8 <__fpcmp_parts_f+0x9c>
    2452:	94 30       	cpi	r25, 0x04	; 4
    2454:	51 f4       	brne	.+20     	; 0x246a <__fpcmp_parts_f+0x2e>
    2456:	11 96       	adiw	r26, 0x01	; 1
    2458:	1c 91       	ld	r17, X
    245a:	84 30       	cpi	r24, 0x04	; 4
    245c:	99 f5       	brne	.+102    	; 0x24c4 <__fpcmp_parts_f+0x88>
    245e:	81 81       	ldd	r24, Z+1	; 0x01
    2460:	68 2f       	mov	r22, r24
    2462:	70 e0       	ldi	r23, 0x00	; 0
    2464:	61 1b       	sub	r22, r17
    2466:	71 09       	sbc	r23, r1
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <__fpcmp_parts_f+0xac>
    246a:	84 30       	cpi	r24, 0x04	; 4
    246c:	21 f0       	breq	.+8      	; 0x2476 <__fpcmp_parts_f+0x3a>
    246e:	92 30       	cpi	r25, 0x02	; 2
    2470:	31 f4       	brne	.+12     	; 0x247e <__fpcmp_parts_f+0x42>
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	b9 f1       	breq	.+110    	; 0x24e4 <__fpcmp_parts_f+0xa8>
    2476:	81 81       	ldd	r24, Z+1	; 0x01
    2478:	88 23       	and	r24, r24
    247a:	89 f1       	breq	.+98     	; 0x24de <__fpcmp_parts_f+0xa2>
    247c:	2d c0       	rjmp	.+90     	; 0x24d8 <__fpcmp_parts_f+0x9c>
    247e:	11 96       	adiw	r26, 0x01	; 1
    2480:	1c 91       	ld	r17, X
    2482:	11 97       	sbiw	r26, 0x01	; 1
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	f1 f0       	breq	.+60     	; 0x24c4 <__fpcmp_parts_f+0x88>
    2488:	81 81       	ldd	r24, Z+1	; 0x01
    248a:	18 17       	cp	r17, r24
    248c:	d9 f4       	brne	.+54     	; 0x24c4 <__fpcmp_parts_f+0x88>
    248e:	12 96       	adiw	r26, 0x02	; 2
    2490:	2d 91       	ld	r18, X+
    2492:	3c 91       	ld	r19, X
    2494:	13 97       	sbiw	r26, 0x03	; 3
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	82 17       	cp	r24, r18
    249c:	93 07       	cpc	r25, r19
    249e:	94 f0       	brlt	.+36     	; 0x24c4 <__fpcmp_parts_f+0x88>
    24a0:	28 17       	cp	r18, r24
    24a2:	39 07       	cpc	r19, r25
    24a4:	bc f0       	brlt	.+46     	; 0x24d4 <__fpcmp_parts_f+0x98>
    24a6:	14 96       	adiw	r26, 0x04	; 4
    24a8:	8d 91       	ld	r24, X+
    24aa:	9d 91       	ld	r25, X+
    24ac:	0d 90       	ld	r0, X+
    24ae:	bc 91       	ld	r27, X
    24b0:	a0 2d       	mov	r26, r0
    24b2:	24 81       	ldd	r18, Z+4	; 0x04
    24b4:	35 81       	ldd	r19, Z+5	; 0x05
    24b6:	46 81       	ldd	r20, Z+6	; 0x06
    24b8:	57 81       	ldd	r21, Z+7	; 0x07
    24ba:	28 17       	cp	r18, r24
    24bc:	39 07       	cpc	r19, r25
    24be:	4a 07       	cpc	r20, r26
    24c0:	5b 07       	cpc	r21, r27
    24c2:	18 f4       	brcc	.+6      	; 0x24ca <__fpcmp_parts_f+0x8e>
    24c4:	11 23       	and	r17, r17
    24c6:	41 f0       	breq	.+16     	; 0x24d8 <__fpcmp_parts_f+0x9c>
    24c8:	0a c0       	rjmp	.+20     	; 0x24de <__fpcmp_parts_f+0xa2>
    24ca:	82 17       	cp	r24, r18
    24cc:	93 07       	cpc	r25, r19
    24ce:	a4 07       	cpc	r26, r20
    24d0:	b5 07       	cpc	r27, r21
    24d2:	40 f4       	brcc	.+16     	; 0x24e4 <__fpcmp_parts_f+0xa8>
    24d4:	11 23       	and	r17, r17
    24d6:	19 f0       	breq	.+6      	; 0x24de <__fpcmp_parts_f+0xa2>
    24d8:	61 e0       	ldi	r22, 0x01	; 1
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	05 c0       	rjmp	.+10     	; 0x24e8 <__fpcmp_parts_f+0xac>
    24de:	6f ef       	ldi	r22, 0xFF	; 255
    24e0:	7f ef       	ldi	r23, 0xFF	; 255
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <__fpcmp_parts_f+0xac>
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	cb 01       	movw	r24, r22
    24ea:	1f 91       	pop	r17
    24ec:	08 95       	ret

000024ee <__prologue_saves__>:
    24ee:	2f 92       	push	r2
    24f0:	3f 92       	push	r3
    24f2:	4f 92       	push	r4
    24f4:	5f 92       	push	r5
    24f6:	6f 92       	push	r6
    24f8:	7f 92       	push	r7
    24fa:	8f 92       	push	r8
    24fc:	9f 92       	push	r9
    24fe:	af 92       	push	r10
    2500:	bf 92       	push	r11
    2502:	cf 92       	push	r12
    2504:	df 92       	push	r13
    2506:	ef 92       	push	r14
    2508:	ff 92       	push	r15
    250a:	0f 93       	push	r16
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	ca 1b       	sub	r28, r26
    2518:	db 0b       	sbc	r29, r27
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	09 94       	ijmp

00002526 <__epilogue_restores__>:
    2526:	2a 88       	ldd	r2, Y+18	; 0x12
    2528:	39 88       	ldd	r3, Y+17	; 0x11
    252a:	48 88       	ldd	r4, Y+16	; 0x10
    252c:	5f 84       	ldd	r5, Y+15	; 0x0f
    252e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2530:	7d 84       	ldd	r7, Y+13	; 0x0d
    2532:	8c 84       	ldd	r8, Y+12	; 0x0c
    2534:	9b 84       	ldd	r9, Y+11	; 0x0b
    2536:	aa 84       	ldd	r10, Y+10	; 0x0a
    2538:	b9 84       	ldd	r11, Y+9	; 0x09
    253a:	c8 84       	ldd	r12, Y+8	; 0x08
    253c:	df 80       	ldd	r13, Y+7	; 0x07
    253e:	ee 80       	ldd	r14, Y+6	; 0x06
    2540:	fd 80       	ldd	r15, Y+5	; 0x05
    2542:	0c 81       	ldd	r16, Y+4	; 0x04
    2544:	1b 81       	ldd	r17, Y+3	; 0x03
    2546:	aa 81       	ldd	r26, Y+2	; 0x02
    2548:	b9 81       	ldd	r27, Y+1	; 0x01
    254a:	ce 0f       	add	r28, r30
    254c:	d1 1d       	adc	r29, r1
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	ed 01       	movw	r28, r26
    255a:	08 95       	ret

0000255c <fdevopen>:
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	8c 01       	movw	r16, r24
    2566:	eb 01       	movw	r28, r22
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	31 f4       	brne	.+12     	; 0x2578 <fdevopen+0x1c>
    256c:	61 15       	cp	r22, r1
    256e:	71 05       	cpc	r23, r1
    2570:	19 f4       	brne	.+6      	; 0x2578 <fdevopen+0x1c>
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	38 c0       	rjmp	.+112    	; 0x25e8 <fdevopen+0x8c>
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	6e e0       	ldi	r22, 0x0E	; 14
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <calloc>
    2584:	fc 01       	movw	r30, r24
    2586:	9c 01       	movw	r18, r24
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	71 f1       	breq	.+92     	; 0x25e8 <fdevopen+0x8c>
    258c:	80 e8       	ldi	r24, 0x80	; 128
    258e:	83 83       	std	Z+3, r24	; 0x03
    2590:	20 97       	sbiw	r28, 0x00	; 0
    2592:	71 f0       	breq	.+28     	; 0x25b0 <fdevopen+0x54>
    2594:	d3 87       	std	Z+11, r29	; 0x0b
    2596:	c2 87       	std	Z+10, r28	; 0x0a
    2598:	81 e8       	ldi	r24, 0x81	; 129
    259a:	83 83       	std	Z+3, r24	; 0x03
    259c:	80 91 a9 01 	lds	r24, 0x01A9
    25a0:	90 91 aa 01 	lds	r25, 0x01AA
    25a4:	89 2b       	or	r24, r25
    25a6:	21 f4       	brne	.+8      	; 0x25b0 <fdevopen+0x54>
    25a8:	f0 93 aa 01 	sts	0x01AA, r31
    25ac:	e0 93 a9 01 	sts	0x01A9, r30
    25b0:	01 15       	cp	r16, r1
    25b2:	11 05       	cpc	r17, r1
    25b4:	c9 f0       	breq	.+50     	; 0x25e8 <fdevopen+0x8c>
    25b6:	11 87       	std	Z+9, r17	; 0x09
    25b8:	00 87       	std	Z+8, r16	; 0x08
    25ba:	83 81       	ldd	r24, Z+3	; 0x03
    25bc:	82 60       	ori	r24, 0x02	; 2
    25be:	83 83       	std	Z+3, r24	; 0x03
    25c0:	80 91 ab 01 	lds	r24, 0x01AB
    25c4:	90 91 ac 01 	lds	r25, 0x01AC
    25c8:	89 2b       	or	r24, r25
    25ca:	71 f4       	brne	.+28     	; 0x25e8 <fdevopen+0x8c>
    25cc:	f0 93 ac 01 	sts	0x01AC, r31
    25d0:	e0 93 ab 01 	sts	0x01AB, r30
    25d4:	80 91 ad 01 	lds	r24, 0x01AD
    25d8:	90 91 ae 01 	lds	r25, 0x01AE
    25dc:	89 2b       	or	r24, r25
    25de:	21 f4       	brne	.+8      	; 0x25e8 <fdevopen+0x8c>
    25e0:	f0 93 ae 01 	sts	0x01AE, r31
    25e4:	e0 93 ad 01 	sts	0x01AD, r30
    25e8:	c9 01       	movw	r24, r18
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	08 95       	ret

000025f4 <printf>:
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	fe 01       	movw	r30, r28
    25fe:	35 96       	adiw	r30, 0x05	; 5
    2600:	61 91       	ld	r22, Z+
    2602:	71 91       	ld	r23, Z+
    2604:	80 91 ab 01 	lds	r24, 0x01AB
    2608:	90 91 ac 01 	lds	r25, 0x01AC
    260c:	af 01       	movw	r20, r30
    260e:	0e 94 48 13 	call	0x2690	; 0x2690 <vfprintf>
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <putchar>:
    2618:	60 91 ab 01 	lds	r22, 0x01AB
    261c:	70 91 ac 01 	lds	r23, 0x01AC
    2620:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    2624:	08 95       	ret

00002626 <puts>:
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	8c 01       	movw	r16, r24
    2630:	e0 91 ab 01 	lds	r30, 0x01AB
    2634:	f0 91 ac 01 	lds	r31, 0x01AC
    2638:	83 81       	ldd	r24, Z+3	; 0x03
    263a:	81 ff       	sbrs	r24, 1
    263c:	21 c0       	rjmp	.+66     	; 0x2680 <puts+0x5a>
    263e:	c0 e0       	ldi	r28, 0x00	; 0
    2640:	d0 e0       	ldi	r29, 0x00	; 0
    2642:	0d c0       	rjmp	.+26     	; 0x265e <puts+0x38>
    2644:	e0 91 ab 01 	lds	r30, 0x01AB
    2648:	f0 91 ac 01 	lds	r31, 0x01AC
    264c:	20 85       	ldd	r18, Z+8	; 0x08
    264e:	31 85       	ldd	r19, Z+9	; 0x09
    2650:	bf 01       	movw	r22, r30
    2652:	f9 01       	movw	r30, r18
    2654:	09 95       	icall
    2656:	89 2b       	or	r24, r25
    2658:	11 f0       	breq	.+4      	; 0x265e <puts+0x38>
    265a:	cf ef       	ldi	r28, 0xFF	; 255
    265c:	df ef       	ldi	r29, 0xFF	; 255
    265e:	f8 01       	movw	r30, r16
    2660:	81 91       	ld	r24, Z+
    2662:	8f 01       	movw	r16, r30
    2664:	88 23       	and	r24, r24
    2666:	71 f7       	brne	.-36     	; 0x2644 <puts+0x1e>
    2668:	e0 91 ab 01 	lds	r30, 0x01AB
    266c:	f0 91 ac 01 	lds	r31, 0x01AC
    2670:	20 85       	ldd	r18, Z+8	; 0x08
    2672:	31 85       	ldd	r19, Z+9	; 0x09
    2674:	8a e0       	ldi	r24, 0x0A	; 10
    2676:	bf 01       	movw	r22, r30
    2678:	f9 01       	movw	r30, r18
    267a:	09 95       	icall
    267c:	89 2b       	or	r24, r25
    267e:	11 f0       	breq	.+4      	; 0x2684 <puts+0x5e>
    2680:	cf ef       	ldi	r28, 0xFF	; 255
    2682:	df ef       	ldi	r29, 0xFF	; 255
    2684:	ce 01       	movw	r24, r28
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret

00002690 <vfprintf>:
    2690:	2f 92       	push	r2
    2692:	3f 92       	push	r3
    2694:	4f 92       	push	r4
    2696:	5f 92       	push	r5
    2698:	6f 92       	push	r6
    269a:	7f 92       	push	r7
    269c:	8f 92       	push	r8
    269e:	9f 92       	push	r9
    26a0:	af 92       	push	r10
    26a2:	bf 92       	push	r11
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	2b 97       	sbiw	r28, 0x0b	; 11
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	3c 01       	movw	r6, r24
    26c6:	2b 01       	movw	r4, r22
    26c8:	5a 01       	movw	r10, r20
    26ca:	fc 01       	movw	r30, r24
    26cc:	17 82       	std	Z+7, r1	; 0x07
    26ce:	16 82       	std	Z+6, r1	; 0x06
    26d0:	83 81       	ldd	r24, Z+3	; 0x03
    26d2:	81 fd       	sbrc	r24, 1
    26d4:	03 c0       	rjmp	.+6      	; 0x26dc <vfprintf+0x4c>
    26d6:	6f ef       	ldi	r22, 0xFF	; 255
    26d8:	7f ef       	ldi	r23, 0xFF	; 255
    26da:	c6 c1       	rjmp	.+908    	; 0x2a68 <vfprintf+0x3d8>
    26dc:	9a e0       	ldi	r25, 0x0A	; 10
    26de:	89 2e       	mov	r8, r25
    26e0:	1e 01       	movw	r2, r28
    26e2:	08 94       	sec
    26e4:	21 1c       	adc	r2, r1
    26e6:	31 1c       	adc	r3, r1
    26e8:	f3 01       	movw	r30, r6
    26ea:	23 81       	ldd	r18, Z+3	; 0x03
    26ec:	f2 01       	movw	r30, r4
    26ee:	23 fd       	sbrc	r18, 3
    26f0:	85 91       	lpm	r24, Z+
    26f2:	23 ff       	sbrs	r18, 3
    26f4:	81 91       	ld	r24, Z+
    26f6:	2f 01       	movw	r4, r30
    26f8:	88 23       	and	r24, r24
    26fa:	09 f4       	brne	.+2      	; 0x26fe <vfprintf+0x6e>
    26fc:	b2 c1       	rjmp	.+868    	; 0x2a62 <vfprintf+0x3d2>
    26fe:	85 32       	cpi	r24, 0x25	; 37
    2700:	39 f4       	brne	.+14     	; 0x2710 <vfprintf+0x80>
    2702:	23 fd       	sbrc	r18, 3
    2704:	85 91       	lpm	r24, Z+
    2706:	23 ff       	sbrs	r18, 3
    2708:	81 91       	ld	r24, Z+
    270a:	2f 01       	movw	r4, r30
    270c:	85 32       	cpi	r24, 0x25	; 37
    270e:	29 f4       	brne	.+10     	; 0x271a <vfprintf+0x8a>
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	b3 01       	movw	r22, r6
    2714:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    2718:	e7 cf       	rjmp	.-50     	; 0x26e8 <vfprintf+0x58>
    271a:	98 2f       	mov	r25, r24
    271c:	ff 24       	eor	r15, r15
    271e:	ee 24       	eor	r14, r14
    2720:	99 24       	eor	r9, r9
    2722:	ff e1       	ldi	r31, 0x1F	; 31
    2724:	ff 15       	cp	r31, r15
    2726:	d0 f0       	brcs	.+52     	; 0x275c <vfprintf+0xcc>
    2728:	9b 32       	cpi	r25, 0x2B	; 43
    272a:	69 f0       	breq	.+26     	; 0x2746 <vfprintf+0xb6>
    272c:	9c 32       	cpi	r25, 0x2C	; 44
    272e:	28 f4       	brcc	.+10     	; 0x273a <vfprintf+0xaa>
    2730:	90 32       	cpi	r25, 0x20	; 32
    2732:	59 f0       	breq	.+22     	; 0x274a <vfprintf+0xba>
    2734:	93 32       	cpi	r25, 0x23	; 35
    2736:	91 f4       	brne	.+36     	; 0x275c <vfprintf+0xcc>
    2738:	0e c0       	rjmp	.+28     	; 0x2756 <vfprintf+0xc6>
    273a:	9d 32       	cpi	r25, 0x2D	; 45
    273c:	49 f0       	breq	.+18     	; 0x2750 <vfprintf+0xc0>
    273e:	90 33       	cpi	r25, 0x30	; 48
    2740:	69 f4       	brne	.+26     	; 0x275c <vfprintf+0xcc>
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	24 c0       	rjmp	.+72     	; 0x278e <vfprintf+0xfe>
    2746:	52 e0       	ldi	r21, 0x02	; 2
    2748:	f5 2a       	or	r15, r21
    274a:	84 e0       	ldi	r24, 0x04	; 4
    274c:	f8 2a       	or	r15, r24
    274e:	28 c0       	rjmp	.+80     	; 0x27a0 <vfprintf+0x110>
    2750:	98 e0       	ldi	r25, 0x08	; 8
    2752:	f9 2a       	or	r15, r25
    2754:	25 c0       	rjmp	.+74     	; 0x27a0 <vfprintf+0x110>
    2756:	e0 e1       	ldi	r30, 0x10	; 16
    2758:	fe 2a       	or	r15, r30
    275a:	22 c0       	rjmp	.+68     	; 0x27a0 <vfprintf+0x110>
    275c:	f7 fc       	sbrc	r15, 7
    275e:	29 c0       	rjmp	.+82     	; 0x27b2 <vfprintf+0x122>
    2760:	89 2f       	mov	r24, r25
    2762:	80 53       	subi	r24, 0x30	; 48
    2764:	8a 30       	cpi	r24, 0x0A	; 10
    2766:	70 f4       	brcc	.+28     	; 0x2784 <vfprintf+0xf4>
    2768:	f6 fe       	sbrs	r15, 6
    276a:	05 c0       	rjmp	.+10     	; 0x2776 <vfprintf+0xe6>
    276c:	98 9c       	mul	r9, r8
    276e:	90 2c       	mov	r9, r0
    2770:	11 24       	eor	r1, r1
    2772:	98 0e       	add	r9, r24
    2774:	15 c0       	rjmp	.+42     	; 0x27a0 <vfprintf+0x110>
    2776:	e8 9c       	mul	r14, r8
    2778:	e0 2c       	mov	r14, r0
    277a:	11 24       	eor	r1, r1
    277c:	e8 0e       	add	r14, r24
    277e:	f0 e2       	ldi	r31, 0x20	; 32
    2780:	ff 2a       	or	r15, r31
    2782:	0e c0       	rjmp	.+28     	; 0x27a0 <vfprintf+0x110>
    2784:	9e 32       	cpi	r25, 0x2E	; 46
    2786:	29 f4       	brne	.+10     	; 0x2792 <vfprintf+0x102>
    2788:	f6 fc       	sbrc	r15, 6
    278a:	6b c1       	rjmp	.+726    	; 0x2a62 <vfprintf+0x3d2>
    278c:	40 e4       	ldi	r20, 0x40	; 64
    278e:	f4 2a       	or	r15, r20
    2790:	07 c0       	rjmp	.+14     	; 0x27a0 <vfprintf+0x110>
    2792:	9c 36       	cpi	r25, 0x6C	; 108
    2794:	19 f4       	brne	.+6      	; 0x279c <vfprintf+0x10c>
    2796:	50 e8       	ldi	r21, 0x80	; 128
    2798:	f5 2a       	or	r15, r21
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <vfprintf+0x110>
    279c:	98 36       	cpi	r25, 0x68	; 104
    279e:	49 f4       	brne	.+18     	; 0x27b2 <vfprintf+0x122>
    27a0:	f2 01       	movw	r30, r4
    27a2:	23 fd       	sbrc	r18, 3
    27a4:	95 91       	lpm	r25, Z+
    27a6:	23 ff       	sbrs	r18, 3
    27a8:	91 91       	ld	r25, Z+
    27aa:	2f 01       	movw	r4, r30
    27ac:	99 23       	and	r25, r25
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <vfprintf+0x122>
    27b0:	b8 cf       	rjmp	.-144    	; 0x2722 <vfprintf+0x92>
    27b2:	89 2f       	mov	r24, r25
    27b4:	85 54       	subi	r24, 0x45	; 69
    27b6:	83 30       	cpi	r24, 0x03	; 3
    27b8:	18 f0       	brcs	.+6      	; 0x27c0 <vfprintf+0x130>
    27ba:	80 52       	subi	r24, 0x20	; 32
    27bc:	83 30       	cpi	r24, 0x03	; 3
    27be:	38 f4       	brcc	.+14     	; 0x27ce <vfprintf+0x13e>
    27c0:	44 e0       	ldi	r20, 0x04	; 4
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	a4 0e       	add	r10, r20
    27c6:	b5 1e       	adc	r11, r21
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	59 83       	std	Y+1, r21	; 0x01
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <vfprintf+0x15c>
    27ce:	93 36       	cpi	r25, 0x63	; 99
    27d0:	31 f0       	breq	.+12     	; 0x27de <vfprintf+0x14e>
    27d2:	93 37       	cpi	r25, 0x73	; 115
    27d4:	79 f0       	breq	.+30     	; 0x27f4 <vfprintf+0x164>
    27d6:	93 35       	cpi	r25, 0x53	; 83
    27d8:	09 f0       	breq	.+2      	; 0x27dc <vfprintf+0x14c>
    27da:	56 c0       	rjmp	.+172    	; 0x2888 <vfprintf+0x1f8>
    27dc:	20 c0       	rjmp	.+64     	; 0x281e <vfprintf+0x18e>
    27de:	f5 01       	movw	r30, r10
    27e0:	80 81       	ld	r24, Z
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	42 e0       	ldi	r20, 0x02	; 2
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	a4 0e       	add	r10, r20
    27ea:	b5 1e       	adc	r11, r21
    27ec:	61 01       	movw	r12, r2
    27ee:	01 e0       	ldi	r16, 0x01	; 1
    27f0:	10 e0       	ldi	r17, 0x00	; 0
    27f2:	12 c0       	rjmp	.+36     	; 0x2818 <vfprintf+0x188>
    27f4:	f5 01       	movw	r30, r10
    27f6:	c0 80       	ld	r12, Z
    27f8:	d1 80       	ldd	r13, Z+1	; 0x01
    27fa:	f6 fc       	sbrc	r15, 6
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <vfprintf+0x174>
    27fe:	6f ef       	ldi	r22, 0xFF	; 255
    2800:	7f ef       	ldi	r23, 0xFF	; 255
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <vfprintf+0x178>
    2804:	69 2d       	mov	r22, r9
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	42 e0       	ldi	r20, 0x02	; 2
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	a4 0e       	add	r10, r20
    280e:	b5 1e       	adc	r11, r21
    2810:	c6 01       	movw	r24, r12
    2812:	0e 94 81 16 	call	0x2d02	; 0x2d02 <strnlen>
    2816:	8c 01       	movw	r16, r24
    2818:	5f e7       	ldi	r21, 0x7F	; 127
    281a:	f5 22       	and	r15, r21
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <vfprintf+0x1b6>
    281e:	f5 01       	movw	r30, r10
    2820:	c0 80       	ld	r12, Z
    2822:	d1 80       	ldd	r13, Z+1	; 0x01
    2824:	f6 fc       	sbrc	r15, 6
    2826:	03 c0       	rjmp	.+6      	; 0x282e <vfprintf+0x19e>
    2828:	6f ef       	ldi	r22, 0xFF	; 255
    282a:	7f ef       	ldi	r23, 0xFF	; 255
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <vfprintf+0x1a2>
    282e:	69 2d       	mov	r22, r9
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	42 e0       	ldi	r20, 0x02	; 2
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	a4 0e       	add	r10, r20
    2838:	b5 1e       	adc	r11, r21
    283a:	c6 01       	movw	r24, r12
    283c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <strnlen_P>
    2840:	8c 01       	movw	r16, r24
    2842:	50 e8       	ldi	r21, 0x80	; 128
    2844:	f5 2a       	or	r15, r21
    2846:	f3 fe       	sbrs	r15, 3
    2848:	07 c0       	rjmp	.+14     	; 0x2858 <vfprintf+0x1c8>
    284a:	1a c0       	rjmp	.+52     	; 0x2880 <vfprintf+0x1f0>
    284c:	80 e2       	ldi	r24, 0x20	; 32
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	b3 01       	movw	r22, r6
    2852:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    2856:	ea 94       	dec	r14
    2858:	8e 2d       	mov	r24, r14
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	08 17       	cp	r16, r24
    285e:	19 07       	cpc	r17, r25
    2860:	a8 f3       	brcs	.-22     	; 0x284c <vfprintf+0x1bc>
    2862:	0e c0       	rjmp	.+28     	; 0x2880 <vfprintf+0x1f0>
    2864:	f6 01       	movw	r30, r12
    2866:	f7 fc       	sbrc	r15, 7
    2868:	85 91       	lpm	r24, Z+
    286a:	f7 fe       	sbrs	r15, 7
    286c:	81 91       	ld	r24, Z+
    286e:	6f 01       	movw	r12, r30
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	b3 01       	movw	r22, r6
    2874:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    2878:	e1 10       	cpse	r14, r1
    287a:	ea 94       	dec	r14
    287c:	01 50       	subi	r16, 0x01	; 1
    287e:	10 40       	sbci	r17, 0x00	; 0
    2880:	01 15       	cp	r16, r1
    2882:	11 05       	cpc	r17, r1
    2884:	79 f7       	brne	.-34     	; 0x2864 <vfprintf+0x1d4>
    2886:	ea c0       	rjmp	.+468    	; 0x2a5c <vfprintf+0x3cc>
    2888:	94 36       	cpi	r25, 0x64	; 100
    288a:	11 f0       	breq	.+4      	; 0x2890 <vfprintf+0x200>
    288c:	99 36       	cpi	r25, 0x69	; 105
    288e:	69 f5       	brne	.+90     	; 0x28ea <vfprintf+0x25a>
    2890:	f7 fe       	sbrs	r15, 7
    2892:	08 c0       	rjmp	.+16     	; 0x28a4 <vfprintf+0x214>
    2894:	f5 01       	movw	r30, r10
    2896:	20 81       	ld	r18, Z
    2898:	31 81       	ldd	r19, Z+1	; 0x01
    289a:	42 81       	ldd	r20, Z+2	; 0x02
    289c:	53 81       	ldd	r21, Z+3	; 0x03
    289e:	84 e0       	ldi	r24, 0x04	; 4
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	0a c0       	rjmp	.+20     	; 0x28b8 <vfprintf+0x228>
    28a4:	f5 01       	movw	r30, r10
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	9c 01       	movw	r18, r24
    28ac:	44 27       	eor	r20, r20
    28ae:	37 fd       	sbrc	r19, 7
    28b0:	40 95       	com	r20
    28b2:	54 2f       	mov	r21, r20
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a8 0e       	add	r10, r24
    28ba:	b9 1e       	adc	r11, r25
    28bc:	9f e6       	ldi	r25, 0x6F	; 111
    28be:	f9 22       	and	r15, r25
    28c0:	57 ff       	sbrs	r21, 7
    28c2:	09 c0       	rjmp	.+18     	; 0x28d6 <vfprintf+0x246>
    28c4:	50 95       	com	r21
    28c6:	40 95       	com	r20
    28c8:	30 95       	com	r19
    28ca:	21 95       	neg	r18
    28cc:	3f 4f       	sbci	r19, 0xFF	; 255
    28ce:	4f 4f       	sbci	r20, 0xFF	; 255
    28d0:	5f 4f       	sbci	r21, 0xFF	; 255
    28d2:	e0 e8       	ldi	r30, 0x80	; 128
    28d4:	fe 2a       	or	r15, r30
    28d6:	ca 01       	movw	r24, r20
    28d8:	b9 01       	movw	r22, r18
    28da:	a1 01       	movw	r20, r2
    28dc:	2a e0       	ldi	r18, 0x0A	; 10
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__ultoa_invert>
    28e4:	d8 2e       	mov	r13, r24
    28e6:	d2 18       	sub	r13, r2
    28e8:	40 c0       	rjmp	.+128    	; 0x296a <vfprintf+0x2da>
    28ea:	95 37       	cpi	r25, 0x75	; 117
    28ec:	29 f4       	brne	.+10     	; 0x28f8 <vfprintf+0x268>
    28ee:	1f 2d       	mov	r17, r15
    28f0:	1f 7e       	andi	r17, 0xEF	; 239
    28f2:	2a e0       	ldi	r18, 0x0A	; 10
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	1d c0       	rjmp	.+58     	; 0x2932 <vfprintf+0x2a2>
    28f8:	1f 2d       	mov	r17, r15
    28fa:	19 7f       	andi	r17, 0xF9	; 249
    28fc:	9f 36       	cpi	r25, 0x6F	; 111
    28fe:	61 f0       	breq	.+24     	; 0x2918 <vfprintf+0x288>
    2900:	90 37       	cpi	r25, 0x70	; 112
    2902:	20 f4       	brcc	.+8      	; 0x290c <vfprintf+0x27c>
    2904:	98 35       	cpi	r25, 0x58	; 88
    2906:	09 f0       	breq	.+2      	; 0x290a <vfprintf+0x27a>
    2908:	ac c0       	rjmp	.+344    	; 0x2a62 <vfprintf+0x3d2>
    290a:	0f c0       	rjmp	.+30     	; 0x292a <vfprintf+0x29a>
    290c:	90 37       	cpi	r25, 0x70	; 112
    290e:	39 f0       	breq	.+14     	; 0x291e <vfprintf+0x28e>
    2910:	98 37       	cpi	r25, 0x78	; 120
    2912:	09 f0       	breq	.+2      	; 0x2916 <vfprintf+0x286>
    2914:	a6 c0       	rjmp	.+332    	; 0x2a62 <vfprintf+0x3d2>
    2916:	04 c0       	rjmp	.+8      	; 0x2920 <vfprintf+0x290>
    2918:	28 e0       	ldi	r18, 0x08	; 8
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	0a c0       	rjmp	.+20     	; 0x2932 <vfprintf+0x2a2>
    291e:	10 61       	ori	r17, 0x10	; 16
    2920:	14 fd       	sbrc	r17, 4
    2922:	14 60       	ori	r17, 0x04	; 4
    2924:	20 e1       	ldi	r18, 0x10	; 16
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	04 c0       	rjmp	.+8      	; 0x2932 <vfprintf+0x2a2>
    292a:	14 fd       	sbrc	r17, 4
    292c:	16 60       	ori	r17, 0x06	; 6
    292e:	20 e1       	ldi	r18, 0x10	; 16
    2930:	32 e0       	ldi	r19, 0x02	; 2
    2932:	17 ff       	sbrs	r17, 7
    2934:	08 c0       	rjmp	.+16     	; 0x2946 <vfprintf+0x2b6>
    2936:	f5 01       	movw	r30, r10
    2938:	60 81       	ld	r22, Z
    293a:	71 81       	ldd	r23, Z+1	; 0x01
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	93 81       	ldd	r25, Z+3	; 0x03
    2940:	44 e0       	ldi	r20, 0x04	; 4
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	08 c0       	rjmp	.+16     	; 0x2956 <vfprintf+0x2c6>
    2946:	f5 01       	movw	r30, r10
    2948:	80 81       	ld	r24, Z
    294a:	91 81       	ldd	r25, Z+1	; 0x01
    294c:	bc 01       	movw	r22, r24
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	42 e0       	ldi	r20, 0x02	; 2
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	a4 0e       	add	r10, r20
    2958:	b5 1e       	adc	r11, r21
    295a:	a1 01       	movw	r20, r2
    295c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__ultoa_invert>
    2960:	d8 2e       	mov	r13, r24
    2962:	d2 18       	sub	r13, r2
    2964:	8f e7       	ldi	r24, 0x7F	; 127
    2966:	f8 2e       	mov	r15, r24
    2968:	f1 22       	and	r15, r17
    296a:	f6 fe       	sbrs	r15, 6
    296c:	0b c0       	rjmp	.+22     	; 0x2984 <vfprintf+0x2f4>
    296e:	5e ef       	ldi	r21, 0xFE	; 254
    2970:	f5 22       	and	r15, r21
    2972:	d9 14       	cp	r13, r9
    2974:	38 f4       	brcc	.+14     	; 0x2984 <vfprintf+0x2f4>
    2976:	f4 fe       	sbrs	r15, 4
    2978:	07 c0       	rjmp	.+14     	; 0x2988 <vfprintf+0x2f8>
    297a:	f2 fc       	sbrc	r15, 2
    297c:	05 c0       	rjmp	.+10     	; 0x2988 <vfprintf+0x2f8>
    297e:	8f ee       	ldi	r24, 0xEF	; 239
    2980:	f8 22       	and	r15, r24
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <vfprintf+0x2f8>
    2984:	1d 2d       	mov	r17, r13
    2986:	01 c0       	rjmp	.+2      	; 0x298a <vfprintf+0x2fa>
    2988:	19 2d       	mov	r17, r9
    298a:	f4 fe       	sbrs	r15, 4
    298c:	0d c0       	rjmp	.+26     	; 0x29a8 <vfprintf+0x318>
    298e:	fe 01       	movw	r30, r28
    2990:	ed 0d       	add	r30, r13
    2992:	f1 1d       	adc	r31, r1
    2994:	80 81       	ld	r24, Z
    2996:	80 33       	cpi	r24, 0x30	; 48
    2998:	19 f4       	brne	.+6      	; 0x29a0 <vfprintf+0x310>
    299a:	99 ee       	ldi	r25, 0xE9	; 233
    299c:	f9 22       	and	r15, r25
    299e:	08 c0       	rjmp	.+16     	; 0x29b0 <vfprintf+0x320>
    29a0:	1f 5f       	subi	r17, 0xFF	; 255
    29a2:	f2 fe       	sbrs	r15, 2
    29a4:	05 c0       	rjmp	.+10     	; 0x29b0 <vfprintf+0x320>
    29a6:	03 c0       	rjmp	.+6      	; 0x29ae <vfprintf+0x31e>
    29a8:	8f 2d       	mov	r24, r15
    29aa:	86 78       	andi	r24, 0x86	; 134
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <vfprintf+0x320>
    29ae:	1f 5f       	subi	r17, 0xFF	; 255
    29b0:	0f 2d       	mov	r16, r15
    29b2:	f3 fc       	sbrc	r15, 3
    29b4:	14 c0       	rjmp	.+40     	; 0x29de <vfprintf+0x34e>
    29b6:	f0 fe       	sbrs	r15, 0
    29b8:	0f c0       	rjmp	.+30     	; 0x29d8 <vfprintf+0x348>
    29ba:	1e 15       	cp	r17, r14
    29bc:	10 f0       	brcs	.+4      	; 0x29c2 <vfprintf+0x332>
    29be:	9d 2c       	mov	r9, r13
    29c0:	0b c0       	rjmp	.+22     	; 0x29d8 <vfprintf+0x348>
    29c2:	9d 2c       	mov	r9, r13
    29c4:	9e 0c       	add	r9, r14
    29c6:	91 1a       	sub	r9, r17
    29c8:	1e 2d       	mov	r17, r14
    29ca:	06 c0       	rjmp	.+12     	; 0x29d8 <vfprintf+0x348>
    29cc:	80 e2       	ldi	r24, 0x20	; 32
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	b3 01       	movw	r22, r6
    29d2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    29d6:	1f 5f       	subi	r17, 0xFF	; 255
    29d8:	1e 15       	cp	r17, r14
    29da:	c0 f3       	brcs	.-16     	; 0x29cc <vfprintf+0x33c>
    29dc:	04 c0       	rjmp	.+8      	; 0x29e6 <vfprintf+0x356>
    29de:	1e 15       	cp	r17, r14
    29e0:	10 f4       	brcc	.+4      	; 0x29e6 <vfprintf+0x356>
    29e2:	e1 1a       	sub	r14, r17
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <vfprintf+0x358>
    29e6:	ee 24       	eor	r14, r14
    29e8:	04 ff       	sbrs	r16, 4
    29ea:	0f c0       	rjmp	.+30     	; 0x2a0a <vfprintf+0x37a>
    29ec:	80 e3       	ldi	r24, 0x30	; 48
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	b3 01       	movw	r22, r6
    29f2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    29f6:	02 ff       	sbrs	r16, 2
    29f8:	1d c0       	rjmp	.+58     	; 0x2a34 <vfprintf+0x3a4>
    29fa:	01 fd       	sbrc	r16, 1
    29fc:	03 c0       	rjmp	.+6      	; 0x2a04 <vfprintf+0x374>
    29fe:	88 e7       	ldi	r24, 0x78	; 120
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e c0       	rjmp	.+28     	; 0x2a20 <vfprintf+0x390>
    2a04:	88 e5       	ldi	r24, 0x58	; 88
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0b c0       	rjmp	.+22     	; 0x2a20 <vfprintf+0x390>
    2a0a:	80 2f       	mov	r24, r16
    2a0c:	86 78       	andi	r24, 0x86	; 134
    2a0e:	91 f0       	breq	.+36     	; 0x2a34 <vfprintf+0x3a4>
    2a10:	01 ff       	sbrs	r16, 1
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <vfprintf+0x388>
    2a14:	8b e2       	ldi	r24, 0x2B	; 43
    2a16:	01 c0       	rjmp	.+2      	; 0x2a1a <vfprintf+0x38a>
    2a18:	80 e2       	ldi	r24, 0x20	; 32
    2a1a:	f7 fc       	sbrc	r15, 7
    2a1c:	8d e2       	ldi	r24, 0x2D	; 45
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	b3 01       	movw	r22, r6
    2a22:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    2a26:	06 c0       	rjmp	.+12     	; 0x2a34 <vfprintf+0x3a4>
    2a28:	80 e3       	ldi	r24, 0x30	; 48
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	b3 01       	movw	r22, r6
    2a2e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    2a32:	9a 94       	dec	r9
    2a34:	d9 14       	cp	r13, r9
    2a36:	c0 f3       	brcs	.-16     	; 0x2a28 <vfprintf+0x398>
    2a38:	da 94       	dec	r13
    2a3a:	f1 01       	movw	r30, r2
    2a3c:	ed 0d       	add	r30, r13
    2a3e:	f1 1d       	adc	r31, r1
    2a40:	80 81       	ld	r24, Z
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	b3 01       	movw	r22, r6
    2a46:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    2a4a:	dd 20       	and	r13, r13
    2a4c:	a9 f7       	brne	.-22     	; 0x2a38 <vfprintf+0x3a8>
    2a4e:	06 c0       	rjmp	.+12     	; 0x2a5c <vfprintf+0x3cc>
    2a50:	80 e2       	ldi	r24, 0x20	; 32
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	b3 01       	movw	r22, r6
    2a56:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <fputc>
    2a5a:	ea 94       	dec	r14
    2a5c:	ee 20       	and	r14, r14
    2a5e:	c1 f7       	brne	.-16     	; 0x2a50 <vfprintf+0x3c0>
    2a60:	43 ce       	rjmp	.-890    	; 0x26e8 <vfprintf+0x58>
    2a62:	f3 01       	movw	r30, r6
    2a64:	66 81       	ldd	r22, Z+6	; 0x06
    2a66:	77 81       	ldd	r23, Z+7	; 0x07
    2a68:	cb 01       	movw	r24, r22
    2a6a:	2b 96       	adiw	r28, 0x0b	; 11
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	1f 91       	pop	r17
    2a7c:	0f 91       	pop	r16
    2a7e:	ff 90       	pop	r15
    2a80:	ef 90       	pop	r14
    2a82:	df 90       	pop	r13
    2a84:	cf 90       	pop	r12
    2a86:	bf 90       	pop	r11
    2a88:	af 90       	pop	r10
    2a8a:	9f 90       	pop	r9
    2a8c:	8f 90       	pop	r8
    2a8e:	7f 90       	pop	r7
    2a90:	6f 90       	pop	r6
    2a92:	5f 90       	pop	r5
    2a94:	4f 90       	pop	r4
    2a96:	3f 90       	pop	r3
    2a98:	2f 90       	pop	r2
    2a9a:	08 95       	ret

00002a9c <calloc>:
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	68 9f       	mul	r22, r24
    2aa6:	80 01       	movw	r16, r0
    2aa8:	69 9f       	mul	r22, r25
    2aaa:	10 0d       	add	r17, r0
    2aac:	78 9f       	mul	r23, r24
    2aae:	10 0d       	add	r17, r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <malloc>
    2ab8:	ec 01       	movw	r28, r24
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	29 f0       	breq	.+10     	; 0x2ac8 <calloc+0x2c>
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	a8 01       	movw	r20, r16
    2ac4:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <memset>
    2ac8:	ce 01       	movw	r24, r28
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <malloc>:
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	bc 01       	movw	r22, r24
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	91 05       	cpc	r25, r1
    2ade:	10 f4       	brcc	.+4      	; 0x2ae4 <malloc+0x10>
    2ae0:	62 e0       	ldi	r22, 0x02	; 2
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	a0 91 b1 01 	lds	r26, 0x01B1
    2ae8:	b0 91 b2 01 	lds	r27, 0x01B2
    2aec:	ed 01       	movw	r28, r26
    2aee:	e0 e0       	ldi	r30, 0x00	; 0
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	50 e0       	ldi	r21, 0x00	; 0
    2af6:	21 c0       	rjmp	.+66     	; 0x2b3a <malloc+0x66>
    2af8:	88 81       	ld	r24, Y
    2afa:	99 81       	ldd	r25, Y+1	; 0x01
    2afc:	86 17       	cp	r24, r22
    2afe:	97 07       	cpc	r25, r23
    2b00:	69 f4       	brne	.+26     	; 0x2b1c <malloc+0x48>
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	9b 81       	ldd	r25, Y+3	; 0x03
    2b06:	30 97       	sbiw	r30, 0x00	; 0
    2b08:	19 f0       	breq	.+6      	; 0x2b10 <malloc+0x3c>
    2b0a:	93 83       	std	Z+3, r25	; 0x03
    2b0c:	82 83       	std	Z+2, r24	; 0x02
    2b0e:	04 c0       	rjmp	.+8      	; 0x2b18 <malloc+0x44>
    2b10:	90 93 b2 01 	sts	0x01B2, r25
    2b14:	80 93 b1 01 	sts	0x01B1, r24
    2b18:	fe 01       	movw	r30, r28
    2b1a:	34 c0       	rjmp	.+104    	; 0x2b84 <malloc+0xb0>
    2b1c:	68 17       	cp	r22, r24
    2b1e:	79 07       	cpc	r23, r25
    2b20:	38 f4       	brcc	.+14     	; 0x2b30 <malloc+0x5c>
    2b22:	41 15       	cp	r20, r1
    2b24:	51 05       	cpc	r21, r1
    2b26:	19 f0       	breq	.+6      	; 0x2b2e <malloc+0x5a>
    2b28:	84 17       	cp	r24, r20
    2b2a:	95 07       	cpc	r25, r21
    2b2c:	08 f4       	brcc	.+2      	; 0x2b30 <malloc+0x5c>
    2b2e:	ac 01       	movw	r20, r24
    2b30:	fe 01       	movw	r30, r28
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	9b 81       	ldd	r25, Y+3	; 0x03
    2b36:	9c 01       	movw	r18, r24
    2b38:	e9 01       	movw	r28, r18
    2b3a:	20 97       	sbiw	r28, 0x00	; 0
    2b3c:	e9 f6       	brne	.-70     	; 0x2af8 <malloc+0x24>
    2b3e:	41 15       	cp	r20, r1
    2b40:	51 05       	cpc	r21, r1
    2b42:	a9 f1       	breq	.+106    	; 0x2bae <malloc+0xda>
    2b44:	ca 01       	movw	r24, r20
    2b46:	86 1b       	sub	r24, r22
    2b48:	97 0b       	sbc	r25, r23
    2b4a:	04 97       	sbiw	r24, 0x04	; 4
    2b4c:	08 f4       	brcc	.+2      	; 0x2b50 <malloc+0x7c>
    2b4e:	ba 01       	movw	r22, r20
    2b50:	e0 e0       	ldi	r30, 0x00	; 0
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	2a c0       	rjmp	.+84     	; 0x2baa <malloc+0xd6>
    2b56:	8d 91       	ld	r24, X+
    2b58:	9c 91       	ld	r25, X
    2b5a:	11 97       	sbiw	r26, 0x01	; 1
    2b5c:	84 17       	cp	r24, r20
    2b5e:	95 07       	cpc	r25, r21
    2b60:	f9 f4       	brne	.+62     	; 0x2ba0 <malloc+0xcc>
    2b62:	64 17       	cp	r22, r20
    2b64:	75 07       	cpc	r23, r21
    2b66:	81 f4       	brne	.+32     	; 0x2b88 <malloc+0xb4>
    2b68:	12 96       	adiw	r26, 0x02	; 2
    2b6a:	8d 91       	ld	r24, X+
    2b6c:	9c 91       	ld	r25, X
    2b6e:	13 97       	sbiw	r26, 0x03	; 3
    2b70:	30 97       	sbiw	r30, 0x00	; 0
    2b72:	19 f0       	breq	.+6      	; 0x2b7a <malloc+0xa6>
    2b74:	93 83       	std	Z+3, r25	; 0x03
    2b76:	82 83       	std	Z+2, r24	; 0x02
    2b78:	04 c0       	rjmp	.+8      	; 0x2b82 <malloc+0xae>
    2b7a:	90 93 b2 01 	sts	0x01B2, r25
    2b7e:	80 93 b1 01 	sts	0x01B1, r24
    2b82:	fd 01       	movw	r30, r26
    2b84:	32 96       	adiw	r30, 0x02	; 2
    2b86:	4f c0       	rjmp	.+158    	; 0x2c26 <malloc+0x152>
    2b88:	ca 01       	movw	r24, r20
    2b8a:	86 1b       	sub	r24, r22
    2b8c:	97 0b       	sbc	r25, r23
    2b8e:	fd 01       	movw	r30, r26
    2b90:	e8 0f       	add	r30, r24
    2b92:	f9 1f       	adc	r31, r25
    2b94:	61 93       	st	Z+, r22
    2b96:	71 93       	st	Z+, r23
    2b98:	02 97       	sbiw	r24, 0x02	; 2
    2b9a:	8d 93       	st	X+, r24
    2b9c:	9c 93       	st	X, r25
    2b9e:	43 c0       	rjmp	.+134    	; 0x2c26 <malloc+0x152>
    2ba0:	fd 01       	movw	r30, r26
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	9c 01       	movw	r18, r24
    2ba8:	d9 01       	movw	r26, r18
    2baa:	10 97       	sbiw	r26, 0x00	; 0
    2bac:	a1 f6       	brne	.-88     	; 0x2b56 <malloc+0x82>
    2bae:	80 91 af 01 	lds	r24, 0x01AF
    2bb2:	90 91 b0 01 	lds	r25, 0x01B0
    2bb6:	89 2b       	or	r24, r25
    2bb8:	41 f4       	brne	.+16     	; 0x2bca <malloc+0xf6>
    2bba:	80 91 88 01 	lds	r24, 0x0188
    2bbe:	90 91 89 01 	lds	r25, 0x0189
    2bc2:	90 93 b0 01 	sts	0x01B0, r25
    2bc6:	80 93 af 01 	sts	0x01AF, r24
    2bca:	40 91 8a 01 	lds	r20, 0x018A
    2bce:	50 91 8b 01 	lds	r21, 0x018B
    2bd2:	41 15       	cp	r20, r1
    2bd4:	51 05       	cpc	r21, r1
    2bd6:	41 f4       	brne	.+16     	; 0x2be8 <malloc+0x114>
    2bd8:	4d b7       	in	r20, 0x3d	; 61
    2bda:	5e b7       	in	r21, 0x3e	; 62
    2bdc:	80 91 86 01 	lds	r24, 0x0186
    2be0:	90 91 87 01 	lds	r25, 0x0187
    2be4:	48 1b       	sub	r20, r24
    2be6:	59 0b       	sbc	r21, r25
    2be8:	20 91 af 01 	lds	r18, 0x01AF
    2bec:	30 91 b0 01 	lds	r19, 0x01B0
    2bf0:	24 17       	cp	r18, r20
    2bf2:	35 07       	cpc	r19, r21
    2bf4:	b0 f4       	brcc	.+44     	; 0x2c22 <malloc+0x14e>
    2bf6:	ca 01       	movw	r24, r20
    2bf8:	82 1b       	sub	r24, r18
    2bfa:	93 0b       	sbc	r25, r19
    2bfc:	86 17       	cp	r24, r22
    2bfe:	97 07       	cpc	r25, r23
    2c00:	80 f0       	brcs	.+32     	; 0x2c22 <malloc+0x14e>
    2c02:	ab 01       	movw	r20, r22
    2c04:	4e 5f       	subi	r20, 0xFE	; 254
    2c06:	5f 4f       	sbci	r21, 0xFF	; 255
    2c08:	84 17       	cp	r24, r20
    2c0a:	95 07       	cpc	r25, r21
    2c0c:	50 f0       	brcs	.+20     	; 0x2c22 <malloc+0x14e>
    2c0e:	42 0f       	add	r20, r18
    2c10:	53 1f       	adc	r21, r19
    2c12:	50 93 b0 01 	sts	0x01B0, r21
    2c16:	40 93 af 01 	sts	0x01AF, r20
    2c1a:	f9 01       	movw	r30, r18
    2c1c:	61 93       	st	Z+, r22
    2c1e:	71 93       	st	Z+, r23
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <malloc+0x152>
    2c22:	e0 e0       	ldi	r30, 0x00	; 0
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	cf 01       	movw	r24, r30
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	08 95       	ret

00002c2e <free>:
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <free+0xa>
    2c36:	50 c0       	rjmp	.+160    	; 0x2cd8 <free+0xaa>
    2c38:	ec 01       	movw	r28, r24
    2c3a:	22 97       	sbiw	r28, 0x02	; 2
    2c3c:	1b 82       	std	Y+3, r1	; 0x03
    2c3e:	1a 82       	std	Y+2, r1	; 0x02
    2c40:	a0 91 b1 01 	lds	r26, 0x01B1
    2c44:	b0 91 b2 01 	lds	r27, 0x01B2
    2c48:	10 97       	sbiw	r26, 0x00	; 0
    2c4a:	09 f1       	breq	.+66     	; 0x2c8e <free+0x60>
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	ac 17       	cp	r26, r28
    2c52:	bd 07       	cpc	r27, r29
    2c54:	08 f1       	brcs	.+66     	; 0x2c98 <free+0x6a>
    2c56:	bb 83       	std	Y+3, r27	; 0x03
    2c58:	aa 83       	std	Y+2, r26	; 0x02
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	21 91       	ld	r18, Z+
    2c5e:	31 91       	ld	r19, Z+
    2c60:	e2 0f       	add	r30, r18
    2c62:	f3 1f       	adc	r31, r19
    2c64:	ae 17       	cp	r26, r30
    2c66:	bf 07       	cpc	r27, r31
    2c68:	79 f4       	brne	.+30     	; 0x2c88 <free+0x5a>
    2c6a:	8d 91       	ld	r24, X+
    2c6c:	9c 91       	ld	r25, X
    2c6e:	11 97       	sbiw	r26, 0x01	; 1
    2c70:	28 0f       	add	r18, r24
    2c72:	39 1f       	adc	r19, r25
    2c74:	2e 5f       	subi	r18, 0xFE	; 254
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	39 83       	std	Y+1, r19	; 0x01
    2c7a:	28 83       	st	Y, r18
    2c7c:	12 96       	adiw	r26, 0x02	; 2
    2c7e:	8d 91       	ld	r24, X+
    2c80:	9c 91       	ld	r25, X
    2c82:	13 97       	sbiw	r26, 0x03	; 3
    2c84:	9b 83       	std	Y+3, r25	; 0x03
    2c86:	8a 83       	std	Y+2, r24	; 0x02
    2c88:	41 15       	cp	r20, r1
    2c8a:	51 05       	cpc	r21, r1
    2c8c:	71 f4       	brne	.+28     	; 0x2caa <free+0x7c>
    2c8e:	d0 93 b2 01 	sts	0x01B2, r29
    2c92:	c0 93 b1 01 	sts	0x01B1, r28
    2c96:	20 c0       	rjmp	.+64     	; 0x2cd8 <free+0xaa>
    2c98:	12 96       	adiw	r26, 0x02	; 2
    2c9a:	8d 91       	ld	r24, X+
    2c9c:	9c 91       	ld	r25, X
    2c9e:	13 97       	sbiw	r26, 0x03	; 3
    2ca0:	ad 01       	movw	r20, r26
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	11 f0       	breq	.+4      	; 0x2caa <free+0x7c>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	d3 cf       	rjmp	.-90     	; 0x2c50 <free+0x22>
    2caa:	fa 01       	movw	r30, r20
    2cac:	d3 83       	std	Z+3, r29	; 0x03
    2cae:	c2 83       	std	Z+2, r28	; 0x02
    2cb0:	21 91       	ld	r18, Z+
    2cb2:	31 91       	ld	r19, Z+
    2cb4:	e2 0f       	add	r30, r18
    2cb6:	f3 1f       	adc	r31, r19
    2cb8:	ce 17       	cp	r28, r30
    2cba:	df 07       	cpc	r29, r31
    2cbc:	69 f4       	brne	.+26     	; 0x2cd8 <free+0xaa>
    2cbe:	88 81       	ld	r24, Y
    2cc0:	99 81       	ldd	r25, Y+1	; 0x01
    2cc2:	28 0f       	add	r18, r24
    2cc4:	39 1f       	adc	r19, r25
    2cc6:	2e 5f       	subi	r18, 0xFE	; 254
    2cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cca:	fa 01       	movw	r30, r20
    2ccc:	31 83       	std	Z+1, r19	; 0x01
    2cce:	20 83       	st	Z, r18
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	93 83       	std	Z+3, r25	; 0x03
    2cd6:	82 83       	std	Z+2, r24	; 0x02
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <strnlen_P>:
    2cde:	fc 01       	movw	r30, r24
    2ce0:	05 90       	lpm	r0, Z+
    2ce2:	61 50       	subi	r22, 0x01	; 1
    2ce4:	70 40       	sbci	r23, 0x00	; 0
    2ce6:	01 10       	cpse	r0, r1
    2ce8:	d8 f7       	brcc	.-10     	; 0x2ce0 <strnlen_P+0x2>
    2cea:	80 95       	com	r24
    2cec:	90 95       	com	r25
    2cee:	8e 0f       	add	r24, r30
    2cf0:	9f 1f       	adc	r25, r31
    2cf2:	08 95       	ret

00002cf4 <memset>:
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	01 c0       	rjmp	.+2      	; 0x2cfa <memset+0x6>
    2cf8:	6d 93       	st	X+, r22
    2cfa:	41 50       	subi	r20, 0x01	; 1
    2cfc:	50 40       	sbci	r21, 0x00	; 0
    2cfe:	e0 f7       	brcc	.-8      	; 0x2cf8 <memset+0x4>
    2d00:	08 95       	ret

00002d02 <strnlen>:
    2d02:	fc 01       	movw	r30, r24
    2d04:	61 50       	subi	r22, 0x01	; 1
    2d06:	70 40       	sbci	r23, 0x00	; 0
    2d08:	01 90       	ld	r0, Z+
    2d0a:	01 10       	cpse	r0, r1
    2d0c:	d8 f7       	brcc	.-10     	; 0x2d04 <strnlen+0x2>
    2d0e:	80 95       	com	r24
    2d10:	90 95       	com	r25
    2d12:	8e 0f       	add	r24, r30
    2d14:	9f 1f       	adc	r25, r31
    2d16:	08 95       	ret

00002d18 <fputc>:
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	8c 01       	movw	r16, r24
    2d22:	eb 01       	movw	r28, r22
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	81 ff       	sbrs	r24, 1
    2d28:	1b c0       	rjmp	.+54     	; 0x2d60 <fputc+0x48>
    2d2a:	82 ff       	sbrs	r24, 2
    2d2c:	0d c0       	rjmp	.+26     	; 0x2d48 <fputc+0x30>
    2d2e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d30:	3f 81       	ldd	r19, Y+7	; 0x07
    2d32:	8c 81       	ldd	r24, Y+4	; 0x04
    2d34:	9d 81       	ldd	r25, Y+5	; 0x05
    2d36:	28 17       	cp	r18, r24
    2d38:	39 07       	cpc	r19, r25
    2d3a:	64 f4       	brge	.+24     	; 0x2d54 <fputc+0x3c>
    2d3c:	e8 81       	ld	r30, Y
    2d3e:	f9 81       	ldd	r31, Y+1	; 0x01
    2d40:	01 93       	st	Z+, r16
    2d42:	f9 83       	std	Y+1, r31	; 0x01
    2d44:	e8 83       	st	Y, r30
    2d46:	06 c0       	rjmp	.+12     	; 0x2d54 <fputc+0x3c>
    2d48:	e8 85       	ldd	r30, Y+8	; 0x08
    2d4a:	f9 85       	ldd	r31, Y+9	; 0x09
    2d4c:	80 2f       	mov	r24, r16
    2d4e:	09 95       	icall
    2d50:	89 2b       	or	r24, r25
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <fputc+0x48>
    2d54:	8e 81       	ldd	r24, Y+6	; 0x06
    2d56:	9f 81       	ldd	r25, Y+7	; 0x07
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	9f 83       	std	Y+7, r25	; 0x07
    2d5c:	8e 83       	std	Y+6, r24	; 0x06
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <fputc+0x4c>
    2d60:	0f ef       	ldi	r16, 0xFF	; 255
    2d62:	1f ef       	ldi	r17, 0xFF	; 255
    2d64:	c8 01       	movw	r24, r16
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	08 95       	ret

00002d70 <__ultoa_invert>:
    2d70:	fa 01       	movw	r30, r20
    2d72:	aa 27       	eor	r26, r26
    2d74:	28 30       	cpi	r18, 0x08	; 8
    2d76:	51 f1       	breq	.+84     	; 0x2dcc <__ultoa_invert+0x5c>
    2d78:	20 31       	cpi	r18, 0x10	; 16
    2d7a:	81 f1       	breq	.+96     	; 0x2ddc <__ultoa_invert+0x6c>
    2d7c:	e8 94       	clt
    2d7e:	6f 93       	push	r22
    2d80:	6e 7f       	andi	r22, 0xFE	; 254
    2d82:	6e 5f       	subi	r22, 0xFE	; 254
    2d84:	7f 4f       	sbci	r23, 0xFF	; 255
    2d86:	8f 4f       	sbci	r24, 0xFF	; 255
    2d88:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8a:	af 4f       	sbci	r26, 0xFF	; 255
    2d8c:	b1 e0       	ldi	r27, 0x01	; 1
    2d8e:	3e d0       	rcall	.+124    	; 0x2e0c <__ultoa_invert+0x9c>
    2d90:	b4 e0       	ldi	r27, 0x04	; 4
    2d92:	3c d0       	rcall	.+120    	; 0x2e0c <__ultoa_invert+0x9c>
    2d94:	67 0f       	add	r22, r23
    2d96:	78 1f       	adc	r23, r24
    2d98:	89 1f       	adc	r24, r25
    2d9a:	9a 1f       	adc	r25, r26
    2d9c:	a1 1d       	adc	r26, r1
    2d9e:	68 0f       	add	r22, r24
    2da0:	79 1f       	adc	r23, r25
    2da2:	8a 1f       	adc	r24, r26
    2da4:	91 1d       	adc	r25, r1
    2da6:	a1 1d       	adc	r26, r1
    2da8:	6a 0f       	add	r22, r26
    2daa:	71 1d       	adc	r23, r1
    2dac:	81 1d       	adc	r24, r1
    2dae:	91 1d       	adc	r25, r1
    2db0:	a1 1d       	adc	r26, r1
    2db2:	20 d0       	rcall	.+64     	; 0x2df4 <__ultoa_invert+0x84>
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <__ultoa_invert+0x48>
    2db6:	68 94       	set
    2db8:	3f 91       	pop	r19
    2dba:	2a e0       	ldi	r18, 0x0A	; 10
    2dbc:	26 9f       	mul	r18, r22
    2dbe:	11 24       	eor	r1, r1
    2dc0:	30 19       	sub	r19, r0
    2dc2:	30 5d       	subi	r19, 0xD0	; 208
    2dc4:	31 93       	st	Z+, r19
    2dc6:	de f6       	brtc	.-74     	; 0x2d7e <__ultoa_invert+0xe>
    2dc8:	cf 01       	movw	r24, r30
    2dca:	08 95       	ret
    2dcc:	46 2f       	mov	r20, r22
    2dce:	47 70       	andi	r20, 0x07	; 7
    2dd0:	40 5d       	subi	r20, 0xD0	; 208
    2dd2:	41 93       	st	Z+, r20
    2dd4:	b3 e0       	ldi	r27, 0x03	; 3
    2dd6:	0f d0       	rcall	.+30     	; 0x2df6 <__ultoa_invert+0x86>
    2dd8:	c9 f7       	brne	.-14     	; 0x2dcc <__ultoa_invert+0x5c>
    2dda:	f6 cf       	rjmp	.-20     	; 0x2dc8 <__ultoa_invert+0x58>
    2ddc:	46 2f       	mov	r20, r22
    2dde:	4f 70       	andi	r20, 0x0F	; 15
    2de0:	40 5d       	subi	r20, 0xD0	; 208
    2de2:	4a 33       	cpi	r20, 0x3A	; 58
    2de4:	18 f0       	brcs	.+6      	; 0x2dec <__ultoa_invert+0x7c>
    2de6:	49 5d       	subi	r20, 0xD9	; 217
    2de8:	31 fd       	sbrc	r19, 1
    2dea:	40 52       	subi	r20, 0x20	; 32
    2dec:	41 93       	st	Z+, r20
    2dee:	02 d0       	rcall	.+4      	; 0x2df4 <__ultoa_invert+0x84>
    2df0:	a9 f7       	brne	.-22     	; 0x2ddc <__ultoa_invert+0x6c>
    2df2:	ea cf       	rjmp	.-44     	; 0x2dc8 <__ultoa_invert+0x58>
    2df4:	b4 e0       	ldi	r27, 0x04	; 4
    2df6:	a6 95       	lsr	r26
    2df8:	97 95       	ror	r25
    2dfa:	87 95       	ror	r24
    2dfc:	77 95       	ror	r23
    2dfe:	67 95       	ror	r22
    2e00:	ba 95       	dec	r27
    2e02:	c9 f7       	brne	.-14     	; 0x2df6 <__ultoa_invert+0x86>
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	61 05       	cpc	r22, r1
    2e08:	71 05       	cpc	r23, r1
    2e0a:	08 95       	ret
    2e0c:	9b 01       	movw	r18, r22
    2e0e:	ac 01       	movw	r20, r24
    2e10:	0a 2e       	mov	r0, r26
    2e12:	06 94       	lsr	r0
    2e14:	57 95       	ror	r21
    2e16:	47 95       	ror	r20
    2e18:	37 95       	ror	r19
    2e1a:	27 95       	ror	r18
    2e1c:	ba 95       	dec	r27
    2e1e:	c9 f7       	brne	.-14     	; 0x2e12 <__ultoa_invert+0xa2>
    2e20:	62 0f       	add	r22, r18
    2e22:	73 1f       	adc	r23, r19
    2e24:	84 1f       	adc	r24, r20
    2e26:	95 1f       	adc	r25, r21
    2e28:	a0 1d       	adc	r26, r0
    2e2a:	08 95       	ret

00002e2c <_exit>:
    2e2c:	f8 94       	cli

00002e2e <__stop_program>:
    2e2e:	ff cf       	rjmp	.-2      	; 0x2e2e <__stop_program>
