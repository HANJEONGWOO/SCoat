
Cansat_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000248  00800200  00005b88  00005c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800448  00800448  00005e64  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00005e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005a0  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000371b  00000000  00000000  000065c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000162a  00000000  00000000  00009cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002ca4  00000000  00000000  0000b309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  0000dfb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000768  00000000  00000000  0000e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ce  00000000  00000000  0000eb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000f4f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__vector_1>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__vector_21>
      58:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__vector_22>
      5c:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__vector_23>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__vector_25>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__vector_36>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__vector_51>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__vector_54>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	14 e0       	ldi	r17, 0x04	; 4
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e8 e8       	ldi	r30, 0x88	; 136
     12a:	fb e5       	ldi	r31, 0x5B	; 91
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a8 34       	cpi	r26, 0x48	; 72
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	14 e0       	ldi	r17, 0x04	; 4
     13e:	a8 e4       	ldi	r26, 0x48	; 72
     140:	b4 e0       	ldi	r27, 0x04	; 4
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	ac 39       	cpi	r26, 0x9C	; 156
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <main>
     150:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <port_init>:
int connect_flag = FALSE;

int i=0;	//s 누른 뒤의 카운트 변수

void port_init(void)
{
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
	DDRD &= 0xFE;
     160:	aa e2       	ldi	r26, 0x2A	; 42
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	ea e2       	ldi	r30, 0x2A	; 42
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	8e 7f       	andi	r24, 0xFE	; 254
     16c:	8c 93       	st	X, r24
	EIMSK = 0x01;	//INT0 사용
     16e:	ed e3       	ldi	r30, 0x3D	; 61
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	80 83       	st	Z, r24
	EICRA = 0b00000010;	// 하강 엣지(연결 성공) 사용
     176:	e9 e6       	ldi	r30, 0x69	; 105
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	80 83       	st	Z, r24
}
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	08 95       	ret

00000184 <putchar1>:
 
static int putchar1(char c)	//카메라에 명령어 전송
{
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	0f 92       	push	r0
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
     190:	e0 ec       	ldi	r30, 0xC0	; 192
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	88 2f       	mov	r24, r24
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	80 72       	andi	r24, 0x20	; 32
     19c:	90 70       	andi	r25, 0x00	; 0
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	b9 f3       	breq	.-18     	; 0x190 <putchar1+0xc>
		UDR0 = c;
     1a2:	e6 ec       	ldi	r30, 0xC6	; 198
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	80 83       	st	Z, r24
	return 0;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
}
     1ae:	0f 90       	pop	r0
     1b0:	cf 91       	pop	r28
     1b2:	df 91       	pop	r29
     1b4:	08 95       	ret

000001b6 <Putchar>:

static int Putchar(char c, FILE *stream)//FILE 사용안함, 송신, avr->컴퓨터
{
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <Putchar+0x6>
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	7b 83       	std	Y+3, r23	; 0x03
     1c4:	6a 83       	std	Y+2, r22	; 0x02
	if(c == '\n')
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	8a 30       	cpi	r24, 0x0A	; 10
     1ca:	49 f4       	brne	.+18     	; 0x1de <Putchar+0x28>
		putchar('\r');
     1cc:	20 91 94 04 	lds	r18, 0x0494
     1d0:	30 91 95 04 	lds	r19, 0x0495
     1d4:	8d e0       	ldi	r24, 0x0D	; 13
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	b9 01       	movw	r22, r18
     1da:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>

 while(!(UCSR1A & 0x20)); // UDRE, data register empty        
     1de:	e8 ec       	ldi	r30, 0xC8	; 200
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	88 2f       	mov	r24, r24
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	80 72       	andi	r24, 0x20	; 32
     1ea:	90 70       	andi	r25, 0x00	; 0
     1ec:	00 97       	sbiw	r24, 0x00	; 0
     1ee:	b9 f3       	breq	.-18     	; 0x1de <Putchar+0x28>
   UDR1 = c;
     1f0:	ee ec       	ldi	r30, 0xCE	; 206
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	80 83       	st	Z, r24
 return 0;
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
}
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	cf 91       	pop	r28
     204:	df 91       	pop	r29
     206:	08 95       	ret

00000208 <Getchar>:
 
static int Getchar(FILE *stream)//수신, 컴퓨터->avr
{
     208:	df 93       	push	r29
     20a:	cf 93       	push	r28
     20c:	0f 92       	push	r0
     20e:	0f 92       	push	r0
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	9a 83       	std	Y+2, r25	; 0x02
     216:	89 83       	std	Y+1, r24	; 0x01
 while(!(UCSR1A & 0x80));
     218:	e8 ec       	ldi	r30, 0xC8	; 200
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	88 23       	and	r24, r24
     220:	dc f7       	brge	.-10     	; 0x218 <Getchar+0x10>
 return UDR1;
     222:	ee ec       	ldi	r30, 0xCE	; 206
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
}
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	cf 91       	pop	r28
     232:	df 91       	pop	r29
     234:	08 95       	ret

00000236 <reset>:


void reset(){		//Camera Command(reset)
     236:	df 93       	push	r29
     238:	cf 93       	push	r28
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nRESET  ");
 putchar1(0x56);
     23e:	86 e5       	ldi	r24, 0x56	; 86
     240:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x26);
     24a:	86 e2       	ldi	r24, 0x26	; 38
     24c:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 img_cnt = 0;
     256:	10 92 61 04 	sts	0x0461, r1
     25a:	10 92 60 04 	sts	0x0460, r1
}
     25e:	cf 91       	pop	r28
     260:	df 91       	pop	r29
     262:	08 95       	ret

00000264 <resize>:
 
void resize(){		//Camera Command(resize)
     264:	df 93       	push	r29
     266:	cf 93       	push	r28
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nRESIZE  ");
 putchar1(0x56);
     26c:	86 e5       	ldi	r24, 0x56	; 86
     26e:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x31);
     278:	81 e3       	ldi	r24, 0x31	; 49
     27a:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x05);
     27e:	85 e0       	ldi	r24, 0x05	; 5
     280:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x04);
     284:	84 e0       	ldi	r24, 0x04	; 4
     286:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x01);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x19);
     296:	89 e1       	ldi	r24, 0x19	; 25
     298:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x11);
     29c:	81 e1       	ldi	r24, 0x11	; 17
     29e:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 img_cnt = 0;
     2a2:	10 92 61 04 	sts	0x0461, r1
     2a6:	10 92 60 04 	sts	0x0460, r1
}
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <set_rate>:
 
void set_rate(){	//Camera Command(set_rate 115200)
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nSET_RATE ");
 putchar1(0x56);
     2b8:	86 e5       	ldi	r24, 0x56	; 86
     2ba:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x24);
     2c4:	84 e2       	ldi	r24, 0x24	; 36
     2c6:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x03);
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x01);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x0D);
     2d6:	8d e0       	ldi	r24, 0x0D	; 13
     2d8:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0xA6);
     2dc:	86 ea       	ldi	r24, 0xA6	; 166
     2de:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 img_cnt = 0;
     2e2:	10 92 61 04 	sts	0x0461, r1
     2e6:	10 92 60 04 	sts	0x0460, r1
}
     2ea:	cf 91       	pop	r28
     2ec:	df 91       	pop	r29
     2ee:	08 95       	ret

000002f0 <idle>:
 
void idle(){		//Camera Command(Idle)
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	df 93       	push	r29
     2f6:	cf 93       	push	r28
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	c6 54       	subi	r28, 0x46	; 70
     2fe:	d0 40       	sbci	r29, 0x00	; 0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
 //printf("\r\nIDLE  ");
 init_buffer(CAMERA);
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
 command = IDLE;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	90 93 71 04 	sts	0x0471, r25
     31a:	80 93 70 04 	sts	0x0470, r24
 idle_cnt = 0;
     31e:	10 92 6b 04 	sts	0x046B, r1
     322:	10 92 6a 04 	sts	0x046A, r1
 img_cnt = 0;
     326:	10 92 61 04 	sts	0x0461, r1
     32a:	10 92 60 04 	sts	0x0460, r1
 call_img_flag = 0;
     32e:	10 92 65 04 	sts	0x0465, r1
     332:	10 92 64 04 	sts	0x0464, r1
 img_data_start_flag = 0;
     336:	10 92 67 04 	sts	0x0467, r1
     33a:	10 92 66 04 	sts	0x0466, r1
 
 putchar1(0x56); _delay_ms(1);
     33e:	86 e5       	ldi	r24, 0x56	; 86
     340:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
     344:	fe 01       	movw	r30, r28
     346:	ed 5b       	subi	r30, 0xBD	; 189
     348:	ff 4f       	sbci	r31, 0xFF	; 255
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	a0 e8       	ldi	r26, 0x80	; 128
     350:	bf e3       	ldi	r27, 0x3F	; 63
     352:	80 83       	st	Z, r24
     354:	91 83       	std	Z+1, r25	; 0x01
     356:	a2 83       	std	Z+2, r26	; 0x02
     358:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     35a:	8e 01       	movw	r16, r28
     35c:	01 5c       	subi	r16, 0xC1	; 193
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	fe 01       	movw	r30, r28
     362:	ed 5b       	subi	r30, 0xBD	; 189
     364:	ff 4f       	sbci	r31, 0xFF	; 255
     366:	60 81       	ld	r22, Z
     368:	71 81       	ldd	r23, Z+1	; 0x01
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	4a e7       	ldi	r20, 0x7A	; 122
     374:	55 e4       	ldi	r21, 0x45	; 69
     376:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	f8 01       	movw	r30, r16
     380:	80 83       	st	Z, r24
     382:	91 83       	std	Z+1, r25	; 0x01
     384:	a2 83       	std	Z+2, r26	; 0x02
     386:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     388:	fe 01       	movw	r30, r28
     38a:	ff 96       	adiw	r30, 0x3f	; 63
     38c:	60 81       	ld	r22, Z
     38e:	71 81       	ldd	r23, Z+1	; 0x01
     390:	82 81       	ldd	r24, Z+2	; 0x02
     392:	93 81       	ldd	r25, Z+3	; 0x03
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e8       	ldi	r20, 0x80	; 128
     39a:	5f e3       	ldi	r21, 0x3F	; 63
     39c:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     3a0:	88 23       	and	r24, r24
     3a2:	2c f4       	brge	.+10     	; 0x3ae <idle+0xbe>
		__ticks = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	9e af       	std	Y+62, r25	; 0x3e
     3aa:	8d af       	std	Y+61, r24	; 0x3d
     3ac:	46 c0       	rjmp	.+140    	; 0x43a <idle+0x14a>
	else if (__tmp > 65535)
     3ae:	fe 01       	movw	r30, r28
     3b0:	ff 96       	adiw	r30, 0x3f	; 63
     3b2:	60 81       	ld	r22, Z
     3b4:	71 81       	ldd	r23, Z+1	; 0x01
     3b6:	82 81       	ldd	r24, Z+2	; 0x02
     3b8:	93 81       	ldd	r25, Z+3	; 0x03
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	3f ef       	ldi	r19, 0xFF	; 255
     3be:	4f e7       	ldi	r20, 0x7F	; 127
     3c0:	57 e4       	ldi	r21, 0x47	; 71
     3c2:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     3c6:	18 16       	cp	r1, r24
     3c8:	64 f5       	brge	.+88     	; 0x422 <idle+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ca:	fe 01       	movw	r30, r28
     3cc:	ed 5b       	subi	r30, 0xBD	; 189
     3ce:	ff 4f       	sbci	r31, 0xFF	; 255
     3d0:	60 81       	ld	r22, Z
     3d2:	71 81       	ldd	r23, Z+1	; 0x01
     3d4:	82 81       	ldd	r24, Z+2	; 0x02
     3d6:	93 81       	ldd	r25, Z+3	; 0x03
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e2       	ldi	r20, 0x20	; 32
     3de:	51 e4       	ldi	r21, 0x41	; 65
     3e0:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	9e af       	std	Y+62, r25	; 0x3e
     3f6:	8d af       	std	Y+61, r24	; 0x3d
     3f8:	0f c0       	rjmp	.+30     	; 0x418 <idle+0x128>
     3fa:	80 e9       	ldi	r24, 0x90	; 144
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	9c af       	std	Y+60, r25	; 0x3c
     400:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     402:	8b ad       	ldd	r24, Y+59	; 0x3b
     404:	9c ad       	ldd	r25, Y+60	; 0x3c
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <idle+0x116>
     40a:	9c af       	std	Y+60, r25	; 0x3c
     40c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     40e:	8d ad       	ldd	r24, Y+61	; 0x3d
     410:	9e ad       	ldd	r25, Y+62	; 0x3e
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	9e af       	std	Y+62, r25	; 0x3e
     416:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     418:	8d ad       	ldd	r24, Y+61	; 0x3d
     41a:	9e ad       	ldd	r25, Y+62	; 0x3e
     41c:	00 97       	sbiw	r24, 0x00	; 0
     41e:	69 f7       	brne	.-38     	; 0x3fa <idle+0x10a>
     420:	16 c0       	rjmp	.+44     	; 0x44e <idle+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     422:	fe 01       	movw	r30, r28
     424:	ff 96       	adiw	r30, 0x3f	; 63
     426:	60 81       	ld	r22, Z
     428:	71 81       	ldd	r23, Z+1	; 0x01
     42a:	82 81       	ldd	r24, Z+2	; 0x02
     42c:	93 81       	ldd	r25, Z+3	; 0x03
     42e:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     432:	dc 01       	movw	r26, r24
     434:	cb 01       	movw	r24, r22
     436:	9e af       	std	Y+62, r25	; 0x3e
     438:	8d af       	std	Y+61, r24	; 0x3d
     43a:	8d ad       	ldd	r24, Y+61	; 0x3d
     43c:	9e ad       	ldd	r25, Y+62	; 0x3e
     43e:	9a af       	std	Y+58, r25	; 0x3a
     440:	89 af       	std	Y+57, r24	; 0x39
     442:	89 ad       	ldd	r24, Y+57	; 0x39
     444:	9a ad       	ldd	r25, Y+58	; 0x3a
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <idle+0x156>
     44a:	9a af       	std	Y+58, r25	; 0x3a
     44c:	89 af       	std	Y+57, r24	; 0x39
 putchar1(0x00); _delay_ms(1);
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	a0 e8       	ldi	r26, 0x80	; 128
     45a:	bf e3       	ldi	r27, 0x3F	; 63
     45c:	8d ab       	std	Y+53, r24	; 0x35
     45e:	9e ab       	std	Y+54, r25	; 0x36
     460:	af ab       	std	Y+55, r26	; 0x37
     462:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     464:	6d a9       	ldd	r22, Y+53	; 0x35
     466:	7e a9       	ldd	r23, Y+54	; 0x36
     468:	8f a9       	ldd	r24, Y+55	; 0x37
     46a:	98 ad       	ldd	r25, Y+56	; 0x38
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	4a e7       	ldi	r20, 0x7A	; 122
     472:	55 e4       	ldi	r21, 0x45	; 69
     474:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	89 ab       	std	Y+49, r24	; 0x31
     47e:	9a ab       	std	Y+50, r25	; 0x32
     480:	ab ab       	std	Y+51, r26	; 0x33
     482:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     484:	69 a9       	ldd	r22, Y+49	; 0x31
     486:	7a a9       	ldd	r23, Y+50	; 0x32
     488:	8b a9       	ldd	r24, Y+51	; 0x33
     48a:	9c a9       	ldd	r25, Y+52	; 0x34
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e8       	ldi	r20, 0x80	; 128
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     498:	88 23       	and	r24, r24
     49a:	2c f4       	brge	.+10     	; 0x4a6 <idle+0x1b6>
		__ticks = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	98 ab       	std	Y+48, r25	; 0x30
     4a2:	8f a7       	std	Y+47, r24	; 0x2f
     4a4:	3f c0       	rjmp	.+126    	; 0x524 <idle+0x234>
	else if (__tmp > 65535)
     4a6:	69 a9       	ldd	r22, Y+49	; 0x31
     4a8:	7a a9       	ldd	r23, Y+50	; 0x32
     4aa:	8b a9       	ldd	r24, Y+51	; 0x33
     4ac:	9c a9       	ldd	r25, Y+52	; 0x34
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	3f ef       	ldi	r19, 0xFF	; 255
     4b2:	4f e7       	ldi	r20, 0x7F	; 127
     4b4:	57 e4       	ldi	r21, 0x47	; 71
     4b6:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     4ba:	18 16       	cp	r1, r24
     4bc:	4c f5       	brge	.+82     	; 0x510 <idle+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4be:	6d a9       	ldd	r22, Y+53	; 0x35
     4c0:	7e a9       	ldd	r23, Y+54	; 0x36
     4c2:	8f a9       	ldd	r24, Y+55	; 0x37
     4c4:	98 ad       	ldd	r25, Y+56	; 0x38
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e2       	ldi	r20, 0x20	; 32
     4cc:	51 e4       	ldi	r21, 0x41	; 65
     4ce:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	bc 01       	movw	r22, r24
     4d8:	cd 01       	movw	r24, r26
     4da:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	98 ab       	std	Y+48, r25	; 0x30
     4e4:	8f a7       	std	Y+47, r24	; 0x2f
     4e6:	0f c0       	rjmp	.+30     	; 0x506 <idle+0x216>
     4e8:	80 e9       	ldi	r24, 0x90	; 144
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	9e a7       	std	Y+46, r25	; 0x2e
     4ee:	8d a7       	std	Y+45, r24	; 0x2d
     4f0:	8d a5       	ldd	r24, Y+45	; 0x2d
     4f2:	9e a5       	ldd	r25, Y+46	; 0x2e
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <idle+0x204>
     4f8:	9e a7       	std	Y+46, r25	; 0x2e
     4fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4fc:	8f a5       	ldd	r24, Y+47	; 0x2f
     4fe:	98 a9       	ldd	r25, Y+48	; 0x30
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	98 ab       	std	Y+48, r25	; 0x30
     504:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     506:	8f a5       	ldd	r24, Y+47	; 0x2f
     508:	98 a9       	ldd	r25, Y+48	; 0x30
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	69 f7       	brne	.-38     	; 0x4e8 <idle+0x1f8>
     50e:	14 c0       	rjmp	.+40     	; 0x538 <idle+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     510:	69 a9       	ldd	r22, Y+49	; 0x31
     512:	7a a9       	ldd	r23, Y+50	; 0x32
     514:	8b a9       	ldd	r24, Y+51	; 0x33
     516:	9c a9       	ldd	r25, Y+52	; 0x34
     518:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	98 ab       	std	Y+48, r25	; 0x30
     522:	8f a7       	std	Y+47, r24	; 0x2f
     524:	8f a5       	ldd	r24, Y+47	; 0x2f
     526:	98 a9       	ldd	r25, Y+48	; 0x30
     528:	9c a7       	std	Y+44, r25	; 0x2c
     52a:	8b a7       	std	Y+43, r24	; 0x2b
     52c:	8b a5       	ldd	r24, Y+43	; 0x2b
     52e:	9c a5       	ldd	r25, Y+44	; 0x2c
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <idle+0x240>
     534:	9c a7       	std	Y+44, r25	; 0x2c
     536:	8b a7       	std	Y+43, r24	; 0x2b
 putchar1(0x36); _delay_ms(1);
     538:	86 e3       	ldi	r24, 0x36	; 54
     53a:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e8       	ldi	r26, 0x80	; 128
     544:	bf e3       	ldi	r27, 0x3F	; 63
     546:	8f a3       	std	Y+39, r24	; 0x27
     548:	98 a7       	std	Y+40, r25	; 0x28
     54a:	a9 a7       	std	Y+41, r26	; 0x29
     54c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     54e:	6f a1       	ldd	r22, Y+39	; 0x27
     550:	78 a5       	ldd	r23, Y+40	; 0x28
     552:	89 a5       	ldd	r24, Y+41	; 0x29
     554:	9a a5       	ldd	r25, Y+42	; 0x2a
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	4a e7       	ldi	r20, 0x7A	; 122
     55c:	55 e4       	ldi	r21, 0x45	; 69
     55e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     562:	dc 01       	movw	r26, r24
     564:	cb 01       	movw	r24, r22
     566:	8b a3       	std	Y+35, r24	; 0x23
     568:	9c a3       	std	Y+36, r25	; 0x24
     56a:	ad a3       	std	Y+37, r26	; 0x25
     56c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     56e:	6b a1       	ldd	r22, Y+35	; 0x23
     570:	7c a1       	ldd	r23, Y+36	; 0x24
     572:	8d a1       	ldd	r24, Y+37	; 0x25
     574:	9e a1       	ldd	r25, Y+38	; 0x26
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	40 e8       	ldi	r20, 0x80	; 128
     57c:	5f e3       	ldi	r21, 0x3F	; 63
     57e:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     582:	88 23       	and	r24, r24
     584:	2c f4       	brge	.+10     	; 0x590 <idle+0x2a0>
		__ticks = 1;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	9a a3       	std	Y+34, r25	; 0x22
     58c:	89 a3       	std	Y+33, r24	; 0x21
     58e:	3f c0       	rjmp	.+126    	; 0x60e <idle+0x31e>
	else if (__tmp > 65535)
     590:	6b a1       	ldd	r22, Y+35	; 0x23
     592:	7c a1       	ldd	r23, Y+36	; 0x24
     594:	8d a1       	ldd	r24, Y+37	; 0x25
     596:	9e a1       	ldd	r25, Y+38	; 0x26
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	3f ef       	ldi	r19, 0xFF	; 255
     59c:	4f e7       	ldi	r20, 0x7F	; 127
     59e:	57 e4       	ldi	r21, 0x47	; 71
     5a0:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     5a4:	18 16       	cp	r1, r24
     5a6:	4c f5       	brge	.+82     	; 0x5fa <idle+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5a8:	6f a1       	ldd	r22, Y+39	; 0x27
     5aa:	78 a5       	ldd	r23, Y+40	; 0x28
     5ac:	89 a5       	ldd	r24, Y+41	; 0x29
     5ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	40 e2       	ldi	r20, 0x20	; 32
     5b6:	51 e4       	ldi	r21, 0x41	; 65
     5b8:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	bc 01       	movw	r22, r24
     5c2:	cd 01       	movw	r24, r26
     5c4:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	9a a3       	std	Y+34, r25	; 0x22
     5ce:	89 a3       	std	Y+33, r24	; 0x21
     5d0:	0f c0       	rjmp	.+30     	; 0x5f0 <idle+0x300>
     5d2:	80 e9       	ldi	r24, 0x90	; 144
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	98 a3       	std	Y+32, r25	; 0x20
     5d8:	8f 8f       	std	Y+31, r24	; 0x1f
     5da:	8f 8d       	ldd	r24, Y+31	; 0x1f
     5dc:	98 a1       	ldd	r25, Y+32	; 0x20
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <idle+0x2ee>
     5e2:	98 a3       	std	Y+32, r25	; 0x20
     5e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e6:	89 a1       	ldd	r24, Y+33	; 0x21
     5e8:	9a a1       	ldd	r25, Y+34	; 0x22
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	9a a3       	std	Y+34, r25	; 0x22
     5ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f0:	89 a1       	ldd	r24, Y+33	; 0x21
     5f2:	9a a1       	ldd	r25, Y+34	; 0x22
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	69 f7       	brne	.-38     	; 0x5d2 <idle+0x2e2>
     5f8:	14 c0       	rjmp	.+40     	; 0x622 <idle+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fa:	6b a1       	ldd	r22, Y+35	; 0x23
     5fc:	7c a1       	ldd	r23, Y+36	; 0x24
     5fe:	8d a1       	ldd	r24, Y+37	; 0x25
     600:	9e a1       	ldd	r25, Y+38	; 0x26
     602:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	9a a3       	std	Y+34, r25	; 0x22
     60c:	89 a3       	std	Y+33, r24	; 0x21
     60e:	89 a1       	ldd	r24, Y+33	; 0x21
     610:	9a a1       	ldd	r25, Y+34	; 0x22
     612:	9e 8f       	std	Y+30, r25	; 0x1e
     614:	8d 8f       	std	Y+29, r24	; 0x1d
     616:	8d 8d       	ldd	r24, Y+29	; 0x1d
     618:	9e 8d       	ldd	r25, Y+30	; 0x1e
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <idle+0x32a>
     61e:	9e 8f       	std	Y+30, r25	; 0x1e
     620:	8d 8f       	std	Y+29, r24	; 0x1d
 putchar1(0x01); _delay_ms(1);
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e8       	ldi	r26, 0x80	; 128
     62e:	bf e3       	ldi	r27, 0x3F	; 63
     630:	89 8f       	std	Y+25, r24	; 0x19
     632:	9a 8f       	std	Y+26, r25	; 0x1a
     634:	ab 8f       	std	Y+27, r26	; 0x1b
     636:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     638:	69 8d       	ldd	r22, Y+25	; 0x19
     63a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     63c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     63e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	4a e7       	ldi	r20, 0x7A	; 122
     646:	55 e4       	ldi	r21, 0x45	; 69
     648:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     64c:	dc 01       	movw	r26, r24
     64e:	cb 01       	movw	r24, r22
     650:	8d 8b       	std	Y+21, r24	; 0x15
     652:	9e 8b       	std	Y+22, r25	; 0x16
     654:	af 8b       	std	Y+23, r26	; 0x17
     656:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     658:	6d 89       	ldd	r22, Y+21	; 0x15
     65a:	7e 89       	ldd	r23, Y+22	; 0x16
     65c:	8f 89       	ldd	r24, Y+23	; 0x17
     65e:	98 8d       	ldd	r25, Y+24	; 0x18
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e8       	ldi	r20, 0x80	; 128
     666:	5f e3       	ldi	r21, 0x3F	; 63
     668:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     66c:	88 23       	and	r24, r24
     66e:	2c f4       	brge	.+10     	; 0x67a <idle+0x38a>
		__ticks = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9c 8b       	std	Y+20, r25	; 0x14
     676:	8b 8b       	std	Y+19, r24	; 0x13
     678:	3f c0       	rjmp	.+126    	; 0x6f8 <idle+0x408>
	else if (__tmp > 65535)
     67a:	6d 89       	ldd	r22, Y+21	; 0x15
     67c:	7e 89       	ldd	r23, Y+22	; 0x16
     67e:	8f 89       	ldd	r24, Y+23	; 0x17
     680:	98 8d       	ldd	r25, Y+24	; 0x18
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	3f ef       	ldi	r19, 0xFF	; 255
     686:	4f e7       	ldi	r20, 0x7F	; 127
     688:	57 e4       	ldi	r21, 0x47	; 71
     68a:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     68e:	18 16       	cp	r1, r24
     690:	4c f5       	brge	.+82     	; 0x6e4 <idle+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     692:	69 8d       	ldd	r22, Y+25	; 0x19
     694:	7a 8d       	ldd	r23, Y+26	; 0x1a
     696:	8b 8d       	ldd	r24, Y+27	; 0x1b
     698:	9c 8d       	ldd	r25, Y+28	; 0x1c
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e2       	ldi	r20, 0x20	; 32
     6a0:	51 e4       	ldi	r21, 0x41	; 65
     6a2:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	9c 8b       	std	Y+20, r25	; 0x14
     6b8:	8b 8b       	std	Y+19, r24	; 0x13
     6ba:	0f c0       	rjmp	.+30     	; 0x6da <idle+0x3ea>
     6bc:	80 e9       	ldi	r24, 0x90	; 144
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	9a 8b       	std	Y+18, r25	; 0x12
     6c2:	89 8b       	std	Y+17, r24	; 0x11
     6c4:	89 89       	ldd	r24, Y+17	; 0x11
     6c6:	9a 89       	ldd	r25, Y+18	; 0x12
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <idle+0x3d8>
     6cc:	9a 8b       	std	Y+18, r25	; 0x12
     6ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d0:	8b 89       	ldd	r24, Y+19	; 0x13
     6d2:	9c 89       	ldd	r25, Y+20	; 0x14
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	9c 8b       	std	Y+20, r25	; 0x14
     6d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6da:	8b 89       	ldd	r24, Y+19	; 0x13
     6dc:	9c 89       	ldd	r25, Y+20	; 0x14
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	69 f7       	brne	.-38     	; 0x6bc <idle+0x3cc>
     6e2:	14 c0       	rjmp	.+40     	; 0x70c <idle+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e4:	6d 89       	ldd	r22, Y+21	; 0x15
     6e6:	7e 89       	ldd	r23, Y+22	; 0x16
     6e8:	8f 89       	ldd	r24, Y+23	; 0x17
     6ea:	98 8d       	ldd	r25, Y+24	; 0x18
     6ec:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	9c 8b       	std	Y+20, r25	; 0x14
     6f6:	8b 8b       	std	Y+19, r24	; 0x13
     6f8:	8b 89       	ldd	r24, Y+19	; 0x13
     6fa:	9c 89       	ldd	r25, Y+20	; 0x14
     6fc:	98 8b       	std	Y+16, r25	; 0x10
     6fe:	8f 87       	std	Y+15, r24	; 0x0f
     700:	8f 85       	ldd	r24, Y+15	; 0x0f
     702:	98 89       	ldd	r25, Y+16	; 0x10
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <idle+0x414>
     708:	98 8b       	std	Y+16, r25	; 0x10
     70a:	8f 87       	std	Y+15, r24	; 0x0f
 putchar1(0x03); _delay_ms(1);
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a0 e8       	ldi	r26, 0x80	; 128
     718:	bf e3       	ldi	r27, 0x3F	; 63
     71a:	8b 87       	std	Y+11, r24	; 0x0b
     71c:	9c 87       	std	Y+12, r25	; 0x0c
     71e:	ad 87       	std	Y+13, r26	; 0x0d
     720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     722:	6b 85       	ldd	r22, Y+11	; 0x0b
     724:	7c 85       	ldd	r23, Y+12	; 0x0c
     726:	8d 85       	ldd	r24, Y+13	; 0x0d
     728:	9e 85       	ldd	r25, Y+14	; 0x0e
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	4a e7       	ldi	r20, 0x7A	; 122
     730:	55 e4       	ldi	r21, 0x45	; 69
     732:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	8f 83       	std	Y+7, r24	; 0x07
     73c:	98 87       	std	Y+8, r25	; 0x08
     73e:	a9 87       	std	Y+9, r26	; 0x09
     740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     742:	6f 81       	ldd	r22, Y+7	; 0x07
     744:	78 85       	ldd	r23, Y+8	; 0x08
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	9a 85       	ldd	r25, Y+10	; 0x0a
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	40 e8       	ldi	r20, 0x80	; 128
     750:	5f e3       	ldi	r21, 0x3F	; 63
     752:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     756:	88 23       	and	r24, r24
     758:	2c f4       	brge	.+10     	; 0x764 <idle+0x474>
		__ticks = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	9e 83       	std	Y+6, r25	; 0x06
     760:	8d 83       	std	Y+5, r24	; 0x05
     762:	3f c0       	rjmp	.+126    	; 0x7e2 <idle+0x4f2>
	else if (__tmp > 65535)
     764:	6f 81       	ldd	r22, Y+7	; 0x07
     766:	78 85       	ldd	r23, Y+8	; 0x08
     768:	89 85       	ldd	r24, Y+9	; 0x09
     76a:	9a 85       	ldd	r25, Y+10	; 0x0a
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	3f ef       	ldi	r19, 0xFF	; 255
     770:	4f e7       	ldi	r20, 0x7F	; 127
     772:	57 e4       	ldi	r21, 0x47	; 71
     774:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     778:	18 16       	cp	r1, r24
     77a:	4c f5       	brge	.+82     	; 0x7ce <idle+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     77c:	6b 85       	ldd	r22, Y+11	; 0x0b
     77e:	7c 85       	ldd	r23, Y+12	; 0x0c
     780:	8d 85       	ldd	r24, Y+13	; 0x0d
     782:	9e 85       	ldd	r25, Y+14	; 0x0e
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e2       	ldi	r20, 0x20	; 32
     78a:	51 e4       	ldi	r21, 0x41	; 65
     78c:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	bc 01       	movw	r22, r24
     796:	cd 01       	movw	r24, r26
     798:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	9e 83       	std	Y+6, r25	; 0x06
     7a2:	8d 83       	std	Y+5, r24	; 0x05
     7a4:	0f c0       	rjmp	.+30     	; 0x7c4 <idle+0x4d4>
     7a6:	80 e9       	ldi	r24, 0x90	; 144
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	9c 83       	std	Y+4, r25	; 0x04
     7ac:	8b 83       	std	Y+3, r24	; 0x03
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <idle+0x4c2>
     7b6:	9c 83       	std	Y+4, r25	; 0x04
     7b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ba:	8d 81       	ldd	r24, Y+5	; 0x05
     7bc:	9e 81       	ldd	r25, Y+6	; 0x06
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	9e 83       	std	Y+6, r25	; 0x06
     7c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	9e 81       	ldd	r25, Y+6	; 0x06
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	69 f7       	brne	.-38     	; 0x7a6 <idle+0x4b6>
     7cc:	14 c0       	rjmp	.+40     	; 0x7f6 <idle+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ce:	6f 81       	ldd	r22, Y+7	; 0x07
     7d0:	78 85       	ldd	r23, Y+8	; 0x08
     7d2:	89 85       	ldd	r24, Y+9	; 0x09
     7d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d6:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	9e 83       	std	Y+6, r25	; 0x06
     7e0:	8d 83       	std	Y+5, r24	; 0x05
     7e2:	8d 81       	ldd	r24, Y+5	; 0x05
     7e4:	9e 81       	ldd	r25, Y+6	; 0x06
     7e6:	9a 83       	std	Y+2, r25	; 0x02
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <idle+0x4fe>
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
}
     7f6:	ca 5b       	subi	r28, 0xBA	; 186
     7f8:	df 4f       	sbci	r29, 0xFF	; 255
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	cf 91       	pop	r28
     806:	df 91       	pop	r29
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	08 95       	ret

0000080e <shot>:
 
void shot(){		//Camera Command(shot)
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nSHOT  ");
 command = SHOT;
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	90 93 71 04 	sts	0x0471, r25
     81e:	80 93 70 04 	sts	0x0470, r24
 idle_cnt = 0;
     822:	10 92 6b 04 	sts	0x046B, r1
     826:	10 92 6a 04 	sts	0x046A, r1
 shot_cnt = 0;
     82a:	10 92 6d 04 	sts	0x046D, r1
     82e:	10 92 6c 04 	sts	0x046C, r1
 putchar1(0x56);
     832:	86 e5       	ldi	r24, 0x56	; 86
     834:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x36);
     83e:	86 e3       	ldi	r24, 0x36	; 54
     840:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x01);
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 img_cnt = 0;
     850:	10 92 61 04 	sts	0x0461, r1
     854:	10 92 60 04 	sts	0x0460, r1
}
     858:	cf 91       	pop	r28
     85a:	df 91       	pop	r29
     85c:	08 95       	ret

0000085e <call_size>:
 
void call_size(){	//Camera Command(call_size)
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nCALL_SIZE ");
 command = CALL_SIZE;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	90 93 71 04 	sts	0x0471, r25
     86e:	80 93 70 04 	sts	0x0470, r24
 shot_cnt = 0;
     872:	10 92 6d 04 	sts	0x046D, r1
     876:	10 92 6c 04 	sts	0x046C, r1
 call_size_cnt = 0;
     87a:	10 92 6f 04 	sts	0x046F, r1
     87e:	10 92 6e 04 	sts	0x046E, r1
 call_size_flag = 1;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	90 93 63 04 	sts	0x0463, r25
     88a:	80 93 62 04 	sts	0x0462, r24
 putchar1(0x56);
     88e:	86 e5       	ldi	r24, 0x56	; 86
     890:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x34);
     89a:	84 e3       	ldi	r24, 0x34	; 52
     89c:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x01);
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
}
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	08 95       	ret

000008b2 <call_img>:
 
void call_img(){	//Camera Command(call_img)
     8b2:	df 93       	push	r29
     8b4:	cf 93       	push	r28
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nCALL_IMG ");
 command = 0;
     8ba:	10 92 71 04 	sts	0x0471, r1
     8be:	10 92 70 04 	sts	0x0470, r1
 call_size_flag = 0;
     8c2:	10 92 63 04 	sts	0x0463, r1
     8c6:	10 92 62 04 	sts	0x0462, r1
 call_img_flag = 1;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	90 93 65 04 	sts	0x0465, r25
     8d2:	80 93 64 04 	sts	0x0464, r24
 img_data_start_flag = 0;
     8d6:	10 92 67 04 	sts	0x0467, r1
     8da:	10 92 66 04 	sts	0x0466, r1
 putchar1(0x56);
     8de:	86 e5       	ldi	r24, 0x56	; 86
     8e0:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x32);
     8ea:	82 e3       	ldi	r24, 0x32	; 50
     8ec:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x0c);
     8f0:	8c e0       	ldi	r24, 0x0C	; 12
     8f2:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x0A);
     8fc:	8a e0       	ldi	r24, 0x0A	; 10
     8fe:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(img_buffer[7]);
     926:	80 91 c3 02 	lds	r24, 0x02C3
     92a:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(img_buffer[8]);
     92e:	80 91 c4 02 	lds	r24, 0x02C4
     932:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x0A);
     93c:	8a e0       	ldi	r24, 0x0A	; 10
     93e:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 img_cnt = 0;
     942:	10 92 61 04 	sts	0x0461, r1
     946:	10 92 60 04 	sts	0x0460, r1
}
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	08 95       	ret

00000950 <zip>:
 
void zip(){			//Camera Command(zip)
     950:	df 93       	push	r29
     952:	cf 93       	push	r28
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nZIP  ");
 putchar1(0x56);
     958:	86 e5       	ldi	r24, 0x56	; 86
     95a:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x00);
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x31);
     964:	81 e3       	ldi	r24, 0x31	; 49
     966:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x05);
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x01);
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x01);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x12);
     97c:	82 e1       	ldi	r24, 0x12	; 18
     97e:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0x04);
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 putchar1(0xFF);
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	0e 94 c2 00 	call	0x184	; 0x184 <putchar1>
 img_cnt = 0;
     98e:	10 92 61 04 	sts	0x0461, r1
     992:	10 92 60 04 	sts	0x0460, r1
}
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	08 95       	ret

0000099c <imu>:

void imu(){			//IMU Command (Get data)
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	df 93       	push	r29
     9a2:	cf 93       	push	r28
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	c2 5d       	subi	r28, 0xD2	; 210
     9aa:	d0 40       	sbci	r29, 0x00	; 0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
 //printf("\r\nIMU  ");
 UDR2=0x73; _delay_ms(1);
     9b6:	e6 ed       	ldi	r30, 0xD6	; 214
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	83 e7       	ldi	r24, 0x73	; 115
     9bc:	80 83       	st	Z, r24
     9be:	fe 01       	movw	r30, r28
     9c0:	e1 53       	subi	r30, 0x31	; 49
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e8       	ldi	r26, 0x80	; 128
     9ca:	bf e3       	ldi	r27, 0x3F	; 63
     9cc:	80 83       	st	Z, r24
     9ce:	91 83       	std	Z+1, r25	; 0x01
     9d0:	a2 83       	std	Z+2, r26	; 0x02
     9d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9d4:	8e 01       	movw	r16, r28
     9d6:	05 53       	subi	r16, 0x35	; 53
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	fe 01       	movw	r30, r28
     9dc:	e1 53       	subi	r30, 0x31	; 49
     9de:	ff 4f       	sbci	r31, 0xFF	; 255
     9e0:	60 81       	ld	r22, Z
     9e2:	71 81       	ldd	r23, Z+1	; 0x01
     9e4:	82 81       	ldd	r24, Z+2	; 0x02
     9e6:	93 81       	ldd	r25, Z+3	; 0x03
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	4a e7       	ldi	r20, 0x7A	; 122
     9ee:	55 e4       	ldi	r21, 0x45	; 69
     9f0:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	f8 01       	movw	r30, r16
     9fa:	80 83       	st	Z, r24
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	a2 83       	std	Z+2, r26	; 0x02
     a00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a02:	fe 01       	movw	r30, r28
     a04:	e5 53       	subi	r30, 0x35	; 53
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	60 81       	ld	r22, Z
     a0a:	71 81       	ldd	r23, Z+1	; 0x01
     a0c:	82 81       	ldd	r24, Z+2	; 0x02
     a0e:	93 81       	ldd	r25, Z+3	; 0x03
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e8       	ldi	r20, 0x80	; 128
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     a1c:	88 23       	and	r24, r24
     a1e:	44 f4       	brge	.+16     	; 0xa30 <imu+0x94>
		__ticks = 1;
     a20:	fe 01       	movw	r30, r28
     a22:	e7 53       	subi	r30, 0x37	; 55
     a24:	ff 4f       	sbci	r31, 0xFF	; 255
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	91 83       	std	Z+1, r25	; 0x01
     a2c:	80 83       	st	Z, r24
     a2e:	64 c0       	rjmp	.+200    	; 0xaf8 <imu+0x15c>
	else if (__tmp > 65535)
     a30:	fe 01       	movw	r30, r28
     a32:	e5 53       	subi	r30, 0x35	; 53
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	60 81       	ld	r22, Z
     a38:	71 81       	ldd	r23, Z+1	; 0x01
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	93 81       	ldd	r25, Z+3	; 0x03
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	3f ef       	ldi	r19, 0xFF	; 255
     a42:	4f e7       	ldi	r20, 0x7F	; 127
     a44:	57 e4       	ldi	r21, 0x47	; 71
     a46:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     a4a:	18 16       	cp	r1, r24
     a4c:	0c f0       	brlt	.+2      	; 0xa50 <imu+0xb4>
     a4e:	43 c0       	rjmp	.+134    	; 0xad6 <imu+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a50:	fe 01       	movw	r30, r28
     a52:	e1 53       	subi	r30, 0x31	; 49
     a54:	ff 4f       	sbci	r31, 0xFF	; 255
     a56:	60 81       	ld	r22, Z
     a58:	71 81       	ldd	r23, Z+1	; 0x01
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	93 81       	ldd	r25, Z+3	; 0x03
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e2       	ldi	r20, 0x20	; 32
     a64:	51 e4       	ldi	r21, 0x41	; 65
     a66:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	8e 01       	movw	r16, r28
     a70:	07 53       	subi	r16, 0x37	; 55
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	f8 01       	movw	r30, r16
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	80 83       	st	Z, r24
     a86:	1f c0       	rjmp	.+62     	; 0xac6 <imu+0x12a>
     a88:	fe 01       	movw	r30, r28
     a8a:	e9 53       	subi	r30, 0x39	; 57
     a8c:	ff 4f       	sbci	r31, 0xFF	; 255
     a8e:	80 e9       	ldi	r24, 0x90	; 144
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	91 83       	std	Z+1, r25	; 0x01
     a94:	80 83       	st	Z, r24
     a96:	fe 01       	movw	r30, r28
     a98:	e9 53       	subi	r30, 0x39	; 57
     a9a:	ff 4f       	sbci	r31, 0xFF	; 255
     a9c:	80 81       	ld	r24, Z
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <imu+0x104>
     aa4:	fe 01       	movw	r30, r28
     aa6:	e9 53       	subi	r30, 0x39	; 57
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	91 83       	std	Z+1, r25	; 0x01
     aac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aae:	de 01       	movw	r26, r28
     ab0:	a7 53       	subi	r26, 0x37	; 55
     ab2:	bf 4f       	sbci	r27, 0xFF	; 255
     ab4:	fe 01       	movw	r30, r28
     ab6:	e7 53       	subi	r30, 0x37	; 55
     ab8:	ff 4f       	sbci	r31, 0xFF	; 255
     aba:	80 81       	ld	r24, Z
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	11 96       	adiw	r26, 0x01	; 1
     ac2:	9c 93       	st	X, r25
     ac4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac6:	fe 01       	movw	r30, r28
     ac8:	e7 53       	subi	r30, 0x37	; 55
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	d1 f6       	brne	.-76     	; 0xa88 <imu+0xec>
     ad4:	27 c0       	rjmp	.+78     	; 0xb24 <imu+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad6:	8e 01       	movw	r16, r28
     ad8:	07 53       	subi	r16, 0x37	; 55
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	fe 01       	movw	r30, r28
     ade:	e5 53       	subi	r30, 0x35	; 53
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	60 81       	ld	r22, Z
     ae4:	71 81       	ldd	r23, Z+1	; 0x01
     ae6:	82 81       	ldd	r24, Z+2	; 0x02
     ae8:	93 81       	ldd	r25, Z+3	; 0x03
     aea:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	f8 01       	movw	r30, r16
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	80 83       	st	Z, r24
     af8:	de 01       	movw	r26, r28
     afa:	ab 53       	subi	r26, 0x3B	; 59
     afc:	bf 4f       	sbci	r27, 0xFF	; 255
     afe:	fe 01       	movw	r30, r28
     b00:	e7 53       	subi	r30, 0x37	; 55
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	8d 93       	st	X+, r24
     b0a:	9c 93       	st	X, r25
     b0c:	fe 01       	movw	r30, r28
     b0e:	eb 53       	subi	r30, 0x3B	; 59
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <imu+0x17a>
     b1a:	fe 01       	movw	r30, r28
     b1c:	eb 53       	subi	r30, 0x3B	; 59
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	91 83       	std	Z+1, r25	; 0x01
     b22:	80 83       	st	Z, r24
 UDR2=0x6e; _delay_ms(1);
     b24:	e6 ed       	ldi	r30, 0xD6	; 214
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	8e e6       	ldi	r24, 0x6E	; 110
     b2a:	80 83       	st	Z, r24
     b2c:	fe 01       	movw	r30, r28
     b2e:	ef 53       	subi	r30, 0x3F	; 63
     b30:	ff 4f       	sbci	r31, 0xFF	; 255
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a0 e8       	ldi	r26, 0x80	; 128
     b38:	bf e3       	ldi	r27, 0x3F	; 63
     b3a:	80 83       	st	Z, r24
     b3c:	91 83       	std	Z+1, r25	; 0x01
     b3e:	a2 83       	std	Z+2, r26	; 0x02
     b40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b42:	8e 01       	movw	r16, r28
     b44:	03 54       	subi	r16, 0x43	; 67
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	fe 01       	movw	r30, r28
     b4a:	ef 53       	subi	r30, 0x3F	; 63
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	60 81       	ld	r22, Z
     b50:	71 81       	ldd	r23, Z+1	; 0x01
     b52:	82 81       	ldd	r24, Z+2	; 0x02
     b54:	93 81       	ldd	r25, Z+3	; 0x03
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	4a e7       	ldi	r20, 0x7A	; 122
     b5c:	55 e4       	ldi	r21, 0x45	; 69
     b5e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	f8 01       	movw	r30, r16
     b68:	80 83       	st	Z, r24
     b6a:	91 83       	std	Z+1, r25	; 0x01
     b6c:	a2 83       	std	Z+2, r26	; 0x02
     b6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b70:	fe 01       	movw	r30, r28
     b72:	e3 54       	subi	r30, 0x43	; 67
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	60 81       	ld	r22, Z
     b78:	71 81       	ldd	r23, Z+1	; 0x01
     b7a:	82 81       	ldd	r24, Z+2	; 0x02
     b7c:	93 81       	ldd	r25, Z+3	; 0x03
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e8       	ldi	r20, 0x80	; 128
     b84:	5f e3       	ldi	r21, 0x3F	; 63
     b86:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     b8a:	88 23       	and	r24, r24
     b8c:	44 f4       	brge	.+16     	; 0xb9e <imu+0x202>
		__ticks = 1;
     b8e:	fe 01       	movw	r30, r28
     b90:	e5 54       	subi	r30, 0x45	; 69
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	91 83       	std	Z+1, r25	; 0x01
     b9a:	80 83       	st	Z, r24
     b9c:	64 c0       	rjmp	.+200    	; 0xc66 <imu+0x2ca>
	else if (__tmp > 65535)
     b9e:	fe 01       	movw	r30, r28
     ba0:	e3 54       	subi	r30, 0x43	; 67
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	82 81       	ldd	r24, Z+2	; 0x02
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	3f ef       	ldi	r19, 0xFF	; 255
     bb0:	4f e7       	ldi	r20, 0x7F	; 127
     bb2:	57 e4       	ldi	r21, 0x47	; 71
     bb4:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     bb8:	18 16       	cp	r1, r24
     bba:	0c f0       	brlt	.+2      	; 0xbbe <imu+0x222>
     bbc:	43 c0       	rjmp	.+134    	; 0xc44 <imu+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbe:	fe 01       	movw	r30, r28
     bc0:	ef 53       	subi	r30, 0x3F	; 63
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	60 81       	ld	r22, Z
     bc6:	71 81       	ldd	r23, Z+1	; 0x01
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e2       	ldi	r20, 0x20	; 32
     bd2:	51 e4       	ldi	r21, 0x41	; 65
     bd4:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8e 01       	movw	r16, r28
     bde:	05 54       	subi	r16, 0x45	; 69
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	f8 01       	movw	r30, r16
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	80 83       	st	Z, r24
     bf4:	1f c0       	rjmp	.+62     	; 0xc34 <imu+0x298>
     bf6:	fe 01       	movw	r30, r28
     bf8:	e7 54       	subi	r30, 0x47	; 71
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	80 e9       	ldi	r24, 0x90	; 144
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	91 83       	std	Z+1, r25	; 0x01
     c02:	80 83       	st	Z, r24
     c04:	fe 01       	movw	r30, r28
     c06:	e7 54       	subi	r30, 0x47	; 71
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	80 81       	ld	r24, Z
     c0c:	91 81       	ldd	r25, Z+1	; 0x01
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <imu+0x272>
     c12:	fe 01       	movw	r30, r28
     c14:	e7 54       	subi	r30, 0x47	; 71
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	91 83       	std	Z+1, r25	; 0x01
     c1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1c:	de 01       	movw	r26, r28
     c1e:	a5 54       	subi	r26, 0x45	; 69
     c20:	bf 4f       	sbci	r27, 0xFF	; 255
     c22:	fe 01       	movw	r30, r28
     c24:	e5 54       	subi	r30, 0x45	; 69
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	9c 93       	st	X, r25
     c32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	fe 01       	movw	r30, r28
     c36:	e5 54       	subi	r30, 0x45	; 69
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	80 81       	ld	r24, Z
     c3c:	91 81       	ldd	r25, Z+1	; 0x01
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	d1 f6       	brne	.-76     	; 0xbf6 <imu+0x25a>
     c42:	27 c0       	rjmp	.+78     	; 0xc92 <imu+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c44:	8e 01       	movw	r16, r28
     c46:	05 54       	subi	r16, 0x45	; 69
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	fe 01       	movw	r30, r28
     c4c:	e3 54       	subi	r30, 0x43	; 67
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	60 81       	ld	r22, Z
     c52:	71 81       	ldd	r23, Z+1	; 0x01
     c54:	82 81       	ldd	r24, Z+2	; 0x02
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	f8 01       	movw	r30, r16
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
     c66:	de 01       	movw	r26, r28
     c68:	a9 54       	subi	r26, 0x49	; 73
     c6a:	bf 4f       	sbci	r27, 0xFF	; 255
     c6c:	fe 01       	movw	r30, r28
     c6e:	e5 54       	subi	r30, 0x45	; 69
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	8d 93       	st	X+, r24
     c78:	9c 93       	st	X, r25
     c7a:	fe 01       	movw	r30, r28
     c7c:	e9 54       	subi	r30, 0x49	; 73
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <imu+0x2e8>
     c88:	fe 01       	movw	r30, r28
     c8a:	e9 54       	subi	r30, 0x49	; 73
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	80 83       	st	Z, r24
 UDR2=0x70; _delay_ms(1);
     c92:	e6 ed       	ldi	r30, 0xD6	; 214
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 e7       	ldi	r24, 0x70	; 112
     c98:	80 83       	st	Z, r24
     c9a:	fe 01       	movw	r30, r28
     c9c:	ed 54       	subi	r30, 0x4D	; 77
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a0 e8       	ldi	r26, 0x80	; 128
     ca6:	bf e3       	ldi	r27, 0x3F	; 63
     ca8:	80 83       	st	Z, r24
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	a2 83       	std	Z+2, r26	; 0x02
     cae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb0:	8e 01       	movw	r16, r28
     cb2:	01 55       	subi	r16, 0x51	; 81
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	fe 01       	movw	r30, r28
     cb8:	ed 54       	subi	r30, 0x4D	; 77
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	4a e7       	ldi	r20, 0x7A	; 122
     cca:	55 e4       	ldi	r21, 0x45	; 69
     ccc:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	f8 01       	movw	r30, r16
     cd6:	80 83       	st	Z, r24
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	a2 83       	std	Z+2, r26	; 0x02
     cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cde:	fe 01       	movw	r30, r28
     ce0:	e1 55       	subi	r30, 0x51	; 81
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	44 f4       	brge	.+16     	; 0xd0c <imu+0x370>
		__ticks = 1;
     cfc:	fe 01       	movw	r30, r28
     cfe:	e3 55       	subi	r30, 0x53	; 83
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	80 83       	st	Z, r24
     d0a:	64 c0       	rjmp	.+200    	; 0xdd4 <imu+0x438>
	else if (__tmp > 65535)
     d0c:	fe 01       	movw	r30, r28
     d0e:	e1 55       	subi	r30, 0x51	; 81
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	3f ef       	ldi	r19, 0xFF	; 255
     d1e:	4f e7       	ldi	r20, 0x7F	; 127
     d20:	57 e4       	ldi	r21, 0x47	; 71
     d22:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     d26:	18 16       	cp	r1, r24
     d28:	0c f0       	brlt	.+2      	; 0xd2c <imu+0x390>
     d2a:	43 c0       	rjmp	.+134    	; 0xdb2 <imu+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2c:	fe 01       	movw	r30, r28
     d2e:	ed 54       	subi	r30, 0x4D	; 77
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	60 81       	ld	r22, Z
     d34:	71 81       	ldd	r23, Z+1	; 0x01
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	93 81       	ldd	r25, Z+3	; 0x03
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	51 e4       	ldi	r21, 0x41	; 65
     d42:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	8e 01       	movw	r16, r28
     d4c:	03 55       	subi	r16, 0x53	; 83
     d4e:	1f 4f       	sbci	r17, 0xFF	; 255
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	f8 01       	movw	r30, r16
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	80 83       	st	Z, r24
     d62:	1f c0       	rjmp	.+62     	; 0xda2 <imu+0x406>
     d64:	fe 01       	movw	r30, r28
     d66:	e5 55       	subi	r30, 0x55	; 85
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 e9       	ldi	r24, 0x90	; 144
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
     d72:	fe 01       	movw	r30, r28
     d74:	e5 55       	subi	r30, 0x55	; 85
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <imu+0x3e0>
     d80:	fe 01       	movw	r30, r28
     d82:	e5 55       	subi	r30, 0x55	; 85
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	de 01       	movw	r26, r28
     d8c:	a3 55       	subi	r26, 0x53	; 83
     d8e:	bf 4f       	sbci	r27, 0xFF	; 255
     d90:	fe 01       	movw	r30, r28
     d92:	e3 55       	subi	r30, 0x53	; 83
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	9c 93       	st	X, r25
     da0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da2:	fe 01       	movw	r30, r28
     da4:	e3 55       	subi	r30, 0x53	; 83
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	d1 f6       	brne	.-76     	; 0xd64 <imu+0x3c8>
     db0:	27 c0       	rjmp	.+78     	; 0xe00 <imu+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db2:	8e 01       	movw	r16, r28
     db4:	03 55       	subi	r16, 0x53	; 83
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	fe 01       	movw	r30, r28
     dba:	e1 55       	subi	r30, 0x51	; 81
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	f8 01       	movw	r30, r16
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	80 83       	st	Z, r24
     dd4:	de 01       	movw	r26, r28
     dd6:	a7 55       	subi	r26, 0x57	; 87
     dd8:	bf 4f       	sbci	r27, 0xFF	; 255
     dda:	fe 01       	movw	r30, r28
     ddc:	e3 55       	subi	r30, 0x53	; 83
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	8d 93       	st	X+, r24
     de6:	9c 93       	st	X, r25
     de8:	fe 01       	movw	r30, r28
     dea:	e7 55       	subi	r30, 0x57	; 87
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <imu+0x456>
     df6:	fe 01       	movw	r30, r28
     df8:	e7 55       	subi	r30, 0x57	; 87
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
 UDR2=0x82; _delay_ms(1);
     e00:	e6 ed       	ldi	r30, 0xD6	; 214
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	82 e8       	ldi	r24, 0x82	; 130
     e06:	80 83       	st	Z, r24
     e08:	fe 01       	movw	r30, r28
     e0a:	eb 55       	subi	r30, 0x5B	; 91
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a0 e8       	ldi	r26, 0x80	; 128
     e14:	bf e3       	ldi	r27, 0x3F	; 63
     e16:	80 83       	st	Z, r24
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	a2 83       	std	Z+2, r26	; 0x02
     e1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1e:	8e 01       	movw	r16, r28
     e20:	0f 55       	subi	r16, 0x5F	; 95
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	fe 01       	movw	r30, r28
     e26:	eb 55       	subi	r30, 0x5B	; 91
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	4a e7       	ldi	r20, 0x7A	; 122
     e38:	55 e4       	ldi	r21, 0x45	; 69
     e3a:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	f8 01       	movw	r30, r16
     e44:	80 83       	st	Z, r24
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	a2 83       	std	Z+2, r26	; 0x02
     e4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e4c:	fe 01       	movw	r30, r28
     e4e:	ef 55       	subi	r30, 0x5F	; 95
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	60 81       	ld	r22, Z
     e54:	71 81       	ldd	r23, Z+1	; 0x01
     e56:	82 81       	ldd	r24, Z+2	; 0x02
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     e66:	88 23       	and	r24, r24
     e68:	44 f4       	brge	.+16     	; 0xe7a <imu+0x4de>
		__ticks = 1;
     e6a:	fe 01       	movw	r30, r28
     e6c:	e1 56       	subi	r30, 0x61	; 97
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	80 83       	st	Z, r24
     e78:	64 c0       	rjmp	.+200    	; 0xf42 <imu+0x5a6>
	else if (__tmp > 65535)
     e7a:	fe 01       	movw	r30, r28
     e7c:	ef 55       	subi	r30, 0x5F	; 95
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	0c f0       	brlt	.+2      	; 0xe9a <imu+0x4fe>
     e98:	43 c0       	rjmp	.+134    	; 0xf20 <imu+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9a:	fe 01       	movw	r30, r28
     e9c:	eb 55       	subi	r30, 0x5B	; 91
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8e 01       	movw	r16, r28
     eba:	01 56       	subi	r16, 0x61	; 97
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	f8 01       	movw	r30, r16
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
     ed0:	1f c0       	rjmp	.+62     	; 0xf10 <imu+0x574>
     ed2:	fe 01       	movw	r30, r28
     ed4:	e3 56       	subi	r30, 0x63	; 99
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 e9       	ldi	r24, 0x90	; 144
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
     ee0:	fe 01       	movw	r30, r28
     ee2:	e3 56       	subi	r30, 0x63	; 99
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <imu+0x54e>
     eee:	fe 01       	movw	r30, r28
     ef0:	e3 56       	subi	r30, 0x63	; 99
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef8:	de 01       	movw	r26, r28
     efa:	a1 56       	subi	r26, 0x61	; 97
     efc:	bf 4f       	sbci	r27, 0xFF	; 255
     efe:	fe 01       	movw	r30, r28
     f00:	e1 56       	subi	r30, 0x61	; 97
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	11 96       	adiw	r26, 0x01	; 1
     f0c:	9c 93       	st	X, r25
     f0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f10:	fe 01       	movw	r30, r28
     f12:	e1 56       	subi	r30, 0x61	; 97
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	80 81       	ld	r24, Z
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	d1 f6       	brne	.-76     	; 0xed2 <imu+0x536>
     f1e:	27 c0       	rjmp	.+78     	; 0xf6e <imu+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f20:	8e 01       	movw	r16, r28
     f22:	01 56       	subi	r16, 0x61	; 97
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
     f26:	fe 01       	movw	r30, r28
     f28:	ef 55       	subi	r30, 0x5F	; 95
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	82 81       	ldd	r24, Z+2	; 0x02
     f32:	93 81       	ldd	r25, Z+3	; 0x03
     f34:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	f8 01       	movw	r30, r16
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
     f42:	de 01       	movw	r26, r28
     f44:	a5 56       	subi	r26, 0x65	; 101
     f46:	bf 4f       	sbci	r27, 0xFF	; 255
     f48:	fe 01       	movw	r30, r28
     f4a:	e1 56       	subi	r30, 0x61	; 97
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	8d 93       	st	X+, r24
     f54:	9c 93       	st	X, r25
     f56:	fe 01       	movw	r30, r28
     f58:	e5 56       	subi	r30, 0x65	; 101
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <imu+0x5c4>
     f64:	fe 01       	movw	r30, r28
     f66:	e5 56       	subi	r30, 0x65	; 101
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
 UDR2=0x01; _delay_ms(1);
     f6e:	e6 ed       	ldi	r30, 0xD6	; 214
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 83       	st	Z, r24
     f76:	fe 01       	movw	r30, r28
     f78:	e9 56       	subi	r30, 0x69	; 105
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	a0 e8       	ldi	r26, 0x80	; 128
     f82:	bf e3       	ldi	r27, 0x3F	; 63
     f84:	80 83       	st	Z, r24
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	a2 83       	std	Z+2, r26	; 0x02
     f8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8c:	8e 01       	movw	r16, r28
     f8e:	0d 56       	subi	r16, 0x6D	; 109
     f90:	1f 4f       	sbci	r17, 0xFF	; 255
     f92:	fe 01       	movw	r30, r28
     f94:	e9 56       	subi	r30, 0x69	; 105
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	60 81       	ld	r22, Z
     f9a:	71 81       	ldd	r23, Z+1	; 0x01
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a e7       	ldi	r20, 0x7A	; 122
     fa6:	55 e4       	ldi	r21, 0x45	; 69
     fa8:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	f8 01       	movw	r30, r16
     fb2:	80 83       	st	Z, r24
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	a2 83       	std	Z+2, r26	; 0x02
     fb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fba:	fe 01       	movw	r30, r28
     fbc:	ed 56       	subi	r30, 0x6D	; 109
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	60 81       	ld	r22, Z
     fc2:	71 81       	ldd	r23, Z+1	; 0x01
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	44 f4       	brge	.+16     	; 0xfe8 <imu+0x64c>
		__ticks = 1;
     fd8:	fe 01       	movw	r30, r28
     fda:	ef 56       	subi	r30, 0x6F	; 111
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	80 83       	st	Z, r24
     fe6:	64 c0       	rjmp	.+200    	; 0x10b0 <imu+0x714>
	else if (__tmp > 65535)
     fe8:	fe 01       	movw	r30, r28
     fea:	ed 56       	subi	r30, 0x6D	; 109
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	60 81       	ld	r22, Z
     ff0:	71 81       	ldd	r23, Z+1	; 0x01
     ff2:	82 81       	ldd	r24, Z+2	; 0x02
     ff4:	93 81       	ldd	r25, Z+3	; 0x03
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	3f ef       	ldi	r19, 0xFF	; 255
     ffa:	4f e7       	ldi	r20, 0x7F	; 127
     ffc:	57 e4       	ldi	r21, 0x47	; 71
     ffe:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    1002:	18 16       	cp	r1, r24
    1004:	0c f0       	brlt	.+2      	; 0x1008 <imu+0x66c>
    1006:	43 c0       	rjmp	.+134    	; 0x108e <imu+0x6f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1008:	fe 01       	movw	r30, r28
    100a:	e9 56       	subi	r30, 0x69	; 105
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	8e 01       	movw	r16, r28
    1028:	0f 56       	subi	r16, 0x6F	; 111
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	f8 01       	movw	r30, r16
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    103e:	1f c0       	rjmp	.+62     	; 0x107e <imu+0x6e2>
    1040:	fe 01       	movw	r30, r28
    1042:	e1 57       	subi	r30, 0x71	; 113
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 e9       	ldi	r24, 0x90	; 144
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	80 83       	st	Z, r24
    104e:	fe 01       	movw	r30, r28
    1050:	e1 57       	subi	r30, 0x71	; 113
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <imu+0x6bc>
    105c:	fe 01       	movw	r30, r28
    105e:	e1 57       	subi	r30, 0x71	; 113
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1066:	de 01       	movw	r26, r28
    1068:	af 56       	subi	r26, 0x6F	; 111
    106a:	bf 4f       	sbci	r27, 0xFF	; 255
    106c:	fe 01       	movw	r30, r28
    106e:	ef 56       	subi	r30, 0x6F	; 111
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	80 81       	ld	r24, Z
    1074:	91 81       	ldd	r25, Z+1	; 0x01
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	9c 93       	st	X, r25
    107c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107e:	fe 01       	movw	r30, r28
    1080:	ef 56       	subi	r30, 0x6F	; 111
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	d1 f6       	brne	.-76     	; 0x1040 <imu+0x6a4>
    108c:	27 c0       	rjmp	.+78     	; 0x10dc <imu+0x740>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108e:	8e 01       	movw	r16, r28
    1090:	0f 56       	subi	r16, 0x6F	; 111
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	fe 01       	movw	r30, r28
    1096:	ed 56       	subi	r30, 0x6D	; 109
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	60 81       	ld	r22, Z
    109c:	71 81       	ldd	r23, Z+1	; 0x01
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	f8 01       	movw	r30, r16
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
    10b0:	de 01       	movw	r26, r28
    10b2:	a3 57       	subi	r26, 0x73	; 115
    10b4:	bf 4f       	sbci	r27, 0xFF	; 255
    10b6:	fe 01       	movw	r30, r28
    10b8:	ef 56       	subi	r30, 0x6F	; 111
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	8d 93       	st	X+, r24
    10c2:	9c 93       	st	X, r25
    10c4:	fe 01       	movw	r30, r28
    10c6:	e3 57       	subi	r30, 0x73	; 115
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <imu+0x732>
    10d2:	fe 01       	movw	r30, r28
    10d4:	e3 57       	subi	r30, 0x73	; 115
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	80 83       	st	Z, r24
 UDR2=0x00; _delay_ms(1);
    10dc:	e6 ed       	ldi	r30, 0xD6	; 214
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	10 82       	st	Z, r1
    10e2:	fe 01       	movw	r30, r28
    10e4:	e7 57       	subi	r30, 0x77	; 119
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e8       	ldi	r26, 0x80	; 128
    10ee:	bf e3       	ldi	r27, 0x3F	; 63
    10f0:	80 83       	st	Z, r24
    10f2:	91 83       	std	Z+1, r25	; 0x01
    10f4:	a2 83       	std	Z+2, r26	; 0x02
    10f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f8:	8e 01       	movw	r16, r28
    10fa:	0b 57       	subi	r16, 0x7B	; 123
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	fe 01       	movw	r30, r28
    1100:	e7 57       	subi	r30, 0x77	; 119
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	60 81       	ld	r22, Z
    1106:	71 81       	ldd	r23, Z+1	; 0x01
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	93 81       	ldd	r25, Z+3	; 0x03
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	4a e7       	ldi	r20, 0x7A	; 122
    1112:	55 e4       	ldi	r21, 0x45	; 69
    1114:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	f8 01       	movw	r30, r16
    111e:	80 83       	st	Z, r24
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	a2 83       	std	Z+2, r26	; 0x02
    1124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1126:	fe 01       	movw	r30, r28
    1128:	eb 57       	subi	r30, 0x7B	; 123
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	44 f4       	brge	.+16     	; 0x1154 <imu+0x7b8>
		__ticks = 1;
    1144:	fe 01       	movw	r30, r28
    1146:	ed 57       	subi	r30, 0x7D	; 125
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
    1152:	64 c0       	rjmp	.+200    	; 0x121c <imu+0x880>
	else if (__tmp > 65535)
    1154:	fe 01       	movw	r30, r28
    1156:	eb 57       	subi	r30, 0x7B	; 123
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	60 81       	ld	r22, Z
    115c:	71 81       	ldd	r23, Z+1	; 0x01
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	0c f0       	brlt	.+2      	; 0x1174 <imu+0x7d8>
    1172:	43 c0       	rjmp	.+134    	; 0x11fa <imu+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1174:	fe 01       	movw	r30, r28
    1176:	e7 57       	subi	r30, 0x77	; 119
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	60 81       	ld	r22, Z
    117c:	71 81       	ldd	r23, Z+1	; 0x01
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e2       	ldi	r20, 0x20	; 32
    1188:	51 e4       	ldi	r21, 0x41	; 65
    118a:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	8e 01       	movw	r16, r28
    1194:	0d 57       	subi	r16, 0x7D	; 125
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	f8 01       	movw	r30, r16
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
    11aa:	1f c0       	rjmp	.+62     	; 0x11ea <imu+0x84e>
    11ac:	fe 01       	movw	r30, r28
    11ae:	ef 57       	subi	r30, 0x7F	; 127
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 e9       	ldi	r24, 0x90	; 144
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
    11ba:	fe 01       	movw	r30, r28
    11bc:	ef 57       	subi	r30, 0x7F	; 127
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <imu+0x828>
    11c8:	fe 01       	movw	r30, r28
    11ca:	ef 57       	subi	r30, 0x7F	; 127
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d2:	de 01       	movw	r26, r28
    11d4:	ad 57       	subi	r26, 0x7D	; 125
    11d6:	bf 4f       	sbci	r27, 0xFF	; 255
    11d8:	fe 01       	movw	r30, r28
    11da:	ed 57       	subi	r30, 0x7D	; 125
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	11 96       	adiw	r26, 0x01	; 1
    11e6:	9c 93       	st	X, r25
    11e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ea:	fe 01       	movw	r30, r28
    11ec:	ed 57       	subi	r30, 0x7D	; 125
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	80 81       	ld	r24, Z
    11f2:	91 81       	ldd	r25, Z+1	; 0x01
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	d1 f6       	brne	.-76     	; 0x11ac <imu+0x810>
    11f8:	27 c0       	rjmp	.+78     	; 0x1248 <imu+0x8ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fa:	8e 01       	movw	r16, r28
    11fc:	0d 57       	subi	r16, 0x7D	; 125
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	fe 01       	movw	r30, r28
    1202:	eb 57       	subi	r30, 0x7B	; 123
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	60 81       	ld	r22, Z
    1208:	71 81       	ldd	r23, Z+1	; 0x01
    120a:	82 81       	ldd	r24, Z+2	; 0x02
    120c:	93 81       	ldd	r25, Z+3	; 0x03
    120e:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	f8 01       	movw	r30, r16
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
    121c:	de 01       	movw	r26, r28
    121e:	a1 58       	subi	r26, 0x81	; 129
    1220:	bf 4f       	sbci	r27, 0xFF	; 255
    1222:	fe 01       	movw	r30, r28
    1224:	ed 57       	subi	r30, 0x7D	; 125
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 81       	ld	r24, Z
    122a:	91 81       	ldd	r25, Z+1	; 0x01
    122c:	8d 93       	st	X+, r24
    122e:	9c 93       	st	X, r25
    1230:	fe 01       	movw	r30, r28
    1232:	e1 58       	subi	r30, 0x81	; 129
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	80 81       	ld	r24, Z
    1238:	91 81       	ldd	r25, Z+1	; 0x01
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <imu+0x89e>
    123e:	fe 01       	movw	r30, r28
    1240:	e1 58       	subi	r30, 0x81	; 129
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	80 83       	st	Z, r24
 UDR2=0x02; _delay_ms(1);
    1248:	e6 ed       	ldi	r30, 0xD6	; 214
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	80 83       	st	Z, r24
    1250:	fe 01       	movw	r30, r28
    1252:	e5 58       	subi	r30, 0x85	; 133
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e8       	ldi	r26, 0x80	; 128
    125c:	bf e3       	ldi	r27, 0x3F	; 63
    125e:	80 83       	st	Z, r24
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	a2 83       	std	Z+2, r26	; 0x02
    1264:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1266:	8e 01       	movw	r16, r28
    1268:	09 58       	subi	r16, 0x89	; 137
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
    126c:	fe 01       	movw	r30, r28
    126e:	e5 58       	subi	r30, 0x85	; 133
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	4a e7       	ldi	r20, 0x7A	; 122
    1280:	55 e4       	ldi	r21, 0x45	; 69
    1282:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	f8 01       	movw	r30, r16
    128c:	80 83       	st	Z, r24
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	a2 83       	std	Z+2, r26	; 0x02
    1292:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1294:	fe 01       	movw	r30, r28
    1296:	e9 58       	subi	r30, 0x89	; 137
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	44 f4       	brge	.+16     	; 0x12c2 <imu+0x926>
		__ticks = 1;
    12b2:	fe 01       	movw	r30, r28
    12b4:	eb 58       	subi	r30, 0x8B	; 139
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	80 83       	st	Z, r24
    12c0:	64 c0       	rjmp	.+200    	; 0x138a <imu+0x9ee>
	else if (__tmp > 65535)
    12c2:	fe 01       	movw	r30, r28
    12c4:	e9 58       	subi	r30, 0x89	; 137
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3f ef       	ldi	r19, 0xFF	; 255
    12d4:	4f e7       	ldi	r20, 0x7F	; 127
    12d6:	57 e4       	ldi	r21, 0x47	; 71
    12d8:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	0c f0       	brlt	.+2      	; 0x12e2 <imu+0x946>
    12e0:	43 c0       	rjmp	.+134    	; 0x1368 <imu+0x9cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e2:	fe 01       	movw	r30, r28
    12e4:	e5 58       	subi	r30, 0x85	; 133
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	82 81       	ldd	r24, Z+2	; 0x02
    12ee:	93 81       	ldd	r25, Z+3	; 0x03
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e2       	ldi	r20, 0x20	; 32
    12f6:	51 e4       	ldi	r21, 0x41	; 65
    12f8:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8e 01       	movw	r16, r28
    1302:	0b 58       	subi	r16, 0x8B	; 139
    1304:	1f 4f       	sbci	r17, 0xFF	; 255
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	f8 01       	movw	r30, r16
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
    1318:	1f c0       	rjmp	.+62     	; 0x1358 <imu+0x9bc>
    131a:	fe 01       	movw	r30, r28
    131c:	ed 58       	subi	r30, 0x8D	; 141
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	80 e9       	ldi	r24, 0x90	; 144
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
    1328:	fe 01       	movw	r30, r28
    132a:	ed 58       	subi	r30, 0x8D	; 141
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <imu+0x996>
    1336:	fe 01       	movw	r30, r28
    1338:	ed 58       	subi	r30, 0x8D	; 141
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	de 01       	movw	r26, r28
    1342:	ab 58       	subi	r26, 0x8B	; 139
    1344:	bf 4f       	sbci	r27, 0xFF	; 255
    1346:	fe 01       	movw	r30, r28
    1348:	eb 58       	subi	r30, 0x8B	; 139
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	9c 93       	st	X, r25
    1356:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1358:	fe 01       	movw	r30, r28
    135a:	eb 58       	subi	r30, 0x8B	; 139
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	d1 f6       	brne	.-76     	; 0x131a <imu+0x97e>
    1366:	27 c0       	rjmp	.+78     	; 0x13b6 <imu+0xa1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	8e 01       	movw	r16, r28
    136a:	0b 58       	subi	r16, 0x8B	; 139
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	fe 01       	movw	r30, r28
    1370:	e9 58       	subi	r30, 0x89	; 137
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	60 81       	ld	r22, Z
    1376:	71 81       	ldd	r23, Z+1	; 0x01
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	f8 01       	movw	r30, r16
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
    138a:	de 01       	movw	r26, r28
    138c:	af 58       	subi	r26, 0x8F	; 143
    138e:	bf 4f       	sbci	r27, 0xFF	; 255
    1390:	fe 01       	movw	r30, r28
    1392:	eb 58       	subi	r30, 0x8B	; 139
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	8d 93       	st	X+, r24
    139c:	9c 93       	st	X, r25
    139e:	fe 01       	movw	r30, r28
    13a0:	ef 58       	subi	r30, 0x8F	; 143
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <imu+0xa0c>
    13ac:	fe 01       	movw	r30, r28
    13ae:	ef 58       	subi	r30, 0x8F	; 143
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	91 83       	std	Z+1, r25	; 0x01
    13b4:	80 83       	st	Z, r24
 UDR2=0xD3;
    13b6:	e6 ed       	ldi	r30, 0xD6	; 214
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	83 ed       	ldi	r24, 0xD3	; 211
    13bc:	80 83       	st	Z, r24
    13be:	fe 01       	movw	r30, r28
    13c0:	e3 59       	subi	r30, 0x93	; 147
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a8 ec       	ldi	r26, 0xC8	; 200
    13ca:	b2 e4       	ldi	r27, 0x42	; 66
    13cc:	80 83       	st	Z, r24
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	a2 83       	std	Z+2, r26	; 0x02
    13d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	8e 01       	movw	r16, r28
    13d6:	07 59       	subi	r16, 0x97	; 151
    13d8:	1f 4f       	sbci	r17, 0xFF	; 255
    13da:	fe 01       	movw	r30, r28
    13dc:	e3 59       	subi	r30, 0x93	; 147
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	82 81       	ldd	r24, Z+2	; 0x02
    13e6:	93 81       	ldd	r25, Z+3	; 0x03
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	4a e7       	ldi	r20, 0x7A	; 122
    13ee:	55 e4       	ldi	r21, 0x45	; 69
    13f0:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	f8 01       	movw	r30, r16
    13fa:	80 83       	st	Z, r24
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	a2 83       	std	Z+2, r26	; 0x02
    1400:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1402:	fe 01       	movw	r30, r28
    1404:	e7 59       	subi	r30, 0x97	; 151
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    141c:	88 23       	and	r24, r24
    141e:	44 f4       	brge	.+16     	; 0x1430 <imu+0xa94>
		__ticks = 1;
    1420:	fe 01       	movw	r30, r28
    1422:	e9 59       	subi	r30, 0x99	; 153
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
    142e:	64 c0       	rjmp	.+200    	; 0x14f8 <imu+0xb5c>
	else if (__tmp > 65535)
    1430:	fe 01       	movw	r30, r28
    1432:	e7 59       	subi	r30, 0x97	; 151
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	60 81       	ld	r22, Z
    1438:	71 81       	ldd	r23, Z+1	; 0x01
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	93 81       	ldd	r25, Z+3	; 0x03
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	0c f0       	brlt	.+2      	; 0x1450 <imu+0xab4>
    144e:	43 c0       	rjmp	.+134    	; 0x14d6 <imu+0xb3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1450:	fe 01       	movw	r30, r28
    1452:	e3 59       	subi	r30, 0x93	; 147
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	8e 01       	movw	r16, r28
    1470:	09 59       	subi	r16, 0x99	; 153
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	f8 01       	movw	r30, r16
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
    1486:	1f c0       	rjmp	.+62     	; 0x14c6 <imu+0xb2a>
    1488:	fe 01       	movw	r30, r28
    148a:	eb 59       	subi	r30, 0x9B	; 155
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	80 e9       	ldi	r24, 0x90	; 144
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	80 83       	st	Z, r24
    1496:	fe 01       	movw	r30, r28
    1498:	eb 59       	subi	r30, 0x9B	; 155
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <imu+0xb04>
    14a4:	fe 01       	movw	r30, r28
    14a6:	eb 59       	subi	r30, 0x9B	; 155
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	de 01       	movw	r26, r28
    14b0:	a9 59       	subi	r26, 0x99	; 153
    14b2:	bf 4f       	sbci	r27, 0xFF	; 255
    14b4:	fe 01       	movw	r30, r28
    14b6:	e9 59       	subi	r30, 0x99	; 153
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	11 96       	adiw	r26, 0x01	; 1
    14c2:	9c 93       	st	X, r25
    14c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	fe 01       	movw	r30, r28
    14c8:	e9 59       	subi	r30, 0x99	; 153
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	d1 f6       	brne	.-76     	; 0x1488 <imu+0xaec>
    14d4:	27 c0       	rjmp	.+78     	; 0x1524 <imu+0xb88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d6:	8e 01       	movw	r16, r28
    14d8:	09 59       	subi	r16, 0x99	; 153
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	fe 01       	movw	r30, r28
    14de:	e7 59       	subi	r30, 0x97	; 151
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	60 81       	ld	r22, Z
    14e4:	71 81       	ldd	r23, Z+1	; 0x01
    14e6:	82 81       	ldd	r24, Z+2	; 0x02
    14e8:	93 81       	ldd	r25, Z+3	; 0x03
    14ea:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	f8 01       	movw	r30, r16
    14f4:	91 83       	std	Z+1, r25	; 0x01
    14f6:	80 83       	st	Z, r24
    14f8:	de 01       	movw	r26, r28
    14fa:	ad 59       	subi	r26, 0x9D	; 157
    14fc:	bf 4f       	sbci	r27, 0xFF	; 255
    14fe:	fe 01       	movw	r30, r28
    1500:	e9 59       	subi	r30, 0x99	; 153
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	8d 93       	st	X+, r24
    150a:	9c 93       	st	X, r25
    150c:	fe 01       	movw	r30, r28
    150e:	ed 59       	subi	r30, 0x9D	; 157
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <imu+0xb7a>
    151a:	fe 01       	movw	r30, r28
    151c:	ed 59       	subi	r30, 0x9D	; 157
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24

_delay_ms(100);
 UDR2=0x73; _delay_ms(1);
    1524:	e6 ed       	ldi	r30, 0xD6	; 214
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	83 e7       	ldi	r24, 0x73	; 115
    152a:	80 83       	st	Z, r24
    152c:	fe 01       	movw	r30, r28
    152e:	e1 5a       	subi	r30, 0xA1	; 161
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a0 e8       	ldi	r26, 0x80	; 128
    1538:	bf e3       	ldi	r27, 0x3F	; 63
    153a:	80 83       	st	Z, r24
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	a2 83       	std	Z+2, r26	; 0x02
    1540:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1542:	8e 01       	movw	r16, r28
    1544:	05 5a       	subi	r16, 0xA5	; 165
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	fe 01       	movw	r30, r28
    154a:	e1 5a       	subi	r30, 0xA1	; 161
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	4a e7       	ldi	r20, 0x7A	; 122
    155c:	55 e4       	ldi	r21, 0x45	; 69
    155e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	f8 01       	movw	r30, r16
    1568:	80 83       	st	Z, r24
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	a2 83       	std	Z+2, r26	; 0x02
    156e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1570:	fe 01       	movw	r30, r28
    1572:	e5 5a       	subi	r30, 0xA5	; 165
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e8       	ldi	r20, 0x80	; 128
    1584:	5f e3       	ldi	r21, 0x3F	; 63
    1586:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    158a:	88 23       	and	r24, r24
    158c:	44 f4       	brge	.+16     	; 0x159e <imu+0xc02>
		__ticks = 1;
    158e:	fe 01       	movw	r30, r28
    1590:	e7 5a       	subi	r30, 0xA7	; 167
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	91 83       	std	Z+1, r25	; 0x01
    159a:	80 83       	st	Z, r24
    159c:	64 c0       	rjmp	.+200    	; 0x1666 <imu+0xcca>
	else if (__tmp > 65535)
    159e:	fe 01       	movw	r30, r28
    15a0:	e5 5a       	subi	r30, 0xA5	; 165
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	60 81       	ld	r22, Z
    15a6:	71 81       	ldd	r23, Z+1	; 0x01
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	0c f0       	brlt	.+2      	; 0x15be <imu+0xc22>
    15bc:	43 c0       	rjmp	.+134    	; 0x1644 <imu+0xca8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15be:	fe 01       	movw	r30, r28
    15c0:	e1 5a       	subi	r30, 0xA1	; 161
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8e 01       	movw	r16, r28
    15de:	07 5a       	subi	r16, 0xA7	; 167
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	f8 01       	movw	r30, r16
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
    15f4:	1f c0       	rjmp	.+62     	; 0x1634 <imu+0xc98>
    15f6:	fe 01       	movw	r30, r28
    15f8:	e9 5a       	subi	r30, 0xA9	; 169
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 e9       	ldi	r24, 0x90	; 144
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
    1604:	fe 01       	movw	r30, r28
    1606:	e9 5a       	subi	r30, 0xA9	; 169
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <imu+0xc72>
    1612:	fe 01       	movw	r30, r28
    1614:	e9 5a       	subi	r30, 0xA9	; 169
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	de 01       	movw	r26, r28
    161e:	a7 5a       	subi	r26, 0xA7	; 167
    1620:	bf 4f       	sbci	r27, 0xFF	; 255
    1622:	fe 01       	movw	r30, r28
    1624:	e7 5a       	subi	r30, 0xA7	; 167
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 81       	ld	r24, Z
    162a:	91 81       	ldd	r25, Z+1	; 0x01
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	11 96       	adiw	r26, 0x01	; 1
    1630:	9c 93       	st	X, r25
    1632:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	fe 01       	movw	r30, r28
    1636:	e7 5a       	subi	r30, 0xA7	; 167
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	d1 f6       	brne	.-76     	; 0x15f6 <imu+0xc5a>
    1642:	27 c0       	rjmp	.+78     	; 0x1692 <imu+0xcf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	8e 01       	movw	r16, r28
    1646:	07 5a       	subi	r16, 0xA7	; 167
    1648:	1f 4f       	sbci	r17, 0xFF	; 255
    164a:	fe 01       	movw	r30, r28
    164c:	e5 5a       	subi	r30, 0xA5	; 165
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	60 81       	ld	r22, Z
    1652:	71 81       	ldd	r23, Z+1	; 0x01
    1654:	82 81       	ldd	r24, Z+2	; 0x02
    1656:	93 81       	ldd	r25, Z+3	; 0x03
    1658:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	f8 01       	movw	r30, r16
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	de 01       	movw	r26, r28
    1668:	ab 5a       	subi	r26, 0xAB	; 171
    166a:	bf 4f       	sbci	r27, 0xFF	; 255
    166c:	fe 01       	movw	r30, r28
    166e:	e7 5a       	subi	r30, 0xA7	; 167
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	8d 93       	st	X+, r24
    1678:	9c 93       	st	X, r25
    167a:	fe 01       	movw	r30, r28
    167c:	eb 5a       	subi	r30, 0xAB	; 171
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	80 81       	ld	r24, Z
    1682:	91 81       	ldd	r25, Z+1	; 0x01
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <imu+0xce8>
    1688:	fe 01       	movw	r30, r28
    168a:	eb 5a       	subi	r30, 0xAB	; 171
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	80 83       	st	Z, r24
 UDR2=0x6e; _delay_ms(1);
    1692:	e6 ed       	ldi	r30, 0xD6	; 214
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8e e6       	ldi	r24, 0x6E	; 110
    1698:	80 83       	st	Z, r24
    169a:	fe 01       	movw	r30, r28
    169c:	ef 5a       	subi	r30, 0xAF	; 175
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a0 e8       	ldi	r26, 0x80	; 128
    16a6:	bf e3       	ldi	r27, 0x3F	; 63
    16a8:	80 83       	st	Z, r24
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	a2 83       	std	Z+2, r26	; 0x02
    16ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	8e 01       	movw	r16, r28
    16b2:	03 5b       	subi	r16, 0xB3	; 179
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	fe 01       	movw	r30, r28
    16b8:	ef 5a       	subi	r30, 0xAF	; 175
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	55 e4       	ldi	r21, 0x45	; 69
    16cc:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 83       	st	Z, r24
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	a2 83       	std	Z+2, r26	; 0x02
    16dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16de:	fe 01       	movw	r30, r28
    16e0:	e3 5b       	subi	r30, 0xB3	; 179
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	44 f4       	brge	.+16     	; 0x170c <imu+0xd70>
		__ticks = 1;
    16fc:	fe 01       	movw	r30, r28
    16fe:	e5 5b       	subi	r30, 0xB5	; 181
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	64 c0       	rjmp	.+200    	; 0x17d4 <imu+0xe38>
	else if (__tmp > 65535)
    170c:	fe 01       	movw	r30, r28
    170e:	e3 5b       	subi	r30, 0xB3	; 179
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	0c f0       	brlt	.+2      	; 0x172c <imu+0xd90>
    172a:	43 c0       	rjmp	.+134    	; 0x17b2 <imu+0xe16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172c:	fe 01       	movw	r30, r28
    172e:	ef 5a       	subi	r30, 0xAF	; 175
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	8e 01       	movw	r16, r28
    174c:	05 5b       	subi	r16, 0xB5	; 181
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	f8 01       	movw	r30, r16
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	1f c0       	rjmp	.+62     	; 0x17a2 <imu+0xe06>
    1764:	fe 01       	movw	r30, r28
    1766:	e7 5b       	subi	r30, 0xB7	; 183
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 e9       	ldi	r24, 0x90	; 144
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
    1772:	fe 01       	movw	r30, r28
    1774:	e7 5b       	subi	r30, 0xB7	; 183
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <imu+0xde0>
    1780:	fe 01       	movw	r30, r28
    1782:	e7 5b       	subi	r30, 0xB7	; 183
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	de 01       	movw	r26, r28
    178c:	a5 5b       	subi	r26, 0xB5	; 181
    178e:	bf 4f       	sbci	r27, 0xFF	; 255
    1790:	fe 01       	movw	r30, r28
    1792:	e5 5b       	subi	r30, 0xB5	; 181
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	11 96       	adiw	r26, 0x01	; 1
    179e:	9c 93       	st	X, r25
    17a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	fe 01       	movw	r30, r28
    17a4:	e5 5b       	subi	r30, 0xB5	; 181
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	d1 f6       	brne	.-76     	; 0x1764 <imu+0xdc8>
    17b0:	27 c0       	rjmp	.+78     	; 0x1800 <imu+0xe64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	8e 01       	movw	r16, r28
    17b4:	05 5b       	subi	r16, 0xB5	; 181
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	fe 01       	movw	r30, r28
    17ba:	e3 5b       	subi	r30, 0xB3	; 179
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	f8 01       	movw	r30, r16
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	80 83       	st	Z, r24
    17d4:	de 01       	movw	r26, r28
    17d6:	a9 5b       	subi	r26, 0xB9	; 185
    17d8:	bf 4f       	sbci	r27, 0xFF	; 255
    17da:	fe 01       	movw	r30, r28
    17dc:	e5 5b       	subi	r30, 0xB5	; 181
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	8d 93       	st	X+, r24
    17e6:	9c 93       	st	X, r25
    17e8:	fe 01       	movw	r30, r28
    17ea:	e9 5b       	subi	r30, 0xB9	; 185
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <imu+0xe56>
    17f6:	fe 01       	movw	r30, r28
    17f8:	e9 5b       	subi	r30, 0xB9	; 185
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
 UDR2=0x70; _delay_ms(1);
    1800:	e6 ed       	ldi	r30, 0xD6	; 214
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 e7       	ldi	r24, 0x70	; 112
    1806:	80 83       	st	Z, r24
    1808:	fe 01       	movw	r30, r28
    180a:	ed 5b       	subi	r30, 0xBD	; 189
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e8       	ldi	r26, 0x80	; 128
    1814:	bf e3       	ldi	r27, 0x3F	; 63
    1816:	80 83       	st	Z, r24
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	a2 83       	std	Z+2, r26	; 0x02
    181c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	8e 01       	movw	r16, r28
    1820:	01 5c       	subi	r16, 0xC1	; 193
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	fe 01       	movw	r30, r28
    1826:	ed 5b       	subi	r30, 0xBD	; 189
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a e7       	ldi	r20, 0x7A	; 122
    1838:	55 e4       	ldi	r21, 0x45	; 69
    183a:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	f8 01       	movw	r30, r16
    1844:	80 83       	st	Z, r24
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	a2 83       	std	Z+2, r26	; 0x02
    184a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    184c:	fe 01       	movw	r30, r28
    184e:	ff 96       	adiw	r30, 0x3f	; 63
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <imu+0xed6>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e af       	std	Y+62, r25	; 0x3e
    186e:	8d af       	std	Y+61, r24	; 0x3d
    1870:	46 c0       	rjmp	.+140    	; 0x18fe <imu+0xf62>
	else if (__tmp > 65535)
    1872:	fe 01       	movw	r30, r28
    1874:	ff 96       	adiw	r30, 0x3f	; 63
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	3f ef       	ldi	r19, 0xFF	; 255
    1882:	4f e7       	ldi	r20, 0x7F	; 127
    1884:	57 e4       	ldi	r21, 0x47	; 71
    1886:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    188a:	18 16       	cp	r1, r24
    188c:	64 f5       	brge	.+88     	; 0x18e6 <imu+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188e:	fe 01       	movw	r30, r28
    1890:	ed 5b       	subi	r30, 0xBD	; 189
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e2       	ldi	r20, 0x20	; 32
    18a2:	51 e4       	ldi	r21, 0x41	; 65
    18a4:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9e af       	std	Y+62, r25	; 0x3e
    18ba:	8d af       	std	Y+61, r24	; 0x3d
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <imu+0xf40>
    18be:	80 e9       	ldi	r24, 0x90	; 144
    18c0:	91 e0       	ldi	r25, 0x01	; 1
    18c2:	9c af       	std	Y+60, r25	; 0x3c
    18c4:	8b af       	std	Y+59, r24	; 0x3b
    18c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    18c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <imu+0xf2e>
    18ce:	9c af       	std	Y+60, r25	; 0x3c
    18d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	9e af       	std	Y+62, r25	; 0x3e
    18da:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    18de:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	69 f7       	brne	.-38     	; 0x18be <imu+0xf22>
    18e4:	16 c0       	rjmp	.+44     	; 0x1912 <imu+0xf76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e6:	fe 01       	movw	r30, r28
    18e8:	ff 96       	adiw	r30, 0x3f	; 63
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9e af       	std	Y+62, r25	; 0x3e
    18fc:	8d af       	std	Y+61, r24	; 0x3d
    18fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1900:	9e ad       	ldd	r25, Y+62	; 0x3e
    1902:	9a af       	std	Y+58, r25	; 0x3a
    1904:	89 af       	std	Y+57, r24	; 0x39
    1906:	89 ad       	ldd	r24, Y+57	; 0x39
    1908:	9a ad       	ldd	r25, Y+58	; 0x3a
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <imu+0xf6e>
    190e:	9a af       	std	Y+58, r25	; 0x3a
    1910:	89 af       	std	Y+57, r24	; 0x39
 UDR2=0xA0; _delay_ms(1);
    1912:	e6 ed       	ldi	r30, 0xD6	; 214
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 ea       	ldi	r24, 0xA0	; 160
    1918:	80 83       	st	Z, r24
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a0 e8       	ldi	r26, 0x80	; 128
    1920:	bf e3       	ldi	r27, 0x3F	; 63
    1922:	8d ab       	std	Y+53, r24	; 0x35
    1924:	9e ab       	std	Y+54, r25	; 0x36
    1926:	af ab       	std	Y+55, r26	; 0x37
    1928:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192a:	6d a9       	ldd	r22, Y+53	; 0x35
    192c:	7e a9       	ldd	r23, Y+54	; 0x36
    192e:	8f a9       	ldd	r24, Y+55	; 0x37
    1930:	98 ad       	ldd	r25, Y+56	; 0x38
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a e7       	ldi	r20, 0x7A	; 122
    1938:	55 e4       	ldi	r21, 0x45	; 69
    193a:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	89 ab       	std	Y+49, r24	; 0x31
    1944:	9a ab       	std	Y+50, r25	; 0x32
    1946:	ab ab       	std	Y+51, r26	; 0x33
    1948:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    194a:	69 a9       	ldd	r22, Y+49	; 0x31
    194c:	7a a9       	ldd	r23, Y+50	; 0x32
    194e:	8b a9       	ldd	r24, Y+51	; 0x33
    1950:	9c a9       	ldd	r25, Y+52	; 0x34
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	2c f4       	brge	.+10     	; 0x196c <imu+0xfd0>
		__ticks = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	98 ab       	std	Y+48, r25	; 0x30
    1968:	8f a7       	std	Y+47, r24	; 0x2f
    196a:	3f c0       	rjmp	.+126    	; 0x19ea <imu+0x104e>
	else if (__tmp > 65535)
    196c:	69 a9       	ldd	r22, Y+49	; 0x31
    196e:	7a a9       	ldd	r23, Y+50	; 0x32
    1970:	8b a9       	ldd	r24, Y+51	; 0x33
    1972:	9c a9       	ldd	r25, Y+52	; 0x34
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	4c f5       	brge	.+82     	; 0x19d6 <imu+0x103a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1984:	6d a9       	ldd	r22, Y+53	; 0x35
    1986:	7e a9       	ldd	r23, Y+54	; 0x36
    1988:	8f a9       	ldd	r24, Y+55	; 0x37
    198a:	98 ad       	ldd	r25, Y+56	; 0x38
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	51 e4       	ldi	r21, 0x41	; 65
    1994:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	98 ab       	std	Y+48, r25	; 0x30
    19aa:	8f a7       	std	Y+47, r24	; 0x2f
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <imu+0x1030>
    19ae:	80 e9       	ldi	r24, 0x90	; 144
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	9e a7       	std	Y+46, r25	; 0x2e
    19b4:	8d a7       	std	Y+45, r24	; 0x2d
    19b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    19b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <imu+0x101e>
    19be:	9e a7       	std	Y+46, r25	; 0x2e
    19c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c4:	98 a9       	ldd	r25, Y+48	; 0x30
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ce:	98 a9       	ldd	r25, Y+48	; 0x30
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	69 f7       	brne	.-38     	; 0x19ae <imu+0x1012>
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <imu+0x1062>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d6:	69 a9       	ldd	r22, Y+49	; 0x31
    19d8:	7a a9       	ldd	r23, Y+50	; 0x32
    19da:	8b a9       	ldd	r24, Y+51	; 0x33
    19dc:	9c a9       	ldd	r25, Y+52	; 0x34
    19de:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	98 ab       	std	Y+48, r25	; 0x30
    19e8:	8f a7       	std	Y+47, r24	; 0x2f
    19ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ec:	98 a9       	ldd	r25, Y+48	; 0x30
    19ee:	9c a7       	std	Y+44, r25	; 0x2c
    19f0:	8b a7       	std	Y+43, r24	; 0x2b
    19f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <imu+0x105a>
    19fa:	9c a7       	std	Y+44, r25	; 0x2c
    19fc:	8b a7       	std	Y+43, r24	; 0x2b
 UDR2=0x00; _delay_ms(1);
    19fe:	e6 ed       	ldi	r30, 0xD6	; 214
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	10 82       	st	Z, r1
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a0 e8       	ldi	r26, 0x80	; 128
    1a0a:	bf e3       	ldi	r27, 0x3F	; 63
    1a0c:	8f a3       	std	Y+39, r24	; 0x27
    1a0e:	98 a7       	std	Y+40, r25	; 0x28
    1a10:	a9 a7       	std	Y+41, r26	; 0x29
    1a12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a14:	6f a1       	ldd	r22, Y+39	; 0x27
    1a16:	78 a5       	ldd	r23, Y+40	; 0x28
    1a18:	89 a5       	ldd	r24, Y+41	; 0x29
    1a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	4a e7       	ldi	r20, 0x7A	; 122
    1a22:	55 e4       	ldi	r21, 0x45	; 69
    1a24:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	8b a3       	std	Y+35, r24	; 0x23
    1a2e:	9c a3       	std	Y+36, r25	; 0x24
    1a30:	ad a3       	std	Y+37, r26	; 0x25
    1a32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a34:	6b a1       	ldd	r22, Y+35	; 0x23
    1a36:	7c a1       	ldd	r23, Y+36	; 0x24
    1a38:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e8       	ldi	r20, 0x80	; 128
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    1a48:	88 23       	and	r24, r24
    1a4a:	2c f4       	brge	.+10     	; 0x1a56 <imu+0x10ba>
		__ticks = 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9a a3       	std	Y+34, r25	; 0x22
    1a52:	89 a3       	std	Y+33, r24	; 0x21
    1a54:	3f c0       	rjmp	.+126    	; 0x1ad4 <imu+0x1138>
	else if (__tmp > 65535)
    1a56:	6b a1       	ldd	r22, Y+35	; 0x23
    1a58:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	4c f5       	brge	.+82     	; 0x1ac0 <imu+0x1124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a70:	78 a5       	ldd	r23, Y+40	; 0x28
    1a72:	89 a5       	ldd	r24, Y+41	; 0x29
    1a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e2       	ldi	r20, 0x20	; 32
    1a7c:	51 e4       	ldi	r21, 0x41	; 65
    1a7e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9a a3       	std	Y+34, r25	; 0x22
    1a94:	89 a3       	std	Y+33, r24	; 0x21
    1a96:	0f c0       	rjmp	.+30     	; 0x1ab6 <imu+0x111a>
    1a98:	80 e9       	ldi	r24, 0x90	; 144
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	98 a3       	std	Y+32, r25	; 0x20
    1a9e:	8f 8f       	std	Y+31, r24	; 0x1f
    1aa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aa2:	98 a1       	ldd	r25, Y+32	; 0x20
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <imu+0x1108>
    1aa8:	98 a3       	std	Y+32, r25	; 0x20
    1aaa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aac:	89 a1       	ldd	r24, Y+33	; 0x21
    1aae:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	69 f7       	brne	.-38     	; 0x1a98 <imu+0x10fc>
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <imu+0x114c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac8:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9a a3       	std	Y+34, r25	; 0x22
    1ad2:	89 a3       	std	Y+33, r24	; 0x21
    1ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad8:	9e 8f       	std	Y+30, r25	; 0x1e
    1ada:	8d 8f       	std	Y+29, r24	; 0x1d
    1adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ade:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <imu+0x1144>
    1ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae6:	8d 8f       	std	Y+29, r24	; 0x1d
 UDR2=0x01; _delay_ms(1);
    1ae8:	e6 ed       	ldi	r30, 0xD6	; 214
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 83       	st	Z, r24
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e8       	ldi	r26, 0x80	; 128
    1af6:	bf e3       	ldi	r27, 0x3F	; 63
    1af8:	89 8f       	std	Y+25, r24	; 0x19
    1afa:	9a 8f       	std	Y+26, r25	; 0x1a
    1afc:	ab 8f       	std	Y+27, r26	; 0x1b
    1afe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	69 8d       	ldd	r22, Y+25	; 0x19
    1b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	55 e4       	ldi	r21, 0x45	; 69
    1b10:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8d 8b       	std	Y+21, r24	; 0x15
    1b1a:	9e 8b       	std	Y+22, r25	; 0x16
    1b1c:	af 8b       	std	Y+23, r26	; 0x17
    1b1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b20:	6d 89       	ldd	r22, Y+21	; 0x15
    1b22:	7e 89       	ldd	r23, Y+22	; 0x16
    1b24:	8f 89       	ldd	r24, Y+23	; 0x17
    1b26:	98 8d       	ldd	r25, Y+24	; 0x18
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <imu+0x11a6>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <imu+0x1224>
	else if (__tmp > 65535)
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <imu+0x1210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <imu+0x1206>
    1b84:	80 e9       	ldi	r24, 0x90	; 144
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	89 8b       	std	Y+17, r24	; 0x11
    1b8c:	89 89       	ldd	r24, Y+17	; 0x11
    1b8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <imu+0x11f4>
    1b94:	9a 8b       	std	Y+18, r25	; 0x12
    1b96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <imu+0x11e8>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <imu+0x1238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9c 8b       	std	Y+20, r25	; 0x14
    1bbe:	8b 8b       	std	Y+19, r24	; 0x13
    1bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc4:	98 8b       	std	Y+16, r25	; 0x10
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
    1bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bca:	98 89       	ldd	r25, Y+16	; 0x10
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <imu+0x1230>
    1bd0:	98 8b       	std	Y+16, r25	; 0x10
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f
 UDR2=0xF1; _delay_ms(1);
    1bd4:	e6 ed       	ldi	r30, 0xD6	; 214
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	81 ef       	ldi	r24, 0xF1	; 241
    1bda:	80 83       	st	Z, r24
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e8       	ldi	r26, 0x80	; 128
    1be2:	bf e3       	ldi	r27, 0x3F	; 63
    1be4:	8b 87       	std	Y+11, r24	; 0x0b
    1be6:	9c 87       	std	Y+12, r25	; 0x0c
    1be8:	ad 87       	std	Y+13, r26	; 0x0d
    1bea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a e7       	ldi	r20, 0x7A	; 122
    1bfa:	55 e4       	ldi	r21, 0x45	; 69
    1bfc:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	8f 83       	std	Y+7, r24	; 0x07
    1c06:	98 87       	std	Y+8, r25	; 0x08
    1c08:	a9 87       	std	Y+9, r26	; 0x09
    1c0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <imu+0x1292>
		__ticks = 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <imu+0x1310>
	else if (__tmp > 65535)
    1c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c30:	78 85       	ldd	r23, Y+8	; 0x08
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	4c f5       	brge	.+82     	; 0x1c98 <imu+0x12fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <imu+0x12f2>
    1c70:	80 e9       	ldi	r24, 0x90	; 144
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	9c 83       	std	Y+4, r25	; 0x04
    1c76:	8b 83       	std	Y+3, r24	; 0x03
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <imu+0x12e0>
    1c80:	9c 83       	std	Y+4, r25	; 0x04
    1c82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <imu+0x12d4>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <imu+0x1324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9a:	78 85       	ldd	r23, Y+8	; 0x08
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <imu+0x131c>
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
}
    1cc0:	ce 52       	subi	r28, 0x2E	; 46
    1cc2:	df 4f       	sbci	r29, 0xFF	; 255
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	08 95       	ret

00001cd8 <uart0_init>:
 
void uart0_init(void) //Camera
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1ce0:	e1 ec       	ldi	r30, 0xC1	; 193
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1ce6:	e0 ec       	ldi	r30, 0xC0	; 192
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    1cec:	e2 ec       	ldi	r30, 0xC2	; 194
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	86 e0       	ldi	r24, 0x06	; 6
    1cf2:	80 83       	st	Z, r24
 UBRR0L = 0x19; //set baud rate 38400
    1cf4:	e4 ec       	ldi	r30, 0xC4	; 196
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	89 e1       	ldi	r24, 0x19	; 25
    1cfa:	80 83       	st	Z, r24
 UBRR0H = 0x00; 
    1cfc:	e5 ec       	ldi	r30, 0xC5	; 197
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	10 82       	st	Z, r1
 UCSR0B = 0b10011000; //송수신
    1d02:	e1 ec       	ldi	r30, 0xC1	; 193
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	88 e9       	ldi	r24, 0x98	; 152
    1d08:	80 83       	st	Z, r24
}
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <uart1_init>:

void uart1_init(void) // BlueTooth
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
 UCSR1B = 0x00; //disable while setting baud rate
    1d18:	e9 ec       	ldi	r30, 0xC9	; 201
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	10 82       	st	Z, r1
 UCSR1A = 0x00;
    1d1e:	e8 ec       	ldi	r30, 0xC8	; 200
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	10 82       	st	Z, r1
 UCSR1C = 0x06;
    1d24:	ea ec       	ldi	r30, 0xCA	; 202
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	80 83       	st	Z, r24
 UBRR1L = 0x08; //set baud rate 115200
    1d2c:	ec ec       	ldi	r30, 0xCC	; 204
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	88 e0       	ldi	r24, 0x08	; 8
    1d32:	80 83       	st	Z, r24
 //UBRR1L = 0x19; //set baud rate 38400
 //UBRR1L = 0x67; //set baud rate 9600
 UBRR1H = 0x00; 
    1d34:	ed ec       	ldi	r30, 0xCD	; 205
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	10 82       	st	Z, r1
 UCSR1B = 0b10011000; //송수신
    1d3a:	e9 ec       	ldi	r30, 0xC9	; 201
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	88 e9       	ldi	r24, 0x98	; 152
    1d40:	80 83       	st	Z, r24
}
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <uart2_init>:

void uart2_init(void) //IMU
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00; //disable while setting baud rate
    1d50:	e1 ed       	ldi	r30, 0xD1	; 209
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    1d56:	e0 ed       	ldi	r30, 0xD0	; 208
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	10 82       	st	Z, r1
 UCSR2C = 0x06;
    1d5c:	e2 ed       	ldi	r30, 0xD2	; 210
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	86 e0       	ldi	r24, 0x06	; 6
    1d62:	80 83       	st	Z, r24
 UBRR2L = 0x08; //set baud rate 115200
    1d64:	e4 ed       	ldi	r30, 0xD4	; 212
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	88 e0       	ldi	r24, 0x08	; 8
    1d6a:	80 83       	st	Z, r24
 UBRR2H = 0x00; 
    1d6c:	e5 ed       	ldi	r30, 0xD5	; 213
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	10 82       	st	Z, r1
 UCSR2B = 0b10011000; //송수신
    1d72:	e1 ed       	ldi	r30, 0xD1	; 209
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	88 e9       	ldi	r24, 0x98	; 152
    1d78:	80 83       	st	Z, r24
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <uart3_init>:

void uart3_init(void) //GPS
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
 UCSR3B = 0x00; //disable while setting baud rate
    1d88:	e1 e3       	ldi	r30, 0x31	; 49
    1d8a:	f1 e0       	ldi	r31, 0x01	; 1
    1d8c:	10 82       	st	Z, r1
 UCSR3A = 0x00;
    1d8e:	e0 e3       	ldi	r30, 0x30	; 48
    1d90:	f1 e0       	ldi	r31, 0x01	; 1
    1d92:	10 82       	st	Z, r1
 UCSR3C = 0x06;
    1d94:	e2 e3       	ldi	r30, 0x32	; 50
    1d96:	f1 e0       	ldi	r31, 0x01	; 1
    1d98:	86 e0       	ldi	r24, 0x06	; 6
    1d9a:	80 83       	st	Z, r24
 UBRR3L = 0x67;	  //set baud rate 9600
    1d9c:	e4 e3       	ldi	r30, 0x34	; 52
    1d9e:	f1 e0       	ldi	r31, 0x01	; 1
    1da0:	87 e6       	ldi	r24, 0x67	; 103
    1da2:	80 83       	st	Z, r24
 UBRR3H = 0x00; 
    1da4:	e5 e3       	ldi	r30, 0x35	; 53
    1da6:	f1 e0       	ldi	r31, 0x01	; 1
    1da8:	10 82       	st	Z, r1
 UCSR3B = 0b10011000; //송수신
    1daa:	e1 e3       	ldi	r30, 0x31	; 49
    1dac:	f1 e0       	ldi	r31, 0x01	; 1
    1dae:	88 e9       	ldi	r24, 0x98	; 152
    1db0:	80 83       	st	Z, r24
}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <init_camera>:

void init_camera()
{
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	c6 54       	subi	r28, 0x46	; 70
    1dc6:	d0 40       	sbci	r29, 0x00	; 0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
	reset();	_delay_ms(10);
    1dd2:	0e 94 1b 01 	call	0x236	; 0x236 <reset>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	ed 5b       	subi	r30, 0xBD	; 189
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e2       	ldi	r26, 0x20	; 32
    1de2:	b1 e4       	ldi	r27, 0x41	; 65
    1de4:	80 83       	st	Z, r24
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	a2 83       	std	Z+2, r26	; 0x02
    1dea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dec:	8e 01       	movw	r16, r28
    1dee:	01 5c       	subi	r16, 0xC1	; 193
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	fe 01       	movw	r30, r28
    1df4:	ed 5b       	subi	r30, 0xBD	; 189
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	60 81       	ld	r22, Z
    1dfa:	71 81       	ldd	r23, Z+1	; 0x01
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4a e7       	ldi	r20, 0x7A	; 122
    1e06:	55 e4       	ldi	r21, 0x45	; 69
    1e08:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	f8 01       	movw	r30, r16
    1e12:	80 83       	st	Z, r24
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	a2 83       	std	Z+2, r26	; 0x02
    1e18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ff 96       	adiw	r30, 0x3f	; 63
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	2c f4       	brge	.+10     	; 0x1e40 <init_camera+0x88>
		__ticks = 1;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9e af       	std	Y+62, r25	; 0x3e
    1e3c:	8d af       	std	Y+61, r24	; 0x3d
    1e3e:	46 c0       	rjmp	.+140    	; 0x1ecc <init_camera+0x114>
	else if (__tmp > 65535)
    1e40:	fe 01       	movw	r30, r28
    1e42:	ff 96       	adiw	r30, 0x3f	; 63
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	64 f5       	brge	.+88     	; 0x1eb4 <init_camera+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ed 5b       	subi	r30, 0xBD	; 189
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e af       	std	Y+62, r25	; 0x3e
    1e88:	8d af       	std	Y+61, r24	; 0x3d
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <init_camera+0xf2>
    1e8c:	80 e9       	ldi	r24, 0x90	; 144
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	9c af       	std	Y+60, r25	; 0x3c
    1e92:	8b af       	std	Y+59, r24	; 0x3b
    1e94:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e96:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <init_camera+0xe0>
    1e9c:	9c af       	std	Y+60, r25	; 0x3c
    1e9e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	9e af       	std	Y+62, r25	; 0x3e
    1ea8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <init_camera+0xd4>
    1eb2:	16 c0       	rjmp	.+44     	; 0x1ee0 <init_camera+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ff 96       	adiw	r30, 0x3f	; 63
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9e af       	std	Y+62, r25	; 0x3e
    1eca:	8d af       	std	Y+61, r24	; 0x3d
    1ecc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ece:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed0:	9a af       	std	Y+58, r25	; 0x3a
    1ed2:	89 af       	std	Y+57, r24	; 0x39
    1ed4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ed6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <init_camera+0x120>
    1edc:	9a af       	std	Y+58, r25	; 0x3a
    1ede:	89 af       	std	Y+57, r24	; 0x39
	resize();	_delay_ms(10);
    1ee0:	0e 94 32 01 	call	0x264	; 0x264 <resize>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e2       	ldi	r26, 0x20	; 32
    1eea:	b1 e4       	ldi	r27, 0x41	; 65
    1eec:	8d ab       	std	Y+53, r24	; 0x35
    1eee:	9e ab       	std	Y+54, r25	; 0x36
    1ef0:	af ab       	std	Y+55, r26	; 0x37
    1ef2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef8:	8f a9       	ldd	r24, Y+55	; 0x37
    1efa:	98 ad       	ldd	r25, Y+56	; 0x38
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a e7       	ldi	r20, 0x7A	; 122
    1f02:	55 e4       	ldi	r21, 0x45	; 69
    1f04:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	89 ab       	std	Y+49, r24	; 0x31
    1f0e:	9a ab       	std	Y+50, r25	; 0x32
    1f10:	ab ab       	std	Y+51, r26	; 0x33
    1f12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f14:	69 a9       	ldd	r22, Y+49	; 0x31
    1f16:	7a a9       	ldd	r23, Y+50	; 0x32
    1f18:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <init_camera+0x17e>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	98 ab       	std	Y+48, r25	; 0x30
    1f32:	8f a7       	std	Y+47, r24	; 0x2f
    1f34:	3f c0       	rjmp	.+126    	; 0x1fb4 <init_camera+0x1fc>
	else if (__tmp > 65535)
    1f36:	69 a9       	ldd	r22, Y+49	; 0x31
    1f38:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	4c f5       	brge	.+82     	; 0x1fa0 <init_camera+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f50:	7e a9       	ldd	r23, Y+54	; 0x36
    1f52:	8f a9       	ldd	r24, Y+55	; 0x37
    1f54:	98 ad       	ldd	r25, Y+56	; 0x38
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	98 ab       	std	Y+48, r25	; 0x30
    1f74:	8f a7       	std	Y+47, r24	; 0x2f
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <init_camera+0x1de>
    1f78:	80 e9       	ldi	r24, 0x90	; 144
    1f7a:	91 e0       	ldi	r25, 0x01	; 1
    1f7c:	9e a7       	std	Y+46, r25	; 0x2e
    1f7e:	8d a7       	std	Y+45, r24	; 0x2d
    1f80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <init_camera+0x1cc>
    1f88:	9e a7       	std	Y+46, r25	; 0x2e
    1f8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	98 ab       	std	Y+48, r25	; 0x30
    1f94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f98:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <init_camera+0x1c0>
    1f9e:	14 c0       	rjmp	.+40     	; 0x1fc8 <init_camera+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa8:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	98 ab       	std	Y+48, r25	; 0x30
    1fb2:	8f a7       	std	Y+47, r24	; 0x2f
    1fb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb8:	9c a7       	std	Y+44, r25	; 0x2c
    1fba:	8b a7       	std	Y+43, r24	; 0x2b
    1fbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <init_camera+0x208>
    1fc4:	9c a7       	std	Y+44, r25	; 0x2c
    1fc6:	8b a7       	std	Y+43, r24	; 0x2b
	zip();		_delay_ms(10);
    1fc8:	0e 94 a8 04 	call	0x950	; 0x950 <zip>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e2       	ldi	r26, 0x20	; 32
    1fd2:	b1 e4       	ldi	r27, 0x41	; 65
    1fd4:	8f a3       	std	Y+39, r24	; 0x27
    1fd6:	98 a7       	std	Y+40, r25	; 0x28
    1fd8:	a9 a7       	std	Y+41, r26	; 0x29
    1fda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6f a1       	ldd	r22, Y+39	; 0x27
    1fde:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a e7       	ldi	r20, 0x7A	; 122
    1fea:	55 e4       	ldi	r21, 0x45	; 69
    1fec:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8b a3       	std	Y+35, r24	; 0x23
    1ff6:	9c a3       	std	Y+36, r25	; 0x24
    1ff8:	ad a3       	std	Y+37, r26	; 0x25
    1ffa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ffc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    2000:	8d a1       	ldd	r24, Y+37	; 0x25
    2002:	9e a1       	ldd	r25, Y+38	; 0x26
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <init_camera+0x266>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9a a3       	std	Y+34, r25	; 0x22
    201a:	89 a3       	std	Y+33, r24	; 0x21
    201c:	3f c0       	rjmp	.+126    	; 0x209c <init_camera+0x2e4>
	else if (__tmp > 65535)
    201e:	6b a1       	ldd	r22, Y+35	; 0x23
    2020:	7c a1       	ldd	r23, Y+36	; 0x24
    2022:	8d a1       	ldd	r24, Y+37	; 0x25
    2024:	9e a1       	ldd	r25, Y+38	; 0x26
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <init_camera+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6f a1       	ldd	r22, Y+39	; 0x27
    2038:	78 a5       	ldd	r23, Y+40	; 0x28
    203a:	89 a5       	ldd	r24, Y+41	; 0x29
    203c:	9a a5       	ldd	r25, Y+42	; 0x2a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9a a3       	std	Y+34, r25	; 0x22
    205c:	89 a3       	std	Y+33, r24	; 0x21
    205e:	0f c0       	rjmp	.+30     	; 0x207e <init_camera+0x2c6>
    2060:	80 e9       	ldi	r24, 0x90	; 144
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	98 a3       	std	Y+32, r25	; 0x20
    2066:	8f 8f       	std	Y+31, r24	; 0x1f
    2068:	8f 8d       	ldd	r24, Y+31	; 0x1f
    206a:	98 a1       	ldd	r25, Y+32	; 0x20
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <init_camera+0x2b4>
    2070:	98 a3       	std	Y+32, r25	; 0x20
    2072:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	89 a1       	ldd	r24, Y+33	; 0x21
    2076:	9a a1       	ldd	r25, Y+34	; 0x22
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9a a3       	std	Y+34, r25	; 0x22
    207c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	89 a1       	ldd	r24, Y+33	; 0x21
    2080:	9a a1       	ldd	r25, Y+34	; 0x22
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <init_camera+0x2a8>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <init_camera+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6b a1       	ldd	r22, Y+35	; 0x23
    208a:	7c a1       	ldd	r23, Y+36	; 0x24
    208c:	8d a1       	ldd	r24, Y+37	; 0x25
    208e:	9e a1       	ldd	r25, Y+38	; 0x26
    2090:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9a a3       	std	Y+34, r25	; 0x22
    209a:	89 a3       	std	Y+33, r24	; 0x21
    209c:	89 a1       	ldd	r24, Y+33	; 0x21
    209e:	9a a1       	ldd	r25, Y+34	; 0x22
    20a0:	9e 8f       	std	Y+30, r25	; 0x1e
    20a2:	8d 8f       	std	Y+29, r24	; 0x1d
    20a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <init_camera+0x2f0>
    20ac:	9e 8f       	std	Y+30, r25	; 0x1e
    20ae:	8d 8f       	std	Y+29, r24	; 0x1d
	set_rate();	_delay_ms(10);
    20b0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <set_rate>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a0 e2       	ldi	r26, 0x20	; 32
    20ba:	b1 e4       	ldi	r27, 0x41	; 65
    20bc:	89 8f       	std	Y+25, r24	; 0x19
    20be:	9a 8f       	std	Y+26, r25	; 0x1a
    20c0:	ab 8f       	std	Y+27, r26	; 0x1b
    20c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c4:	69 8d       	ldd	r22, Y+25	; 0x19
    20c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a e7       	ldi	r20, 0x7A	; 122
    20d2:	55 e4       	ldi	r21, 0x45	; 69
    20d4:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8d 8b       	std	Y+21, r24	; 0x15
    20de:	9e 8b       	std	Y+22, r25	; 0x16
    20e0:	af 8b       	std	Y+23, r26	; 0x17
    20e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20e4:	6d 89       	ldd	r22, Y+21	; 0x15
    20e6:	7e 89       	ldd	r23, Y+22	; 0x16
    20e8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ea:	98 8d       	ldd	r25, Y+24	; 0x18
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5f e3       	ldi	r21, 0x3F	; 63
    20f4:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <init_camera+0x34e>
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
    2104:	3f c0       	rjmp	.+126    	; 0x2184 <init_camera+0x3cc>
	else if (__tmp > 65535)
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	4f e7       	ldi	r20, 0x7F	; 127
    2114:	57 e4       	ldi	r21, 0x47	; 71
    2116:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    211a:	18 16       	cp	r1, r24
    211c:	4c f5       	brge	.+82     	; 0x2170 <init_camera+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211e:	69 8d       	ldd	r22, Y+25	; 0x19
    2120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	8b 8b       	std	Y+19, r24	; 0x13
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <init_camera+0x3ae>
    2148:	80 e9       	ldi	r24, 0x90	; 144
    214a:	91 e0       	ldi	r25, 0x01	; 1
    214c:	9a 8b       	std	Y+18, r25	; 0x12
    214e:	89 8b       	std	Y+17, r24	; 0x11
    2150:	89 89       	ldd	r24, Y+17	; 0x11
    2152:	9a 89       	ldd	r25, Y+18	; 0x12
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <init_camera+0x39c>
    2158:	9a 8b       	std	Y+18, r25	; 0x12
    215a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215c:	8b 89       	ldd	r24, Y+19	; 0x13
    215e:	9c 89       	ldd	r25, Y+20	; 0x14
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	69 f7       	brne	.-38     	; 0x2148 <init_camera+0x390>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <init_camera+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	6d 89       	ldd	r22, Y+21	; 0x15
    2172:	7e 89       	ldd	r23, Y+22	; 0x16
    2174:	8f 89       	ldd	r24, Y+23	; 0x17
    2176:	98 8d       	ldd	r25, Y+24	; 0x18
    2178:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	8b 89       	ldd	r24, Y+19	; 0x13
    2186:	9c 89       	ldd	r25, Y+20	; 0x14
    2188:	98 8b       	std	Y+16, r25	; 0x10
    218a:	8f 87       	std	Y+15, r24	; 0x0f
    218c:	8f 85       	ldd	r24, Y+15	; 0x0f
    218e:	98 89       	ldd	r25, Y+16	; 0x10
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <init_camera+0x3d8>
    2194:	98 8b       	std	Y+16, r25	; 0x10
    2196:	8f 87       	std	Y+15, r24	; 0x0f
	UBRR0L = 0x08; _delay_ms(100);	//Camera baud rate 115200
    2198:	e4 ec       	ldi	r30, 0xC4	; 196
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	88 e0       	ldi	r24, 0x08	; 8
    219e:	80 83       	st	Z, r24
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a8 ec       	ldi	r26, 0xC8	; 200
    21a6:	b2 e4       	ldi	r27, 0x42	; 66
    21a8:	8b 87       	std	Y+11, r24	; 0x0b
    21aa:	9c 87       	std	Y+12, r25	; 0x0c
    21ac:	ad 87       	std	Y+13, r26	; 0x0d
    21ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a e7       	ldi	r20, 0x7A	; 122
    21be:	55 e4       	ldi	r21, 0x45	; 69
    21c0:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	8f 83       	std	Y+7, r24	; 0x07
    21ca:	98 87       	std	Y+8, r25	; 0x08
    21cc:	a9 87       	std	Y+9, r26	; 0x09
    21ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <init_camera+0x43a>
		__ticks = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
    21f0:	3f c0       	rjmp	.+126    	; 0x2270 <__stack+0x71>
	else if (__tmp > 65535)
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	4f e7       	ldi	r20, 0x7F	; 127
    2200:	57 e4       	ldi	r21, 0x47	; 71
    2202:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    2206:	18 16       	cp	r1, r24
    2208:	4c f5       	brge	.+82     	; 0x225c <__stack+0x5d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220a:	6b 85       	ldd	r22, Y+11	; 0x0b
    220c:	7c 85       	ldd	r23, Y+12	; 0x0c
    220e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2210:	9e 85       	ldd	r25, Y+14	; 0x0e
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <__stack+0x53>
    2234:	80 e9       	ldi	r24, 0x90	; 144
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	8b 83       	std	Y+3, r24	; 0x03
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <__stack+0x41>
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	9e 81       	ldd	r25, Y+6	; 0x06
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	69 f7       	brne	.-38     	; 0x2234 <__stack+0x35>
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <__stack+0x85>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	8d 81       	ldd	r24, Y+5	; 0x05
    2272:	9e 81       	ldd	r25, Y+6	; 0x06
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <__stack+0x7d>
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
}
    2284:	ca 5b       	subi	r28, 0xBA	; 186
    2286:	df 4f       	sbci	r29, 0xFF	; 255
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	08 95       	ret

0000229c <init_devices>:

void init_devices(void)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
  cli();						 //disable all interrupts
    22a4:	f8 94       	cli
  port_init();
    22a6:	0e 94 ac 00 	call	0x158	; 0x158 <port_init>
  uart0_init();  
    22aa:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <uart0_init>
  uart1_init();
    22ae:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <uart1_init>
  uart2_init();
    22b2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <uart2_init>
  uart3_init();
    22b6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <uart3_init>
  fdevopen(Putchar, Getchar);	//file stream 0
    22ba:	8b ed       	ldi	r24, 0xDB	; 219
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	24 e0       	ldi	r18, 0x04	; 4
    22c0:	31 e0       	ldi	r19, 0x01	; 1
    22c2:	b9 01       	movw	r22, r18
    22c4:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <fdevopen>
  sei();  
    22c8:	78 94       	sei
  init_camera();
    22ca:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <init_camera>

	/* 모터용 레지스터 설정 - 0725추가 YAW */
  	
	
	DDRB = 0x00;	//B포트 4 - YAW , 6 - PITCH 출력설정 -> s를 누르면 토크가 들어가도록 수정
    22ce:	e4 e2       	ldi	r30, 0x24	; 36
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	10 82       	st	Z, r1
}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <init_buffer>:
 

void init_buffer(int select)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <init_buffer+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <init_buffer+0x8>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	switch(select)
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	91 05       	cpc	r25, r1
    22fa:	49 f1       	breq	.+82     	; 0x234e <init_buffer+0x74>
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	83 30       	cpi	r24, 0x03	; 3
    2302:	91 05       	cpc	r25, r1
    2304:	2c f4       	brge	.+10     	; 0x2310 <init_buffer+0x36>
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	61 f0       	breq	.+24     	; 0x2326 <init_buffer+0x4c>
    230e:	53 c0       	rjmp	.+166    	; 0x23b6 <init_buffer+0xdc>
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	83 30       	cpi	r24, 0x03	; 3
    2316:	91 05       	cpc	r25, r1
    2318:	71 f1       	breq	.+92     	; 0x2376 <init_buffer+0x9c>
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	84 30       	cpi	r24, 0x04	; 4
    2320:	91 05       	cpc	r25, r1
    2322:	e9 f1       	breq	.+122    	; 0x239e <init_buffer+0xc4>
    2324:	48 c0       	rjmp	.+144    	; 0x23b6 <init_buffer+0xdc>
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    2326:	1a 82       	std	Y+2, r1	; 0x02
    2328:	19 82       	std	Y+1, r1	; 0x01
    232a:	0b c0       	rjmp	.+22     	; 0x2342 <init_buffer+0x68>
			img_buffer[i] = 0x00;
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	fc 01       	movw	r30, r24
    2332:	e4 54       	subi	r30, 0x44	; 68
    2334:	fd 4f       	sbci	r31, 0xFD	; 253
    2336:	10 82       	st	Z, r1
	int i;
	
	switch(select)
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	89 30       	cpi	r24, 0x09	; 9
    2348:	91 05       	cpc	r25, r1
    234a:	84 f3       	brlt	.-32     	; 0x232c <init_buffer+0x52>
    234c:	34 c0       	rjmp	.+104    	; 0x23b6 <init_buffer+0xdc>
			img_buffer[i] = 0x00;
		break;
	case IMU :
		for(i=0; i<MAX_BUFFER_SIZE; i++)
    234e:	1a 82       	std	Y+2, r1	; 0x02
    2350:	19 82       	std	Y+1, r1	; 0x01
    2352:	0b c0       	rjmp	.+22     	; 0x236a <init_buffer+0x90>
			imu_buffer[i] = 0x00;
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	fc 01       	movw	r30, r24
    235a:	e0 5b       	subi	r30, 0xB0	; 176
    235c:	fd 4f       	sbci	r31, 0xFD	; 253
    235e:	10 82       	st	Z, r1
	case CAMERA:	//0
		for(i=0; i<9; i++)
			img_buffer[i] = 0x00;
		break;
	case IMU :
		for(i=0; i<MAX_BUFFER_SIZE; i++)
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	80 35       	cpi	r24, 0x50	; 80
    2370:	91 05       	cpc	r25, r1
    2372:	84 f3       	brlt	.-32     	; 0x2354 <init_buffer+0x7a>
    2374:	20 c0       	rjmp	.+64     	; 0x23b6 <init_buffer+0xdc>
			imu_buffer[i] = 0x00;
		break;
	case GPS:
		for(i=0; i<MAX_BUFFER_SIZE; i++)
    2376:	1a 82       	std	Y+2, r1	; 0x02
    2378:	19 82       	std	Y+1, r1	; 0x01
    237a:	0b c0       	rjmp	.+22     	; 0x2392 <init_buffer+0xb8>
			gps_buffer[i] = 0x00;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	fc 01       	movw	r30, r24
    2382:	e0 50       	subi	r30, 0x00	; 0
    2384:	fe 4f       	sbci	r31, 0xFE	; 254
    2386:	10 82       	st	Z, r1
	case IMU :
		for(i=0; i<MAX_BUFFER_SIZE; i++)
			imu_buffer[i] = 0x00;
		break;
	case GPS:
		for(i=0; i<MAX_BUFFER_SIZE; i++)
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	9a 81       	ldd	r25, Y+2	; 0x02
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	80 35       	cpi	r24, 0x50	; 80
    2398:	91 05       	cpc	r25, r1
    239a:	84 f3       	brlt	.-32     	; 0x237c <init_buffer+0xa2>
    239c:	0c c0       	rjmp	.+24     	; 0x23b6 <init_buffer+0xdc>
			gps_buffer[i] = 0x00;
		break;
	case ECT:
		gps_buffer_flag = 0;
    239e:	10 92 5a 04 	sts	0x045A, r1
		imu_buffer_flag = 0;
    23a2:	10 92 5b 04 	sts	0x045B, r1
		gps_load_flag = 0;
    23a6:	10 92 5c 04 	sts	0x045C, r1
		imu_load_flag = 0;
    23aa:	10 92 5d 04 	sts	0x045D, r1
		gps_buffer_cnt = 0;
    23ae:	10 92 5e 04 	sts	0x045E, r1
		imu_buffer_cnt = 0;
    23b2:	10 92 5f 04 	sts	0x045F, r1
		break;
	}
}
    23b6:	26 96       	adiw	r28, 0x06	; 6
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <passing_imu>:

void passing_imu(void){
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
	value[0] = (int)imu_buffer[7] << 8;
    23d0:	80 91 57 02 	lds	r24, 0x0257
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	98 2f       	mov	r25, r24
    23da:	88 27       	eor	r24, r24
    23dc:	90 93 51 04 	sts	0x0451, r25
    23e0:	80 93 50 04 	sts	0x0450, r24
	value[0] |= (int)imu_buffer[8];
    23e4:	20 91 50 04 	lds	r18, 0x0450
    23e8:	30 91 51 04 	lds	r19, 0x0451
    23ec:	80 91 58 02 	lds	r24, 0x0258
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	82 2b       	or	r24, r18
    23f6:	93 2b       	or	r25, r19
    23f8:	90 93 51 04 	sts	0x0451, r25
    23fc:	80 93 50 04 	sts	0x0450, r24
	value[1] = (int)imu_buffer[9] << 8;
    2400:	80 91 59 02 	lds	r24, 0x0259
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	98 2f       	mov	r25, r24
    240a:	88 27       	eor	r24, r24
    240c:	90 93 53 04 	sts	0x0453, r25
    2410:	80 93 52 04 	sts	0x0452, r24
	value[1] |= (int)imu_buffer[10];
    2414:	20 91 52 04 	lds	r18, 0x0452
    2418:	30 91 53 04 	lds	r19, 0x0453
    241c:	80 91 5a 02 	lds	r24, 0x025A
    2420:	88 2f       	mov	r24, r24
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	82 2b       	or	r24, r18
    2426:	93 2b       	or	r25, r19
    2428:	90 93 53 04 	sts	0x0453, r25
    242c:	80 93 52 04 	sts	0x0452, r24
	value[2] = (int)imu_buffer[11] << 8;
    2430:	80 91 5b 02 	lds	r24, 0x025B
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	98 2f       	mov	r25, r24
    243a:	88 27       	eor	r24, r24
    243c:	90 93 55 04 	sts	0x0455, r25
    2440:	80 93 54 04 	sts	0x0454, r24
	value[2] |= (int)imu_buffer[12];
    2444:	20 91 54 04 	lds	r18, 0x0454
    2448:	30 91 55 04 	lds	r19, 0x0455
    244c:	80 91 5c 02 	lds	r24, 0x025C
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	82 2b       	or	r24, r18
    2456:	93 2b       	or	r25, r19
    2458:	90 93 55 04 	sts	0x0455, r25
    245c:	80 93 54 04 	sts	0x0454, r24
	imu_buffer_flag = 0;
    2460:	10 92 5b 04 	sts	0x045B, r1
}
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <passing_gps>:


void passing_gps(void){
    246a:	ef 92       	push	r14
    246c:	ff 92       	push	r15
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	28 97       	sbiw	r28, 0x08	; 8
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
	
	char buffer[6] = "";
    2486:	1b 82       	std	Y+3, r1	; 0x03
    2488:	1c 82       	std	Y+4, r1	; 0x04
    248a:	1d 82       	std	Y+5, r1	; 0x05
    248c:	1e 82       	std	Y+6, r1	; 0x06
    248e:	18 86       	std	Y+8, r1	; 0x08
    2490:	1f 82       	std	Y+7, r1	; 0x07
	int i = 0;
    2492:	1a 82       	std	Y+2, r1	; 0x02
    2494:	19 82       	std	Y+1, r1	; 0x01
	altitude = 0;
    2496:	10 92 b9 02 	sts	0x02B9, r1
    249a:	10 92 b8 02 	sts	0x02B8, r1

	dnleh_eh =   (gps_buffer[17]-'0')*10
    249e:	80 91 11 02 	lds	r24, 0x0211
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9c 01       	movw	r18, r24
    24a8:	22 0f       	add	r18, r18
    24aa:	33 1f       	adc	r19, r19
    24ac:	c9 01       	movw	r24, r18
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	82 0f       	add	r24, r18
    24b8:	93 1f       	adc	r25, r19
    24ba:	9c 01       	movw	r18, r24
    24bc:	20 5e       	subi	r18, 0xE0	; 224
    24be:	31 40       	sbci	r19, 0x01	; 1
    24c0:	80 91 12 02 	lds	r24, 0x0212
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	c0 97       	sbiw	r24, 0x30	; 48
    24ca:	82 0f       	add	r24, r18
    24cc:	93 1f       	adc	r25, r19
    24ce:	90 93 81 04 	sts	0x0481, r25
    24d2:	80 93 80 04 	sts	0x0480, r24
				+(gps_buffer[18]-'0')*1;

	dnleh_qns =	 (gps_buffer[19]-'0')*1000000
    24d6:	80 91 13 02 	lds	r24, 0x0213
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	c0 97       	sbiw	r24, 0x30	; 48
    24e0:	aa 27       	eor	r26, r26
    24e2:	97 fd       	sbrc	r25, 7
    24e4:	a0 95       	com	r26
    24e6:	ba 2f       	mov	r27, r26
    24e8:	20 e4       	ldi	r18, 0x40	; 64
    24ea:	32 e4       	ldi	r19, 0x42	; 66
    24ec:	4f e0       	ldi	r20, 0x0F	; 15
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 44 27 	call	0x4e88	; 0x4e88 <__mulsi3>
    24f8:	7b 01       	movw	r14, r22
    24fa:	8c 01       	movw	r16, r24
    24fc:	80 91 14 02 	lds	r24, 0x0214
    2500:	88 2f       	mov	r24, r24
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	c0 97       	sbiw	r24, 0x30	; 48
    2506:	aa 27       	eor	r26, r26
    2508:	97 fd       	sbrc	r25, 7
    250a:	a0 95       	com	r26
    250c:	ba 2f       	mov	r27, r26
    250e:	20 ea       	ldi	r18, 0xA0	; 160
    2510:	36 e8       	ldi	r19, 0x86	; 134
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 44 27 	call	0x4e88	; 0x4e88 <__mulsi3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	b8 01       	movw	r22, r16
    2524:	a7 01       	movw	r20, r14
    2526:	48 0f       	add	r20, r24
    2528:	59 1f       	adc	r21, r25
    252a:	6a 1f       	adc	r22, r26
    252c:	7b 1f       	adc	r23, r27
    252e:	80 91 16 02 	lds	r24, 0x0216
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9c 01       	movw	r18, r24
    2538:	20 53       	subi	r18, 0x30	; 48
    253a:	30 40       	sbci	r19, 0x00	; 0
    253c:	80 e1       	ldi	r24, 0x10	; 16
    253e:	97 e2       	ldi	r25, 0x27	; 39
    2540:	fc 01       	movw	r30, r24
    2542:	2e 9f       	mul	r18, r30
    2544:	c0 01       	movw	r24, r0
    2546:	2f 9f       	mul	r18, r31
    2548:	90 0d       	add	r25, r0
    254a:	3e 9f       	mul	r19, r30
    254c:	90 0d       	add	r25, r0
    254e:	11 24       	eor	r1, r1
    2550:	aa 27       	eor	r26, r26
    2552:	97 fd       	sbrc	r25, 7
    2554:	a0 95       	com	r26
    2556:	ba 2f       	mov	r27, r26
    2558:	48 0f       	add	r20, r24
    255a:	59 1f       	adc	r21, r25
    255c:	6a 1f       	adc	r22, r26
    255e:	7b 1f       	adc	r23, r27
    2560:	80 91 17 02 	lds	r24, 0x0217
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9c 01       	movw	r18, r24
    256a:	20 53       	subi	r18, 0x30	; 48
    256c:	30 40       	sbci	r19, 0x00	; 0
    256e:	88 ee       	ldi	r24, 0xE8	; 232
    2570:	93 e0       	ldi	r25, 0x03	; 3
    2572:	fc 01       	movw	r30, r24
    2574:	2e 9f       	mul	r18, r30
    2576:	c0 01       	movw	r24, r0
    2578:	2f 9f       	mul	r18, r31
    257a:	90 0d       	add	r25, r0
    257c:	3e 9f       	mul	r19, r30
    257e:	90 0d       	add	r25, r0
    2580:	11 24       	eor	r1, r1
    2582:	aa 27       	eor	r26, r26
    2584:	97 fd       	sbrc	r25, 7
    2586:	a0 95       	com	r26
    2588:	ba 2f       	mov	r27, r26
    258a:	48 0f       	add	r20, r24
    258c:	59 1f       	adc	r21, r25
    258e:	6a 1f       	adc	r22, r26
    2590:	7b 1f       	adc	r23, r27
    2592:	80 91 18 02 	lds	r24, 0x0218
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	84 e6       	ldi	r24, 0x64	; 100
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	fc 01       	movw	r30, r24
    25a0:	2e 9f       	mul	r18, r30
    25a2:	c0 01       	movw	r24, r0
    25a4:	2f 9f       	mul	r18, r31
    25a6:	90 0d       	add	r25, r0
    25a8:	3e 9f       	mul	r19, r30
    25aa:	90 0d       	add	r25, r0
    25ac:	11 24       	eor	r1, r1
    25ae:	80 5c       	subi	r24, 0xC0	; 192
    25b0:	92 41       	sbci	r25, 0x12	; 18
    25b2:	aa 27       	eor	r26, r26
    25b4:	97 fd       	sbrc	r25, 7
    25b6:	a0 95       	com	r26
    25b8:	ba 2f       	mov	r27, r26
    25ba:	48 0f       	add	r20, r24
    25bc:	59 1f       	adc	r21, r25
    25be:	6a 1f       	adc	r22, r26
    25c0:	7b 1f       	adc	r23, r27
    25c2:	80 91 19 02 	lds	r24, 0x0219
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9c 01       	movw	r18, r24
    25cc:	22 0f       	add	r18, r18
    25ce:	33 1f       	adc	r19, r19
    25d0:	c9 01       	movw	r24, r18
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	88 0f       	add	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	82 0f       	add	r24, r18
    25dc:	93 1f       	adc	r25, r19
    25de:	80 5e       	subi	r24, 0xE0	; 224
    25e0:	91 40       	sbci	r25, 0x01	; 1
    25e2:	aa 27       	eor	r26, r26
    25e4:	97 fd       	sbrc	r25, 7
    25e6:	a0 95       	com	r26
    25e8:	ba 2f       	mov	r27, r26
    25ea:	9a 01       	movw	r18, r20
    25ec:	ab 01       	movw	r20, r22
    25ee:	28 0f       	add	r18, r24
    25f0:	39 1f       	adc	r19, r25
    25f2:	4a 1f       	adc	r20, r26
    25f4:	5b 1f       	adc	r21, r27
    25f6:	80 91 1a 02 	lds	r24, 0x021A
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	c0 97       	sbiw	r24, 0x30	; 48
    2600:	aa 27       	eor	r26, r26
    2602:	97 fd       	sbrc	r25, 7
    2604:	a0 95       	com	r26
    2606:	ba 2f       	mov	r27, r26
    2608:	82 0f       	add	r24, r18
    260a:	93 1f       	adc	r25, r19
    260c:	a4 1f       	adc	r26, r20
    260e:	b5 1f       	adc	r27, r21
    2610:	80 93 82 04 	sts	0x0482, r24
    2614:	90 93 83 04 	sts	0x0483, r25
    2618:	a0 93 84 04 	sts	0x0484, r26
    261c:	b0 93 85 04 	sts	0x0485, r27
				+(gps_buffer[23]-'0')*1000
				+(gps_buffer[24]-'0')*100
				+(gps_buffer[25]-'0')*10
				+(gps_buffer[26]-'0')*1;	//디버깅용

	Cansat_lati_min = (float) (dnleh_qns) / (float)10000.0;	//계산용
    2620:	80 91 82 04 	lds	r24, 0x0482
    2624:	90 91 83 04 	lds	r25, 0x0483
    2628:	a0 91 84 04 	lds	r26, 0x0484
    262c:	b0 91 85 04 	lds	r27, 0x0485
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e4       	ldi	r19, 0x40	; 64
    2644:	4c e1       	ldi	r20, 0x1C	; 28
    2646:	56 e4       	ldi	r21, 0x46	; 70
    2648:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	80 93 76 04 	sts	0x0476, r24
    2654:	90 93 77 04 	sts	0x0477, r25
    2658:	a0 93 78 04 	sts	0x0478, r26
    265c:	b0 93 79 04 	sts	0x0479, r27
    2660:	2d c0       	rjmp	.+90     	; 0x26bc <passing_gps+0x252>
	while( *(ALTI+i) != '.' && *(ALTI+i) != '\0')
	{
		//buffer[i] = *(ALTI + i);
		//i++;

		altitude *= 10;
    2662:	80 91 b8 02 	lds	r24, 0x02B8
    2666:	90 91 b9 02 	lds	r25, 0x02B9
    266a:	9c 01       	movw	r18, r24
    266c:	22 0f       	add	r18, r18
    266e:	33 1f       	adc	r19, r19
    2670:	c9 01       	movw	r24, r18
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	90 93 b9 02 	sts	0x02B9, r25
    2682:	80 93 b8 02 	sts	0x02B8, r24
		altitude += *(ALTI+i) - '0';
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	c6 96       	adiw	r24, 0x36	; 54
    268c:	fc 01       	movw	r30, r24
    268e:	e0 50       	subi	r30, 0x00	; 0
    2690:	fe 4f       	sbci	r31, 0xFE	; 254
    2692:	80 81       	ld	r24, Z
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9c 01       	movw	r18, r24
    269a:	20 53       	subi	r18, 0x30	; 48
    269c:	30 40       	sbci	r19, 0x00	; 0
    269e:	80 91 b8 02 	lds	r24, 0x02B8
    26a2:	90 91 b9 02 	lds	r25, 0x02B9
    26a6:	82 0f       	add	r24, r18
    26a8:	93 1f       	adc	r25, r19
    26aa:	90 93 b9 02 	sts	0x02B9, r25
    26ae:	80 93 b8 02 	sts	0x02B8, r24
		i++;
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	9a 81       	ldd	r25, Y+2	; 0x02
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
				+(gps_buffer[25]-'0')*10
				+(gps_buffer[26]-'0')*1;	//디버깅용

	Cansat_lati_min = (float) (dnleh_qns) / (float)10000.0;	//계산용
	
	while( *(ALTI+i) != '.' && *(ALTI+i) != '\0')
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	c6 96       	adiw	r24, 0x36	; 54
    26c2:	fc 01       	movw	r30, r24
    26c4:	e0 50       	subi	r30, 0x00	; 0
    26c6:	fe 4f       	sbci	r31, 0xFE	; 254
    26c8:	80 81       	ld	r24, Z
    26ca:	8e 32       	cpi	r24, 0x2E	; 46
    26cc:	49 f0       	breq	.+18     	; 0x26e0 <passing_gps+0x276>
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	c6 96       	adiw	r24, 0x36	; 54
    26d4:	fc 01       	movw	r30, r24
    26d6:	e0 50       	subi	r30, 0x00	; 0
    26d8:	fe 4f       	sbci	r31, 0xFE	; 254
    26da:	80 81       	ld	r24, Z
    26dc:	88 23       	and	r24, r24
    26de:	09 f6       	brne	.-126    	; 0x2662 <passing_gps+0x1f8>
		i++;
	}
	//buffer[i] = '\0';
	//altitude = atoi(buffer);
	
	rudeh_eh =   (gps_buffer[30]-'0')*100
    26e0:	80 91 1e 02 	lds	r24, 0x021E
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	84 e6       	ldi	r24, 0x64	; 100
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	ac 01       	movw	r20, r24
    26ee:	24 9f       	mul	r18, r20
    26f0:	c0 01       	movw	r24, r0
    26f2:	25 9f       	mul	r18, r21
    26f4:	90 0d       	add	r25, r0
    26f6:	34 9f       	mul	r19, r20
    26f8:	90 0d       	add	r25, r0
    26fa:	11 24       	eor	r1, r1
    26fc:	ac 01       	movw	r20, r24
    26fe:	40 5c       	subi	r20, 0xC0	; 192
    2700:	52 41       	sbci	r21, 0x12	; 18
    2702:	80 91 1f 02 	lds	r24, 0x021F
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	9c 01       	movw	r18, r24
    270c:	22 0f       	add	r18, r18
    270e:	33 1f       	adc	r19, r19
    2710:	c9 01       	movw	r24, r18
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	82 0f       	add	r24, r18
    271c:	93 1f       	adc	r25, r19
    271e:	80 5e       	subi	r24, 0xE0	; 224
    2720:	91 40       	sbci	r25, 0x01	; 1
    2722:	9a 01       	movw	r18, r20
    2724:	28 0f       	add	r18, r24
    2726:	39 1f       	adc	r19, r25
    2728:	80 91 20 02 	lds	r24, 0x0220
    272c:	88 2f       	mov	r24, r24
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	c0 97       	sbiw	r24, 0x30	; 48
    2732:	82 0f       	add	r24, r18
    2734:	93 1f       	adc	r25, r19
    2736:	90 93 7b 04 	sts	0x047B, r25
    273a:	80 93 7a 04 	sts	0x047A, r24
				+(gps_buffer[31]-'0')*10
				+(gps_buffer[32]-'0')*1;

	rudeh_qns =	 (gps_buffer[33]-'0')*1000000
    273e:	80 91 21 02 	lds	r24, 0x0221
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	c0 97       	sbiw	r24, 0x30	; 48
    2748:	aa 27       	eor	r26, r26
    274a:	97 fd       	sbrc	r25, 7
    274c:	a0 95       	com	r26
    274e:	ba 2f       	mov	r27, r26
    2750:	20 e4       	ldi	r18, 0x40	; 64
    2752:	32 e4       	ldi	r19, 0x42	; 66
    2754:	4f e0       	ldi	r20, 0x0F	; 15
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 44 27 	call	0x4e88	; 0x4e88 <__mulsi3>
    2760:	7b 01       	movw	r14, r22
    2762:	8c 01       	movw	r16, r24
    2764:	80 91 22 02 	lds	r24, 0x0222
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	c0 97       	sbiw	r24, 0x30	; 48
    276e:	aa 27       	eor	r26, r26
    2770:	97 fd       	sbrc	r25, 7
    2772:	a0 95       	com	r26
    2774:	ba 2f       	mov	r27, r26
    2776:	20 ea       	ldi	r18, 0xA0	; 160
    2778:	36 e8       	ldi	r19, 0x86	; 134
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	bc 01       	movw	r22, r24
    2780:	cd 01       	movw	r24, r26
    2782:	0e 94 44 27 	call	0x4e88	; 0x4e88 <__mulsi3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	b8 01       	movw	r22, r16
    278c:	a7 01       	movw	r20, r14
    278e:	48 0f       	add	r20, r24
    2790:	59 1f       	adc	r21, r25
    2792:	6a 1f       	adc	r22, r26
    2794:	7b 1f       	adc	r23, r27
    2796:	80 91 24 02 	lds	r24, 0x0224
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9c 01       	movw	r18, r24
    27a0:	20 53       	subi	r18, 0x30	; 48
    27a2:	30 40       	sbci	r19, 0x00	; 0
    27a4:	80 e1       	ldi	r24, 0x10	; 16
    27a6:	97 e2       	ldi	r25, 0x27	; 39
    27a8:	fc 01       	movw	r30, r24
    27aa:	2e 9f       	mul	r18, r30
    27ac:	c0 01       	movw	r24, r0
    27ae:	2f 9f       	mul	r18, r31
    27b0:	90 0d       	add	r25, r0
    27b2:	3e 9f       	mul	r19, r30
    27b4:	90 0d       	add	r25, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	aa 27       	eor	r26, r26
    27ba:	97 fd       	sbrc	r25, 7
    27bc:	a0 95       	com	r26
    27be:	ba 2f       	mov	r27, r26
    27c0:	48 0f       	add	r20, r24
    27c2:	59 1f       	adc	r21, r25
    27c4:	6a 1f       	adc	r22, r26
    27c6:	7b 1f       	adc	r23, r27
    27c8:	80 91 25 02 	lds	r24, 0x0225
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9c 01       	movw	r18, r24
    27d2:	20 53       	subi	r18, 0x30	; 48
    27d4:	30 40       	sbci	r19, 0x00	; 0
    27d6:	88 ee       	ldi	r24, 0xE8	; 232
    27d8:	93 e0       	ldi	r25, 0x03	; 3
    27da:	fc 01       	movw	r30, r24
    27dc:	2e 9f       	mul	r18, r30
    27de:	c0 01       	movw	r24, r0
    27e0:	2f 9f       	mul	r18, r31
    27e2:	90 0d       	add	r25, r0
    27e4:	3e 9f       	mul	r19, r30
    27e6:	90 0d       	add	r25, r0
    27e8:	11 24       	eor	r1, r1
    27ea:	aa 27       	eor	r26, r26
    27ec:	97 fd       	sbrc	r25, 7
    27ee:	a0 95       	com	r26
    27f0:	ba 2f       	mov	r27, r26
    27f2:	48 0f       	add	r20, r24
    27f4:	59 1f       	adc	r21, r25
    27f6:	6a 1f       	adc	r22, r26
    27f8:	7b 1f       	adc	r23, r27
    27fa:	80 91 26 02 	lds	r24, 0x0226
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	84 e6       	ldi	r24, 0x64	; 100
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	fc 01       	movw	r30, r24
    2808:	2e 9f       	mul	r18, r30
    280a:	c0 01       	movw	r24, r0
    280c:	2f 9f       	mul	r18, r31
    280e:	90 0d       	add	r25, r0
    2810:	3e 9f       	mul	r19, r30
    2812:	90 0d       	add	r25, r0
    2814:	11 24       	eor	r1, r1
    2816:	80 5c       	subi	r24, 0xC0	; 192
    2818:	92 41       	sbci	r25, 0x12	; 18
    281a:	aa 27       	eor	r26, r26
    281c:	97 fd       	sbrc	r25, 7
    281e:	a0 95       	com	r26
    2820:	ba 2f       	mov	r27, r26
    2822:	48 0f       	add	r20, r24
    2824:	59 1f       	adc	r21, r25
    2826:	6a 1f       	adc	r22, r26
    2828:	7b 1f       	adc	r23, r27
    282a:	80 91 27 02 	lds	r24, 0x0227
    282e:	88 2f       	mov	r24, r24
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9c 01       	movw	r18, r24
    2834:	22 0f       	add	r18, r18
    2836:	33 1f       	adc	r19, r19
    2838:	c9 01       	movw	r24, r18
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	82 0f       	add	r24, r18
    2844:	93 1f       	adc	r25, r19
    2846:	80 5e       	subi	r24, 0xE0	; 224
    2848:	91 40       	sbci	r25, 0x01	; 1
    284a:	aa 27       	eor	r26, r26
    284c:	97 fd       	sbrc	r25, 7
    284e:	a0 95       	com	r26
    2850:	ba 2f       	mov	r27, r26
    2852:	9a 01       	movw	r18, r20
    2854:	ab 01       	movw	r20, r22
    2856:	28 0f       	add	r18, r24
    2858:	39 1f       	adc	r19, r25
    285a:	4a 1f       	adc	r20, r26
    285c:	5b 1f       	adc	r21, r27
    285e:	80 91 28 02 	lds	r24, 0x0228
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	c0 97       	sbiw	r24, 0x30	; 48
    2868:	aa 27       	eor	r26, r26
    286a:	97 fd       	sbrc	r25, 7
    286c:	a0 95       	com	r26
    286e:	ba 2f       	mov	r27, r26
    2870:	82 0f       	add	r24, r18
    2872:	93 1f       	adc	r25, r19
    2874:	a4 1f       	adc	r26, r20
    2876:	b5 1f       	adc	r27, r21
    2878:	80 93 8e 04 	sts	0x048E, r24
    287c:	90 93 8f 04 	sts	0x048F, r25
    2880:	a0 93 90 04 	sts	0x0490, r26
    2884:	b0 93 91 04 	sts	0x0491, r27
				+(gps_buffer[37]-'0')*1000
				+(gps_buffer[38]-'0')*100
				+(gps_buffer[39]-'0')*10
				+(gps_buffer[40]-'0')*1;	//디버깅용
	
	Cansat_long_min = (float) (rudeh_qns) / (float)10000.0;	//계산용
    2888:	80 91 8e 04 	lds	r24, 0x048E
    288c:	90 91 8f 04 	lds	r25, 0x048F
    2890:	a0 91 90 04 	lds	r26, 0x0490
    2894:	b0 91 91 04 	lds	r27, 0x0491
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e4       	ldi	r19, 0x40	; 64
    28ac:	4c e1       	ldi	r20, 0x1C	; 28
    28ae:	56 e4       	ldi	r21, 0x46	; 70
    28b0:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	80 93 86 04 	sts	0x0486, r24
    28bc:	90 93 87 04 	sts	0x0487, r25
    28c0:	a0 93 88 04 	sts	0x0488, r26
    28c4:	b0 93 89 04 	sts	0x0489, r27

	//printf("lati : %x | longi : %x | alti : %x\n",dnleh_qns,rudeh_qns, altitude);
	gps_buffer_flag = 0;
    28c8:	10 92 5a 04 	sts	0x045A, r1
}
    28cc:	28 96       	adiw	r28, 0x08	; 8
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	ff 90       	pop	r15
    28e2:	ef 90       	pop	r14
    28e4:	08 95       	ret

000028e6 <__vector_23>:


ISR(TIMER0_OVF_vect)//타이머 오버플로 인터럽트	//
{
    28e6:	1f 92       	push	r1
    28e8:	0f 92       	push	r0
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	0f 92       	push	r0
    28ee:	00 90 5b 00 	lds	r0, 0x005B
    28f2:	0f 92       	push	r0
    28f4:	11 24       	eor	r1, r1
    28f6:	8f 93       	push	r24
    28f8:	9f 93       	push	r25
    28fa:	af 93       	push	r26
    28fc:	bf 93       	push	r27
    28fe:	ef 93       	push	r30
    2900:	ff 93       	push	r31
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB ^ 0x50;	//포트 B  0x00
    290a:	a5 e2       	ldi	r26, 0x25	; 37
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e5 e2       	ldi	r30, 0x25	; 37
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	90 81       	ld	r25, Z
    2914:	80 e5       	ldi	r24, 0x50	; 80
    2916:	89 27       	eor	r24, r25
    2918:	8c 93       	st	X, r24
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	ff 91       	pop	r31
    2920:	ef 91       	pop	r30
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	9f 91       	pop	r25
    2928:	8f 91       	pop	r24
    292a:	0f 90       	pop	r0
    292c:	00 92 5b 00 	sts	0x005B, r0
    2930:	0f 90       	pop	r0
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	0f 90       	pop	r0
    2936:	1f 90       	pop	r1
    2938:	18 95       	reti

0000293a <__vector_21>:

ISR(TIMER0_COMPA_vect)//비교 인터럽트
{
    293a:	1f 92       	push	r1
    293c:	0f 92       	push	r0
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	0f 92       	push	r0
    2942:	00 90 5b 00 	lds	r0, 0x005B
    2946:	0f 92       	push	r0
    2948:	11 24       	eor	r1, r1
    294a:	8f 93       	push	r24
    294c:	af 93       	push	r26
    294e:	bf 93       	push	r27
    2950:	ef 93       	push	r30
    2952:	ff 93       	push	r31
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
	PORTB |= 0x10;	//포트B YAW Motor 0x10 설정
    295c:	a5 e2       	ldi	r26, 0x25	; 37
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e5 e2       	ldi	r30, 0x25	; 37
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	80 61       	ori	r24, 0x10	; 16
    2968:	8c 93       	st	X, r24
}
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	ff 91       	pop	r31
    2970:	ef 91       	pop	r30
    2972:	bf 91       	pop	r27
    2974:	af 91       	pop	r26
    2976:	8f 91       	pop	r24
    2978:	0f 90       	pop	r0
    297a:	00 92 5b 00 	sts	0x005B, r0
    297e:	0f 90       	pop	r0
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	0f 90       	pop	r0
    2984:	1f 90       	pop	r1
    2986:	18 95       	reti

00002988 <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
    2988:	1f 92       	push	r1
    298a:	0f 92       	push	r0
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	0f 92       	push	r0
    2990:	00 90 5b 00 	lds	r0, 0x005B
    2994:	0f 92       	push	r0
    2996:	11 24       	eor	r1, r1
    2998:	8f 93       	push	r24
    299a:	af 93       	push	r26
    299c:	bf 93       	push	r27
    299e:	ef 93       	push	r30
    29a0:	ff 93       	push	r31
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
	PORTB |= 0x40;	//포트 B PITCH Motor 0x40 설정
    29aa:	a5 e2       	ldi	r26, 0x25	; 37
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e5 e2       	ldi	r30, 0x25	; 37
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	80 64       	ori	r24, 0x40	; 64
    29b6:	8c 93       	st	X, r24
}
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	ff 91       	pop	r31
    29be:	ef 91       	pop	r30
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	8f 91       	pop	r24
    29c6:	0f 90       	pop	r0
    29c8:	00 92 5b 00 	sts	0x005B, r0
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	0f 90       	pop	r0
    29d2:	1f 90       	pop	r1
    29d4:	18 95       	reti

000029d6 <main>:

int main(void)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	ac 97       	sbiw	r28, 0x2c	; 44
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    29ea:	0e 94 4e 11 	call	0x229c	; 0x229c <init_devices>
	init_buffer(GPS);
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
	init_buffer(IMU);
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
	init_buffer(ECT);
    29fe:	84 e0       	ldi	r24, 0x04	; 4
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
	int loop_count=0;	//루프카운트변수는 루프를 몇번 돌았는지 알려준다.
    2a06:	1c a6       	std	Y+44, r1	; 0x2c
    2a08:	1b a6       	std	Y+43, r1	; 0x2b

	printf("Connect with 3AMJUNG CANSAT\n");
    2a0a:	85 ec       	ldi	r24, 0xC5	; 197
    2a0c:	92 e0       	ldi	r25, 0x02	; 2
    2a0e:	0e 94 2b 28 	call	0x5056	; 0x5056 <puts>
	imu();
    2a12:	0e 94 ce 04 	call	0x99c	; 0x99c <imu>
    2a16:	72 c0       	rjmp	.+228    	; 0x2afc <main+0x126>

	while(Cansat_start_flag == 0)	{	//IDLE MODE
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	a8 ec       	ldi	r26, 0xC8	; 200
    2a1e:	b2 e4       	ldi	r27, 0x42	; 66
    2a20:	8f a3       	std	Y+39, r24	; 0x27
    2a22:	98 a7       	std	Y+40, r25	; 0x28
    2a24:	a9 a7       	std	Y+41, r26	; 0x29
    2a26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a28:	6f a1       	ldd	r22, Y+39	; 0x27
    2a2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	4a e7       	ldi	r20, 0x7A	; 122
    2a36:	55 e4       	ldi	r21, 0x45	; 69
    2a38:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8b a3       	std	Y+35, r24	; 0x23
    2a42:	9c a3       	std	Y+36, r25	; 0x24
    2a44:	ad a3       	std	Y+37, r26	; 0x25
    2a46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a48:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	2c f4       	brge	.+10     	; 0x2a6a <main+0x94>
		__ticks = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9a a3       	std	Y+34, r25	; 0x22
    2a66:	89 a3       	std	Y+33, r24	; 0x21
    2a68:	3f c0       	rjmp	.+126    	; 0x2ae8 <main+0x112>
	else if (__tmp > 65535)
    2a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a70:	9e a1       	ldd	r25, Y+38	; 0x26
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	4c f5       	brge	.+82     	; 0x2ad4 <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a82:	6f a1       	ldd	r22, Y+39	; 0x27
    2a84:	78 a5       	ldd	r23, Y+40	; 0x28
    2a86:	89 a5       	ldd	r24, Y+41	; 0x29
    2a88:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9a a3       	std	Y+34, r25	; 0x22
    2aa8:	89 a3       	std	Y+33, r24	; 0x21
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <main+0xf4>
    2aac:	80 e9       	ldi	r24, 0x90	; 144
    2aae:	91 e0       	ldi	r25, 0x01	; 1
    2ab0:	98 a3       	std	Y+32, r25	; 0x20
    2ab2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ab4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ab6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <main+0xe2>
    2abc:	98 a3       	std	Y+32, r25	; 0x20
    2abe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9a a3       	std	Y+34, r25	; 0x22
    2ac8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	89 a1       	ldd	r24, Y+33	; 0x21
    2acc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	69 f7       	brne	.-38     	; 0x2aac <main+0xd6>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad8:	8d a1       	ldd	r24, Y+37	; 0x25
    2ada:	9e a1       	ldd	r25, Y+38	; 0x26
    2adc:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9a a3       	std	Y+34, r25	; 0x22
    2ae6:	89 a3       	std	Y+33, r24	; 0x21
    2ae8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aea:	9a a1       	ldd	r25, Y+34	; 0x22
    2aec:	9e 8f       	std	Y+30, r25	; 0x1e
    2aee:	8d 8f       	std	Y+29, r24	; 0x1d
    2af0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <main+0x11e>
    2af8:	9e 8f       	std	Y+30, r25	; 0x1e
    2afa:	8d 8f       	std	Y+29, r24	; 0x1d
    2afc:	80 91 48 04 	lds	r24, 0x0448
    2b00:	90 91 49 04 	lds	r25, 0x0449
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <main+0x134>
    2b08:	87 cf       	rjmp	.-242    	; 0x2a18 <main+0x42>
		_delay_ms(100);
	}
	
	//타이머 카운트 레지스터 설정
	TIMSK0 = 0x07;	//오버플로, 출력비교 인터럽트 A : YAW , 출력비교 인터럽트 B : PITCH
    2b0a:	ee e6       	ldi	r30, 0x6E	; 110
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	87 e0       	ldi	r24, 0x07	; 7
    2b10:	80 83       	st	Z, r24
	TCCR0A = 0b10000011;//FastPWM, 0Cn기능 사용,
    2b12:	e4 e4       	ldi	r30, 0x44	; 68
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	83 e8       	ldi	r24, 0x83	; 131
    2b18:	80 83       	st	Z, r24
	TCCR0B = 0b00000100; //분주비 256
    2b1a:	e5 e4       	ldi	r30, 0x45	; 69
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	84 e0       	ldi	r24, 0x04	; 4
    2b20:	80 83       	st	Z, r24
	OCR0A = 105;		//출력비교 인터럽트 A(YAW) : 1053 설정 캔위성방향 북쪽
    2b22:	e7 e4       	ldi	r30, 0x47	; 71
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	89 e6       	ldi	r24, 0x69	; 105
    2b28:	80 83       	st	Z, r24
	OCR0B = 160;		//출력비교 인터럽트 B(PITCH) : 215 설정 PITCH 수직 설정
    2b2a:	e8 e4       	ldi	r30, 0x48	; 72
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 ea       	ldi	r24, 0xA0	; 160
    2b30:	80 83       	st	Z, r24
	DDRB = 0x50;	//모터에 힘이 들어가도록 설정
    2b32:	e4 e2       	ldi	r30, 0x24	; 36
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 e5       	ldi	r24, 0x50	; 80
    2b38:	80 83       	st	Z, r24

	UCSR2B = 0x00;
    2b3a:	e1 ed       	ldi	r30, 0xD1	; 209
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	10 82       	st	Z, r1
	
	while(1)
	{		
		
			if(gps_buffer_flag == 1){	//GPS
    2b40:	80 91 5a 04 	lds	r24, 0x045A
    2b44:	81 30       	cpi	r24, 0x01	; 1
    2b46:	21 f4       	brne	.+8      	; 0x2b50 <main+0x17a>
				SendToStation(GPS);		//페어링 여부에 따라 분기할것
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	0e 94 38 1c 	call	0x3870	; 0x3870 <SendToStation>
			}
			
			if(Camera_flag == 0 && loop_count == 30000 && o_flag == 1)
    2b50:	80 91 4e 04 	lds	r24, 0x044E
    2b54:	90 91 4f 04 	lds	r25, 0x044F
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	89 f4       	brne	.+34     	; 0x2b7e <main+0x1a8>
    2b5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b60:	25 e7       	ldi	r18, 0x75	; 117
    2b62:	80 33       	cpi	r24, 0x30	; 48
    2b64:	92 07       	cpc	r25, r18
    2b66:	59 f4       	brne	.+22     	; 0x2b7e <main+0x1a8>
    2b68:	80 91 ba 02 	lds	r24, 0x02BA
    2b6c:	90 91 bb 02 	lds	r25, 0x02BB
    2b70:	81 30       	cpi	r24, 0x01	; 1
    2b72:	91 05       	cpc	r25, r1
    2b74:	21 f4       	brne	.+8      	; 0x2b7e <main+0x1a8>
				UCSR2B = 0x98;
    2b76:	e1 ed       	ldi	r30, 0xD1	; 209
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	88 e9       	ldi	r24, 0x98	; 152
    2b7c:	80 83       	st	Z, r24
			

			if(imu_buffer_flag == 1 && loop_count >= 30000)	{	//IMU 데이터 늦게받기
    2b7e:	80 91 5b 04 	lds	r24, 0x045B
    2b82:	81 30       	cpi	r24, 0x01	; 1
    2b84:	a1 f4       	brne	.+40     	; 0x2bae <main+0x1d8>
    2b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b88:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b8a:	25 e7       	ldi	r18, 0x75	; 117
    2b8c:	80 33       	cpi	r24, 0x30	; 48
    2b8e:	92 07       	cpc	r25, r18
    2b90:	74 f0       	brlt	.+28     	; 0x2bae <main+0x1d8>
				passing_gps();
    2b92:	0e 94 35 12 	call	0x246a	; 0x246a <passing_gps>
				passing_imu();
    2b96:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <passing_imu>
				
				Rotate_Yaw();
    2b9a:	0e 94 99 1c 	call	0x3932	; 0x3932 <Rotate_Yaw>
				Rotate_Pitch();	//페어링 여부에 따라 분기할것
    2b9e:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <Rotate_Pitch>
								
				SendToStation(IMU);	
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	0e 94 38 1c 	call	0x3870	; 0x3870 <SendToStation>
				loop_count = 0;
    2baa:	1c a6       	std	Y+44, r1	; 0x2c
    2bac:	1b a6       	std	Y+43, r1	; 0x2b
			}

			loop_count++;
    2bae:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	9c a7       	std	Y+44, r25	; 0x2c
    2bb6:	8b a7       	std	Y+43, r24	; 0x2b
				//페어링 여부에 따라 파싱
				
				// 모터 회전 각도 계산
				// 모터 회전

		if(idle_cnt >= 3)	{
    2bb8:	80 91 6a 04 	lds	r24, 0x046A
    2bbc:	90 91 6b 04 	lds	r25, 0x046B
    2bc0:	83 30       	cpi	r24, 0x03	; 3
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	0c f4       	brge	.+2      	; 0x2bc8 <main+0x1f2>
    2bc6:	74 c0       	rjmp	.+232    	; 0x2cb0 <main+0x2da>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a4 e3       	ldi	r26, 0x34	; 52
    2bce:	b2 e4       	ldi	r27, 0x42	; 66
    2bd0:	89 8f       	std	Y+25, r24	; 0x19
    2bd2:	9a 8f       	std	Y+26, r25	; 0x1a
    2bd4:	ab 8f       	std	Y+27, r26	; 0x1b
    2bd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4a e7       	ldi	r20, 0x7A	; 122
    2be6:	55 e4       	ldi	r21, 0x45	; 69
    2be8:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	8d 8b       	std	Y+21, r24	; 0x15
    2bf2:	9e 8b       	std	Y+22, r25	; 0x16
    2bf4:	af 8b       	std	Y+23, r26	; 0x17
    2bf6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e8       	ldi	r20, 0x80	; 128
    2c06:	5f e3       	ldi	r21, 0x3F	; 63
    2c08:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <main+0x244>
		__ticks = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9c 8b       	std	Y+20, r25	; 0x14
    2c16:	8b 8b       	std	Y+19, r24	; 0x13
    2c18:	3f c0       	rjmp	.+126    	; 0x2c98 <main+0x2c2>
	else if (__tmp > 65535)
    2c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c20:	98 8d       	ldd	r25, Y+24	; 0x18
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	3f ef       	ldi	r19, 0xFF	; 255
    2c26:	4f e7       	ldi	r20, 0x7F	; 127
    2c28:	57 e4       	ldi	r21, 0x47	; 71
    2c2a:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    2c2e:	18 16       	cp	r1, r24
    2c30:	4c f5       	brge	.+82     	; 0x2c84 <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	69 8d       	ldd	r22, Y+25	; 0x19
    2c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9c 8b       	std	Y+20, r25	; 0x14
    2c58:	8b 8b       	std	Y+19, r24	; 0x13
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <main+0x2a4>
    2c5c:	80 e9       	ldi	r24, 0x90	; 144
    2c5e:	91 e0       	ldi	r25, 0x01	; 1
    2c60:	9a 8b       	std	Y+18, r25	; 0x12
    2c62:	89 8b       	std	Y+17, r24	; 0x11
    2c64:	89 89       	ldd	r24, Y+17	; 0x11
    2c66:	9a 89       	ldd	r25, Y+18	; 0x12
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <main+0x292>
    2c6c:	9a 8b       	std	Y+18, r25	; 0x12
    2c6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	8b 89       	ldd	r24, Y+19	; 0x13
    2c72:	9c 89       	ldd	r25, Y+20	; 0x14
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	9c 8b       	std	Y+20, r25	; 0x14
    2c78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	69 f7       	brne	.-38     	; 0x2c5c <main+0x286>
    2c82:	14 c0       	rjmp	.+40     	; 0x2cac <main+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c84:	6d 89       	ldd	r22, Y+21	; 0x15
    2c86:	7e 89       	ldd	r23, Y+22	; 0x16
    2c88:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8c:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9c 8b       	std	Y+20, r25	; 0x14
    2c96:	8b 8b       	std	Y+19, r24	; 0x13
    2c98:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9c:	98 8b       	std	Y+16, r25	; 0x10
    2c9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca2:	98 89       	ldd	r25, Y+16	; 0x10
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <main+0x2ce>
    2ca8:	98 8b       	std	Y+16, r25	; 0x10
    2caa:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(45);
			shot();
    2cac:	0e 94 07 04 	call	0x80e	; 0x80e <shot>

		}
	
		if(shot_cnt == 5)
    2cb0:	80 91 6c 04 	lds	r24, 0x046C
    2cb4:	90 91 6d 04 	lds	r25, 0x046D
    2cb8:	85 30       	cpi	r24, 0x05	; 5
    2cba:	91 05       	cpc	r25, r1
    2cbc:	11 f4       	brne	.+4      	; 0x2cc2 <main+0x2ec>
			call_size();
    2cbe:	0e 94 2f 04 	call	0x85e	; 0x85e <call_size>

		if(call_size_cnt == 9)	{
    2cc2:	80 91 6e 04 	lds	r24, 0x046E
    2cc6:	90 91 6f 04 	lds	r25, 0x046F
    2cca:	89 30       	cpi	r24, 0x09	; 9
    2ccc:	91 05       	cpc	r25, r1
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <main+0x2fc>
    2cd0:	37 cf       	rjmp	.-402    	; 0x2b40 <main+0x16a>
		   //printf("#%x#%x\r\n", img_buffer[7], img_buffer[8]);
			call_size_cnt = 0;
    2cd2:	10 92 6f 04 	sts	0x046F, r1
    2cd6:	10 92 6e 04 	sts	0x046E, r1
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a8 e4       	ldi	r26, 0x48	; 72
    2ce0:	b2 e4       	ldi	r27, 0x42	; 66
    2ce2:	8b 87       	std	Y+11, r24	; 0x0b
    2ce4:	9c 87       	std	Y+12, r25	; 0x0c
    2ce6:	ad 87       	std	Y+13, r26	; 0x0d
    2ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	4a e7       	ldi	r20, 0x7A	; 122
    2cf8:	55 e4       	ldi	r21, 0x45	; 69
    2cfa:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	8f 83       	std	Y+7, r24	; 0x07
    2d04:	98 87       	std	Y+8, r25	; 0x08
    2d06:	a9 87       	std	Y+9, r26	; 0x09
    2d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0c:	78 85       	ldd	r23, Y+8	; 0x08
    2d0e:	89 85       	ldd	r24, Y+9	; 0x09
    2d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e8       	ldi	r20, 0x80	; 128
    2d18:	5f e3       	ldi	r21, 0x3F	; 63
    2d1a:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    2d1e:	88 23       	and	r24, r24
    2d20:	2c f4       	brge	.+10     	; 0x2d2c <main+0x356>
		__ticks = 1;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9e 83       	std	Y+6, r25	; 0x06
    2d28:	8d 83       	std	Y+5, r24	; 0x05
    2d2a:	3f c0       	rjmp	.+126    	; 0x2daa <main+0x3d4>
	else if (__tmp > 65535)
    2d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2e:	78 85       	ldd	r23, Y+8	; 0x08
    2d30:	89 85       	ldd	r24, Y+9	; 0x09
    2d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	3f ef       	ldi	r19, 0xFF	; 255
    2d38:	4f e7       	ldi	r20, 0x7F	; 127
    2d3a:	57 e4       	ldi	r21, 0x47	; 71
    2d3c:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    2d40:	18 16       	cp	r1, r24
    2d42:	4c f5       	brge	.+82     	; 0x2d96 <main+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e2       	ldi	r20, 0x20	; 32
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	0f c0       	rjmp	.+30     	; 0x2d8c <main+0x3b6>
    2d6e:	80 e9       	ldi	r24, 0x90	; 144
    2d70:	91 e0       	ldi	r25, 0x01	; 1
    2d72:	9c 83       	std	Y+4, r25	; 0x04
    2d74:	8b 83       	std	Y+3, r24	; 0x03
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <main+0x3a4>
    2d7e:	9c 83       	std	Y+4, r25	; 0x04
    2d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d82:	8d 81       	ldd	r24, Y+5	; 0x05
    2d84:	9e 81       	ldd	r25, Y+6	; 0x06
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	9e 83       	std	Y+6, r25	; 0x06
    2d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	69 f7       	brne	.-38     	; 0x2d6e <main+0x398>
    2d94:	14 c0       	rjmp	.+40     	; 0x2dbe <main+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	6f 81       	ldd	r22, Y+7	; 0x07
    2d98:	78 85       	ldd	r23, Y+8	; 0x08
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dac:	9e 81       	ldd	r25, Y+6	; 0x06
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <main+0x3e0>
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			call_img();
    2dbe:	0e 94 59 04 	call	0x8b2	; 0x8b2 <call_img>
    2dc2:	be ce       	rjmp	.-644    	; 0x2b40 <main+0x16a>

00002dc4 <__vector_1>:
	
	return 0;
}

ISR(INT0_vect)
{
    2dc4:	1f 92       	push	r1
    2dc6:	0f 92       	push	r0
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	0f 92       	push	r0
    2dcc:	00 90 5b 00 	lds	r0, 0x005B
    2dd0:	0f 92       	push	r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	8f 93       	push	r24
    2dd6:	9f 93       	push	r25
    2dd8:	af 93       	push	r26
    2dda:	bf 93       	push	r27
    2ddc:	ef 93       	push	r30
    2dde:	ff 93       	push	r31
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	0f 92       	push	r0
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
	//printf("Trigger0 \n");
	
	if(connect_flag == 0 && EICRA | 0x02)
    2dea:	80 91 56 04 	lds	r24, 0x0456
    2dee:	90 91 57 04 	lds	r25, 0x0457
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	c1 f4       	brne	.+48     	; 0x2e26 <__vector_1+0x62>
    2df6:	e9 e6       	ldi	r30, 0x69	; 105
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
	{
		connect_flag = TRUE;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	90 93 57 04 	sts	0x0457, r25
    2e04:	80 93 56 04 	sts	0x0456, r24
		EICRA &= 0xFC;
    2e08:	a9 e6       	ldi	r26, 0x69	; 105
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	e9 e6       	ldi	r30, 0x69	; 105
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	8c 7f       	andi	r24, 0xFC	; 252
    2e14:	8c 93       	st	X, r24
		EICRA |= 0x03;
    2e16:	a9 e6       	ldi	r26, 0x69	; 105
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e9 e6       	ldi	r30, 0x69	; 105
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	83 60       	ori	r24, 0x03	; 3
    2e22:	8c 93       	st	X, r24
    2e24:	12 c0       	rjmp	.+36     	; 0x2e4a <__vector_1+0x86>
	}
	else
	{
		connect_flag = FALSE;
    2e26:	10 92 57 04 	sts	0x0457, r1
    2e2a:	10 92 56 04 	sts	0x0456, r1
		EICRA &= 0xFC;
    2e2e:	a9 e6       	ldi	r26, 0x69	; 105
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	e9 e6       	ldi	r30, 0x69	; 105
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8c 7f       	andi	r24, 0xFC	; 252
    2e3a:	8c 93       	st	X, r24
		EICRA |= 0x02;
    2e3c:	a9 e6       	ldi	r26, 0x69	; 105
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e9 e6       	ldi	r30, 0x69	; 105
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	82 60       	ori	r24, 0x02	; 2
    2e48:	8c 93       	st	X, r24
	}
	
}
    2e4a:	0f 90       	pop	r0
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	ff 91       	pop	r31
    2e52:	ef 91       	pop	r30
    2e54:	bf 91       	pop	r27
    2e56:	af 91       	pop	r26
    2e58:	9f 91       	pop	r25
    2e5a:	8f 91       	pop	r24
    2e5c:	0f 90       	pop	r0
    2e5e:	00 92 5b 00 	sts	0x005B, r0
    2e62:	0f 90       	pop	r0
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	0f 90       	pop	r0
    2e68:	1f 90       	pop	r1
    2e6a:	18 95       	reti

00002e6c <__vector_54>:


ISR(USART3_RX_vect)
{
    2e6c:	1f 92       	push	r1
    2e6e:	0f 92       	push	r0
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	0f 92       	push	r0
    2e74:	00 90 5b 00 	lds	r0, 0x005B
    2e78:	0f 92       	push	r0
    2e7a:	11 24       	eor	r1, r1
    2e7c:	8f 93       	push	r24
    2e7e:	9f 93       	push	r25
    2e80:	ef 93       	push	r30
    2e82:	ff 93       	push	r31
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	0f 92       	push	r0
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
	char uart3_data = UDR3;
    2e8e:	e6 e3       	ldi	r30, 0x36	; 54
    2e90:	f1 e0       	ldi	r31, 0x01	; 1
    2e92:	80 81       	ld	r24, Z
    2e94:	89 83       	std	Y+1, r24	; 0x01
	if(uart3_data=='$' && gps_buffer_flag == 0)
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	84 32       	cpi	r24, 0x24	; 36
    2e9a:	39 f4       	brne	.+14     	; 0x2eaa <__vector_54+0x3e>
    2e9c:	80 91 5a 04 	lds	r24, 0x045A
    2ea0:	88 23       	and	r24, r24
    2ea2:	19 f4       	brne	.+6      	; 0x2eaa <__vector_54+0x3e>
		gps_load_flag = 1;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	80 93 5c 04 	sts	0x045C, r24

	if(gps_load_flag == 1)	{
    2eaa:	80 91 5c 04 	lds	r24, 0x045C
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	19 f5       	brne	.+70     	; 0x2ef8 <__vector_54+0x8c>
		gps_buffer[gps_buffer_cnt] = uart3_data;
    2eb2:	80 91 5e 04 	lds	r24, 0x045E
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	fc 01       	movw	r30, r24
    2ebc:	e0 50       	subi	r30, 0x00	; 0
    2ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	80 83       	st	Z, r24
		gps_buffer_cnt++;
    2ec4:	80 91 5e 04 	lds	r24, 0x045E
    2ec8:	8f 5f       	subi	r24, 0xFF	; 255
    2eca:	80 93 5e 04 	sts	0x045E, r24
		
		if(gps_buffer_cnt == 5 && uart3_data != 'G') {		//버퍼 카운트가 5일때,G가 아니면
    2ece:	80 91 5e 04 	lds	r24, 0x045E
    2ed2:	85 30       	cpi	r24, 0x05	; 5
    2ed4:	39 f4       	brne	.+14     	; 0x2ee4 <__vector_54+0x78>
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	87 34       	cpi	r24, 0x47	; 71
    2eda:	21 f0       	breq	.+8      	; 0x2ee4 <__vector_54+0x78>
				gps_buffer_cnt = 0;	//버퍼카운트, 플래그 0 초기화
    2edc:	10 92 5e 04 	sts	0x045E, r1
				gps_load_flag = 0;
    2ee0:	10 92 5c 04 	sts	0x045C, r1
		}
		
		if(uart3_data == '\n')	{	//버퍼가 개행문자일때
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	8a 30       	cpi	r24, 0x0A	; 10
    2ee8:	39 f4       	brne	.+14     	; 0x2ef8 <__vector_54+0x8c>
			gps_buffer_flag = 1;	//플래그 1
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	80 93 5a 04 	sts	0x045A, r24
			gps_load_flag = 0;		//로드 0
    2ef0:	10 92 5c 04 	sts	0x045C, r1
			gps_buffer_cnt = 0;		//버퍼카운트 0
    2ef4:	10 92 5e 04 	sts	0x045E, r1
		}
	}
}
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	ff 91       	pop	r31
    2f00:	ef 91       	pop	r30
    2f02:	9f 91       	pop	r25
    2f04:	8f 91       	pop	r24
    2f06:	0f 90       	pop	r0
    2f08:	00 92 5b 00 	sts	0x005B, r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	0f 90       	pop	r0
    2f12:	1f 90       	pop	r1
    2f14:	18 95       	reti

00002f16 <__vector_51>:


ISR(USART2_RX_vect) //IMU통신
{  
    2f16:	1f 92       	push	r1
    2f18:	0f 92       	push	r0
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	0f 92       	push	r0
    2f1e:	00 90 5b 00 	lds	r0, 0x005B
    2f22:	0f 92       	push	r0
    2f24:	11 24       	eor	r1, r1
    2f26:	2f 93       	push	r18
    2f28:	8f 93       	push	r24
    2f2a:	9f 93       	push	r25
    2f2c:	ef 93       	push	r30
    2f2e:	ff 93       	push	r31
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
	
	data_uart2 = UDR2;
    2f38:	e6 ed       	ldi	r30, 0xD6	; 214
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 93 72 04 	sts	0x0472, r24
	if(data_uart2=='s' && imu_buffer_flag ==0)
    2f42:	80 91 72 04 	lds	r24, 0x0472
    2f46:	83 37       	cpi	r24, 0x73	; 115
    2f48:	39 f4       	brne	.+14     	; 0x2f58 <__vector_51+0x42>
    2f4a:	80 91 5b 04 	lds	r24, 0x045B
    2f4e:	88 23       	and	r24, r24
    2f50:	19 f4       	brne	.+6      	; 0x2f58 <__vector_51+0x42>
		imu_load_flag = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	80 93 5d 04 	sts	0x045D, r24

	if(imu_load_flag == 1)	{
    2f58:	80 91 5d 04 	lds	r24, 0x045D
    2f5c:	81 30       	cpi	r24, 0x01	; 1
    2f5e:	39 f5       	brne	.+78     	; 0x2fae <__vector_51+0x98>
		imu_buffer[imu_buffer_cnt] = data_uart2;
    2f60:	80 91 5f 04 	lds	r24, 0x045F
    2f64:	88 2f       	mov	r24, r24
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	20 91 72 04 	lds	r18, 0x0472
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	e0 5b       	subi	r30, 0xB0	; 176
    2f70:	fd 4f       	sbci	r31, 0xFD	; 253
    2f72:	20 83       	st	Z, r18
		imu_buffer_cnt++;
    2f74:	80 91 5f 04 	lds	r24, 0x045F
    2f78:	8f 5f       	subi	r24, 0xFF	; 255
    2f7a:	80 93 5f 04 	sts	0x045F, r24
		
		if(imu_buffer_cnt == 4 && data_uart2 != 0xb7) {		//버퍼 카운트가 4일때,b7가 아니면
    2f7e:	80 91 5f 04 	lds	r24, 0x045F
    2f82:	84 30       	cpi	r24, 0x04	; 4
    2f84:	49 f4       	brne	.+18     	; 0x2f98 <__vector_51+0x82>
    2f86:	80 91 72 04 	lds	r24, 0x0472
    2f8a:	87 3b       	cpi	r24, 0xB7	; 183
    2f8c:	29 f0       	breq	.+10     	; 0x2f98 <__vector_51+0x82>
				imu_buffer_cnt = 0;	//버퍼카운트, 플래그 0 초기화
    2f8e:	10 92 5f 04 	sts	0x045F, r1
				imu_load_flag = 0;
    2f92:	10 92 5d 04 	sts	0x045D, r1
    2f96:	0b c0       	rjmp	.+22     	; 0x2fae <__vector_51+0x98>
				return;
		}
		
		if(imu_buffer_cnt == 15)	{	//버퍼가 개행문자일때
    2f98:	80 91 5f 04 	lds	r24, 0x045F
    2f9c:	8f 30       	cpi	r24, 0x0F	; 15
    2f9e:	39 f4       	brne	.+14     	; 0x2fae <__vector_51+0x98>
			imu_buffer_flag = 1;	//플래그 1
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	80 93 5b 04 	sts	0x045B, r24
			imu_load_flag = 0;		//로드 0
    2fa6:	10 92 5d 04 	sts	0x045D, r1
			imu_buffer_cnt = 0;		//버퍼카운트 0
    2faa:	10 92 5f 04 	sts	0x045F, r1
		}
	}

}
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	ff 91       	pop	r31
    2fb4:	ef 91       	pop	r30
    2fb6:	9f 91       	pop	r25
    2fb8:	8f 91       	pop	r24
    2fba:	2f 91       	pop	r18
    2fbc:	0f 90       	pop	r0
    2fbe:	00 92 5b 00 	sts	0x005B, r0
    2fc2:	0f 90       	pop	r0
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	0f 90       	pop	r0
    2fc8:	1f 90       	pop	r1
    2fca:	18 95       	reti

00002fcc <__vector_25>:


ISR(USART0_RX_vect)	//Camera의 수신완료 인터럽트
{
    2fcc:	1f 92       	push	r1
    2fce:	0f 92       	push	r0
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	0f 92       	push	r0
    2fd4:	00 90 5b 00 	lds	r0, 0x005B
    2fd8:	0f 92       	push	r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	2f 93       	push	r18
    2fde:	3f 93       	push	r19
    2fe0:	4f 93       	push	r20
    2fe2:	5f 93       	push	r21
    2fe4:	6f 93       	push	r22
    2fe6:	7f 93       	push	r23
    2fe8:	8f 93       	push	r24
    2fea:	9f 93       	push	r25
    2fec:	af 93       	push	r26
    2fee:	bf 93       	push	r27
    2ff0:	ef 93       	push	r30
    2ff2:	ff 93       	push	r31
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	61 97       	sbiw	r28, 0x11	; 17
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	cd bf       	out	0x3d, r28	; 61
	char uart0_data = UDR0;
    3002:	e6 ec       	ldi	r30, 0xC6	; 198
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	8f 87       	std	Y+15, r24	; 0x0f
	
	switch(command)
    300a:	80 91 70 04 	lds	r24, 0x0470
    300e:	90 91 71 04 	lds	r25, 0x0471
    3012:	99 8b       	std	Y+17, r25	; 0x11
    3014:	88 8b       	std	Y+16, r24	; 0x10
    3016:	88 89       	ldd	r24, Y+16	; 0x10
    3018:	99 89       	ldd	r25, Y+17	; 0x11
    301a:	82 30       	cpi	r24, 0x02	; 2
    301c:	91 05       	cpc	r25, r1
    301e:	a1 f0       	breq	.+40     	; 0x3048 <__vector_25+0x7c>
    3020:	88 89       	ldd	r24, Y+16	; 0x10
    3022:	99 89       	ldd	r25, Y+17	; 0x11
    3024:	83 30       	cpi	r24, 0x03	; 3
    3026:	91 05       	cpc	r25, r1
    3028:	c9 f0       	breq	.+50     	; 0x305c <__vector_25+0x90>
    302a:	88 89       	ldd	r24, Y+16	; 0x10
    302c:	99 89       	ldd	r25, Y+17	; 0x11
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	91 05       	cpc	r25, r1
    3032:	e9 f4       	brne	.+58     	; 0x306e <__vector_25+0xa2>
	{
	case IDLE:
		idle_cnt++;
    3034:	80 91 6a 04 	lds	r24, 0x046A
    3038:	90 91 6b 04 	lds	r25, 0x046B
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	90 93 6b 04 	sts	0x046B, r25
    3042:	80 93 6a 04 	sts	0x046A, r24
    3046:	13 c0       	rjmp	.+38     	; 0x306e <__vector_25+0xa2>
		break;
	case SHOT:
		shot_cnt++;
    3048:	80 91 6c 04 	lds	r24, 0x046C
    304c:	90 91 6d 04 	lds	r25, 0x046D
    3050:	01 96       	adiw	r24, 0x01	; 1
    3052:	90 93 6d 04 	sts	0x046D, r25
    3056:	80 93 6c 04 	sts	0x046C, r24
    305a:	09 c0       	rjmp	.+18     	; 0x306e <__vector_25+0xa2>
		break;
	case CALL_SIZE:
		call_size_cnt++;
    305c:	80 91 6e 04 	lds	r24, 0x046E
    3060:	90 91 6f 04 	lds	r25, 0x046F
    3064:	01 96       	adiw	r24, 0x01	; 1
    3066:	90 93 6f 04 	sts	0x046F, r25
    306a:	80 93 6e 04 	sts	0x046E, r24
		break;
	}
	
	if(call_size_flag == 1)	{
    306e:	80 91 62 04 	lds	r24, 0x0462
    3072:	90 91 63 04 	lds	r25, 0x0463
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	91 05       	cpc	r25, r1
    307a:	91 f4       	brne	.+36     	; 0x30a0 <__vector_25+0xd4>
		img_buffer[img_cnt] = uart0_data;
    307c:	80 91 60 04 	lds	r24, 0x0460
    3080:	90 91 61 04 	lds	r25, 0x0461
    3084:	fc 01       	movw	r30, r24
    3086:	e4 54       	subi	r30, 0x44	; 68
    3088:	fd 4f       	sbci	r31, 0xFD	; 253
    308a:	8f 85       	ldd	r24, Y+15	; 0x0f
    308c:	80 83       	st	Z, r24
		img_cnt++;
    308e:	80 91 60 04 	lds	r24, 0x0460
    3092:	90 91 61 04 	lds	r25, 0x0461
    3096:	01 96       	adiw	r24, 0x01	; 1
    3098:	90 93 61 04 	sts	0x0461, r25
    309c:	80 93 60 04 	sts	0x0460, r24
	}

	if(uart0_data == 0xff)
    30a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a2:	8f 3f       	cpi	r24, 0xFF	; 255
    30a4:	31 f4       	brne	.+12     	; 0x30b2 <__vector_25+0xe6>
		img_data_start_flag = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	90 93 67 04 	sts	0x0467, r25
    30ae:	80 93 66 04 	sts	0x0466, r24
	
	if(uart0_data == 0xd9)
    30b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b4:	89 3d       	cpi	r24, 0xD9	; 217
    30b6:	39 f4       	brne	.+14     	; 0x30c6 <__vector_25+0xfa>
		img_data_cnt = 1;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	90 93 69 04 	sts	0x0469, r25
    30c0:	80 93 68 04 	sts	0x0468, r24
    30c4:	a3 c0       	rjmp	.+326    	; 0x320c <__vector_25+0x240>
	else	{
		if(uart0_data == 0x76 && img_data_cnt == 1)	{
    30c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c8:	86 37       	cpi	r24, 0x76	; 118
    30ca:	09 f0       	breq	.+2      	; 0x30ce <__vector_25+0x102>
    30cc:	9b c0       	rjmp	.+310    	; 0x3204 <__vector_25+0x238>
    30ce:	80 91 68 04 	lds	r24, 0x0468
    30d2:	90 91 69 04 	lds	r25, 0x0469
    30d6:	81 30       	cpi	r24, 0x01	; 1
    30d8:	91 05       	cpc	r25, r1
    30da:	09 f0       	breq	.+2      	; 0x30de <__vector_25+0x112>
    30dc:	93 c0       	rjmp	.+294    	; 0x3204 <__vector_25+0x238>
			img_data_start_flag = 0;
    30de:	10 92 67 04 	sts	0x0467, r1
    30e2:	10 92 66 04 	sts	0x0466, r1
			img_data_cnt = 0;
    30e6:	10 92 69 04 	sts	0x0469, r1
    30ea:	10 92 68 04 	sts	0x0468, r1
			Camera_flag = 0;
    30ee:	10 92 4f 04 	sts	0x044F, r1
    30f2:	10 92 4e 04 	sts	0x044E, r1
			printf("\n");
    30f6:	8a e0       	ldi	r24, 0x0A	; 10
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 24 28 	call	0x5048	; 0x5048 <putchar>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a8 ec       	ldi	r26, 0xC8	; 200
    3104:	b2 e4       	ldi	r27, 0x42	; 66
    3106:	8b 87       	std	Y+11, r24	; 0x0b
    3108:	9c 87       	std	Y+12, r25	; 0x0c
    310a:	ad 87       	std	Y+13, r26	; 0x0d
    310c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3110:	7c 85       	ldd	r23, Y+12	; 0x0c
    3112:	8d 85       	ldd	r24, Y+13	; 0x0d
    3114:	9e 85       	ldd	r25, Y+14	; 0x0e
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a e7       	ldi	r20, 0x7A	; 122
    311c:	55 e4       	ldi	r21, 0x45	; 69
    311e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	8f 83       	std	Y+7, r24	; 0x07
    3128:	98 87       	std	Y+8, r25	; 0x08
    312a:	a9 87       	std	Y+9, r26	; 0x09
    312c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    312e:	6f 81       	ldd	r22, Y+7	; 0x07
    3130:	78 85       	ldd	r23, Y+8	; 0x08
    3132:	89 85       	ldd	r24, Y+9	; 0x09
    3134:	9a 85       	ldd	r25, Y+10	; 0x0a
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <__vector_25+0x184>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9e 83       	std	Y+6, r25	; 0x06
    314c:	8d 83       	std	Y+5, r24	; 0x05
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <__vector_25+0x202>
	else if (__tmp > 65535)
    3150:	6f 81       	ldd	r22, Y+7	; 0x07
    3152:	78 85       	ldd	r23, Y+8	; 0x08
    3154:	89 85       	ldd	r24, Y+9	; 0x09
    3156:	9a 85       	ldd	r25, Y+10	; 0x0a
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <__vector_25+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	6b 85       	ldd	r22, Y+11	; 0x0b
    316a:	7c 85       	ldd	r23, Y+12	; 0x0c
    316c:	8d 85       	ldd	r24, Y+13	; 0x0d
    316e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9e 83       	std	Y+6, r25	; 0x06
    318e:	8d 83       	std	Y+5, r24	; 0x05
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <__vector_25+0x1e4>
    3192:	80 e9       	ldi	r24, 0x90	; 144
    3194:	91 e0       	ldi	r25, 0x01	; 1
    3196:	9c 83       	std	Y+4, r25	; 0x04
    3198:	8b 83       	std	Y+3, r24	; 0x03
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <__vector_25+0x1d2>
    31a2:	9c 83       	std	Y+4, r25	; 0x04
    31a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8d 81       	ldd	r24, Y+5	; 0x05
    31a8:	9e 81       	ldd	r25, Y+6	; 0x06
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	9e 83       	std	Y+6, r25	; 0x06
    31ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8d 81       	ldd	r24, Y+5	; 0x05
    31b2:	9e 81       	ldd	r25, Y+6	; 0x06
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <__vector_25+0x1c6>
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <__vector_25+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	6f 81       	ldd	r22, Y+7	; 0x07
    31bc:	78 85       	ldd	r23, Y+8	; 0x08
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <__vector_25+0x20e>
    31de:	9a 83       	std	Y+2, r25	; 0x02
    31e0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			init_buffer(CAMERA);
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
			init_buffer(IMU);
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
			init_buffer(GPS);
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
			init_buffer(ECT);
    31fa:	84 e0       	ldi	r24, 0x04	; 4
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
    3202:	04 c0       	rjmp	.+8      	; 0x320c <__vector_25+0x240>
		}
		else
			img_data_cnt = 0;
    3204:	10 92 69 04 	sts	0x0469, r1
    3208:	10 92 68 04 	sts	0x0468, r1
	}

	if(call_img_flag == 1 && img_data_start_flag == 1)
    320c:	80 91 64 04 	lds	r24, 0x0464
    3210:	90 91 65 04 	lds	r25, 0x0465
    3214:	81 30       	cpi	r24, 0x01	; 1
    3216:	91 05       	cpc	r25, r1
    3218:	59 f4       	brne	.+22     	; 0x3230 <__vector_25+0x264>
    321a:	80 91 66 04 	lds	r24, 0x0466
    321e:	90 91 67 04 	lds	r25, 0x0467
    3222:	81 30       	cpi	r24, 0x01	; 1
    3224:	91 05       	cpc	r25, r1
    3226:	21 f4       	brne	.+8      	; 0x3230 <__vector_25+0x264>
		UDR1 = uart0_data;
    3228:	ee ec       	ldi	r30, 0xCE	; 206
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	8f 85       	ldd	r24, Y+15	; 0x0f
    322e:	80 83       	st	Z, r24
}
    3230:	61 96       	adiw	r28, 0x11	; 17
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	ff 91       	pop	r31
    323c:	ef 91       	pop	r30
    323e:	bf 91       	pop	r27
    3240:	af 91       	pop	r26
    3242:	9f 91       	pop	r25
    3244:	8f 91       	pop	r24
    3246:	7f 91       	pop	r23
    3248:	6f 91       	pop	r22
    324a:	5f 91       	pop	r21
    324c:	4f 91       	pop	r20
    324e:	3f 91       	pop	r19
    3250:	2f 91       	pop	r18
    3252:	0f 90       	pop	r0
    3254:	00 92 5b 00 	sts	0x005B, r0
    3258:	0f 90       	pop	r0
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	0f 90       	pop	r0
    325e:	1f 90       	pop	r1
    3260:	18 95       	reti

00003262 <printf_buffer>:


void printf_buffer()	{
    3262:	df 93       	push	r29
    3264:	cf 93       	push	r28
    3266:	0f 92       	push	r0
    3268:	0f 92       	push	r0
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
	int i;
	printf("\n");
    326e:	8a e0       	ldi	r24, 0x0A	; 10
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	0e 94 24 28 	call	0x5048	; 0x5048 <putchar>
	for(i=0; i<9; i++)
    3276:	1a 82       	std	Y+2, r1	; 0x02
    3278:	19 82       	std	Y+1, r1	; 0x01
    327a:	1e c0       	rjmp	.+60     	; 0x32b8 <printf_buffer+0x56>
		printf("%x ", img_buffer[i]);
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	fc 01       	movw	r30, r24
    3282:	e4 54       	subi	r30, 0x44	; 68
    3284:	fd 4f       	sbci	r31, 0xFD	; 253
    3286:	80 81       	ld	r24, Z
    3288:	28 2f       	mov	r18, r24
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	00 d0       	rcall	.+0      	; 0x328e <printf_buffer+0x2c>
    328e:	0f 92       	push	r0
    3290:	ed b7       	in	r30, 0x3d	; 61
    3292:	fe b7       	in	r31, 0x3e	; 62
    3294:	31 96       	adiw	r30, 0x01	; 1
    3296:	81 ee       	ldi	r24, 0xE1	; 225
    3298:	92 e0       	ldi	r25, 0x02	; 2
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	80 83       	st	Z, r24
    329e:	33 83       	std	Z+3, r19	; 0x03
    32a0:	22 83       	std	Z+2, r18	; 0x02
    32a2:	0e 94 12 28 	call	0x5024	; 0x5024 <printf>
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0


void printf_buffer()	{
	int i;
	printf("\n");
	for(i=0; i<9; i++)
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	01 96       	adiw	r24, 0x01	; 1
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	89 30       	cpi	r24, 0x09	; 9
    32be:	91 05       	cpc	r25, r1
    32c0:	ec f2       	brlt	.-70     	; 0x327c <printf_buffer+0x1a>
		printf("%x ", img_buffer[i]);
}
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <__vector_36>:


ISR(USART1_RX_vect)	//Computer
{
    32cc:	1f 92       	push	r1
    32ce:	0f 92       	push	r0
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	0f 92       	push	r0
    32d4:	00 90 5b 00 	lds	r0, 0x005B
    32d8:	0f 92       	push	r0
    32da:	11 24       	eor	r1, r1
    32dc:	2f 93       	push	r18
    32de:	3f 93       	push	r19
    32e0:	4f 93       	push	r20
    32e2:	5f 93       	push	r21
    32e4:	6f 93       	push	r22
    32e6:	7f 93       	push	r23
    32e8:	8f 93       	push	r24
    32ea:	9f 93       	push	r25
    32ec:	af 93       	push	r26
    32ee:	bf 93       	push	r27
    32f0:	ef 93       	push	r30
    32f2:	ff 93       	push	r31
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	61 97       	sbiw	r28, 0x11	; 17
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	cd bf       	out	0x3d, r28	; 61
	char ch = UDR1;
    3302:	ee ec       	ldi	r30, 0xCE	; 206
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	8f 87       	std	Y+15, r24	; 0x0f

	if(Yaw_flag == 1)	{
    330a:	80 91 4a 04 	lds	r24, 0x044A
    330e:	90 91 4b 04 	lds	r25, 0x044B
    3312:	81 30       	cpi	r24, 0x01	; 1
    3314:	91 05       	cpc	r25, r1
    3316:	79 f4       	brne	.+30     	; 0x3336 <__vector_36+0x6a>
		OCR0A = ch;
    3318:	e7 e4       	ldi	r30, 0x47	; 71
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	8f 85       	ldd	r24, Y+15	; 0x0f
    331e:	80 83       	st	Z, r24
		Pitch_flag = 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	90 93 4d 04 	sts	0x044D, r25
    3328:	80 93 4c 04 	sts	0x044C, r24
		Yaw_flag = 0;
    332c:	10 92 4b 04 	sts	0x044B, r1
    3330:	10 92 4a 04 	sts	0x044A, r1
    3334:	0f c0       	rjmp	.+30     	; 0x3354 <__vector_36+0x88>
	}
	else if(Pitch_flag == 1)	{
    3336:	80 91 4c 04 	lds	r24, 0x044C
    333a:	90 91 4d 04 	lds	r25, 0x044D
    333e:	81 30       	cpi	r24, 0x01	; 1
    3340:	91 05       	cpc	r25, r1
    3342:	41 f4       	brne	.+16     	; 0x3354 <__vector_36+0x88>
		OCR0B = ch;
    3344:	e8 e4       	ldi	r30, 0x48	; 72
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	8f 85       	ldd	r24, Y+15	; 0x0f
    334a:	80 83       	st	Z, r24
		Pitch_flag = 0;
    334c:	10 92 4d 04 	sts	0x044D, r1
    3350:	10 92 4c 04 	sts	0x044C, r1
	}

	switch(ch)
    3354:	8f 85       	ldd	r24, Y+15	; 0x0f
    3356:	28 2f       	mov	r18, r24
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	39 8b       	std	Y+17, r19	; 0x11
    335c:	28 8b       	std	Y+16, r18	; 0x10
    335e:	88 89       	ldd	r24, Y+16	; 0x10
    3360:	99 89       	ldd	r25, Y+17	; 0x11
    3362:	87 36       	cpi	r24, 0x67	; 103
    3364:	91 05       	cpc	r25, r1
    3366:	09 f4       	brne	.+2      	; 0x336a <__vector_36+0x9e>
    3368:	46 c1       	rjmp	.+652    	; 0x35f6 <__vector_36+0x32a>
    336a:	28 89       	ldd	r18, Y+16	; 0x10
    336c:	39 89       	ldd	r19, Y+17	; 0x11
    336e:	28 36       	cpi	r18, 0x68	; 104
    3370:	31 05       	cpc	r19, r1
    3372:	f4 f4       	brge	.+60     	; 0x33b0 <__vector_36+0xe4>
    3374:	88 89       	ldd	r24, Y+16	; 0x10
    3376:	99 89       	ldd	r25, Y+17	; 0x11
    3378:	84 36       	cpi	r24, 0x64	; 100
    337a:	91 05       	cpc	r25, r1
    337c:	09 f4       	brne	.+2      	; 0x3380 <__vector_36+0xb4>
    337e:	d2 c0       	rjmp	.+420    	; 0x3524 <__vector_36+0x258>
    3380:	28 89       	ldd	r18, Y+16	; 0x10
    3382:	39 89       	ldd	r19, Y+17	; 0x11
    3384:	25 36       	cpi	r18, 0x65	; 101
    3386:	31 05       	cpc	r19, r1
    3388:	64 f4       	brge	.+24     	; 0x33a2 <__vector_36+0xd6>
    338a:	88 89       	ldd	r24, Y+16	; 0x10
    338c:	99 89       	ldd	r25, Y+17	; 0x11
    338e:	83 32       	cpi	r24, 0x23	; 35
    3390:	91 05       	cpc	r25, r1
    3392:	09 f4       	brne	.+2      	; 0x3396 <__vector_36+0xca>
    3394:	c0 c0       	rjmp	.+384    	; 0x3516 <__vector_36+0x24a>
    3396:	28 89       	ldd	r18, Y+16	; 0x10
    3398:	39 89       	ldd	r19, Y+17	; 0x11
    339a:	23 36       	cpi	r18, 0x63	; 99
    339c:	31 05       	cpc	r19, r1
    339e:	39 f1       	breq	.+78     	; 0x33ee <__vector_36+0x122>
    33a0:	3c c1       	rjmp	.+632    	; 0x361a <__vector_36+0x34e>
    33a2:	88 89       	ldd	r24, Y+16	; 0x10
    33a4:	99 89       	ldd	r25, Y+17	; 0x11
    33a6:	86 36       	cpi	r24, 0x66	; 102
    33a8:	91 05       	cpc	r25, r1
    33aa:	09 f4       	brne	.+2      	; 0x33ae <__vector_36+0xe2>
    33ac:	2c c1       	rjmp	.+600    	; 0x3606 <__vector_36+0x33a>
    33ae:	35 c1       	rjmp	.+618    	; 0x361a <__vector_36+0x34e>
    33b0:	28 89       	ldd	r18, Y+16	; 0x10
    33b2:	39 89       	ldd	r19, Y+17	; 0x11
    33b4:	2f 36       	cpi	r18, 0x6F	; 111
    33b6:	31 05       	cpc	r19, r1
    33b8:	09 f4       	brne	.+2      	; 0x33bc <__vector_36+0xf0>
    33ba:	09 c1       	rjmp	.+530    	; 0x35ce <__vector_36+0x302>
    33bc:	88 89       	ldd	r24, Y+16	; 0x10
    33be:	99 89       	ldd	r25, Y+17	; 0x11
    33c0:	80 37       	cpi	r24, 0x70	; 112
    33c2:	91 05       	cpc	r25, r1
    33c4:	3c f4       	brge	.+14     	; 0x33d4 <__vector_36+0x108>
    33c6:	28 89       	ldd	r18, Y+16	; 0x10
    33c8:	39 89       	ldd	r19, Y+17	; 0x11
    33ca:	29 36       	cpi	r18, 0x69	; 105
    33cc:	31 05       	cpc	r19, r1
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <__vector_36+0x106>
    33d0:	0d c1       	rjmp	.+538    	; 0x35ec <__vector_36+0x320>
    33d2:	23 c1       	rjmp	.+582    	; 0x361a <__vector_36+0x34e>
    33d4:	88 89       	ldd	r24, Y+16	; 0x10
    33d6:	99 89       	ldd	r25, Y+17	; 0x11
    33d8:	82 37       	cpi	r24, 0x72	; 114
    33da:	91 05       	cpc	r25, r1
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <__vector_36+0x114>
    33de:	10 c1       	rjmp	.+544    	; 0x3600 <__vector_36+0x334>
    33e0:	28 89       	ldd	r18, Y+16	; 0x10
    33e2:	39 89       	ldd	r19, Y+17	; 0x11
    33e4:	23 37       	cpi	r18, 0x73	; 115
    33e6:	31 05       	cpc	r19, r1
    33e8:	09 f4       	brne	.+2      	; 0x33ec <__vector_36+0x120>
    33ea:	8a c0       	rjmp	.+276    	; 0x3500 <__vector_36+0x234>
    33ec:	16 c1       	rjmp	.+556    	; 0x361a <__vector_36+0x34e>
	{
		case 'c':
			UCSR3B = 0x00; //_delay_ms(5);
    33ee:	e1 e3       	ldi	r30, 0x31	; 49
    33f0:	f1 e0       	ldi	r31, 0x01	; 1
    33f2:	10 82       	st	Z, r1
			UCSR2B = 0x00;
    33f4:	e1 ed       	ldi	r30, 0xD1	; 209
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	10 82       	st	Z, r1
			Camera_flag = 1;	//Camera_flag On 상태 Set
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	90 93 4f 04 	sts	0x044F, r25
    3402:	80 93 4e 04 	sts	0x044E, r24
			o_flag = 0;
    3406:	10 92 bb 02 	sts	0x02BB, r1
    340a:	10 92 ba 02 	sts	0x02BA, r1
			imu_buffer_flag = 0; //imu, gps buffer flag 를 0으로 만듬으로써 중간에 데이터가 들어오지 못함.
    340e:	10 92 5b 04 	sts	0x045B, r1
			gps_buffer_flag = 0;	
    3412:	10 92 5a 04 	sts	0x045A, r1
			idle();
    3416:	0e 94 78 01 	call	0x2f0	; 0x2f0 <idle>
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	a8 ec       	ldi	r26, 0xC8	; 200
    3420:	b2 e4       	ldi	r27, 0x42	; 66
    3422:	8b 87       	std	Y+11, r24	; 0x0b
    3424:	9c 87       	std	Y+12, r25	; 0x0c
    3426:	ad 87       	std	Y+13, r26	; 0x0d
    3428:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    342a:	6b 85       	ldd	r22, Y+11	; 0x0b
    342c:	7c 85       	ldd	r23, Y+12	; 0x0c
    342e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3430:	9e 85       	ldd	r25, Y+14	; 0x0e
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	4a e7       	ldi	r20, 0x7A	; 122
    3438:	55 e4       	ldi	r21, 0x45	; 69
    343a:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	8f 83       	std	Y+7, r24	; 0x07
    3444:	98 87       	std	Y+8, r25	; 0x08
    3446:	a9 87       	std	Y+9, r26	; 0x09
    3448:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    344a:	6f 81       	ldd	r22, Y+7	; 0x07
    344c:	78 85       	ldd	r23, Y+8	; 0x08
    344e:	89 85       	ldd	r24, Y+9	; 0x09
    3450:	9a 85       	ldd	r25, Y+10	; 0x0a
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e8       	ldi	r20, 0x80	; 128
    3458:	5f e3       	ldi	r21, 0x3F	; 63
    345a:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    345e:	88 23       	and	r24, r24
    3460:	2c f4       	brge	.+10     	; 0x346c <__vector_36+0x1a0>
		__ticks = 1;
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9e 83       	std	Y+6, r25	; 0x06
    3468:	8d 83       	std	Y+5, r24	; 0x05
    346a:	3f c0       	rjmp	.+126    	; 0x34ea <__vector_36+0x21e>
	else if (__tmp > 65535)
    346c:	6f 81       	ldd	r22, Y+7	; 0x07
    346e:	78 85       	ldd	r23, Y+8	; 0x08
    3470:	89 85       	ldd	r24, Y+9	; 0x09
    3472:	9a 85       	ldd	r25, Y+10	; 0x0a
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	3f ef       	ldi	r19, 0xFF	; 255
    3478:	4f e7       	ldi	r20, 0x7F	; 127
    347a:	57 e4       	ldi	r21, 0x47	; 71
    347c:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    3480:	18 16       	cp	r1, r24
    3482:	4c f5       	brge	.+82     	; 0x34d6 <__vector_36+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3484:	6b 85       	ldd	r22, Y+11	; 0x0b
    3486:	7c 85       	ldd	r23, Y+12	; 0x0c
    3488:	8d 85       	ldd	r24, Y+13	; 0x0d
    348a:	9e 85       	ldd	r25, Y+14	; 0x0e
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e2       	ldi	r20, 0x20	; 32
    3492:	51 e4       	ldi	r21, 0x41	; 65
    3494:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	9e 83       	std	Y+6, r25	; 0x06
    34aa:	8d 83       	std	Y+5, r24	; 0x05
    34ac:	0f c0       	rjmp	.+30     	; 0x34cc <__vector_36+0x200>
    34ae:	80 e9       	ldi	r24, 0x90	; 144
    34b0:	91 e0       	ldi	r25, 0x01	; 1
    34b2:	9c 83       	std	Y+4, r25	; 0x04
    34b4:	8b 83       	std	Y+3, r24	; 0x03
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <__vector_36+0x1ee>
    34be:	9c 83       	std	Y+4, r25	; 0x04
    34c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	9e 83       	std	Y+6, r25	; 0x06
    34ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34cc:	8d 81       	ldd	r24, Y+5	; 0x05
    34ce:	9e 81       	ldd	r25, Y+6	; 0x06
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	69 f7       	brne	.-38     	; 0x34ae <__vector_36+0x1e2>
    34d4:	a2 c0       	rjmp	.+324    	; 0x361a <__vector_36+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	9e 83       	std	Y+6, r25	; 0x06
    34e8:	8d 83       	std	Y+5, r24	; 0x05
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	9e 81       	ldd	r25, Y+6	; 0x06
    34ee:	9a 83       	std	Y+2, r25	; 0x02
    34f0:	89 83       	std	Y+1, r24	; 0x01
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	9a 81       	ldd	r25, Y+2	; 0x02
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <__vector_36+0x22a>
    34fa:	9a 83       	std	Y+2, r25	; 0x02
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	8d c0       	rjmp	.+282    	; 0x361a <__vector_36+0x34e>
			_delay_ms(100);
			break;
		case 's':
			Cansat_start_flag = 1;	//call_img를 빼고 Start_flag를 1로 만들었음
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	90 93 49 04 	sts	0x0449, r25
    3508:	80 93 48 04 	sts	0x0448, r24
			printf("s CALL\n");	//TEST
    350c:	85 ee       	ldi	r24, 0xE5	; 229
    350e:	92 e0       	ldi	r25, 0x02	; 2
    3510:	0e 94 2b 28 	call	0x5056	; 0x5056 <puts>
    3514:	82 c0       	rjmp	.+260    	; 0x361a <__vector_36+0x34e>
			break;
		case '#':
			Yaw_flag = 1;
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	90 93 4b 04 	sts	0x044B, r25
    351e:	80 93 4a 04 	sts	0x044A, r24
    3522:	7b c0       	rjmp	.+246    	; 0x361a <__vector_36+0x34e>
			break;
		case 'd'://
			printf("idle cnt : %d\n", idle_cnt);
    3524:	20 91 6a 04 	lds	r18, 0x046A
    3528:	30 91 6b 04 	lds	r19, 0x046B
    352c:	00 d0       	rcall	.+0      	; 0x352e <__vector_36+0x262>
    352e:	0f 92       	push	r0
    3530:	ed b7       	in	r30, 0x3d	; 61
    3532:	fe b7       	in	r31, 0x3e	; 62
    3534:	31 96       	adiw	r30, 0x01	; 1
    3536:	8c ee       	ldi	r24, 0xEC	; 236
    3538:	92 e0       	ldi	r25, 0x02	; 2
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	80 83       	st	Z, r24
    353e:	33 83       	std	Z+3, r19	; 0x03
    3540:	22 83       	std	Z+2, r18	; 0x02
    3542:	0e 94 12 28 	call	0x5024	; 0x5024 <printf>
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
			printf("shot_cnt : %d\n", shot_cnt);
    354e:	20 91 6c 04 	lds	r18, 0x046C
    3552:	30 91 6d 04 	lds	r19, 0x046D
    3556:	00 d0       	rcall	.+0      	; 0x3558 <__vector_36+0x28c>
    3558:	0f 92       	push	r0
    355a:	ed b7       	in	r30, 0x3d	; 61
    355c:	fe b7       	in	r31, 0x3e	; 62
    355e:	31 96       	adiw	r30, 0x01	; 1
    3560:	8b ef       	ldi	r24, 0xFB	; 251
    3562:	92 e0       	ldi	r25, 0x02	; 2
    3564:	91 83       	std	Z+1, r25	; 0x01
    3566:	80 83       	st	Z, r24
    3568:	33 83       	std	Z+3, r19	; 0x03
    356a:	22 83       	std	Z+2, r18	; 0x02
    356c:	0e 94 12 28 	call	0x5024	; 0x5024 <printf>
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
			printf("call_size_cnt : %d\n", call_size_cnt);
    3578:	20 91 6e 04 	lds	r18, 0x046E
    357c:	30 91 6f 04 	lds	r19, 0x046F
    3580:	00 d0       	rcall	.+0      	; 0x3582 <__vector_36+0x2b6>
    3582:	0f 92       	push	r0
    3584:	ed b7       	in	r30, 0x3d	; 61
    3586:	fe b7       	in	r31, 0x3e	; 62
    3588:	31 96       	adiw	r30, 0x01	; 1
    358a:	8a e0       	ldi	r24, 0x0A	; 10
    358c:	93 e0       	ldi	r25, 0x03	; 3
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
    3592:	33 83       	std	Z+3, r19	; 0x03
    3594:	22 83       	std	Z+2, r18	; 0x02
    3596:	0e 94 12 28 	call	0x5024	; 0x5024 <printf>
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
			printf("start_flag : %d\n", Cansat_start_flag);
    35a2:	20 91 48 04 	lds	r18, 0x0448
    35a6:	30 91 49 04 	lds	r19, 0x0449
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <__vector_36+0x2e0>
    35ac:	0f 92       	push	r0
    35ae:	ed b7       	in	r30, 0x3d	; 61
    35b0:	fe b7       	in	r31, 0x3e	; 62
    35b2:	31 96       	adiw	r30, 0x01	; 1
    35b4:	8e e1       	ldi	r24, 0x1E	; 30
    35b6:	93 e0       	ldi	r25, 0x03	; 3
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	80 83       	st	Z, r24
    35bc:	33 83       	std	Z+3, r19	; 0x03
    35be:	22 83       	std	Z+2, r18	; 0x02
    35c0:	0e 94 12 28 	call	0x5024	; 0x5024 <printf>
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	26 c0       	rjmp	.+76     	; 0x361a <__vector_36+0x34e>
			break;
		case 'o':
			load_buffer(GPS);
    35ce:	83 e0       	ldi	r24, 0x03	; 3
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	0e 94 26 1b 	call	0x364c	; 0x364c <load_buffer>
			load_buffer(IMU);
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	0e 94 26 1b 	call	0x364c	; 0x364c <load_buffer>
			o_flag = 1;
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	90 93 bb 02 	sts	0x02BB, r25
    35e6:	80 93 ba 02 	sts	0x02BA, r24
    35ea:	17 c0       	rjmp	.+46     	; 0x361a <__vector_36+0x34e>
			break;
		case 'i':	//imu load buffer
			load_buffer(IMU);
    35ec:	82 e0       	ldi	r24, 0x02	; 2
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 26 1b 	call	0x364c	; 0x364c <load_buffer>
    35f4:	12 c0       	rjmp	.+36     	; 0x361a <__vector_36+0x34e>
			break;	
		case 'g':	//gps load buffer
			load_buffer(GPS);
    35f6:	83 e0       	ldi	r24, 0x03	; 3
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	0e 94 26 1b 	call	0x364c	; 0x364c <load_buffer>
    35fe:	0d c0       	rjmp	.+26     	; 0x361a <__vector_36+0x34e>
			break;
		case 'r':
			asm("jmp 0");
    3600:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3604:	0a c0       	rjmp	.+20     	; 0x361a <__vector_36+0x34e>
			break;
		case 'f':
			UCSR3B = 0x00; //_delay_ms(5);
    3606:	e1 e3       	ldi	r30, 0x31	; 49
    3608:	f1 e0       	ldi	r31, 0x01	; 1
    360a:	10 82       	st	Z, r1
			UCSR2B = 0x00;
    360c:	e1 ed       	ldi	r30, 0xD1	; 209
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	10 82       	st	Z, r1
			o_flag = 0;
    3612:	10 92 bb 02 	sts	0x02BB, r1
    3616:	10 92 ba 02 	sts	0x02BA, r1
			break;			
	}
}
    361a:	61 96       	adiw	r28, 0x11	; 17
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	ff 91       	pop	r31
    3626:	ef 91       	pop	r30
    3628:	bf 91       	pop	r27
    362a:	af 91       	pop	r26
    362c:	9f 91       	pop	r25
    362e:	8f 91       	pop	r24
    3630:	7f 91       	pop	r23
    3632:	6f 91       	pop	r22
    3634:	5f 91       	pop	r21
    3636:	4f 91       	pop	r20
    3638:	3f 91       	pop	r19
    363a:	2f 91       	pop	r18
    363c:	0f 90       	pop	r0
    363e:	00 92 5b 00 	sts	0x005B, r0
    3642:	0f 90       	pop	r0
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	0f 90       	pop	r0
    3648:	1f 90       	pop	r1
    364a:	18 95       	reti

0000364c <load_buffer>:


void load_buffer(int select)	//송신 인터럽트를 허용하는 함수
{
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	a0 97       	sbiw	r28, 0x20	; 32
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	9e 8f       	std	Y+30, r25	; 0x1e
    3662:	8d 8f       	std	Y+29, r24	; 0x1d
	switch(select)
    3664:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3666:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3668:	98 a3       	std	Y+32, r25	; 0x20
    366a:	8f 8f       	std	Y+31, r24	; 0x1f
    366c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    366e:	98 a1       	ldd	r25, Y+32	; 0x20
    3670:	82 30       	cpi	r24, 0x02	; 2
    3672:	91 05       	cpc	r25, r1
    3674:	09 f4       	brne	.+2      	; 0x3678 <load_buffer+0x2c>
    3676:	7d c0       	rjmp	.+250    	; 0x3772 <load_buffer+0x126>
    3678:	8f 8d       	ldd	r24, Y+31	; 0x1f
    367a:	98 a1       	ldd	r25, Y+32	; 0x20
    367c:	83 30       	cpi	r24, 0x03	; 3
    367e:	91 05       	cpc	r25, r1
    3680:	09 f0       	breq	.+2      	; 0x3684 <load_buffer+0x38>
    3682:	ed c0       	rjmp	.+474    	; 0x385e <load_buffer+0x212>
	{
		case GPS:
			UCSR3B=0x98; _delay_ms(2);
    3684:	e1 e3       	ldi	r30, 0x31	; 49
    3686:	f1 e0       	ldi	r31, 0x01	; 1
    3688:	88 e9       	ldi	r24, 0x98	; 152
    368a:	80 83       	st	Z, r24
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	a0 e0       	ldi	r26, 0x00	; 0
    3692:	b0 e4       	ldi	r27, 0x40	; 64
    3694:	89 8f       	std	Y+25, r24	; 0x19
    3696:	9a 8f       	std	Y+26, r25	; 0x1a
    3698:	ab 8f       	std	Y+27, r26	; 0x1b
    369a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369c:	69 8d       	ldd	r22, Y+25	; 0x19
    369e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	4a e7       	ldi	r20, 0x7A	; 122
    36aa:	55 e4       	ldi	r21, 0x45	; 69
    36ac:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	8d 8b       	std	Y+21, r24	; 0x15
    36b6:	9e 8b       	std	Y+22, r25	; 0x16
    36b8:	af 8b       	std	Y+23, r26	; 0x17
    36ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36bc:	6d 89       	ldd	r22, Y+21	; 0x15
    36be:	7e 89       	ldd	r23, Y+22	; 0x16
    36c0:	8f 89       	ldd	r24, Y+23	; 0x17
    36c2:	98 8d       	ldd	r25, Y+24	; 0x18
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e8       	ldi	r20, 0x80	; 128
    36ca:	5f e3       	ldi	r21, 0x3F	; 63
    36cc:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    36d0:	88 23       	and	r24, r24
    36d2:	2c f4       	brge	.+10     	; 0x36de <load_buffer+0x92>
		__ticks = 1;
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	9c 8b       	std	Y+20, r25	; 0x14
    36da:	8b 8b       	std	Y+19, r24	; 0x13
    36dc:	3f c0       	rjmp	.+126    	; 0x375c <load_buffer+0x110>
	else if (__tmp > 65535)
    36de:	6d 89       	ldd	r22, Y+21	; 0x15
    36e0:	7e 89       	ldd	r23, Y+22	; 0x16
    36e2:	8f 89       	ldd	r24, Y+23	; 0x17
    36e4:	98 8d       	ldd	r25, Y+24	; 0x18
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	3f ef       	ldi	r19, 0xFF	; 255
    36ea:	4f e7       	ldi	r20, 0x7F	; 127
    36ec:	57 e4       	ldi	r21, 0x47	; 71
    36ee:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    36f2:	18 16       	cp	r1, r24
    36f4:	4c f5       	brge	.+82     	; 0x3748 <load_buffer+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f6:	69 8d       	ldd	r22, Y+25	; 0x19
    36f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e2       	ldi	r20, 0x20	; 32
    3704:	51 e4       	ldi	r21, 0x41	; 65
    3706:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	bc 01       	movw	r22, r24
    3710:	cd 01       	movw	r24, r26
    3712:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	9c 8b       	std	Y+20, r25	; 0x14
    371c:	8b 8b       	std	Y+19, r24	; 0x13
    371e:	0f c0       	rjmp	.+30     	; 0x373e <load_buffer+0xf2>
    3720:	80 e9       	ldi	r24, 0x90	; 144
    3722:	91 e0       	ldi	r25, 0x01	; 1
    3724:	9a 8b       	std	Y+18, r25	; 0x12
    3726:	89 8b       	std	Y+17, r24	; 0x11
    3728:	89 89       	ldd	r24, Y+17	; 0x11
    372a:	9a 89       	ldd	r25, Y+18	; 0x12
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	f1 f7       	brne	.-4      	; 0x372c <load_buffer+0xe0>
    3730:	9a 8b       	std	Y+18, r25	; 0x12
    3732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3734:	8b 89       	ldd	r24, Y+19	; 0x13
    3736:	9c 89       	ldd	r25, Y+20	; 0x14
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	9c 8b       	std	Y+20, r25	; 0x14
    373c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    373e:	8b 89       	ldd	r24, Y+19	; 0x13
    3740:	9c 89       	ldd	r25, Y+20	; 0x14
    3742:	00 97       	sbiw	r24, 0x00	; 0
    3744:	69 f7       	brne	.-38     	; 0x3720 <load_buffer+0xd4>
    3746:	8b c0       	rjmp	.+278    	; 0x385e <load_buffer+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3748:	6d 89       	ldd	r22, Y+21	; 0x15
    374a:	7e 89       	ldd	r23, Y+22	; 0x16
    374c:	8f 89       	ldd	r24, Y+23	; 0x17
    374e:	98 8d       	ldd	r25, Y+24	; 0x18
    3750:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	9c 8b       	std	Y+20, r25	; 0x14
    375a:	8b 8b       	std	Y+19, r24	; 0x13
    375c:	8b 89       	ldd	r24, Y+19	; 0x13
    375e:	9c 89       	ldd	r25, Y+20	; 0x14
    3760:	98 8b       	std	Y+16, r25	; 0x10
    3762:	8f 87       	std	Y+15, r24	; 0x0f
    3764:	8f 85       	ldd	r24, Y+15	; 0x0f
    3766:	98 89       	ldd	r25, Y+16	; 0x10
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <load_buffer+0x11c>
    376c:	98 8b       	std	Y+16, r25	; 0x10
    376e:	8f 87       	std	Y+15, r24	; 0x0f
    3770:	76 c0       	rjmp	.+236    	; 0x385e <load_buffer+0x212>
			break;
		case IMU:
			UCSR2B=0x98; _delay_ms(2);
    3772:	e1 ed       	ldi	r30, 0xD1	; 209
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	88 e9       	ldi	r24, 0x98	; 152
    3778:	80 83       	st	Z, r24
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	a0 e0       	ldi	r26, 0x00	; 0
    3780:	b0 e4       	ldi	r27, 0x40	; 64
    3782:	8b 87       	std	Y+11, r24	; 0x0b
    3784:	9c 87       	std	Y+12, r25	; 0x0c
    3786:	ad 87       	std	Y+13, r26	; 0x0d
    3788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378a:	6b 85       	ldd	r22, Y+11	; 0x0b
    378c:	7c 85       	ldd	r23, Y+12	; 0x0c
    378e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3790:	9e 85       	ldd	r25, Y+14	; 0x0e
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	4a e7       	ldi	r20, 0x7A	; 122
    3798:	55 e4       	ldi	r21, 0x45	; 69
    379a:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	8f 83       	std	Y+7, r24	; 0x07
    37a4:	98 87       	std	Y+8, r25	; 0x08
    37a6:	a9 87       	std	Y+9, r26	; 0x09
    37a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37aa:	6f 81       	ldd	r22, Y+7	; 0x07
    37ac:	78 85       	ldd	r23, Y+8	; 0x08
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	40 e8       	ldi	r20, 0x80	; 128
    37b8:	5f e3       	ldi	r21, 0x3F	; 63
    37ba:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    37be:	88 23       	and	r24, r24
    37c0:	2c f4       	brge	.+10     	; 0x37cc <load_buffer+0x180>
		__ticks = 1;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	3f c0       	rjmp	.+126    	; 0x384a <load_buffer+0x1fe>
	else if (__tmp > 65535)
    37cc:	6f 81       	ldd	r22, Y+7	; 0x07
    37ce:	78 85       	ldd	r23, Y+8	; 0x08
    37d0:	89 85       	ldd	r24, Y+9	; 0x09
    37d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	3f ef       	ldi	r19, 0xFF	; 255
    37d8:	4f e7       	ldi	r20, 0x7F	; 127
    37da:	57 e4       	ldi	r21, 0x47	; 71
    37dc:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    37e0:	18 16       	cp	r1, r24
    37e2:	4c f5       	brge	.+82     	; 0x3836 <load_buffer+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e2       	ldi	r20, 0x20	; 32
    37f2:	51 e4       	ldi	r21, 0x41	; 65
    37f4:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	bc 01       	movw	r22, r24
    37fe:	cd 01       	movw	r24, r26
    3800:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	9e 83       	std	Y+6, r25	; 0x06
    380a:	8d 83       	std	Y+5, r24	; 0x05
    380c:	0f c0       	rjmp	.+30     	; 0x382c <load_buffer+0x1e0>
    380e:	80 e9       	ldi	r24, 0x90	; 144
    3810:	91 e0       	ldi	r25, 0x01	; 1
    3812:	9c 83       	std	Y+4, r25	; 0x04
    3814:	8b 83       	std	Y+3, r24	; 0x03
    3816:	8b 81       	ldd	r24, Y+3	; 0x03
    3818:	9c 81       	ldd	r25, Y+4	; 0x04
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	f1 f7       	brne	.-4      	; 0x381a <load_buffer+0x1ce>
    381e:	9c 83       	std	Y+4, r25	; 0x04
    3820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3822:	8d 81       	ldd	r24, Y+5	; 0x05
    3824:	9e 81       	ldd	r25, Y+6	; 0x06
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	9e 83       	std	Y+6, r25	; 0x06
    382a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382c:	8d 81       	ldd	r24, Y+5	; 0x05
    382e:	9e 81       	ldd	r25, Y+6	; 0x06
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	69 f7       	brne	.-38     	; 0x380e <load_buffer+0x1c2>
    3834:	14 c0       	rjmp	.+40     	; 0x385e <load_buffer+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3836:	6f 81       	ldd	r22, Y+7	; 0x07
    3838:	78 85       	ldd	r23, Y+8	; 0x08
    383a:	89 85       	ldd	r24, Y+9	; 0x09
    383c:	9a 85       	ldd	r25, Y+10	; 0x0a
    383e:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	8d 83       	std	Y+5, r24	; 0x05
    384a:	8d 81       	ldd	r24, Y+5	; 0x05
    384c:	9e 81       	ldd	r25, Y+6	; 0x06
    384e:	9a 83       	std	Y+2, r25	; 0x02
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	9a 81       	ldd	r25, Y+2	; 0x02
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	f1 f7       	brne	.-4      	; 0x3856 <load_buffer+0x20a>
    385a:	9a 83       	std	Y+2, r25	; 0x02
    385c:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
}
    385e:	a0 96       	adiw	r28, 0x20	; 32
    3860:	0f b6       	in	r0, 0x3f	; 63
    3862:	f8 94       	cli
    3864:	de bf       	out	0x3e, r29	; 62
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	cd bf       	out	0x3d, r28	; 61
    386a:	cf 91       	pop	r28
    386c:	df 91       	pop	r29
    386e:	08 95       	ret

00003870 <SendToStation>:


void SendToStation(int select)
{
    3870:	df 93       	push	r29
    3872:	cf 93       	push	r28
    3874:	00 d0       	rcall	.+0      	; 0x3876 <SendToStation+0x6>
    3876:	00 d0       	rcall	.+0      	; 0x3878 <SendToStation+0x8>
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	9c 83       	std	Y+4, r25	; 0x04
    387e:	8b 83       	std	Y+3, r24	; 0x03
	int i;

	switch(select)
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	9c 81       	ldd	r25, Y+4	; 0x04
    3884:	9e 83       	std	Y+6, r25	; 0x06
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	8d 81       	ldd	r24, Y+5	; 0x05
    388a:	9e 81       	ldd	r25, Y+6	; 0x06
    388c:	82 30       	cpi	r24, 0x02	; 2
    388e:	91 05       	cpc	r25, r1
    3890:	89 f0       	breq	.+34     	; 0x38b4 <SendToStation+0x44>
    3892:	8d 81       	ldd	r24, Y+5	; 0x05
    3894:	9e 81       	ldd	r25, Y+6	; 0x06
    3896:	83 30       	cpi	r24, 0x03	; 3
    3898:	91 05       	cpc	r25, r1
    389a:	09 f0       	breq	.+2      	; 0x389e <SendToStation+0x2e>
    389c:	41 c0       	rjmp	.+130    	; 0x3920 <SendToStation+0xb0>
	{
		case GPS:
			printf("%s\n", gps_buffer);
    389e:	80 e0       	ldi	r24, 0x00	; 0
    38a0:	92 e0       	ldi	r25, 0x02	; 2
    38a2:	0e 94 2b 28 	call	0x5056	; 0x5056 <puts>
			init_buffer(GPS);
    38a6:	83 e0       	ldi	r24, 0x03	; 3
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
			gps_buffer_flag = 0;
    38ae:	10 92 5a 04 	sts	0x045A, r1
    38b2:	36 c0       	rjmp	.+108    	; 0x3920 <SendToStation+0xb0>

			// UCSR3B = 0x00;
			break;
		case IMU:

			for(i=0; i<15; i++)	{	//15로 수정 -> IMU DATA Length
    38b4:	1a 82       	std	Y+2, r1	; 0x02
    38b6:	19 82       	std	Y+1, r1	; 0x01
    38b8:	22 c0       	rjmp	.+68     	; 0x38fe <SendToStation+0x8e>
				if(i==3)
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	9a 81       	ldd	r25, Y+2	; 0x02
    38be:	83 30       	cpi	r24, 0x03	; 3
    38c0:	91 05       	cpc	r25, r1
    38c2:	49 f4       	brne	.+18     	; 0x38d6 <SendToStation+0x66>
					putchar('\n');	//snp 다음 개행문자를 넣음으로써 데이터인 것을 알 수 있다.
    38c4:	20 91 94 04 	lds	r18, 0x0494
    38c8:	30 91 95 04 	lds	r19, 0x0495
    38cc:	8a e0       	ldi	r24, 0x0A	; 10
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	b9 01       	movw	r22, r18
    38d2:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
				putchar(imu_buffer[i]);
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	9a 81       	ldd	r25, Y+2	; 0x02
    38da:	fc 01       	movw	r30, r24
    38dc:	e0 5b       	subi	r30, 0xB0	; 176
    38de:	fd 4f       	sbci	r31, 0xFD	; 253
    38e0:	80 81       	ld	r24, Z
    38e2:	88 2f       	mov	r24, r24
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	20 91 94 04 	lds	r18, 0x0494
    38ea:	30 91 95 04 	lds	r19, 0x0495
    38ee:	b9 01       	movw	r22, r18
    38f0:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>

			// UCSR3B = 0x00;
			break;
		case IMU:

			for(i=0; i<15; i++)	{	//15로 수정 -> IMU DATA Length
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
    38f8:	01 96       	adiw	r24, 0x01	; 1
    38fa:	9a 83       	std	Y+2, r25	; 0x02
    38fc:	89 83       	std	Y+1, r24	; 0x01
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
    3900:	9a 81       	ldd	r25, Y+2	; 0x02
    3902:	8f 30       	cpi	r24, 0x0F	; 15
    3904:	91 05       	cpc	r25, r1
    3906:	cc f2       	brlt	.-78     	; 0x38ba <SendToStation+0x4a>
				if(i==3)
					putchar('\n');	//snp 다음 개행문자를 넣음으로써 데이터인 것을 알 수 있다.
				putchar(imu_buffer[i]);
			}	printf("\n");
    3908:	8a e0       	ldi	r24, 0x0A	; 10
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	0e 94 24 28 	call	0x5048	; 0x5048 <putchar>


			init_buffer(IMU);
    3910:	82 e0       	ldi	r24, 0x02	; 2
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 6d 11 	call	0x22da	; 0x22da <init_buffer>
			imu_buffer_flag = 0;
    3918:	10 92 5b 04 	sts	0x045B, r1
			imu_buffer_cnt = 0;
    391c:	10 92 5f 04 	sts	0x045F, r1

			break;
	}
}
    3920:	26 96       	adiw	r28, 0x06	; 6
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	f8 94       	cli
    3926:	de bf       	out	0x3e, r29	; 62
    3928:	0f be       	out	0x3f, r0	; 63
    392a:	cd bf       	out	0x3d, r28	; 61
    392c:	cf 91       	pop	r28
    392e:	df 91       	pop	r29
    3930:	08 95       	ret

00003932 <Rotate_Yaw>:

void Rotate_Yaw(void)
{
    3932:	ef 92       	push	r14
    3934:	ff 92       	push	r15
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    393a:	df 93       	push	r29
    393c:	cf 93       	push	r28
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	2e 97       	sbiw	r28, 0x0e	; 14
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
	if(value[0] > -180 && value[0] < 0)	{	//값이 마이너스일 경우에는 
    394e:	80 91 50 04 	lds	r24, 0x0450
    3952:	90 91 51 04 	lds	r25, 0x0451
    3956:	2f ef       	ldi	r18, 0xFF	; 255
    3958:	8d 34       	cpi	r24, 0x4D	; 77
    395a:	92 07       	cpc	r25, r18
    395c:	5c f1       	brlt	.+86     	; 0x39b4 <Rotate_Yaw+0x82>
    395e:	80 91 50 04 	lds	r24, 0x0450
    3962:	90 91 51 04 	lds	r25, 0x0451
    3966:	99 23       	and	r25, r25
    3968:	2c f5       	brge	.+74     	; 0x39b4 <Rotate_Yaw+0x82>
		value[0] = (360 + value[0]) / 3.22;	//다른 연산들을 위해서 value[0] 의 값만 바꾸어준다.
    396a:	80 91 50 04 	lds	r24, 0x0450
    396e:	90 91 51 04 	lds	r25, 0x0451
    3972:	88 59       	subi	r24, 0x98	; 152
    3974:	9e 4f       	sbci	r25, 0xFE	; 254
    3976:	aa 27       	eor	r26, r26
    3978:	97 fd       	sbrc	r25, 7
    397a:	a0 95       	com	r26
    397c:	ba 2f       	mov	r27, r26
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	2b e7       	ldi	r18, 0x7B	; 123
    3990:	34 e1       	ldi	r19, 0x14	; 20
    3992:	4e e4       	ldi	r20, 0x4E	; 78
    3994:	50 e4       	ldi	r21, 0x40	; 64
    3996:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	bc 01       	movw	r22, r24
    39a0:	cd 01       	movw	r24, r26
    39a2:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__fixsfsi>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	90 93 51 04 	sts	0x0451, r25
    39ae:	80 93 50 04 	sts	0x0450, r24
    39b2:	22 c0       	rjmp	.+68     	; 0x39f8 <Rotate_Yaw+0xc6>
	}
	else	{
		value[0] = value[0] / 3.22;	// 이하동문
    39b4:	80 91 50 04 	lds	r24, 0x0450
    39b8:	90 91 51 04 	lds	r25, 0x0451
    39bc:	aa 27       	eor	r26, r26
    39be:	97 fd       	sbrc	r25, 7
    39c0:	a0 95       	com	r26
    39c2:	ba 2f       	mov	r27, r26
    39c4:	bc 01       	movw	r22, r24
    39c6:	cd 01       	movw	r24, r26
    39c8:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	bc 01       	movw	r22, r24
    39d2:	cd 01       	movw	r24, r26
    39d4:	2b e7       	ldi	r18, 0x7B	; 123
    39d6:	34 e1       	ldi	r19, 0x14	; 20
    39d8:	4e e4       	ldi	r20, 0x4E	; 78
    39da:	50 e4       	ldi	r21, 0x40	; 64
    39dc:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	bc 01       	movw	r22, r24
    39e6:	cd 01       	movw	r24, r26
    39e8:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__fixsfsi>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	90 93 51 04 	sts	0x0451, r25
    39f4:	80 93 50 04 	sts	0x0450, r24
	}

	double gps_degree = 0;	
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	a0 e0       	ldi	r26, 0x00	; 0
    39fe:	b0 e0       	ldi	r27, 0x00	; 0
    3a00:	8d 83       	std	Y+5, r24	; 0x05
    3a02:	9e 83       	std	Y+6, r25	; 0x06
    3a04:	af 83       	std	Y+7, r26	; 0x07
    3a06:	b8 87       	std	Y+8, r27	; 0x08
	double sum_degree = 0;	//합을 저장하는 임의변수
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	a0 e0       	ldi	r26, 0x00	; 0
    3a0e:	b0 e0       	ldi	r27, 0x00	; 0
    3a10:	89 83       	std	Y+1, r24	; 0x01
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	ab 83       	std	Y+3, r26	; 0x03
    3a16:	bc 83       	std	Y+4, r27	; 0x04
	
	printf("min %x %x\n",Cansat_lati_min, Cansat_long_min);
    3a18:	20 91 76 04 	lds	r18, 0x0476
    3a1c:	30 91 77 04 	lds	r19, 0x0477
    3a20:	40 91 78 04 	lds	r20, 0x0478
    3a24:	50 91 79 04 	lds	r21, 0x0479
    3a28:	e0 90 86 04 	lds	r14, 0x0486
    3a2c:	f0 90 87 04 	lds	r15, 0x0487
    3a30:	00 91 88 04 	lds	r16, 0x0488
    3a34:	10 91 89 04 	lds	r17, 0x0489
    3a38:	8d b7       	in	r24, 0x3d	; 61
    3a3a:	9e b7       	in	r25, 0x3e	; 62
    3a3c:	0a 97       	sbiw	r24, 0x0a	; 10
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	9e bf       	out	0x3e, r25	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	8d bf       	out	0x3d, r24	; 61
    3a48:	ed b7       	in	r30, 0x3d	; 61
    3a4a:	fe b7       	in	r31, 0x3e	; 62
    3a4c:	31 96       	adiw	r30, 0x01	; 1
    3a4e:	8f e2       	ldi	r24, 0x2F	; 47
    3a50:	93 e0       	ldi	r25, 0x03	; 3
    3a52:	91 83       	std	Z+1, r25	; 0x01
    3a54:	80 83       	st	Z, r24
    3a56:	22 83       	std	Z+2, r18	; 0x02
    3a58:	33 83       	std	Z+3, r19	; 0x03
    3a5a:	44 83       	std	Z+4, r20	; 0x04
    3a5c:	55 83       	std	Z+5, r21	; 0x05
    3a5e:	e6 82       	std	Z+6, r14	; 0x06
    3a60:	f7 82       	std	Z+7, r15	; 0x07
    3a62:	00 87       	std	Z+8, r16	; 0x08
    3a64:	11 87       	std	Z+9, r17	; 0x09
    3a66:	0e 94 12 28 	call	0x5024	; 0x5024 <printf>
    3a6a:	ed b7       	in	r30, 0x3d	; 61
    3a6c:	fe b7       	in	r31, 0x3e	; 62
    3a6e:	3a 96       	adiw	r30, 0x0a	; 10
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	fe bf       	out	0x3e, r31	; 62
    3a76:	0f be       	out	0x3f, r0	; 63
    3a78:	ed bf       	out	0x3d, r30	; 61
	
	gps_degree = (atan((double) (Cansat_lati_min - Station_lati_min) / (double) (Cansat_long_min - Station_long_min) ) * 180 / 3.141592 ) / 3.22;
    3a7a:	80 91 76 04 	lds	r24, 0x0476
    3a7e:	90 91 77 04 	lds	r25, 0x0477
    3a82:	a0 91 78 04 	lds	r26, 0x0478
    3a86:	b0 91 79 04 	lds	r27, 0x0479
    3a8a:	20 91 ae 02 	lds	r18, 0x02AE
    3a8e:	30 91 af 02 	lds	r19, 0x02AF
    3a92:	40 91 b0 02 	lds	r20, 0x02B0
    3a96:	50 91 b1 02 	lds	r21, 0x02B1
    3a9a:	bc 01       	movw	r22, r24
    3a9c:	cd 01       	movw	r24, r26
    3a9e:	0e 94 09 22 	call	0x4412	; 0x4412 <__subsf3>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	7c 01       	movw	r14, r24
    3aa8:	8d 01       	movw	r16, r26
    3aaa:	80 91 86 04 	lds	r24, 0x0486
    3aae:	90 91 87 04 	lds	r25, 0x0487
    3ab2:	a0 91 88 04 	lds	r26, 0x0488
    3ab6:	b0 91 89 04 	lds	r27, 0x0489
    3aba:	20 91 b2 02 	lds	r18, 0x02B2
    3abe:	30 91 b3 02 	lds	r19, 0x02B3
    3ac2:	40 91 b4 02 	lds	r20, 0x02B4
    3ac6:	50 91 b5 02 	lds	r21, 0x02B5
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 09 22 	call	0x4412	; 0x4412 <__subsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	9c 01       	movw	r18, r24
    3ad8:	ad 01       	movw	r20, r26
    3ada:	c8 01       	movw	r24, r16
    3adc:	b7 01       	movw	r22, r14
    3ade:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	cd 01       	movw	r24, r26
    3aea:	0e 94 60 28 	call	0x50c0	; 0x50c0 <atan>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	bc 01       	movw	r22, r24
    3af4:	cd 01       	movw	r24, r26
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	44 e3       	ldi	r20, 0x34	; 52
    3afc:	53 e4       	ldi	r21, 0x43	; 67
    3afe:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	bc 01       	movw	r22, r24
    3b08:	cd 01       	movw	r24, r26
    3b0a:	28 ed       	ldi	r18, 0xD8	; 216
    3b0c:	3f e0       	ldi	r19, 0x0F	; 15
    3b0e:	49 e4       	ldi	r20, 0x49	; 73
    3b10:	50 e4       	ldi	r21, 0x40	; 64
    3b12:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	2b e7       	ldi	r18, 0x7B	; 123
    3b20:	34 e1       	ldi	r19, 0x14	; 20
    3b22:	4e e4       	ldi	r20, 0x4E	; 78
    3b24:	50 e4       	ldi	r21, 0x40	; 64
    3b26:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	8d 83       	std	Y+5, r24	; 0x05
    3b30:	9e 83       	std	Y+6, r25	; 0x06
    3b32:	af 83       	std	Y+7, r26	; 0x07
    3b34:	b8 87       	std	Y+8, r27	; 0x08
	//atan을 45 이라고 가정하였을때 OCR값이 119가 되어야 하므로 14에 가장 가까운 값인 3.22를 나누어주어 value 값을 지정한다. 
	//경도의 차이가 밑면이므로 위도의 차이 / 경도의 차이로 구한다

	
	if(Cansat_lati_min < Station_lati_min && Cansat_long_min < Station_long_min)	{	//캔위성의 오른쪽 위 - 1사분면 : 플러스
    3b36:	80 91 76 04 	lds	r24, 0x0476
    3b3a:	90 91 77 04 	lds	r25, 0x0477
    3b3e:	a0 91 78 04 	lds	r26, 0x0478
    3b42:	b0 91 79 04 	lds	r27, 0x0479
    3b46:	20 91 ae 02 	lds	r18, 0x02AE
    3b4a:	30 91 af 02 	lds	r19, 0x02AF
    3b4e:	40 91 b0 02 	lds	r20, 0x02B0
    3b52:	50 91 b1 02 	lds	r21, 0x02B1
    3b56:	1e 86       	std	Y+14, r1	; 0x0e
    3b58:	bc 01       	movw	r22, r24
    3b5a:	cd 01       	movw	r24, r26
    3b5c:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    3b60:	88 23       	and	r24, r24
    3b62:	14 f4       	brge	.+4      	; 0x3b68 <Rotate_Yaw+0x236>
    3b64:	f1 e0       	ldi	r31, 0x01	; 1
    3b66:	fe 87       	std	Y+14, r31	; 0x0e
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	2e 85       	ldd	r18, Y+14	; 0x0e
    3b6c:	82 27       	eor	r24, r18
    3b6e:	88 23       	and	r24, r24
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <Rotate_Yaw+0x242>
    3b72:	3d c0       	rjmp	.+122    	; 0x3bee <Rotate_Yaw+0x2bc>
    3b74:	80 91 86 04 	lds	r24, 0x0486
    3b78:	90 91 87 04 	lds	r25, 0x0487
    3b7c:	a0 91 88 04 	lds	r26, 0x0488
    3b80:	b0 91 89 04 	lds	r27, 0x0489
    3b84:	20 91 b2 02 	lds	r18, 0x02B2
    3b88:	30 91 b3 02 	lds	r19, 0x02B3
    3b8c:	40 91 b4 02 	lds	r20, 0x02B4
    3b90:	50 91 b5 02 	lds	r21, 0x02B5
    3b94:	1d 86       	std	Y+13, r1	; 0x0d
    3b96:	bc 01       	movw	r22, r24
    3b98:	cd 01       	movw	r24, r26
    3b9a:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    3b9e:	88 23       	and	r24, r24
    3ba0:	14 f4       	brge	.+4      	; 0x3ba6 <Rotate_Yaw+0x274>
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	8d 87       	std	Y+13, r24	; 0x0d
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3baa:	89 27       	eor	r24, r25
    3bac:	88 23       	and	r24, r24
    3bae:	f9 f4       	brne	.+62     	; 0x3bee <Rotate_Yaw+0x2bc>
		sum_degree = 105 + value[0] + 82 + gps_degree;
    3bb0:	80 91 50 04 	lds	r24, 0x0450
    3bb4:	90 91 51 04 	lds	r25, 0x0451
    3bb8:	85 54       	subi	r24, 0x45	; 69
    3bba:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbc:	aa 27       	eor	r26, r26
    3bbe:	97 fd       	sbrc	r25, 7
    3bc0:	a0 95       	com	r26
    3bc2:	ba 2f       	mov	r27, r26
    3bc4:	bc 01       	movw	r22, r24
    3bc6:	cd 01       	movw	r24, r26
    3bc8:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	2d 81       	ldd	r18, Y+5	; 0x05
    3bd6:	3e 81       	ldd	r19, Y+6	; 0x06
    3bd8:	4f 81       	ldd	r20, Y+7	; 0x07
    3bda:	58 85       	ldd	r21, Y+8	; 0x08
    3bdc:	0e 94 3a 22 	call	0x4474	; 0x4474 <__addsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	89 83       	std	Y+1, r24	; 0x01
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	ab 83       	std	Y+3, r26	; 0x03
    3bea:	bc 83       	std	Y+4, r27	; 0x04
    3bec:	02 c1       	rjmp	.+516    	; 0x3df2 <Rotate_Yaw+0x4c0>
	}
	else if(Cansat_lati_min < Station_lati_min && Cansat_long_min > Station_long_min)	{ //왼쪽 위 - 2사분면 : 마이너스
    3bee:	80 91 76 04 	lds	r24, 0x0476
    3bf2:	90 91 77 04 	lds	r25, 0x0477
    3bf6:	a0 91 78 04 	lds	r26, 0x0478
    3bfa:	b0 91 79 04 	lds	r27, 0x0479
    3bfe:	20 91 ae 02 	lds	r18, 0x02AE
    3c02:	30 91 af 02 	lds	r19, 0x02AF
    3c06:	40 91 b0 02 	lds	r20, 0x02B0
    3c0a:	50 91 b1 02 	lds	r21, 0x02B1
    3c0e:	1c 86       	std	Y+12, r1	; 0x0c
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    3c18:	88 23       	and	r24, r24
    3c1a:	14 f4       	brge	.+4      	; 0x3c20 <Rotate_Yaw+0x2ee>
    3c1c:	e1 e0       	ldi	r30, 0x01	; 1
    3c1e:	ec 87       	std	Y+12, r30	; 0x0c
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	fc 85       	ldd	r31, Y+12	; 0x0c
    3c24:	8f 27       	eor	r24, r31
    3c26:	88 23       	and	r24, r24
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <Rotate_Yaw+0x2fa>
    3c2a:	3d c0       	rjmp	.+122    	; 0x3ca6 <Rotate_Yaw+0x374>
    3c2c:	80 91 86 04 	lds	r24, 0x0486
    3c30:	90 91 87 04 	lds	r25, 0x0487
    3c34:	a0 91 88 04 	lds	r26, 0x0488
    3c38:	b0 91 89 04 	lds	r27, 0x0489
    3c3c:	20 91 b2 02 	lds	r18, 0x02B2
    3c40:	30 91 b3 02 	lds	r19, 0x02B3
    3c44:	40 91 b4 02 	lds	r20, 0x02B4
    3c48:	50 91 b5 02 	lds	r21, 0x02B5
    3c4c:	1b 86       	std	Y+11, r1	; 0x0b
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    3c56:	18 16       	cp	r1, r24
    3c58:	14 f4       	brge	.+4      	; 0x3c5e <Rotate_Yaw+0x32c>
    3c5a:	21 e0       	ldi	r18, 0x01	; 1
    3c5c:	2b 87       	std	Y+11, r18	; 0x0b
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c62:	89 27       	eor	r24, r25
    3c64:	88 23       	and	r24, r24
    3c66:	f9 f4       	brne	.+62     	; 0x3ca6 <Rotate_Yaw+0x374>
		sum_degree = 105 + value[0] + 28 + gps_degree;
    3c68:	80 91 50 04 	lds	r24, 0x0450
    3c6c:	90 91 51 04 	lds	r25, 0x0451
    3c70:	8b 57       	subi	r24, 0x7B	; 123
    3c72:	9f 4f       	sbci	r25, 0xFF	; 255
    3c74:	aa 27       	eor	r26, r26
    3c76:	97 fd       	sbrc	r25, 7
    3c78:	a0 95       	com	r26
    3c7a:	ba 2f       	mov	r27, r26
    3c7c:	bc 01       	movw	r22, r24
    3c7e:	cd 01       	movw	r24, r26
    3c80:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	bc 01       	movw	r22, r24
    3c8a:	cd 01       	movw	r24, r26
    3c8c:	2d 81       	ldd	r18, Y+5	; 0x05
    3c8e:	3e 81       	ldd	r19, Y+6	; 0x06
    3c90:	4f 81       	ldd	r20, Y+7	; 0x07
    3c92:	58 85       	ldd	r21, Y+8	; 0x08
    3c94:	0e 94 3a 22 	call	0x4474	; 0x4474 <__addsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	89 83       	std	Y+1, r24	; 0x01
    3c9e:	9a 83       	std	Y+2, r25	; 0x02
    3ca0:	ab 83       	std	Y+3, r26	; 0x03
    3ca2:	bc 83       	std	Y+4, r27	; 0x04
    3ca4:	a6 c0       	rjmp	.+332    	; 0x3df2 <Rotate_Yaw+0x4c0>
	}
	else if(Cansat_lati_min > Station_lati_min && Cansat_long_min > Station_long_min)	{	//왼쪽 아래 - 3사분면 : 플러스
    3ca6:	80 91 76 04 	lds	r24, 0x0476
    3caa:	90 91 77 04 	lds	r25, 0x0477
    3cae:	a0 91 78 04 	lds	r26, 0x0478
    3cb2:	b0 91 79 04 	lds	r27, 0x0479
    3cb6:	20 91 ae 02 	lds	r18, 0x02AE
    3cba:	30 91 af 02 	lds	r19, 0x02AF
    3cbe:	40 91 b0 02 	lds	r20, 0x02B0
    3cc2:	50 91 b1 02 	lds	r21, 0x02B1
    3cc6:	1a 86       	std	Y+10, r1	; 0x0a
    3cc8:	bc 01       	movw	r22, r24
    3cca:	cd 01       	movw	r24, r26
    3ccc:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    3cd0:	18 16       	cp	r1, r24
    3cd2:	14 f4       	brge	.+4      	; 0x3cd8 <Rotate_Yaw+0x3a6>
    3cd4:	e1 e0       	ldi	r30, 0x01	; 1
    3cd6:	ea 87       	std	Y+10, r30	; 0x0a
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	fa 85       	ldd	r31, Y+10	; 0x0a
    3cdc:	8f 27       	eor	r24, r31
    3cde:	88 23       	and	r24, r24
    3ce0:	09 f0       	breq	.+2      	; 0x3ce4 <Rotate_Yaw+0x3b2>
    3ce2:	3d c0       	rjmp	.+122    	; 0x3d5e <Rotate_Yaw+0x42c>
    3ce4:	80 91 86 04 	lds	r24, 0x0486
    3ce8:	90 91 87 04 	lds	r25, 0x0487
    3cec:	a0 91 88 04 	lds	r26, 0x0488
    3cf0:	b0 91 89 04 	lds	r27, 0x0489
    3cf4:	20 91 b2 02 	lds	r18, 0x02B2
    3cf8:	30 91 b3 02 	lds	r19, 0x02B3
    3cfc:	40 91 b4 02 	lds	r20, 0x02B4
    3d00:	50 91 b5 02 	lds	r21, 0x02B5
    3d04:	19 86       	std	Y+9, r1	; 0x09
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    3d0e:	18 16       	cp	r1, r24
    3d10:	14 f4       	brge	.+4      	; 0x3d16 <Rotate_Yaw+0x3e4>
    3d12:	21 e0       	ldi	r18, 0x01	; 1
    3d14:	29 87       	std	Y+9, r18	; 0x09
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	99 85       	ldd	r25, Y+9	; 0x09
    3d1a:	89 27       	eor	r24, r25
    3d1c:	88 23       	and	r24, r24
    3d1e:	f9 f4       	brne	.+62     	; 0x3d5e <Rotate_Yaw+0x42c>
		sum_degree = 105 + value[0] + 28 + gps_degree;
    3d20:	80 91 50 04 	lds	r24, 0x0450
    3d24:	90 91 51 04 	lds	r25, 0x0451
    3d28:	8b 57       	subi	r24, 0x7B	; 123
    3d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2c:	aa 27       	eor	r26, r26
    3d2e:	97 fd       	sbrc	r25, 7
    3d30:	a0 95       	com	r26
    3d32:	ba 2f       	mov	r27, r26
    3d34:	bc 01       	movw	r22, r24
    3d36:	cd 01       	movw	r24, r26
    3d38:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	bc 01       	movw	r22, r24
    3d42:	cd 01       	movw	r24, r26
    3d44:	2d 81       	ldd	r18, Y+5	; 0x05
    3d46:	3e 81       	ldd	r19, Y+6	; 0x06
    3d48:	4f 81       	ldd	r20, Y+7	; 0x07
    3d4a:	58 85       	ldd	r21, Y+8	; 0x08
    3d4c:	0e 94 3a 22 	call	0x4474	; 0x4474 <__addsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	89 83       	std	Y+1, r24	; 0x01
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	ab 83       	std	Y+3, r26	; 0x03
    3d5a:	bc 83       	std	Y+4, r27	; 0x04
    3d5c:	4a c0       	rjmp	.+148    	; 0x3df2 <Rotate_Yaw+0x4c0>
	}
	else if(Cansat_lati_min > Station_lati_min && Cansat_long_min < Station_long_min)	{	//오른쪽 아래 - 4사분면 : 마이너스
    3d5e:	80 91 76 04 	lds	r24, 0x0476
    3d62:	90 91 77 04 	lds	r25, 0x0477
    3d66:	a0 91 78 04 	lds	r26, 0x0478
    3d6a:	b0 91 79 04 	lds	r27, 0x0479
    3d6e:	20 91 ae 02 	lds	r18, 0x02AE
    3d72:	30 91 af 02 	lds	r19, 0x02AF
    3d76:	40 91 b0 02 	lds	r20, 0x02B0
    3d7a:	50 91 b1 02 	lds	r21, 0x02B1
    3d7e:	bc 01       	movw	r22, r24
    3d80:	cd 01       	movw	r24, r26
    3d82:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    3d86:	18 16       	cp	r1, r24
    3d88:	a4 f5       	brge	.+104    	; 0x3df2 <Rotate_Yaw+0x4c0>
    3d8a:	80 91 86 04 	lds	r24, 0x0486
    3d8e:	90 91 87 04 	lds	r25, 0x0487
    3d92:	a0 91 88 04 	lds	r26, 0x0488
    3d96:	b0 91 89 04 	lds	r27, 0x0489
    3d9a:	20 91 b2 02 	lds	r18, 0x02B2
    3d9e:	30 91 b3 02 	lds	r19, 0x02B3
    3da2:	40 91 b4 02 	lds	r20, 0x02B4
    3da6:	50 91 b5 02 	lds	r21, 0x02B5
    3daa:	bc 01       	movw	r22, r24
    3dac:	cd 01       	movw	r24, r26
    3dae:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    3db2:	88 23       	and	r24, r24
    3db4:	f4 f4       	brge	.+60     	; 0x3df2 <Rotate_Yaw+0x4c0>
		sum_degree = 105 + value[0] + 82 + gps_degree;
    3db6:	80 91 50 04 	lds	r24, 0x0450
    3dba:	90 91 51 04 	lds	r25, 0x0451
    3dbe:	85 54       	subi	r24, 0x45	; 69
    3dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc2:	aa 27       	eor	r26, r26
    3dc4:	97 fd       	sbrc	r25, 7
    3dc6:	a0 95       	com	r26
    3dc8:	ba 2f       	mov	r27, r26
    3dca:	bc 01       	movw	r22, r24
    3dcc:	cd 01       	movw	r24, r26
    3dce:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	bc 01       	movw	r22, r24
    3dd8:	cd 01       	movw	r24, r26
    3dda:	2d 81       	ldd	r18, Y+5	; 0x05
    3ddc:	3e 81       	ldd	r19, Y+6	; 0x06
    3dde:	4f 81       	ldd	r20, Y+7	; 0x07
    3de0:	58 85       	ldd	r21, Y+8	; 0x08
    3de2:	0e 94 3a 22 	call	0x4474	; 0x4474 <__addsf3>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	89 83       	std	Y+1, r24	; 0x01
    3dec:	9a 83       	std	Y+2, r25	; 0x02
    3dee:	ab 83       	std	Y+3, r26	; 0x03
    3df0:	bc 83       	std	Y+4, r27	; 0x04
	}
	
		if(sum_degree > 215)	{	//만약 215가 넘을 경우 뒤로 회전
    3df2:	69 81       	ldd	r22, Y+1	; 0x01
    3df4:	7a 81       	ldd	r23, Y+2	; 0x02
    3df6:	8b 81       	ldd	r24, Y+3	; 0x03
    3df8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	47 e5       	ldi	r20, 0x57	; 87
    3e00:	53 e4       	ldi	r21, 0x43	; 67
    3e02:	0e 94 0d 24 	call	0x481a	; 0x481a <__gtsf2>
    3e06:	18 16       	cp	r1, r24
    3e08:	3c f5       	brge	.+78     	; 0x3e58 <Rotate_Yaw+0x526>
			sum_degree -= 215;
    3e0a:	69 81       	ldd	r22, Y+1	; 0x01
    3e0c:	7a 81       	ldd	r23, Y+2	; 0x02
    3e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e10:	9c 81       	ldd	r25, Y+4	; 0x04
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	47 e5       	ldi	r20, 0x57	; 87
    3e18:	53 e4       	ldi	r21, 0x43	; 67
    3e1a:	0e 94 09 22 	call	0x4412	; 0x4412 <__subsf3>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	89 83       	std	Y+1, r24	; 0x01
    3e24:	9a 83       	std	Y+2, r25	; 0x02
    3e26:	ab 83       	std	Y+3, r26	; 0x03
    3e28:	bc 83       	std	Y+4, r27	; 0x04
			OCR0A = 105 + sum_degree;
    3e2a:	07 e4       	ldi	r16, 0x47	; 71
    3e2c:	10 e0       	ldi	r17, 0x00	; 0
    3e2e:	69 81       	ldd	r22, Y+1	; 0x01
    3e30:	7a 81       	ldd	r23, Y+2	; 0x02
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	9c 81       	ldd	r25, Y+4	; 0x04
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	42 ed       	ldi	r20, 0xD2	; 210
    3e3c:	52 e4       	ldi	r21, 0x42	; 66
    3e3e:	0e 94 3a 22 	call	0x4474	; 0x4474 <__addsf3>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	bc 01       	movw	r22, r24
    3e48:	cd 01       	movw	r24, r26
    3e4a:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	f8 01       	movw	r30, r16
    3e54:	80 83       	st	Z, r24
    3e56:	3f c0       	rjmp	.+126    	; 0x3ed6 <Rotate_Yaw+0x5a4>
		}
		else if(sum_degree < 105)	{	//105 미만일 경우에도 앞으로 회전
    3e58:	69 81       	ldd	r22, Y+1	; 0x01
    3e5a:	7a 81       	ldd	r23, Y+2	; 0x02
    3e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	42 ed       	ldi	r20, 0xD2	; 210
    3e66:	52 e4       	ldi	r21, 0x42	; 66
    3e68:	0e 94 6d 24 	call	0x48da	; 0x48da <__ltsf2>
    3e6c:	88 23       	and	r24, r24
    3e6e:	3c f5       	brge	.+78     	; 0x3ebe <Rotate_Yaw+0x58c>
			sum_degree = 105 - sum_degree;
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	70 e0       	ldi	r23, 0x00	; 0
    3e74:	82 ed       	ldi	r24, 0xD2	; 210
    3e76:	92 e4       	ldi	r25, 0x42	; 66
    3e78:	29 81       	ldd	r18, Y+1	; 0x01
    3e7a:	3a 81       	ldd	r19, Y+2	; 0x02
    3e7c:	4b 81       	ldd	r20, Y+3	; 0x03
    3e7e:	5c 81       	ldd	r21, Y+4	; 0x04
    3e80:	0e 94 09 22 	call	0x4412	; 0x4412 <__subsf3>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	89 83       	std	Y+1, r24	; 0x01
    3e8a:	9a 83       	std	Y+2, r25	; 0x02
    3e8c:	ab 83       	std	Y+3, r26	; 0x03
    3e8e:	bc 83       	std	Y+4, r27	; 0x04
			OCR0A = 215 - sum_degree;
    3e90:	07 e4       	ldi	r16, 0x47	; 71
    3e92:	10 e0       	ldi	r17, 0x00	; 0
    3e94:	60 e0       	ldi	r22, 0x00	; 0
    3e96:	70 e0       	ldi	r23, 0x00	; 0
    3e98:	87 e5       	ldi	r24, 0x57	; 87
    3e9a:	93 e4       	ldi	r25, 0x43	; 67
    3e9c:	29 81       	ldd	r18, Y+1	; 0x01
    3e9e:	3a 81       	ldd	r19, Y+2	; 0x02
    3ea0:	4b 81       	ldd	r20, Y+3	; 0x03
    3ea2:	5c 81       	ldd	r21, Y+4	; 0x04
    3ea4:	0e 94 09 22 	call	0x4412	; 0x4412 <__subsf3>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	bc 01       	movw	r22, r24
    3eae:	cd 01       	movw	r24, r26
    3eb0:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	f8 01       	movw	r30, r16
    3eba:	80 83       	st	Z, r24
    3ebc:	0c c0       	rjmp	.+24     	; 0x3ed6 <Rotate_Yaw+0x5a4>
		}
		else	{
			OCR0A = sum_degree;	//아닐 경우에는 값 대입
    3ebe:	07 e4       	ldi	r16, 0x47	; 71
    3ec0:	10 e0       	ldi	r17, 0x00	; 0
    3ec2:	69 81       	ldd	r22, Y+1	; 0x01
    3ec4:	7a 81       	ldd	r23, Y+2	; 0x02
    3ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eca:	0e 94 91 20 	call	0x4122	; 0x4122 <__fixunssfsi>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	f8 01       	movw	r30, r16
    3ed4:	80 83       	st	Z, r24
		}
}
    3ed6:	2e 96       	adiw	r28, 0x0e	; 14
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	1f 91       	pop	r17
    3ee8:	0f 91       	pop	r16
    3eea:	ff 90       	pop	r15
    3eec:	ef 90       	pop	r14
    3eee:	08 95       	ret

00003ef0 <Rotate_Pitch>:


void Rotate_Pitch(void)
{
    3ef0:	ef 92       	push	r14
    3ef2:	ff 92       	push	r15
    3ef4:	0f 93       	push	r16
    3ef6:	1f 93       	push	r17
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	2e 97       	sbiw	r28, 0x0e	; 14
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	cd bf       	out	0x3d, r28	; 61
	//임의의 값을 넣은 실험 완료		

	double DISTANCE = sqrt( pow((Cansat_lati_min - Station_lati_min)*1850 , 2) + pow((Cansat_long_min - Station_long_min)*1480, 2) );
    3f0c:	80 91 76 04 	lds	r24, 0x0476
    3f10:	90 91 77 04 	lds	r25, 0x0477
    3f14:	a0 91 78 04 	lds	r26, 0x0478
    3f18:	b0 91 79 04 	lds	r27, 0x0479
    3f1c:	20 91 ae 02 	lds	r18, 0x02AE
    3f20:	30 91 af 02 	lds	r19, 0x02AF
    3f24:	40 91 b0 02 	lds	r20, 0x02B0
    3f28:	50 91 b1 02 	lds	r21, 0x02B1
    3f2c:	bc 01       	movw	r22, r24
    3f2e:	cd 01       	movw	r24, r26
    3f30:	0e 94 09 22 	call	0x4412	; 0x4412 <__subsf3>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	bc 01       	movw	r22, r24
    3f3a:	cd 01       	movw	r24, r26
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e4       	ldi	r19, 0x40	; 64
    3f40:	47 ee       	ldi	r20, 0xE7	; 231
    3f42:	54 e4       	ldi	r21, 0x44	; 68
    3f44:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	9c 01       	movw	r18, r24
    3f4e:	ad 01       	movw	r20, r26
    3f50:	ca 01       	movw	r24, r20
    3f52:	b9 01       	movw	r22, r18
    3f54:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	7c 01       	movw	r14, r24
    3f5e:	8d 01       	movw	r16, r26
    3f60:	80 91 86 04 	lds	r24, 0x0486
    3f64:	90 91 87 04 	lds	r25, 0x0487
    3f68:	a0 91 88 04 	lds	r26, 0x0488
    3f6c:	b0 91 89 04 	lds	r27, 0x0489
    3f70:	20 91 b2 02 	lds	r18, 0x02B2
    3f74:	30 91 b3 02 	lds	r19, 0x02B3
    3f78:	40 91 b4 02 	lds	r20, 0x02B4
    3f7c:	50 91 b5 02 	lds	r21, 0x02B5
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	0e 94 09 22 	call	0x4412	; 0x4412 <__subsf3>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	49 eb       	ldi	r20, 0xB9	; 185
    3f96:	54 e4       	ldi	r21, 0x44	; 68
    3f98:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	9c 01       	movw	r18, r24
    3fa2:	ad 01       	movw	r20, r26
    3fa4:	ca 01       	movw	r24, r20
    3fa6:	b9 01       	movw	r22, r18
    3fa8:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    3fac:	dc 01       	movw	r26, r24
    3fae:	cb 01       	movw	r24, r22
    3fb0:	9c 01       	movw	r18, r24
    3fb2:	ad 01       	movw	r20, r26
    3fb4:	c8 01       	movw	r24, r16
    3fb6:	b7 01       	movw	r22, r14
    3fb8:	0e 94 3a 22 	call	0x4474	; 0x4474 <__addsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	0e 94 2a 29 	call	0x5254	; 0x5254 <sqrt>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	8b 87       	std	Y+11, r24	; 0x0b
    3fce:	9c 87       	std	Y+12, r25	; 0x0c
    3fd0:	ad 87       	std	Y+13, r26	; 0x0d
    3fd2:	be 87       	std	Y+14, r27	; 0x0e
	//거리는 분 만을 이용하여 구함, 곱하기를 하여 M로 환산함 위도 1분 : 약 1.85km // 경도 1분 : 약 1.48km, 
	double HEIGHT =  altitude - Station_altitude;	//고도
    3fd4:	20 91 b8 02 	lds	r18, 0x02B8
    3fd8:	30 91 b9 02 	lds	r19, 0x02B9
    3fdc:	80 91 b6 02 	lds	r24, 0x02B6
    3fe0:	90 91 b7 02 	lds	r25, 0x02B7
    3fe4:	a9 01       	movw	r20, r18
    3fe6:	48 1b       	sub	r20, r24
    3fe8:	59 0b       	sbc	r21, r25
    3fea:	ca 01       	movw	r24, r20
    3fec:	aa 27       	eor	r26, r26
    3fee:	97 fd       	sbrc	r25, 7
    3ff0:	a0 95       	com	r26
    3ff2:	ba 2f       	mov	r27, r26
    3ff4:	bc 01       	movw	r22, r24
    3ff6:	cd 01       	movw	r24, r26
    3ff8:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	8f 83       	std	Y+7, r24	; 0x07
    4002:	98 87       	std	Y+8, r25	; 0x08
    4004:	a9 87       	std	Y+9, r26	; 0x09
    4006:	ba 87       	std	Y+10, r27	; 0x0a
	double pitch_degree = ( atan( (double) HEIGHT / (double) DISTANCE ) * 180 / 3.141592) / 1.8;
    4008:	6f 81       	ldd	r22, Y+7	; 0x07
    400a:	78 85       	ldd	r23, Y+8	; 0x08
    400c:	89 85       	ldd	r24, Y+9	; 0x09
    400e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4010:	2b 85       	ldd	r18, Y+11	; 0x0b
    4012:	3c 85       	ldd	r19, Y+12	; 0x0c
    4014:	4d 85       	ldd	r20, Y+13	; 0x0d
    4016:	5e 85       	ldd	r21, Y+14	; 0x0e
    4018:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    401c:	dc 01       	movw	r26, r24
    401e:	cb 01       	movw	r24, r22
    4020:	bc 01       	movw	r22, r24
    4022:	cd 01       	movw	r24, r26
    4024:	0e 94 60 28 	call	0x50c0	; 0x50c0 <atan>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	bc 01       	movw	r22, r24
    402e:	cd 01       	movw	r24, r26
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	44 e3       	ldi	r20, 0x34	; 52
    4036:	53 e4       	ldi	r21, 0x43	; 67
    4038:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsf3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	bc 01       	movw	r22, r24
    4042:	cd 01       	movw	r24, r26
    4044:	28 ed       	ldi	r18, 0xD8	; 216
    4046:	3f e0       	ldi	r19, 0x0F	; 15
    4048:	49 e4       	ldi	r20, 0x49	; 73
    404a:	50 e4       	ldi	r21, 0x40	; 64
    404c:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	bc 01       	movw	r22, r24
    4056:	cd 01       	movw	r24, r26
    4058:	26 e6       	ldi	r18, 0x66	; 102
    405a:	36 e6       	ldi	r19, 0x66	; 102
    405c:	46 ee       	ldi	r20, 0xE6	; 230
    405e:	5f e3       	ldi	r21, 0x3F	; 63
    4060:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	8b 83       	std	Y+3, r24	; 0x03
    406a:	9c 83       	std	Y+4, r25	; 0x04
    406c:	ad 83       	std	Y+5, r26	; 0x05
    406e:	be 83       	std	Y+6, r27	; 0x06
	int result_pitch = 0;
    4070:	1a 82       	std	Y+2, r1	; 0x02
    4072:	19 82       	std	Y+1, r1	; 0x01
	//atan 값으로 0 ~ 90 값이 나오므로 OCR값의 차이인 55에 대입하기 위해서 1.65라는 값을 나누어준다.

	//OCR0B =  160 - (int)(value[1] / 1.7) - (int)pitch_degree;
	//pitch_degree가 +를 해주어야 되는 것 같지만 -를 하는것이 의아하게 맞음
	// value[1] / 1.7 은 Pitch 보정값 // pitch_degree 는 atan 값 계산
	result_pitch = 160 - (int)(value[1] / 1.7) - (int)pitch_degree;
    4074:	80 91 52 04 	lds	r24, 0x0452
    4078:	90 91 53 04 	lds	r25, 0x0453
    407c:	aa 27       	eor	r26, r26
    407e:	97 fd       	sbrc	r25, 7
    4080:	a0 95       	com	r26
    4082:	ba 2f       	mov	r27, r26
    4084:	bc 01       	movw	r22, r24
    4086:	cd 01       	movw	r24, r26
    4088:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	bc 01       	movw	r22, r24
    4092:	cd 01       	movw	r24, r26
    4094:	2a e9       	ldi	r18, 0x9A	; 154
    4096:	39 e9       	ldi	r19, 0x99	; 153
    4098:	49 ed       	ldi	r20, 0xD9	; 217
    409a:	5f e3       	ldi	r21, 0x3F	; 63
    409c:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__divsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	bc 01       	movw	r22, r24
    40a6:	cd 01       	movw	r24, r26
    40a8:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__fixsfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9c 01       	movw	r18, r24
    40b2:	80 ea       	ldi	r24, 0xA0	; 160
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	8c 01       	movw	r16, r24
    40b8:	02 1b       	sub	r16, r18
    40ba:	13 0b       	sbc	r17, r19
    40bc:	6b 81       	ldd	r22, Y+3	; 0x03
    40be:	7c 81       	ldd	r23, Y+4	; 0x04
    40c0:	8d 81       	ldd	r24, Y+5	; 0x05
    40c2:	9e 81       	ldd	r25, Y+6	; 0x06
    40c4:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__fixsfsi>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	98 01       	movw	r18, r16
    40ce:	28 1b       	sub	r18, r24
    40d0:	39 0b       	sbc	r19, r25
    40d2:	c9 01       	movw	r24, r18
    40d4:	9a 83       	std	Y+2, r25	; 0x02
    40d6:	89 83       	std	Y+1, r24	; 0x01
	
	if(result_pitch > 215)
    40d8:	89 81       	ldd	r24, Y+1	; 0x01
    40da:	9a 81       	ldd	r25, Y+2	; 0x02
    40dc:	88 3d       	cpi	r24, 0xD8	; 216
    40de:	91 05       	cpc	r25, r1
    40e0:	2c f0       	brlt	.+10     	; 0x40ec <Rotate_Pitch+0x1fc>
		OCR0B = 215;
    40e2:	e8 e4       	ldi	r30, 0x48	; 72
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	87 ed       	ldi	r24, 0xD7	; 215
    40e8:	80 83       	st	Z, r24
    40ea:	0e c0       	rjmp	.+28     	; 0x4108 <Rotate_Pitch+0x218>
	else if(result_pitch < 160)
    40ec:	89 81       	ldd	r24, Y+1	; 0x01
    40ee:	9a 81       	ldd	r25, Y+2	; 0x02
    40f0:	80 3a       	cpi	r24, 0xA0	; 160
    40f2:	91 05       	cpc	r25, r1
    40f4:	2c f4       	brge	.+10     	; 0x4100 <Rotate_Pitch+0x210>
		OCR0B = 160;
    40f6:	e8 e4       	ldi	r30, 0x48	; 72
    40f8:	f0 e0       	ldi	r31, 0x00	; 0
    40fa:	80 ea       	ldi	r24, 0xA0	; 160
    40fc:	80 83       	st	Z, r24
    40fe:	04 c0       	rjmp	.+8      	; 0x4108 <Rotate_Pitch+0x218>
	else
		OCR0B = result_pitch;
    4100:	e8 e4       	ldi	r30, 0x48	; 72
    4102:	f0 e0       	ldi	r31, 0x00	; 0
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	80 83       	st	Z, r24
}
    4108:	2e 96       	adiw	r28, 0x0e	; 14
    410a:	0f b6       	in	r0, 0x3f	; 63
    410c:	f8 94       	cli
    410e:	de bf       	out	0x3e, r29	; 62
    4110:	0f be       	out	0x3f, r0	; 63
    4112:	cd bf       	out	0x3d, r28	; 61
    4114:	cf 91       	pop	r28
    4116:	df 91       	pop	r29
    4118:	1f 91       	pop	r17
    411a:	0f 91       	pop	r16
    411c:	ff 90       	pop	r15
    411e:	ef 90       	pop	r14
    4120:	08 95       	ret

00004122 <__fixunssfsi>:
    4122:	ef 92       	push	r14
    4124:	ff 92       	push	r15
    4126:	0f 93       	push	r16
    4128:	1f 93       	push	r17
    412a:	7b 01       	movw	r14, r22
    412c:	8c 01       	movw	r16, r24
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	40 e0       	ldi	r20, 0x00	; 0
    4134:	5f e4       	ldi	r21, 0x4F	; 79
    4136:	0e 94 3d 24 	call	0x487a	; 0x487a <__gesf2>
    413a:	88 23       	and	r24, r24
    413c:	8c f0       	brlt	.+34     	; 0x4160 <__fixunssfsi+0x3e>
    413e:	c8 01       	movw	r24, r16
    4140:	b7 01       	movw	r22, r14
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	5f e4       	ldi	r21, 0x4F	; 79
    414a:	0e 94 09 22 	call	0x4412	; 0x4412 <__subsf3>
    414e:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__fixsfsi>
    4152:	9b 01       	movw	r18, r22
    4154:	ac 01       	movw	r20, r24
    4156:	20 50       	subi	r18, 0x00	; 0
    4158:	30 40       	sbci	r19, 0x00	; 0
    415a:	40 40       	sbci	r20, 0x00	; 0
    415c:	50 48       	sbci	r21, 0x80	; 128
    415e:	06 c0       	rjmp	.+12     	; 0x416c <__fixunssfsi+0x4a>
    4160:	c8 01       	movw	r24, r16
    4162:	b7 01       	movw	r22, r14
    4164:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__fixsfsi>
    4168:	9b 01       	movw	r18, r22
    416a:	ac 01       	movw	r20, r24
    416c:	b9 01       	movw	r22, r18
    416e:	ca 01       	movw	r24, r20
    4170:	1f 91       	pop	r17
    4172:	0f 91       	pop	r16
    4174:	ff 90       	pop	r15
    4176:	ef 90       	pop	r14
    4178:	08 95       	ret

0000417a <_fpadd_parts>:
    417a:	a0 e0       	ldi	r26, 0x00	; 0
    417c:	b0 e0       	ldi	r27, 0x00	; 0
    417e:	e3 ec       	ldi	r30, 0xC3	; 195
    4180:	f0 e2       	ldi	r31, 0x20	; 32
    4182:	0c 94 63 27 	jmp	0x4ec6	; 0x4ec6 <__prologue_saves__>
    4186:	dc 01       	movw	r26, r24
    4188:	2b 01       	movw	r4, r22
    418a:	fa 01       	movw	r30, r20
    418c:	9c 91       	ld	r25, X
    418e:	92 30       	cpi	r25, 0x02	; 2
    4190:	08 f4       	brcc	.+2      	; 0x4194 <_fpadd_parts+0x1a>
    4192:	39 c1       	rjmp	.+626    	; 0x4406 <_fpadd_parts+0x28c>
    4194:	eb 01       	movw	r28, r22
    4196:	88 81       	ld	r24, Y
    4198:	82 30       	cpi	r24, 0x02	; 2
    419a:	08 f4       	brcc	.+2      	; 0x419e <_fpadd_parts+0x24>
    419c:	33 c1       	rjmp	.+614    	; 0x4404 <_fpadd_parts+0x28a>
    419e:	94 30       	cpi	r25, 0x04	; 4
    41a0:	69 f4       	brne	.+26     	; 0x41bc <_fpadd_parts+0x42>
    41a2:	84 30       	cpi	r24, 0x04	; 4
    41a4:	09 f0       	breq	.+2      	; 0x41a8 <_fpadd_parts+0x2e>
    41a6:	2f c1       	rjmp	.+606    	; 0x4406 <_fpadd_parts+0x28c>
    41a8:	11 96       	adiw	r26, 0x01	; 1
    41aa:	9c 91       	ld	r25, X
    41ac:	11 97       	sbiw	r26, 0x01	; 1
    41ae:	89 81       	ldd	r24, Y+1	; 0x01
    41b0:	98 17       	cp	r25, r24
    41b2:	09 f4       	brne	.+2      	; 0x41b6 <_fpadd_parts+0x3c>
    41b4:	28 c1       	rjmp	.+592    	; 0x4406 <_fpadd_parts+0x28c>
    41b6:	aa e3       	ldi	r26, 0x3A	; 58
    41b8:	b3 e0       	ldi	r27, 0x03	; 3
    41ba:	25 c1       	rjmp	.+586    	; 0x4406 <_fpadd_parts+0x28c>
    41bc:	84 30       	cpi	r24, 0x04	; 4
    41be:	09 f4       	brne	.+2      	; 0x41c2 <_fpadd_parts+0x48>
    41c0:	21 c1       	rjmp	.+578    	; 0x4404 <_fpadd_parts+0x28a>
    41c2:	82 30       	cpi	r24, 0x02	; 2
    41c4:	a9 f4       	brne	.+42     	; 0x41f0 <_fpadd_parts+0x76>
    41c6:	92 30       	cpi	r25, 0x02	; 2
    41c8:	09 f0       	breq	.+2      	; 0x41cc <_fpadd_parts+0x52>
    41ca:	1d c1       	rjmp	.+570    	; 0x4406 <_fpadd_parts+0x28c>
    41cc:	9a 01       	movw	r18, r20
    41ce:	ad 01       	movw	r20, r26
    41d0:	88 e0       	ldi	r24, 0x08	; 8
    41d2:	ea 01       	movw	r28, r20
    41d4:	09 90       	ld	r0, Y+
    41d6:	ae 01       	movw	r20, r28
    41d8:	e9 01       	movw	r28, r18
    41da:	09 92       	st	Y+, r0
    41dc:	9e 01       	movw	r18, r28
    41de:	81 50       	subi	r24, 0x01	; 1
    41e0:	c1 f7       	brne	.-16     	; 0x41d2 <_fpadd_parts+0x58>
    41e2:	e2 01       	movw	r28, r4
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	11 96       	adiw	r26, 0x01	; 1
    41e8:	9c 91       	ld	r25, X
    41ea:	89 23       	and	r24, r25
    41ec:	81 83       	std	Z+1, r24	; 0x01
    41ee:	08 c1       	rjmp	.+528    	; 0x4400 <_fpadd_parts+0x286>
    41f0:	92 30       	cpi	r25, 0x02	; 2
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <_fpadd_parts+0x7c>
    41f4:	07 c1       	rjmp	.+526    	; 0x4404 <_fpadd_parts+0x28a>
    41f6:	12 96       	adiw	r26, 0x02	; 2
    41f8:	2d 90       	ld	r2, X+
    41fa:	3c 90       	ld	r3, X
    41fc:	13 97       	sbiw	r26, 0x03	; 3
    41fe:	eb 01       	movw	r28, r22
    4200:	8a 81       	ldd	r24, Y+2	; 0x02
    4202:	9b 81       	ldd	r25, Y+3	; 0x03
    4204:	14 96       	adiw	r26, 0x04	; 4
    4206:	ad 90       	ld	r10, X+
    4208:	bd 90       	ld	r11, X+
    420a:	cd 90       	ld	r12, X+
    420c:	dc 90       	ld	r13, X
    420e:	17 97       	sbiw	r26, 0x07	; 7
    4210:	ec 80       	ldd	r14, Y+4	; 0x04
    4212:	fd 80       	ldd	r15, Y+5	; 0x05
    4214:	0e 81       	ldd	r16, Y+6	; 0x06
    4216:	1f 81       	ldd	r17, Y+7	; 0x07
    4218:	91 01       	movw	r18, r2
    421a:	28 1b       	sub	r18, r24
    421c:	39 0b       	sbc	r19, r25
    421e:	b9 01       	movw	r22, r18
    4220:	37 ff       	sbrs	r19, 7
    4222:	04 c0       	rjmp	.+8      	; 0x422c <_fpadd_parts+0xb2>
    4224:	66 27       	eor	r22, r22
    4226:	77 27       	eor	r23, r23
    4228:	62 1b       	sub	r22, r18
    422a:	73 0b       	sbc	r23, r19
    422c:	60 32       	cpi	r22, 0x20	; 32
    422e:	71 05       	cpc	r23, r1
    4230:	0c f0       	brlt	.+2      	; 0x4234 <_fpadd_parts+0xba>
    4232:	61 c0       	rjmp	.+194    	; 0x42f6 <_fpadd_parts+0x17c>
    4234:	12 16       	cp	r1, r18
    4236:	13 06       	cpc	r1, r19
    4238:	6c f5       	brge	.+90     	; 0x4294 <_fpadd_parts+0x11a>
    423a:	37 01       	movw	r6, r14
    423c:	48 01       	movw	r8, r16
    423e:	06 2e       	mov	r0, r22
    4240:	04 c0       	rjmp	.+8      	; 0x424a <_fpadd_parts+0xd0>
    4242:	96 94       	lsr	r9
    4244:	87 94       	ror	r8
    4246:	77 94       	ror	r7
    4248:	67 94       	ror	r6
    424a:	0a 94       	dec	r0
    424c:	d2 f7       	brpl	.-12     	; 0x4242 <_fpadd_parts+0xc8>
    424e:	21 e0       	ldi	r18, 0x01	; 1
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	40 e0       	ldi	r20, 0x00	; 0
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	04 c0       	rjmp	.+8      	; 0x4260 <_fpadd_parts+0xe6>
    4258:	22 0f       	add	r18, r18
    425a:	33 1f       	adc	r19, r19
    425c:	44 1f       	adc	r20, r20
    425e:	55 1f       	adc	r21, r21
    4260:	6a 95       	dec	r22
    4262:	d2 f7       	brpl	.-12     	; 0x4258 <_fpadd_parts+0xde>
    4264:	21 50       	subi	r18, 0x01	; 1
    4266:	30 40       	sbci	r19, 0x00	; 0
    4268:	40 40       	sbci	r20, 0x00	; 0
    426a:	50 40       	sbci	r21, 0x00	; 0
    426c:	2e 21       	and	r18, r14
    426e:	3f 21       	and	r19, r15
    4270:	40 23       	and	r20, r16
    4272:	51 23       	and	r21, r17
    4274:	21 15       	cp	r18, r1
    4276:	31 05       	cpc	r19, r1
    4278:	41 05       	cpc	r20, r1
    427a:	51 05       	cpc	r21, r1
    427c:	21 f0       	breq	.+8      	; 0x4286 <_fpadd_parts+0x10c>
    427e:	21 e0       	ldi	r18, 0x01	; 1
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	40 e0       	ldi	r20, 0x00	; 0
    4284:	50 e0       	ldi	r21, 0x00	; 0
    4286:	79 01       	movw	r14, r18
    4288:	8a 01       	movw	r16, r20
    428a:	e6 28       	or	r14, r6
    428c:	f7 28       	or	r15, r7
    428e:	08 29       	or	r16, r8
    4290:	19 29       	or	r17, r9
    4292:	3c c0       	rjmp	.+120    	; 0x430c <_fpadd_parts+0x192>
    4294:	23 2b       	or	r18, r19
    4296:	d1 f1       	breq	.+116    	; 0x430c <_fpadd_parts+0x192>
    4298:	26 0e       	add	r2, r22
    429a:	37 1e       	adc	r3, r23
    429c:	35 01       	movw	r6, r10
    429e:	46 01       	movw	r8, r12
    42a0:	06 2e       	mov	r0, r22
    42a2:	04 c0       	rjmp	.+8      	; 0x42ac <_fpadd_parts+0x132>
    42a4:	96 94       	lsr	r9
    42a6:	87 94       	ror	r8
    42a8:	77 94       	ror	r7
    42aa:	67 94       	ror	r6
    42ac:	0a 94       	dec	r0
    42ae:	d2 f7       	brpl	.-12     	; 0x42a4 <_fpadd_parts+0x12a>
    42b0:	21 e0       	ldi	r18, 0x01	; 1
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	40 e0       	ldi	r20, 0x00	; 0
    42b6:	50 e0       	ldi	r21, 0x00	; 0
    42b8:	04 c0       	rjmp	.+8      	; 0x42c2 <_fpadd_parts+0x148>
    42ba:	22 0f       	add	r18, r18
    42bc:	33 1f       	adc	r19, r19
    42be:	44 1f       	adc	r20, r20
    42c0:	55 1f       	adc	r21, r21
    42c2:	6a 95       	dec	r22
    42c4:	d2 f7       	brpl	.-12     	; 0x42ba <_fpadd_parts+0x140>
    42c6:	21 50       	subi	r18, 0x01	; 1
    42c8:	30 40       	sbci	r19, 0x00	; 0
    42ca:	40 40       	sbci	r20, 0x00	; 0
    42cc:	50 40       	sbci	r21, 0x00	; 0
    42ce:	2a 21       	and	r18, r10
    42d0:	3b 21       	and	r19, r11
    42d2:	4c 21       	and	r20, r12
    42d4:	5d 21       	and	r21, r13
    42d6:	21 15       	cp	r18, r1
    42d8:	31 05       	cpc	r19, r1
    42da:	41 05       	cpc	r20, r1
    42dc:	51 05       	cpc	r21, r1
    42de:	21 f0       	breq	.+8      	; 0x42e8 <_fpadd_parts+0x16e>
    42e0:	21 e0       	ldi	r18, 0x01	; 1
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	40 e0       	ldi	r20, 0x00	; 0
    42e6:	50 e0       	ldi	r21, 0x00	; 0
    42e8:	59 01       	movw	r10, r18
    42ea:	6a 01       	movw	r12, r20
    42ec:	a6 28       	or	r10, r6
    42ee:	b7 28       	or	r11, r7
    42f0:	c8 28       	or	r12, r8
    42f2:	d9 28       	or	r13, r9
    42f4:	0b c0       	rjmp	.+22     	; 0x430c <_fpadd_parts+0x192>
    42f6:	82 15       	cp	r24, r2
    42f8:	93 05       	cpc	r25, r3
    42fa:	2c f0       	brlt	.+10     	; 0x4306 <_fpadd_parts+0x18c>
    42fc:	1c 01       	movw	r2, r24
    42fe:	aa 24       	eor	r10, r10
    4300:	bb 24       	eor	r11, r11
    4302:	65 01       	movw	r12, r10
    4304:	03 c0       	rjmp	.+6      	; 0x430c <_fpadd_parts+0x192>
    4306:	ee 24       	eor	r14, r14
    4308:	ff 24       	eor	r15, r15
    430a:	87 01       	movw	r16, r14
    430c:	11 96       	adiw	r26, 0x01	; 1
    430e:	9c 91       	ld	r25, X
    4310:	d2 01       	movw	r26, r4
    4312:	11 96       	adiw	r26, 0x01	; 1
    4314:	8c 91       	ld	r24, X
    4316:	98 17       	cp	r25, r24
    4318:	09 f4       	brne	.+2      	; 0x431c <_fpadd_parts+0x1a2>
    431a:	45 c0       	rjmp	.+138    	; 0x43a6 <_fpadd_parts+0x22c>
    431c:	99 23       	and	r25, r25
    431e:	39 f0       	breq	.+14     	; 0x432e <_fpadd_parts+0x1b4>
    4320:	a8 01       	movw	r20, r16
    4322:	97 01       	movw	r18, r14
    4324:	2a 19       	sub	r18, r10
    4326:	3b 09       	sbc	r19, r11
    4328:	4c 09       	sbc	r20, r12
    432a:	5d 09       	sbc	r21, r13
    432c:	06 c0       	rjmp	.+12     	; 0x433a <_fpadd_parts+0x1c0>
    432e:	a6 01       	movw	r20, r12
    4330:	95 01       	movw	r18, r10
    4332:	2e 19       	sub	r18, r14
    4334:	3f 09       	sbc	r19, r15
    4336:	40 0b       	sbc	r20, r16
    4338:	51 0b       	sbc	r21, r17
    433a:	57 fd       	sbrc	r21, 7
    433c:	08 c0       	rjmp	.+16     	; 0x434e <_fpadd_parts+0x1d4>
    433e:	11 82       	std	Z+1, r1	; 0x01
    4340:	33 82       	std	Z+3, r3	; 0x03
    4342:	22 82       	std	Z+2, r2	; 0x02
    4344:	24 83       	std	Z+4, r18	; 0x04
    4346:	35 83       	std	Z+5, r19	; 0x05
    4348:	46 83       	std	Z+6, r20	; 0x06
    434a:	57 83       	std	Z+7, r21	; 0x07
    434c:	1d c0       	rjmp	.+58     	; 0x4388 <_fpadd_parts+0x20e>
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	81 83       	std	Z+1, r24	; 0x01
    4352:	33 82       	std	Z+3, r3	; 0x03
    4354:	22 82       	std	Z+2, r2	; 0x02
    4356:	88 27       	eor	r24, r24
    4358:	99 27       	eor	r25, r25
    435a:	dc 01       	movw	r26, r24
    435c:	82 1b       	sub	r24, r18
    435e:	93 0b       	sbc	r25, r19
    4360:	a4 0b       	sbc	r26, r20
    4362:	b5 0b       	sbc	r27, r21
    4364:	84 83       	std	Z+4, r24	; 0x04
    4366:	95 83       	std	Z+5, r25	; 0x05
    4368:	a6 83       	std	Z+6, r26	; 0x06
    436a:	b7 83       	std	Z+7, r27	; 0x07
    436c:	0d c0       	rjmp	.+26     	; 0x4388 <_fpadd_parts+0x20e>
    436e:	22 0f       	add	r18, r18
    4370:	33 1f       	adc	r19, r19
    4372:	44 1f       	adc	r20, r20
    4374:	55 1f       	adc	r21, r21
    4376:	24 83       	std	Z+4, r18	; 0x04
    4378:	35 83       	std	Z+5, r19	; 0x05
    437a:	46 83       	std	Z+6, r20	; 0x06
    437c:	57 83       	std	Z+7, r21	; 0x07
    437e:	82 81       	ldd	r24, Z+2	; 0x02
    4380:	93 81       	ldd	r25, Z+3	; 0x03
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	93 83       	std	Z+3, r25	; 0x03
    4386:	82 83       	std	Z+2, r24	; 0x02
    4388:	24 81       	ldd	r18, Z+4	; 0x04
    438a:	35 81       	ldd	r19, Z+5	; 0x05
    438c:	46 81       	ldd	r20, Z+6	; 0x06
    438e:	57 81       	ldd	r21, Z+7	; 0x07
    4390:	da 01       	movw	r26, r20
    4392:	c9 01       	movw	r24, r18
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	a1 09       	sbc	r26, r1
    4398:	b1 09       	sbc	r27, r1
    439a:	8f 5f       	subi	r24, 0xFF	; 255
    439c:	9f 4f       	sbci	r25, 0xFF	; 255
    439e:	af 4f       	sbci	r26, 0xFF	; 255
    43a0:	bf 43       	sbci	r27, 0x3F	; 63
    43a2:	28 f3       	brcs	.-54     	; 0x436e <_fpadd_parts+0x1f4>
    43a4:	0b c0       	rjmp	.+22     	; 0x43bc <_fpadd_parts+0x242>
    43a6:	91 83       	std	Z+1, r25	; 0x01
    43a8:	33 82       	std	Z+3, r3	; 0x03
    43aa:	22 82       	std	Z+2, r2	; 0x02
    43ac:	ea 0c       	add	r14, r10
    43ae:	fb 1c       	adc	r15, r11
    43b0:	0c 1d       	adc	r16, r12
    43b2:	1d 1d       	adc	r17, r13
    43b4:	e4 82       	std	Z+4, r14	; 0x04
    43b6:	f5 82       	std	Z+5, r15	; 0x05
    43b8:	06 83       	std	Z+6, r16	; 0x06
    43ba:	17 83       	std	Z+7, r17	; 0x07
    43bc:	83 e0       	ldi	r24, 0x03	; 3
    43be:	80 83       	st	Z, r24
    43c0:	24 81       	ldd	r18, Z+4	; 0x04
    43c2:	35 81       	ldd	r19, Z+5	; 0x05
    43c4:	46 81       	ldd	r20, Z+6	; 0x06
    43c6:	57 81       	ldd	r21, Z+7	; 0x07
    43c8:	57 ff       	sbrs	r21, 7
    43ca:	1a c0       	rjmp	.+52     	; 0x4400 <_fpadd_parts+0x286>
    43cc:	c9 01       	movw	r24, r18
    43ce:	aa 27       	eor	r26, r26
    43d0:	97 fd       	sbrc	r25, 7
    43d2:	a0 95       	com	r26
    43d4:	ba 2f       	mov	r27, r26
    43d6:	81 70       	andi	r24, 0x01	; 1
    43d8:	90 70       	andi	r25, 0x00	; 0
    43da:	a0 70       	andi	r26, 0x00	; 0
    43dc:	b0 70       	andi	r27, 0x00	; 0
    43de:	56 95       	lsr	r21
    43e0:	47 95       	ror	r20
    43e2:	37 95       	ror	r19
    43e4:	27 95       	ror	r18
    43e6:	82 2b       	or	r24, r18
    43e8:	93 2b       	or	r25, r19
    43ea:	a4 2b       	or	r26, r20
    43ec:	b5 2b       	or	r27, r21
    43ee:	84 83       	std	Z+4, r24	; 0x04
    43f0:	95 83       	std	Z+5, r25	; 0x05
    43f2:	a6 83       	std	Z+6, r26	; 0x06
    43f4:	b7 83       	std	Z+7, r27	; 0x07
    43f6:	82 81       	ldd	r24, Z+2	; 0x02
    43f8:	93 81       	ldd	r25, Z+3	; 0x03
    43fa:	01 96       	adiw	r24, 0x01	; 1
    43fc:	93 83       	std	Z+3, r25	; 0x03
    43fe:	82 83       	std	Z+2, r24	; 0x02
    4400:	df 01       	movw	r26, r30
    4402:	01 c0       	rjmp	.+2      	; 0x4406 <_fpadd_parts+0x28c>
    4404:	d2 01       	movw	r26, r4
    4406:	cd 01       	movw	r24, r26
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    440c:	e2 e1       	ldi	r30, 0x12	; 18
    440e:	0c 94 7f 27 	jmp	0x4efe	; 0x4efe <__epilogue_restores__>

00004412 <__subsf3>:
    4412:	a0 e2       	ldi	r26, 0x20	; 32
    4414:	b0 e0       	ldi	r27, 0x00	; 0
    4416:	ef e0       	ldi	r30, 0x0F	; 15
    4418:	f2 e2       	ldi	r31, 0x22	; 34
    441a:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__prologue_saves__+0x18>
    441e:	69 83       	std	Y+1, r22	; 0x01
    4420:	7a 83       	std	Y+2, r23	; 0x02
    4422:	8b 83       	std	Y+3, r24	; 0x03
    4424:	9c 83       	std	Y+4, r25	; 0x04
    4426:	2d 83       	std	Y+5, r18	; 0x05
    4428:	3e 83       	std	Y+6, r19	; 0x06
    442a:	4f 83       	std	Y+7, r20	; 0x07
    442c:	58 87       	std	Y+8, r21	; 0x08
    442e:	e9 e0       	ldi	r30, 0x09	; 9
    4430:	ee 2e       	mov	r14, r30
    4432:	f1 2c       	mov	r15, r1
    4434:	ec 0e       	add	r14, r28
    4436:	fd 1e       	adc	r15, r29
    4438:	ce 01       	movw	r24, r28
    443a:	01 96       	adiw	r24, 0x01	; 1
    443c:	b7 01       	movw	r22, r14
    443e:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    4442:	8e 01       	movw	r16, r28
    4444:	0f 5e       	subi	r16, 0xEF	; 239
    4446:	1f 4f       	sbci	r17, 0xFF	; 255
    4448:	ce 01       	movw	r24, r28
    444a:	05 96       	adiw	r24, 0x05	; 5
    444c:	b8 01       	movw	r22, r16
    444e:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    4452:	8a 89       	ldd	r24, Y+18	; 0x12
    4454:	91 e0       	ldi	r25, 0x01	; 1
    4456:	89 27       	eor	r24, r25
    4458:	8a 8b       	std	Y+18, r24	; 0x12
    445a:	c7 01       	movw	r24, r14
    445c:	b8 01       	movw	r22, r16
    445e:	ae 01       	movw	r20, r28
    4460:	47 5e       	subi	r20, 0xE7	; 231
    4462:	5f 4f       	sbci	r21, 0xFF	; 255
    4464:	0e 94 bd 20 	call	0x417a	; 0x417a <_fpadd_parts>
    4468:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <__pack_f>
    446c:	a0 96       	adiw	r28, 0x20	; 32
    446e:	e6 e0       	ldi	r30, 0x06	; 6
    4470:	0c 94 8b 27 	jmp	0x4f16	; 0x4f16 <__epilogue_restores__+0x18>

00004474 <__addsf3>:
    4474:	a0 e2       	ldi	r26, 0x20	; 32
    4476:	b0 e0       	ldi	r27, 0x00	; 0
    4478:	e0 e4       	ldi	r30, 0x40	; 64
    447a:	f2 e2       	ldi	r31, 0x22	; 34
    447c:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__prologue_saves__+0x18>
    4480:	69 83       	std	Y+1, r22	; 0x01
    4482:	7a 83       	std	Y+2, r23	; 0x02
    4484:	8b 83       	std	Y+3, r24	; 0x03
    4486:	9c 83       	std	Y+4, r25	; 0x04
    4488:	2d 83       	std	Y+5, r18	; 0x05
    448a:	3e 83       	std	Y+6, r19	; 0x06
    448c:	4f 83       	std	Y+7, r20	; 0x07
    448e:	58 87       	std	Y+8, r21	; 0x08
    4490:	f9 e0       	ldi	r31, 0x09	; 9
    4492:	ef 2e       	mov	r14, r31
    4494:	f1 2c       	mov	r15, r1
    4496:	ec 0e       	add	r14, r28
    4498:	fd 1e       	adc	r15, r29
    449a:	ce 01       	movw	r24, r28
    449c:	01 96       	adiw	r24, 0x01	; 1
    449e:	b7 01       	movw	r22, r14
    44a0:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    44a4:	8e 01       	movw	r16, r28
    44a6:	0f 5e       	subi	r16, 0xEF	; 239
    44a8:	1f 4f       	sbci	r17, 0xFF	; 255
    44aa:	ce 01       	movw	r24, r28
    44ac:	05 96       	adiw	r24, 0x05	; 5
    44ae:	b8 01       	movw	r22, r16
    44b0:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    44b4:	c7 01       	movw	r24, r14
    44b6:	b8 01       	movw	r22, r16
    44b8:	ae 01       	movw	r20, r28
    44ba:	47 5e       	subi	r20, 0xE7	; 231
    44bc:	5f 4f       	sbci	r21, 0xFF	; 255
    44be:	0e 94 bd 20 	call	0x417a	; 0x417a <_fpadd_parts>
    44c2:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <__pack_f>
    44c6:	a0 96       	adiw	r28, 0x20	; 32
    44c8:	e6 e0       	ldi	r30, 0x06	; 6
    44ca:	0c 94 8b 27 	jmp	0x4f16	; 0x4f16 <__epilogue_restores__+0x18>

000044ce <__mulsf3>:
    44ce:	a0 e2       	ldi	r26, 0x20	; 32
    44d0:	b0 e0       	ldi	r27, 0x00	; 0
    44d2:	ed e6       	ldi	r30, 0x6D	; 109
    44d4:	f2 e2       	ldi	r31, 0x22	; 34
    44d6:	0c 94 63 27 	jmp	0x4ec6	; 0x4ec6 <__prologue_saves__>
    44da:	69 83       	std	Y+1, r22	; 0x01
    44dc:	7a 83       	std	Y+2, r23	; 0x02
    44de:	8b 83       	std	Y+3, r24	; 0x03
    44e0:	9c 83       	std	Y+4, r25	; 0x04
    44e2:	2d 83       	std	Y+5, r18	; 0x05
    44e4:	3e 83       	std	Y+6, r19	; 0x06
    44e6:	4f 83       	std	Y+7, r20	; 0x07
    44e8:	58 87       	std	Y+8, r21	; 0x08
    44ea:	ce 01       	movw	r24, r28
    44ec:	01 96       	adiw	r24, 0x01	; 1
    44ee:	be 01       	movw	r22, r28
    44f0:	67 5f       	subi	r22, 0xF7	; 247
    44f2:	7f 4f       	sbci	r23, 0xFF	; 255
    44f4:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    44f8:	ce 01       	movw	r24, r28
    44fa:	05 96       	adiw	r24, 0x05	; 5
    44fc:	be 01       	movw	r22, r28
    44fe:	6f 5e       	subi	r22, 0xEF	; 239
    4500:	7f 4f       	sbci	r23, 0xFF	; 255
    4502:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    4506:	99 85       	ldd	r25, Y+9	; 0x09
    4508:	92 30       	cpi	r25, 0x02	; 2
    450a:	88 f0       	brcs	.+34     	; 0x452e <__mulsf3+0x60>
    450c:	89 89       	ldd	r24, Y+17	; 0x11
    450e:	82 30       	cpi	r24, 0x02	; 2
    4510:	c8 f0       	brcs	.+50     	; 0x4544 <__mulsf3+0x76>
    4512:	94 30       	cpi	r25, 0x04	; 4
    4514:	19 f4       	brne	.+6      	; 0x451c <__mulsf3+0x4e>
    4516:	82 30       	cpi	r24, 0x02	; 2
    4518:	51 f4       	brne	.+20     	; 0x452e <__mulsf3+0x60>
    451a:	04 c0       	rjmp	.+8      	; 0x4524 <__mulsf3+0x56>
    451c:	84 30       	cpi	r24, 0x04	; 4
    451e:	29 f4       	brne	.+10     	; 0x452a <__mulsf3+0x5c>
    4520:	92 30       	cpi	r25, 0x02	; 2
    4522:	81 f4       	brne	.+32     	; 0x4544 <__mulsf3+0x76>
    4524:	8a e3       	ldi	r24, 0x3A	; 58
    4526:	93 e0       	ldi	r25, 0x03	; 3
    4528:	c6 c0       	rjmp	.+396    	; 0x46b6 <__mulsf3+0x1e8>
    452a:	92 30       	cpi	r25, 0x02	; 2
    452c:	49 f4       	brne	.+18     	; 0x4540 <__mulsf3+0x72>
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	9a 85       	ldd	r25, Y+10	; 0x0a
    4532:	8a 89       	ldd	r24, Y+18	; 0x12
    4534:	98 13       	cpse	r25, r24
    4536:	21 e0       	ldi	r18, 0x01	; 1
    4538:	2a 87       	std	Y+10, r18	; 0x0a
    453a:	ce 01       	movw	r24, r28
    453c:	09 96       	adiw	r24, 0x09	; 9
    453e:	bb c0       	rjmp	.+374    	; 0x46b6 <__mulsf3+0x1e8>
    4540:	82 30       	cpi	r24, 0x02	; 2
    4542:	49 f4       	brne	.+18     	; 0x4556 <__mulsf3+0x88>
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	9a 85       	ldd	r25, Y+10	; 0x0a
    4548:	8a 89       	ldd	r24, Y+18	; 0x12
    454a:	98 13       	cpse	r25, r24
    454c:	21 e0       	ldi	r18, 0x01	; 1
    454e:	2a 8b       	std	Y+18, r18	; 0x12
    4550:	ce 01       	movw	r24, r28
    4552:	41 96       	adiw	r24, 0x11	; 17
    4554:	b0 c0       	rjmp	.+352    	; 0x46b6 <__mulsf3+0x1e8>
    4556:	2d 84       	ldd	r2, Y+13	; 0x0d
    4558:	3e 84       	ldd	r3, Y+14	; 0x0e
    455a:	4f 84       	ldd	r4, Y+15	; 0x0f
    455c:	58 88       	ldd	r5, Y+16	; 0x10
    455e:	6d 88       	ldd	r6, Y+21	; 0x15
    4560:	7e 88       	ldd	r7, Y+22	; 0x16
    4562:	8f 88       	ldd	r8, Y+23	; 0x17
    4564:	98 8c       	ldd	r9, Y+24	; 0x18
    4566:	ee 24       	eor	r14, r14
    4568:	ff 24       	eor	r15, r15
    456a:	87 01       	movw	r16, r14
    456c:	aa 24       	eor	r10, r10
    456e:	bb 24       	eor	r11, r11
    4570:	65 01       	movw	r12, r10
    4572:	40 e0       	ldi	r20, 0x00	; 0
    4574:	50 e0       	ldi	r21, 0x00	; 0
    4576:	60 e0       	ldi	r22, 0x00	; 0
    4578:	70 e0       	ldi	r23, 0x00	; 0
    457a:	e0 e0       	ldi	r30, 0x00	; 0
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	c1 01       	movw	r24, r2
    4580:	81 70       	andi	r24, 0x01	; 1
    4582:	90 70       	andi	r25, 0x00	; 0
    4584:	89 2b       	or	r24, r25
    4586:	e9 f0       	breq	.+58     	; 0x45c2 <__mulsf3+0xf4>
    4588:	e6 0c       	add	r14, r6
    458a:	f7 1c       	adc	r15, r7
    458c:	08 1d       	adc	r16, r8
    458e:	19 1d       	adc	r17, r9
    4590:	9a 01       	movw	r18, r20
    4592:	ab 01       	movw	r20, r22
    4594:	2a 0d       	add	r18, r10
    4596:	3b 1d       	adc	r19, r11
    4598:	4c 1d       	adc	r20, r12
    459a:	5d 1d       	adc	r21, r13
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	a0 e0       	ldi	r26, 0x00	; 0
    45a2:	b0 e0       	ldi	r27, 0x00	; 0
    45a4:	e6 14       	cp	r14, r6
    45a6:	f7 04       	cpc	r15, r7
    45a8:	08 05       	cpc	r16, r8
    45aa:	19 05       	cpc	r17, r9
    45ac:	20 f4       	brcc	.+8      	; 0x45b6 <__mulsf3+0xe8>
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	a0 e0       	ldi	r26, 0x00	; 0
    45b4:	b0 e0       	ldi	r27, 0x00	; 0
    45b6:	ba 01       	movw	r22, r20
    45b8:	a9 01       	movw	r20, r18
    45ba:	48 0f       	add	r20, r24
    45bc:	59 1f       	adc	r21, r25
    45be:	6a 1f       	adc	r22, r26
    45c0:	7b 1f       	adc	r23, r27
    45c2:	aa 0c       	add	r10, r10
    45c4:	bb 1c       	adc	r11, r11
    45c6:	cc 1c       	adc	r12, r12
    45c8:	dd 1c       	adc	r13, r13
    45ca:	97 fe       	sbrs	r9, 7
    45cc:	08 c0       	rjmp	.+16     	; 0x45de <__mulsf3+0x110>
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	a0 e0       	ldi	r26, 0x00	; 0
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	a8 2a       	or	r10, r24
    45d8:	b9 2a       	or	r11, r25
    45da:	ca 2a       	or	r12, r26
    45dc:	db 2a       	or	r13, r27
    45de:	31 96       	adiw	r30, 0x01	; 1
    45e0:	e0 32       	cpi	r30, 0x20	; 32
    45e2:	f1 05       	cpc	r31, r1
    45e4:	49 f0       	breq	.+18     	; 0x45f8 <__mulsf3+0x12a>
    45e6:	66 0c       	add	r6, r6
    45e8:	77 1c       	adc	r7, r7
    45ea:	88 1c       	adc	r8, r8
    45ec:	99 1c       	adc	r9, r9
    45ee:	56 94       	lsr	r5
    45f0:	47 94       	ror	r4
    45f2:	37 94       	ror	r3
    45f4:	27 94       	ror	r2
    45f6:	c3 cf       	rjmp	.-122    	; 0x457e <__mulsf3+0xb0>
    45f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    45fa:	ea 89       	ldd	r30, Y+18	; 0x12
    45fc:	2b 89       	ldd	r18, Y+19	; 0x13
    45fe:	3c 89       	ldd	r19, Y+20	; 0x14
    4600:	8b 85       	ldd	r24, Y+11	; 0x0b
    4602:	9c 85       	ldd	r25, Y+12	; 0x0c
    4604:	28 0f       	add	r18, r24
    4606:	39 1f       	adc	r19, r25
    4608:	2e 5f       	subi	r18, 0xFE	; 254
    460a:	3f 4f       	sbci	r19, 0xFF	; 255
    460c:	17 c0       	rjmp	.+46     	; 0x463c <__mulsf3+0x16e>
    460e:	ca 01       	movw	r24, r20
    4610:	81 70       	andi	r24, 0x01	; 1
    4612:	90 70       	andi	r25, 0x00	; 0
    4614:	89 2b       	or	r24, r25
    4616:	61 f0       	breq	.+24     	; 0x4630 <__mulsf3+0x162>
    4618:	16 95       	lsr	r17
    461a:	07 95       	ror	r16
    461c:	f7 94       	ror	r15
    461e:	e7 94       	ror	r14
    4620:	80 e0       	ldi	r24, 0x00	; 0
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	a0 e0       	ldi	r26, 0x00	; 0
    4626:	b0 e8       	ldi	r27, 0x80	; 128
    4628:	e8 2a       	or	r14, r24
    462a:	f9 2a       	or	r15, r25
    462c:	0a 2b       	or	r16, r26
    462e:	1b 2b       	or	r17, r27
    4630:	76 95       	lsr	r23
    4632:	67 95       	ror	r22
    4634:	57 95       	ror	r21
    4636:	47 95       	ror	r20
    4638:	2f 5f       	subi	r18, 0xFF	; 255
    463a:	3f 4f       	sbci	r19, 0xFF	; 255
    463c:	77 fd       	sbrc	r23, 7
    463e:	e7 cf       	rjmp	.-50     	; 0x460e <__mulsf3+0x140>
    4640:	0c c0       	rjmp	.+24     	; 0x465a <__mulsf3+0x18c>
    4642:	44 0f       	add	r20, r20
    4644:	55 1f       	adc	r21, r21
    4646:	66 1f       	adc	r22, r22
    4648:	77 1f       	adc	r23, r23
    464a:	17 fd       	sbrc	r17, 7
    464c:	41 60       	ori	r20, 0x01	; 1
    464e:	ee 0c       	add	r14, r14
    4650:	ff 1c       	adc	r15, r15
    4652:	00 1f       	adc	r16, r16
    4654:	11 1f       	adc	r17, r17
    4656:	21 50       	subi	r18, 0x01	; 1
    4658:	30 40       	sbci	r19, 0x00	; 0
    465a:	40 30       	cpi	r20, 0x00	; 0
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	59 07       	cpc	r21, r25
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	69 07       	cpc	r22, r25
    4664:	90 e4       	ldi	r25, 0x40	; 64
    4666:	79 07       	cpc	r23, r25
    4668:	60 f3       	brcs	.-40     	; 0x4642 <__mulsf3+0x174>
    466a:	2b 8f       	std	Y+27, r18	; 0x1b
    466c:	3c 8f       	std	Y+28, r19	; 0x1c
    466e:	db 01       	movw	r26, r22
    4670:	ca 01       	movw	r24, r20
    4672:	8f 77       	andi	r24, 0x7F	; 127
    4674:	90 70       	andi	r25, 0x00	; 0
    4676:	a0 70       	andi	r26, 0x00	; 0
    4678:	b0 70       	andi	r27, 0x00	; 0
    467a:	80 34       	cpi	r24, 0x40	; 64
    467c:	91 05       	cpc	r25, r1
    467e:	a1 05       	cpc	r26, r1
    4680:	b1 05       	cpc	r27, r1
    4682:	61 f4       	brne	.+24     	; 0x469c <__mulsf3+0x1ce>
    4684:	47 fd       	sbrc	r20, 7
    4686:	0a c0       	rjmp	.+20     	; 0x469c <__mulsf3+0x1ce>
    4688:	e1 14       	cp	r14, r1
    468a:	f1 04       	cpc	r15, r1
    468c:	01 05       	cpc	r16, r1
    468e:	11 05       	cpc	r17, r1
    4690:	29 f0       	breq	.+10     	; 0x469c <__mulsf3+0x1ce>
    4692:	40 5c       	subi	r20, 0xC0	; 192
    4694:	5f 4f       	sbci	r21, 0xFF	; 255
    4696:	6f 4f       	sbci	r22, 0xFF	; 255
    4698:	7f 4f       	sbci	r23, 0xFF	; 255
    469a:	40 78       	andi	r20, 0x80	; 128
    469c:	1a 8e       	std	Y+26, r1	; 0x1a
    469e:	fe 17       	cp	r31, r30
    46a0:	11 f0       	breq	.+4      	; 0x46a6 <__mulsf3+0x1d8>
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	8a 8f       	std	Y+26, r24	; 0x1a
    46a6:	4d 8f       	std	Y+29, r20	; 0x1d
    46a8:	5e 8f       	std	Y+30, r21	; 0x1e
    46aa:	6f 8f       	std	Y+31, r22	; 0x1f
    46ac:	78 a3       	std	Y+32, r23	; 0x20
    46ae:	83 e0       	ldi	r24, 0x03	; 3
    46b0:	89 8f       	std	Y+25, r24	; 0x19
    46b2:	ce 01       	movw	r24, r28
    46b4:	49 96       	adiw	r24, 0x19	; 25
    46b6:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <__pack_f>
    46ba:	a0 96       	adiw	r28, 0x20	; 32
    46bc:	e2 e1       	ldi	r30, 0x12	; 18
    46be:	0c 94 7f 27 	jmp	0x4efe	; 0x4efe <__epilogue_restores__>

000046c2 <__divsf3>:
    46c2:	a8 e1       	ldi	r26, 0x18	; 24
    46c4:	b0 e0       	ldi	r27, 0x00	; 0
    46c6:	e7 e6       	ldi	r30, 0x67	; 103
    46c8:	f3 e2       	ldi	r31, 0x23	; 35
    46ca:	0c 94 6b 27 	jmp	0x4ed6	; 0x4ed6 <__prologue_saves__+0x10>
    46ce:	69 83       	std	Y+1, r22	; 0x01
    46d0:	7a 83       	std	Y+2, r23	; 0x02
    46d2:	8b 83       	std	Y+3, r24	; 0x03
    46d4:	9c 83       	std	Y+4, r25	; 0x04
    46d6:	2d 83       	std	Y+5, r18	; 0x05
    46d8:	3e 83       	std	Y+6, r19	; 0x06
    46da:	4f 83       	std	Y+7, r20	; 0x07
    46dc:	58 87       	std	Y+8, r21	; 0x08
    46de:	b9 e0       	ldi	r27, 0x09	; 9
    46e0:	eb 2e       	mov	r14, r27
    46e2:	f1 2c       	mov	r15, r1
    46e4:	ec 0e       	add	r14, r28
    46e6:	fd 1e       	adc	r15, r29
    46e8:	ce 01       	movw	r24, r28
    46ea:	01 96       	adiw	r24, 0x01	; 1
    46ec:	b7 01       	movw	r22, r14
    46ee:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    46f2:	8e 01       	movw	r16, r28
    46f4:	0f 5e       	subi	r16, 0xEF	; 239
    46f6:	1f 4f       	sbci	r17, 0xFF	; 255
    46f8:	ce 01       	movw	r24, r28
    46fa:	05 96       	adiw	r24, 0x05	; 5
    46fc:	b8 01       	movw	r22, r16
    46fe:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    4702:	29 85       	ldd	r18, Y+9	; 0x09
    4704:	22 30       	cpi	r18, 0x02	; 2
    4706:	08 f4       	brcc	.+2      	; 0x470a <__divsf3+0x48>
    4708:	7e c0       	rjmp	.+252    	; 0x4806 <__divsf3+0x144>
    470a:	39 89       	ldd	r19, Y+17	; 0x11
    470c:	32 30       	cpi	r19, 0x02	; 2
    470e:	10 f4       	brcc	.+4      	; 0x4714 <__divsf3+0x52>
    4710:	b8 01       	movw	r22, r16
    4712:	7c c0       	rjmp	.+248    	; 0x480c <__divsf3+0x14a>
    4714:	8a 85       	ldd	r24, Y+10	; 0x0a
    4716:	9a 89       	ldd	r25, Y+18	; 0x12
    4718:	89 27       	eor	r24, r25
    471a:	8a 87       	std	Y+10, r24	; 0x0a
    471c:	24 30       	cpi	r18, 0x04	; 4
    471e:	11 f0       	breq	.+4      	; 0x4724 <__divsf3+0x62>
    4720:	22 30       	cpi	r18, 0x02	; 2
    4722:	31 f4       	brne	.+12     	; 0x4730 <__divsf3+0x6e>
    4724:	23 17       	cp	r18, r19
    4726:	09 f0       	breq	.+2      	; 0x472a <__divsf3+0x68>
    4728:	6e c0       	rjmp	.+220    	; 0x4806 <__divsf3+0x144>
    472a:	6a e3       	ldi	r22, 0x3A	; 58
    472c:	73 e0       	ldi	r23, 0x03	; 3
    472e:	6e c0       	rjmp	.+220    	; 0x480c <__divsf3+0x14a>
    4730:	34 30       	cpi	r19, 0x04	; 4
    4732:	39 f4       	brne	.+14     	; 0x4742 <__divsf3+0x80>
    4734:	1d 86       	std	Y+13, r1	; 0x0d
    4736:	1e 86       	std	Y+14, r1	; 0x0e
    4738:	1f 86       	std	Y+15, r1	; 0x0f
    473a:	18 8a       	std	Y+16, r1	; 0x10
    473c:	1c 86       	std	Y+12, r1	; 0x0c
    473e:	1b 86       	std	Y+11, r1	; 0x0b
    4740:	04 c0       	rjmp	.+8      	; 0x474a <__divsf3+0x88>
    4742:	32 30       	cpi	r19, 0x02	; 2
    4744:	21 f4       	brne	.+8      	; 0x474e <__divsf3+0x8c>
    4746:	84 e0       	ldi	r24, 0x04	; 4
    4748:	89 87       	std	Y+9, r24	; 0x09
    474a:	b7 01       	movw	r22, r14
    474c:	5f c0       	rjmp	.+190    	; 0x480c <__divsf3+0x14a>
    474e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4750:	3c 85       	ldd	r19, Y+12	; 0x0c
    4752:	8b 89       	ldd	r24, Y+19	; 0x13
    4754:	9c 89       	ldd	r25, Y+20	; 0x14
    4756:	28 1b       	sub	r18, r24
    4758:	39 0b       	sbc	r19, r25
    475a:	3c 87       	std	Y+12, r19	; 0x0c
    475c:	2b 87       	std	Y+11, r18	; 0x0b
    475e:	ed 84       	ldd	r14, Y+13	; 0x0d
    4760:	fe 84       	ldd	r15, Y+14	; 0x0e
    4762:	0f 85       	ldd	r16, Y+15	; 0x0f
    4764:	18 89       	ldd	r17, Y+16	; 0x10
    4766:	ad 88       	ldd	r10, Y+21	; 0x15
    4768:	be 88       	ldd	r11, Y+22	; 0x16
    476a:	cf 88       	ldd	r12, Y+23	; 0x17
    476c:	d8 8c       	ldd	r13, Y+24	; 0x18
    476e:	ea 14       	cp	r14, r10
    4770:	fb 04       	cpc	r15, r11
    4772:	0c 05       	cpc	r16, r12
    4774:	1d 05       	cpc	r17, r13
    4776:	40 f4       	brcc	.+16     	; 0x4788 <__divsf3+0xc6>
    4778:	ee 0c       	add	r14, r14
    477a:	ff 1c       	adc	r15, r15
    477c:	00 1f       	adc	r16, r16
    477e:	11 1f       	adc	r17, r17
    4780:	21 50       	subi	r18, 0x01	; 1
    4782:	30 40       	sbci	r19, 0x00	; 0
    4784:	3c 87       	std	Y+12, r19	; 0x0c
    4786:	2b 87       	std	Y+11, r18	; 0x0b
    4788:	20 e0       	ldi	r18, 0x00	; 0
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	40 e0       	ldi	r20, 0x00	; 0
    478e:	50 e0       	ldi	r21, 0x00	; 0
    4790:	80 e0       	ldi	r24, 0x00	; 0
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	a0 e0       	ldi	r26, 0x00	; 0
    4796:	b0 e4       	ldi	r27, 0x40	; 64
    4798:	60 e0       	ldi	r22, 0x00	; 0
    479a:	70 e0       	ldi	r23, 0x00	; 0
    479c:	ea 14       	cp	r14, r10
    479e:	fb 04       	cpc	r15, r11
    47a0:	0c 05       	cpc	r16, r12
    47a2:	1d 05       	cpc	r17, r13
    47a4:	40 f0       	brcs	.+16     	; 0x47b6 <__divsf3+0xf4>
    47a6:	28 2b       	or	r18, r24
    47a8:	39 2b       	or	r19, r25
    47aa:	4a 2b       	or	r20, r26
    47ac:	5b 2b       	or	r21, r27
    47ae:	ea 18       	sub	r14, r10
    47b0:	fb 08       	sbc	r15, r11
    47b2:	0c 09       	sbc	r16, r12
    47b4:	1d 09       	sbc	r17, r13
    47b6:	b6 95       	lsr	r27
    47b8:	a7 95       	ror	r26
    47ba:	97 95       	ror	r25
    47bc:	87 95       	ror	r24
    47be:	ee 0c       	add	r14, r14
    47c0:	ff 1c       	adc	r15, r15
    47c2:	00 1f       	adc	r16, r16
    47c4:	11 1f       	adc	r17, r17
    47c6:	6f 5f       	subi	r22, 0xFF	; 255
    47c8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ca:	6f 31       	cpi	r22, 0x1F	; 31
    47cc:	71 05       	cpc	r23, r1
    47ce:	31 f7       	brne	.-52     	; 0x479c <__divsf3+0xda>
    47d0:	da 01       	movw	r26, r20
    47d2:	c9 01       	movw	r24, r18
    47d4:	8f 77       	andi	r24, 0x7F	; 127
    47d6:	90 70       	andi	r25, 0x00	; 0
    47d8:	a0 70       	andi	r26, 0x00	; 0
    47da:	b0 70       	andi	r27, 0x00	; 0
    47dc:	80 34       	cpi	r24, 0x40	; 64
    47de:	91 05       	cpc	r25, r1
    47e0:	a1 05       	cpc	r26, r1
    47e2:	b1 05       	cpc	r27, r1
    47e4:	61 f4       	brne	.+24     	; 0x47fe <__divsf3+0x13c>
    47e6:	27 fd       	sbrc	r18, 7
    47e8:	0a c0       	rjmp	.+20     	; 0x47fe <__divsf3+0x13c>
    47ea:	e1 14       	cp	r14, r1
    47ec:	f1 04       	cpc	r15, r1
    47ee:	01 05       	cpc	r16, r1
    47f0:	11 05       	cpc	r17, r1
    47f2:	29 f0       	breq	.+10     	; 0x47fe <__divsf3+0x13c>
    47f4:	20 5c       	subi	r18, 0xC0	; 192
    47f6:	3f 4f       	sbci	r19, 0xFF	; 255
    47f8:	4f 4f       	sbci	r20, 0xFF	; 255
    47fa:	5f 4f       	sbci	r21, 0xFF	; 255
    47fc:	20 78       	andi	r18, 0x80	; 128
    47fe:	2d 87       	std	Y+13, r18	; 0x0d
    4800:	3e 87       	std	Y+14, r19	; 0x0e
    4802:	4f 87       	std	Y+15, r20	; 0x0f
    4804:	58 8b       	std	Y+16, r21	; 0x10
    4806:	be 01       	movw	r22, r28
    4808:	67 5f       	subi	r22, 0xF7	; 247
    480a:	7f 4f       	sbci	r23, 0xFF	; 255
    480c:	cb 01       	movw	r24, r22
    480e:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <__pack_f>
    4812:	68 96       	adiw	r28, 0x18	; 24
    4814:	ea e0       	ldi	r30, 0x0A	; 10
    4816:	0c 94 87 27 	jmp	0x4f0e	; 0x4f0e <__epilogue_restores__+0x10>

0000481a <__gtsf2>:
    481a:	a8 e1       	ldi	r26, 0x18	; 24
    481c:	b0 e0       	ldi	r27, 0x00	; 0
    481e:	e3 e1       	ldi	r30, 0x13	; 19
    4820:	f4 e2       	ldi	r31, 0x24	; 36
    4822:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__prologue_saves__+0x18>
    4826:	69 83       	std	Y+1, r22	; 0x01
    4828:	7a 83       	std	Y+2, r23	; 0x02
    482a:	8b 83       	std	Y+3, r24	; 0x03
    482c:	9c 83       	std	Y+4, r25	; 0x04
    482e:	2d 83       	std	Y+5, r18	; 0x05
    4830:	3e 83       	std	Y+6, r19	; 0x06
    4832:	4f 83       	std	Y+7, r20	; 0x07
    4834:	58 87       	std	Y+8, r21	; 0x08
    4836:	89 e0       	ldi	r24, 0x09	; 9
    4838:	e8 2e       	mov	r14, r24
    483a:	f1 2c       	mov	r15, r1
    483c:	ec 0e       	add	r14, r28
    483e:	fd 1e       	adc	r15, r29
    4840:	ce 01       	movw	r24, r28
    4842:	01 96       	adiw	r24, 0x01	; 1
    4844:	b7 01       	movw	r22, r14
    4846:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    484a:	8e 01       	movw	r16, r28
    484c:	0f 5e       	subi	r16, 0xEF	; 239
    484e:	1f 4f       	sbci	r17, 0xFF	; 255
    4850:	ce 01       	movw	r24, r28
    4852:	05 96       	adiw	r24, 0x05	; 5
    4854:	b8 01       	movw	r22, r16
    4856:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    485a:	89 85       	ldd	r24, Y+9	; 0x09
    485c:	82 30       	cpi	r24, 0x02	; 2
    485e:	40 f0       	brcs	.+16     	; 0x4870 <__gtsf2+0x56>
    4860:	89 89       	ldd	r24, Y+17	; 0x11
    4862:	82 30       	cpi	r24, 0x02	; 2
    4864:	28 f0       	brcs	.+10     	; 0x4870 <__gtsf2+0x56>
    4866:	c7 01       	movw	r24, r14
    4868:	b8 01       	movw	r22, r16
    486a:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <__fpcmp_parts_f>
    486e:	01 c0       	rjmp	.+2      	; 0x4872 <__gtsf2+0x58>
    4870:	8f ef       	ldi	r24, 0xFF	; 255
    4872:	68 96       	adiw	r28, 0x18	; 24
    4874:	e6 e0       	ldi	r30, 0x06	; 6
    4876:	0c 94 8b 27 	jmp	0x4f16	; 0x4f16 <__epilogue_restores__+0x18>

0000487a <__gesf2>:
    487a:	a8 e1       	ldi	r26, 0x18	; 24
    487c:	b0 e0       	ldi	r27, 0x00	; 0
    487e:	e3 e4       	ldi	r30, 0x43	; 67
    4880:	f4 e2       	ldi	r31, 0x24	; 36
    4882:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__prologue_saves__+0x18>
    4886:	69 83       	std	Y+1, r22	; 0x01
    4888:	7a 83       	std	Y+2, r23	; 0x02
    488a:	8b 83       	std	Y+3, r24	; 0x03
    488c:	9c 83       	std	Y+4, r25	; 0x04
    488e:	2d 83       	std	Y+5, r18	; 0x05
    4890:	3e 83       	std	Y+6, r19	; 0x06
    4892:	4f 83       	std	Y+7, r20	; 0x07
    4894:	58 87       	std	Y+8, r21	; 0x08
    4896:	89 e0       	ldi	r24, 0x09	; 9
    4898:	e8 2e       	mov	r14, r24
    489a:	f1 2c       	mov	r15, r1
    489c:	ec 0e       	add	r14, r28
    489e:	fd 1e       	adc	r15, r29
    48a0:	ce 01       	movw	r24, r28
    48a2:	01 96       	adiw	r24, 0x01	; 1
    48a4:	b7 01       	movw	r22, r14
    48a6:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    48aa:	8e 01       	movw	r16, r28
    48ac:	0f 5e       	subi	r16, 0xEF	; 239
    48ae:	1f 4f       	sbci	r17, 0xFF	; 255
    48b0:	ce 01       	movw	r24, r28
    48b2:	05 96       	adiw	r24, 0x05	; 5
    48b4:	b8 01       	movw	r22, r16
    48b6:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    48ba:	89 85       	ldd	r24, Y+9	; 0x09
    48bc:	82 30       	cpi	r24, 0x02	; 2
    48be:	40 f0       	brcs	.+16     	; 0x48d0 <__gesf2+0x56>
    48c0:	89 89       	ldd	r24, Y+17	; 0x11
    48c2:	82 30       	cpi	r24, 0x02	; 2
    48c4:	28 f0       	brcs	.+10     	; 0x48d0 <__gesf2+0x56>
    48c6:	c7 01       	movw	r24, r14
    48c8:	b8 01       	movw	r22, r16
    48ca:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <__fpcmp_parts_f>
    48ce:	01 c0       	rjmp	.+2      	; 0x48d2 <__gesf2+0x58>
    48d0:	8f ef       	ldi	r24, 0xFF	; 255
    48d2:	68 96       	adiw	r28, 0x18	; 24
    48d4:	e6 e0       	ldi	r30, 0x06	; 6
    48d6:	0c 94 8b 27 	jmp	0x4f16	; 0x4f16 <__epilogue_restores__+0x18>

000048da <__ltsf2>:
    48da:	a8 e1       	ldi	r26, 0x18	; 24
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	e3 e7       	ldi	r30, 0x73	; 115
    48e0:	f4 e2       	ldi	r31, 0x24	; 36
    48e2:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__prologue_saves__+0x18>
    48e6:	69 83       	std	Y+1, r22	; 0x01
    48e8:	7a 83       	std	Y+2, r23	; 0x02
    48ea:	8b 83       	std	Y+3, r24	; 0x03
    48ec:	9c 83       	std	Y+4, r25	; 0x04
    48ee:	2d 83       	std	Y+5, r18	; 0x05
    48f0:	3e 83       	std	Y+6, r19	; 0x06
    48f2:	4f 83       	std	Y+7, r20	; 0x07
    48f4:	58 87       	std	Y+8, r21	; 0x08
    48f6:	89 e0       	ldi	r24, 0x09	; 9
    48f8:	e8 2e       	mov	r14, r24
    48fa:	f1 2c       	mov	r15, r1
    48fc:	ec 0e       	add	r14, r28
    48fe:	fd 1e       	adc	r15, r29
    4900:	ce 01       	movw	r24, r28
    4902:	01 96       	adiw	r24, 0x01	; 1
    4904:	b7 01       	movw	r22, r14
    4906:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    490a:	8e 01       	movw	r16, r28
    490c:	0f 5e       	subi	r16, 0xEF	; 239
    490e:	1f 4f       	sbci	r17, 0xFF	; 255
    4910:	ce 01       	movw	r24, r28
    4912:	05 96       	adiw	r24, 0x05	; 5
    4914:	b8 01       	movw	r22, r16
    4916:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    491a:	89 85       	ldd	r24, Y+9	; 0x09
    491c:	82 30       	cpi	r24, 0x02	; 2
    491e:	40 f0       	brcs	.+16     	; 0x4930 <__ltsf2+0x56>
    4920:	89 89       	ldd	r24, Y+17	; 0x11
    4922:	82 30       	cpi	r24, 0x02	; 2
    4924:	28 f0       	brcs	.+10     	; 0x4930 <__ltsf2+0x56>
    4926:	c7 01       	movw	r24, r14
    4928:	b8 01       	movw	r22, r16
    492a:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <__fpcmp_parts_f>
    492e:	01 c0       	rjmp	.+2      	; 0x4932 <__ltsf2+0x58>
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	68 96       	adiw	r28, 0x18	; 24
    4934:	e6 e0       	ldi	r30, 0x06	; 6
    4936:	0c 94 8b 27 	jmp	0x4f16	; 0x4f16 <__epilogue_restores__+0x18>

0000493a <__floatsisf>:
    493a:	a8 e0       	ldi	r26, 0x08	; 8
    493c:	b0 e0       	ldi	r27, 0x00	; 0
    493e:	e3 ea       	ldi	r30, 0xA3	; 163
    4940:	f4 e2       	ldi	r31, 0x24	; 36
    4942:	0c 94 6c 27 	jmp	0x4ed8	; 0x4ed8 <__prologue_saves__+0x12>
    4946:	9b 01       	movw	r18, r22
    4948:	ac 01       	movw	r20, r24
    494a:	83 e0       	ldi	r24, 0x03	; 3
    494c:	89 83       	std	Y+1, r24	; 0x01
    494e:	da 01       	movw	r26, r20
    4950:	c9 01       	movw	r24, r18
    4952:	88 27       	eor	r24, r24
    4954:	b7 fd       	sbrc	r27, 7
    4956:	83 95       	inc	r24
    4958:	99 27       	eor	r25, r25
    495a:	aa 27       	eor	r26, r26
    495c:	bb 27       	eor	r27, r27
    495e:	b8 2e       	mov	r11, r24
    4960:	21 15       	cp	r18, r1
    4962:	31 05       	cpc	r19, r1
    4964:	41 05       	cpc	r20, r1
    4966:	51 05       	cpc	r21, r1
    4968:	19 f4       	brne	.+6      	; 0x4970 <__floatsisf+0x36>
    496a:	82 e0       	ldi	r24, 0x02	; 2
    496c:	89 83       	std	Y+1, r24	; 0x01
    496e:	3a c0       	rjmp	.+116    	; 0x49e4 <__floatsisf+0xaa>
    4970:	88 23       	and	r24, r24
    4972:	a9 f0       	breq	.+42     	; 0x499e <__floatsisf+0x64>
    4974:	20 30       	cpi	r18, 0x00	; 0
    4976:	80 e0       	ldi	r24, 0x00	; 0
    4978:	38 07       	cpc	r19, r24
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	48 07       	cpc	r20, r24
    497e:	80 e8       	ldi	r24, 0x80	; 128
    4980:	58 07       	cpc	r21, r24
    4982:	29 f4       	brne	.+10     	; 0x498e <__floatsisf+0x54>
    4984:	60 e0       	ldi	r22, 0x00	; 0
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	9f ec       	ldi	r25, 0xCF	; 207
    498c:	30 c0       	rjmp	.+96     	; 0x49ee <__floatsisf+0xb4>
    498e:	ee 24       	eor	r14, r14
    4990:	ff 24       	eor	r15, r15
    4992:	87 01       	movw	r16, r14
    4994:	e2 1a       	sub	r14, r18
    4996:	f3 0a       	sbc	r15, r19
    4998:	04 0b       	sbc	r16, r20
    499a:	15 0b       	sbc	r17, r21
    499c:	02 c0       	rjmp	.+4      	; 0x49a2 <__floatsisf+0x68>
    499e:	79 01       	movw	r14, r18
    49a0:	8a 01       	movw	r16, r20
    49a2:	8e e1       	ldi	r24, 0x1E	; 30
    49a4:	c8 2e       	mov	r12, r24
    49a6:	d1 2c       	mov	r13, r1
    49a8:	dc 82       	std	Y+4, r13	; 0x04
    49aa:	cb 82       	std	Y+3, r12	; 0x03
    49ac:	ed 82       	std	Y+5, r14	; 0x05
    49ae:	fe 82       	std	Y+6, r15	; 0x06
    49b0:	0f 83       	std	Y+7, r16	; 0x07
    49b2:	18 87       	std	Y+8, r17	; 0x08
    49b4:	c8 01       	movw	r24, r16
    49b6:	b7 01       	movw	r22, r14
    49b8:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <__clzsi2>
    49bc:	01 97       	sbiw	r24, 0x01	; 1
    49be:	18 16       	cp	r1, r24
    49c0:	19 06       	cpc	r1, r25
    49c2:	84 f4       	brge	.+32     	; 0x49e4 <__floatsisf+0xaa>
    49c4:	08 2e       	mov	r0, r24
    49c6:	04 c0       	rjmp	.+8      	; 0x49d0 <__floatsisf+0x96>
    49c8:	ee 0c       	add	r14, r14
    49ca:	ff 1c       	adc	r15, r15
    49cc:	00 1f       	adc	r16, r16
    49ce:	11 1f       	adc	r17, r17
    49d0:	0a 94       	dec	r0
    49d2:	d2 f7       	brpl	.-12     	; 0x49c8 <__floatsisf+0x8e>
    49d4:	ed 82       	std	Y+5, r14	; 0x05
    49d6:	fe 82       	std	Y+6, r15	; 0x06
    49d8:	0f 83       	std	Y+7, r16	; 0x07
    49da:	18 87       	std	Y+8, r17	; 0x08
    49dc:	c8 1a       	sub	r12, r24
    49de:	d9 0a       	sbc	r13, r25
    49e0:	dc 82       	std	Y+4, r13	; 0x04
    49e2:	cb 82       	std	Y+3, r12	; 0x03
    49e4:	ba 82       	std	Y+2, r11	; 0x02
    49e6:	ce 01       	movw	r24, r28
    49e8:	01 96       	adiw	r24, 0x01	; 1
    49ea:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <__pack_f>
    49ee:	28 96       	adiw	r28, 0x08	; 8
    49f0:	e9 e0       	ldi	r30, 0x09	; 9
    49f2:	0c 94 88 27 	jmp	0x4f10	; 0x4f10 <__epilogue_restores__+0x12>

000049f6 <__fixsfsi>:
    49f6:	ac e0       	ldi	r26, 0x0C	; 12
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	e1 e0       	ldi	r30, 0x01	; 1
    49fc:	f5 e2       	ldi	r31, 0x25	; 37
    49fe:	0c 94 73 27 	jmp	0x4ee6	; 0x4ee6 <__prologue_saves__+0x20>
    4a02:	69 83       	std	Y+1, r22	; 0x01
    4a04:	7a 83       	std	Y+2, r23	; 0x02
    4a06:	8b 83       	std	Y+3, r24	; 0x03
    4a08:	9c 83       	std	Y+4, r25	; 0x04
    4a0a:	ce 01       	movw	r24, r28
    4a0c:	01 96       	adiw	r24, 0x01	; 1
    4a0e:	be 01       	movw	r22, r28
    4a10:	6b 5f       	subi	r22, 0xFB	; 251
    4a12:	7f 4f       	sbci	r23, 0xFF	; 255
    4a14:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__unpack_f>
    4a18:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1a:	82 30       	cpi	r24, 0x02	; 2
    4a1c:	61 f1       	breq	.+88     	; 0x4a76 <__fixsfsi+0x80>
    4a1e:	82 30       	cpi	r24, 0x02	; 2
    4a20:	50 f1       	brcs	.+84     	; 0x4a76 <__fixsfsi+0x80>
    4a22:	84 30       	cpi	r24, 0x04	; 4
    4a24:	21 f4       	brne	.+8      	; 0x4a2e <__fixsfsi+0x38>
    4a26:	8e 81       	ldd	r24, Y+6	; 0x06
    4a28:	88 23       	and	r24, r24
    4a2a:	51 f1       	breq	.+84     	; 0x4a80 <__fixsfsi+0x8a>
    4a2c:	2e c0       	rjmp	.+92     	; 0x4a8a <__fixsfsi+0x94>
    4a2e:	2f 81       	ldd	r18, Y+7	; 0x07
    4a30:	38 85       	ldd	r19, Y+8	; 0x08
    4a32:	37 fd       	sbrc	r19, 7
    4a34:	20 c0       	rjmp	.+64     	; 0x4a76 <__fixsfsi+0x80>
    4a36:	6e 81       	ldd	r22, Y+6	; 0x06
    4a38:	2f 31       	cpi	r18, 0x1F	; 31
    4a3a:	31 05       	cpc	r19, r1
    4a3c:	1c f0       	brlt	.+6      	; 0x4a44 <__fixsfsi+0x4e>
    4a3e:	66 23       	and	r22, r22
    4a40:	f9 f0       	breq	.+62     	; 0x4a80 <__fixsfsi+0x8a>
    4a42:	23 c0       	rjmp	.+70     	; 0x4a8a <__fixsfsi+0x94>
    4a44:	8e e1       	ldi	r24, 0x1E	; 30
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	82 1b       	sub	r24, r18
    4a4a:	93 0b       	sbc	r25, r19
    4a4c:	29 85       	ldd	r18, Y+9	; 0x09
    4a4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a50:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a52:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a54:	04 c0       	rjmp	.+8      	; 0x4a5e <__fixsfsi+0x68>
    4a56:	56 95       	lsr	r21
    4a58:	47 95       	ror	r20
    4a5a:	37 95       	ror	r19
    4a5c:	27 95       	ror	r18
    4a5e:	8a 95       	dec	r24
    4a60:	d2 f7       	brpl	.-12     	; 0x4a56 <__fixsfsi+0x60>
    4a62:	66 23       	and	r22, r22
    4a64:	b1 f0       	breq	.+44     	; 0x4a92 <__fixsfsi+0x9c>
    4a66:	50 95       	com	r21
    4a68:	40 95       	com	r20
    4a6a:	30 95       	com	r19
    4a6c:	21 95       	neg	r18
    4a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a70:	4f 4f       	sbci	r20, 0xFF	; 255
    4a72:	5f 4f       	sbci	r21, 0xFF	; 255
    4a74:	0e c0       	rjmp	.+28     	; 0x4a92 <__fixsfsi+0x9c>
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e0       	ldi	r20, 0x00	; 0
    4a7c:	50 e0       	ldi	r21, 0x00	; 0
    4a7e:	09 c0       	rjmp	.+18     	; 0x4a92 <__fixsfsi+0x9c>
    4a80:	2f ef       	ldi	r18, 0xFF	; 255
    4a82:	3f ef       	ldi	r19, 0xFF	; 255
    4a84:	4f ef       	ldi	r20, 0xFF	; 255
    4a86:	5f e7       	ldi	r21, 0x7F	; 127
    4a88:	04 c0       	rjmp	.+8      	; 0x4a92 <__fixsfsi+0x9c>
    4a8a:	20 e0       	ldi	r18, 0x00	; 0
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	40 e0       	ldi	r20, 0x00	; 0
    4a90:	50 e8       	ldi	r21, 0x80	; 128
    4a92:	b9 01       	movw	r22, r18
    4a94:	ca 01       	movw	r24, r20
    4a96:	2c 96       	adiw	r28, 0x0c	; 12
    4a98:	e2 e0       	ldi	r30, 0x02	; 2
    4a9a:	0c 94 8f 27 	jmp	0x4f1e	; 0x4f1e <__epilogue_restores__+0x20>

00004a9e <__clzsi2>:
    4a9e:	ef 92       	push	r14
    4aa0:	ff 92       	push	r15
    4aa2:	0f 93       	push	r16
    4aa4:	1f 93       	push	r17
    4aa6:	7b 01       	movw	r14, r22
    4aa8:	8c 01       	movw	r16, r24
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	e8 16       	cp	r14, r24
    4aae:	80 e0       	ldi	r24, 0x00	; 0
    4ab0:	f8 06       	cpc	r15, r24
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	08 07       	cpc	r16, r24
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	18 07       	cpc	r17, r24
    4aba:	88 f4       	brcc	.+34     	; 0x4ade <__clzsi2+0x40>
    4abc:	8f ef       	ldi	r24, 0xFF	; 255
    4abe:	e8 16       	cp	r14, r24
    4ac0:	f1 04       	cpc	r15, r1
    4ac2:	01 05       	cpc	r16, r1
    4ac4:	11 05       	cpc	r17, r1
    4ac6:	31 f0       	breq	.+12     	; 0x4ad4 <__clzsi2+0x36>
    4ac8:	28 f0       	brcs	.+10     	; 0x4ad4 <__clzsi2+0x36>
    4aca:	88 e0       	ldi	r24, 0x08	; 8
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	a0 e0       	ldi	r26, 0x00	; 0
    4ad0:	b0 e0       	ldi	r27, 0x00	; 0
    4ad2:	17 c0       	rjmp	.+46     	; 0x4b02 <__clzsi2+0x64>
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	a0 e0       	ldi	r26, 0x00	; 0
    4ada:	b0 e0       	ldi	r27, 0x00	; 0
    4adc:	12 c0       	rjmp	.+36     	; 0x4b02 <__clzsi2+0x64>
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	e8 16       	cp	r14, r24
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	f8 06       	cpc	r15, r24
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
    4ae8:	08 07       	cpc	r16, r24
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	18 07       	cpc	r17, r24
    4aee:	28 f0       	brcs	.+10     	; 0x4afa <__clzsi2+0x5c>
    4af0:	88 e1       	ldi	r24, 0x18	; 24
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	a0 e0       	ldi	r26, 0x00	; 0
    4af6:	b0 e0       	ldi	r27, 0x00	; 0
    4af8:	04 c0       	rjmp	.+8      	; 0x4b02 <__clzsi2+0x64>
    4afa:	80 e1       	ldi	r24, 0x10	; 16
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	a0 e0       	ldi	r26, 0x00	; 0
    4b00:	b0 e0       	ldi	r27, 0x00	; 0
    4b02:	20 e2       	ldi	r18, 0x20	; 32
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	40 e0       	ldi	r20, 0x00	; 0
    4b08:	50 e0       	ldi	r21, 0x00	; 0
    4b0a:	28 1b       	sub	r18, r24
    4b0c:	39 0b       	sbc	r19, r25
    4b0e:	4a 0b       	sbc	r20, r26
    4b10:	5b 0b       	sbc	r21, r27
    4b12:	04 c0       	rjmp	.+8      	; 0x4b1c <__clzsi2+0x7e>
    4b14:	16 95       	lsr	r17
    4b16:	07 95       	ror	r16
    4b18:	f7 94       	ror	r15
    4b1a:	e7 94       	ror	r14
    4b1c:	8a 95       	dec	r24
    4b1e:	d2 f7       	brpl	.-12     	; 0x4b14 <__clzsi2+0x76>
    4b20:	f7 01       	movw	r30, r14
    4b22:	ee 5b       	subi	r30, 0xBE	; 190
    4b24:	fc 4f       	sbci	r31, 0xFC	; 252
    4b26:	80 81       	ld	r24, Z
    4b28:	28 1b       	sub	r18, r24
    4b2a:	31 09       	sbc	r19, r1
    4b2c:	41 09       	sbc	r20, r1
    4b2e:	51 09       	sbc	r21, r1
    4b30:	c9 01       	movw	r24, r18
    4b32:	1f 91       	pop	r17
    4b34:	0f 91       	pop	r16
    4b36:	ff 90       	pop	r15
    4b38:	ef 90       	pop	r14
    4b3a:	08 95       	ret

00004b3c <__pack_f>:
    4b3c:	df 92       	push	r13
    4b3e:	ef 92       	push	r14
    4b40:	ff 92       	push	r15
    4b42:	0f 93       	push	r16
    4b44:	1f 93       	push	r17
    4b46:	fc 01       	movw	r30, r24
    4b48:	e4 80       	ldd	r14, Z+4	; 0x04
    4b4a:	f5 80       	ldd	r15, Z+5	; 0x05
    4b4c:	06 81       	ldd	r16, Z+6	; 0x06
    4b4e:	17 81       	ldd	r17, Z+7	; 0x07
    4b50:	d1 80       	ldd	r13, Z+1	; 0x01
    4b52:	80 81       	ld	r24, Z
    4b54:	82 30       	cpi	r24, 0x02	; 2
    4b56:	48 f4       	brcc	.+18     	; 0x4b6a <__pack_f+0x2e>
    4b58:	80 e0       	ldi	r24, 0x00	; 0
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	a0 e1       	ldi	r26, 0x10	; 16
    4b5e:	b0 e0       	ldi	r27, 0x00	; 0
    4b60:	e8 2a       	or	r14, r24
    4b62:	f9 2a       	or	r15, r25
    4b64:	0a 2b       	or	r16, r26
    4b66:	1b 2b       	or	r17, r27
    4b68:	a5 c0       	rjmp	.+330    	; 0x4cb4 <__pack_f+0x178>
    4b6a:	84 30       	cpi	r24, 0x04	; 4
    4b6c:	09 f4       	brne	.+2      	; 0x4b70 <__pack_f+0x34>
    4b6e:	9f c0       	rjmp	.+318    	; 0x4cae <__pack_f+0x172>
    4b70:	82 30       	cpi	r24, 0x02	; 2
    4b72:	21 f4       	brne	.+8      	; 0x4b7c <__pack_f+0x40>
    4b74:	ee 24       	eor	r14, r14
    4b76:	ff 24       	eor	r15, r15
    4b78:	87 01       	movw	r16, r14
    4b7a:	05 c0       	rjmp	.+10     	; 0x4b86 <__pack_f+0x4a>
    4b7c:	e1 14       	cp	r14, r1
    4b7e:	f1 04       	cpc	r15, r1
    4b80:	01 05       	cpc	r16, r1
    4b82:	11 05       	cpc	r17, r1
    4b84:	19 f4       	brne	.+6      	; 0x4b8c <__pack_f+0x50>
    4b86:	e0 e0       	ldi	r30, 0x00	; 0
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	96 c0       	rjmp	.+300    	; 0x4cb8 <__pack_f+0x17c>
    4b8c:	62 81       	ldd	r22, Z+2	; 0x02
    4b8e:	73 81       	ldd	r23, Z+3	; 0x03
    4b90:	9f ef       	ldi	r25, 0xFF	; 255
    4b92:	62 38       	cpi	r22, 0x82	; 130
    4b94:	79 07       	cpc	r23, r25
    4b96:	0c f0       	brlt	.+2      	; 0x4b9a <__pack_f+0x5e>
    4b98:	5b c0       	rjmp	.+182    	; 0x4c50 <__pack_f+0x114>
    4b9a:	22 e8       	ldi	r18, 0x82	; 130
    4b9c:	3f ef       	ldi	r19, 0xFF	; 255
    4b9e:	26 1b       	sub	r18, r22
    4ba0:	37 0b       	sbc	r19, r23
    4ba2:	2a 31       	cpi	r18, 0x1A	; 26
    4ba4:	31 05       	cpc	r19, r1
    4ba6:	2c f0       	brlt	.+10     	; 0x4bb2 <__pack_f+0x76>
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	30 e0       	ldi	r19, 0x00	; 0
    4bac:	40 e0       	ldi	r20, 0x00	; 0
    4bae:	50 e0       	ldi	r21, 0x00	; 0
    4bb0:	2a c0       	rjmp	.+84     	; 0x4c06 <__pack_f+0xca>
    4bb2:	b8 01       	movw	r22, r16
    4bb4:	a7 01       	movw	r20, r14
    4bb6:	02 2e       	mov	r0, r18
    4bb8:	04 c0       	rjmp	.+8      	; 0x4bc2 <__pack_f+0x86>
    4bba:	76 95       	lsr	r23
    4bbc:	67 95       	ror	r22
    4bbe:	57 95       	ror	r21
    4bc0:	47 95       	ror	r20
    4bc2:	0a 94       	dec	r0
    4bc4:	d2 f7       	brpl	.-12     	; 0x4bba <__pack_f+0x7e>
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	a0 e0       	ldi	r26, 0x00	; 0
    4bcc:	b0 e0       	ldi	r27, 0x00	; 0
    4bce:	04 c0       	rjmp	.+8      	; 0x4bd8 <__pack_f+0x9c>
    4bd0:	88 0f       	add	r24, r24
    4bd2:	99 1f       	adc	r25, r25
    4bd4:	aa 1f       	adc	r26, r26
    4bd6:	bb 1f       	adc	r27, r27
    4bd8:	2a 95       	dec	r18
    4bda:	d2 f7       	brpl	.-12     	; 0x4bd0 <__pack_f+0x94>
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	a1 09       	sbc	r26, r1
    4be0:	b1 09       	sbc	r27, r1
    4be2:	8e 21       	and	r24, r14
    4be4:	9f 21       	and	r25, r15
    4be6:	a0 23       	and	r26, r16
    4be8:	b1 23       	and	r27, r17
    4bea:	00 97       	sbiw	r24, 0x00	; 0
    4bec:	a1 05       	cpc	r26, r1
    4bee:	b1 05       	cpc	r27, r1
    4bf0:	21 f0       	breq	.+8      	; 0x4bfa <__pack_f+0xbe>
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	a0 e0       	ldi	r26, 0x00	; 0
    4bf8:	b0 e0       	ldi	r27, 0x00	; 0
    4bfa:	9a 01       	movw	r18, r20
    4bfc:	ab 01       	movw	r20, r22
    4bfe:	28 2b       	or	r18, r24
    4c00:	39 2b       	or	r19, r25
    4c02:	4a 2b       	or	r20, r26
    4c04:	5b 2b       	or	r21, r27
    4c06:	da 01       	movw	r26, r20
    4c08:	c9 01       	movw	r24, r18
    4c0a:	8f 77       	andi	r24, 0x7F	; 127
    4c0c:	90 70       	andi	r25, 0x00	; 0
    4c0e:	a0 70       	andi	r26, 0x00	; 0
    4c10:	b0 70       	andi	r27, 0x00	; 0
    4c12:	80 34       	cpi	r24, 0x40	; 64
    4c14:	91 05       	cpc	r25, r1
    4c16:	a1 05       	cpc	r26, r1
    4c18:	b1 05       	cpc	r27, r1
    4c1a:	39 f4       	brne	.+14     	; 0x4c2a <__pack_f+0xee>
    4c1c:	27 ff       	sbrs	r18, 7
    4c1e:	09 c0       	rjmp	.+18     	; 0x4c32 <__pack_f+0xf6>
    4c20:	20 5c       	subi	r18, 0xC0	; 192
    4c22:	3f 4f       	sbci	r19, 0xFF	; 255
    4c24:	4f 4f       	sbci	r20, 0xFF	; 255
    4c26:	5f 4f       	sbci	r21, 0xFF	; 255
    4c28:	04 c0       	rjmp	.+8      	; 0x4c32 <__pack_f+0xf6>
    4c2a:	21 5c       	subi	r18, 0xC1	; 193
    4c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c2e:	4f 4f       	sbci	r20, 0xFF	; 255
    4c30:	5f 4f       	sbci	r21, 0xFF	; 255
    4c32:	e0 e0       	ldi	r30, 0x00	; 0
    4c34:	f0 e0       	ldi	r31, 0x00	; 0
    4c36:	20 30       	cpi	r18, 0x00	; 0
    4c38:	a0 e0       	ldi	r26, 0x00	; 0
    4c3a:	3a 07       	cpc	r19, r26
    4c3c:	a0 e0       	ldi	r26, 0x00	; 0
    4c3e:	4a 07       	cpc	r20, r26
    4c40:	a0 e4       	ldi	r26, 0x40	; 64
    4c42:	5a 07       	cpc	r21, r26
    4c44:	10 f0       	brcs	.+4      	; 0x4c4a <__pack_f+0x10e>
    4c46:	e1 e0       	ldi	r30, 0x01	; 1
    4c48:	f0 e0       	ldi	r31, 0x00	; 0
    4c4a:	79 01       	movw	r14, r18
    4c4c:	8a 01       	movw	r16, r20
    4c4e:	27 c0       	rjmp	.+78     	; 0x4c9e <__pack_f+0x162>
    4c50:	60 38       	cpi	r22, 0x80	; 128
    4c52:	71 05       	cpc	r23, r1
    4c54:	64 f5       	brge	.+88     	; 0x4cae <__pack_f+0x172>
    4c56:	fb 01       	movw	r30, r22
    4c58:	e1 58       	subi	r30, 0x81	; 129
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	d8 01       	movw	r26, r16
    4c5e:	c7 01       	movw	r24, r14
    4c60:	8f 77       	andi	r24, 0x7F	; 127
    4c62:	90 70       	andi	r25, 0x00	; 0
    4c64:	a0 70       	andi	r26, 0x00	; 0
    4c66:	b0 70       	andi	r27, 0x00	; 0
    4c68:	80 34       	cpi	r24, 0x40	; 64
    4c6a:	91 05       	cpc	r25, r1
    4c6c:	a1 05       	cpc	r26, r1
    4c6e:	b1 05       	cpc	r27, r1
    4c70:	39 f4       	brne	.+14     	; 0x4c80 <__pack_f+0x144>
    4c72:	e7 fe       	sbrs	r14, 7
    4c74:	0d c0       	rjmp	.+26     	; 0x4c90 <__pack_f+0x154>
    4c76:	80 e4       	ldi	r24, 0x40	; 64
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	a0 e0       	ldi	r26, 0x00	; 0
    4c7c:	b0 e0       	ldi	r27, 0x00	; 0
    4c7e:	04 c0       	rjmp	.+8      	; 0x4c88 <__pack_f+0x14c>
    4c80:	8f e3       	ldi	r24, 0x3F	; 63
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	a0 e0       	ldi	r26, 0x00	; 0
    4c86:	b0 e0       	ldi	r27, 0x00	; 0
    4c88:	e8 0e       	add	r14, r24
    4c8a:	f9 1e       	adc	r15, r25
    4c8c:	0a 1f       	adc	r16, r26
    4c8e:	1b 1f       	adc	r17, r27
    4c90:	17 ff       	sbrs	r17, 7
    4c92:	05 c0       	rjmp	.+10     	; 0x4c9e <__pack_f+0x162>
    4c94:	16 95       	lsr	r17
    4c96:	07 95       	ror	r16
    4c98:	f7 94       	ror	r15
    4c9a:	e7 94       	ror	r14
    4c9c:	31 96       	adiw	r30, 0x01	; 1
    4c9e:	87 e0       	ldi	r24, 0x07	; 7
    4ca0:	16 95       	lsr	r17
    4ca2:	07 95       	ror	r16
    4ca4:	f7 94       	ror	r15
    4ca6:	e7 94       	ror	r14
    4ca8:	8a 95       	dec	r24
    4caa:	d1 f7       	brne	.-12     	; 0x4ca0 <__pack_f+0x164>
    4cac:	05 c0       	rjmp	.+10     	; 0x4cb8 <__pack_f+0x17c>
    4cae:	ee 24       	eor	r14, r14
    4cb0:	ff 24       	eor	r15, r15
    4cb2:	87 01       	movw	r16, r14
    4cb4:	ef ef       	ldi	r30, 0xFF	; 255
    4cb6:	f0 e0       	ldi	r31, 0x00	; 0
    4cb8:	6e 2f       	mov	r22, r30
    4cba:	67 95       	ror	r22
    4cbc:	66 27       	eor	r22, r22
    4cbe:	67 95       	ror	r22
    4cc0:	90 2f       	mov	r25, r16
    4cc2:	9f 77       	andi	r25, 0x7F	; 127
    4cc4:	d7 94       	ror	r13
    4cc6:	dd 24       	eor	r13, r13
    4cc8:	d7 94       	ror	r13
    4cca:	8e 2f       	mov	r24, r30
    4ccc:	86 95       	lsr	r24
    4cce:	49 2f       	mov	r20, r25
    4cd0:	46 2b       	or	r20, r22
    4cd2:	58 2f       	mov	r21, r24
    4cd4:	5d 29       	or	r21, r13
    4cd6:	b7 01       	movw	r22, r14
    4cd8:	ca 01       	movw	r24, r20
    4cda:	1f 91       	pop	r17
    4cdc:	0f 91       	pop	r16
    4cde:	ff 90       	pop	r15
    4ce0:	ef 90       	pop	r14
    4ce2:	df 90       	pop	r13
    4ce4:	08 95       	ret

00004ce6 <__unpack_f>:
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	db 01       	movw	r26, r22
    4cea:	40 81       	ld	r20, Z
    4cec:	51 81       	ldd	r21, Z+1	; 0x01
    4cee:	22 81       	ldd	r18, Z+2	; 0x02
    4cf0:	62 2f       	mov	r22, r18
    4cf2:	6f 77       	andi	r22, 0x7F	; 127
    4cf4:	70 e0       	ldi	r23, 0x00	; 0
    4cf6:	22 1f       	adc	r18, r18
    4cf8:	22 27       	eor	r18, r18
    4cfa:	22 1f       	adc	r18, r18
    4cfc:	93 81       	ldd	r25, Z+3	; 0x03
    4cfe:	89 2f       	mov	r24, r25
    4d00:	88 0f       	add	r24, r24
    4d02:	82 2b       	or	r24, r18
    4d04:	28 2f       	mov	r18, r24
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	99 1f       	adc	r25, r25
    4d0a:	99 27       	eor	r25, r25
    4d0c:	99 1f       	adc	r25, r25
    4d0e:	11 96       	adiw	r26, 0x01	; 1
    4d10:	9c 93       	st	X, r25
    4d12:	11 97       	sbiw	r26, 0x01	; 1
    4d14:	21 15       	cp	r18, r1
    4d16:	31 05       	cpc	r19, r1
    4d18:	a9 f5       	brne	.+106    	; 0x4d84 <__unpack_f+0x9e>
    4d1a:	41 15       	cp	r20, r1
    4d1c:	51 05       	cpc	r21, r1
    4d1e:	61 05       	cpc	r22, r1
    4d20:	71 05       	cpc	r23, r1
    4d22:	11 f4       	brne	.+4      	; 0x4d28 <__unpack_f+0x42>
    4d24:	82 e0       	ldi	r24, 0x02	; 2
    4d26:	37 c0       	rjmp	.+110    	; 0x4d96 <__unpack_f+0xb0>
    4d28:	82 e8       	ldi	r24, 0x82	; 130
    4d2a:	9f ef       	ldi	r25, 0xFF	; 255
    4d2c:	13 96       	adiw	r26, 0x03	; 3
    4d2e:	9c 93       	st	X, r25
    4d30:	8e 93       	st	-X, r24
    4d32:	12 97       	sbiw	r26, 0x02	; 2
    4d34:	9a 01       	movw	r18, r20
    4d36:	ab 01       	movw	r20, r22
    4d38:	67 e0       	ldi	r22, 0x07	; 7
    4d3a:	22 0f       	add	r18, r18
    4d3c:	33 1f       	adc	r19, r19
    4d3e:	44 1f       	adc	r20, r20
    4d40:	55 1f       	adc	r21, r21
    4d42:	6a 95       	dec	r22
    4d44:	d1 f7       	brne	.-12     	; 0x4d3a <__unpack_f+0x54>
    4d46:	83 e0       	ldi	r24, 0x03	; 3
    4d48:	8c 93       	st	X, r24
    4d4a:	0d c0       	rjmp	.+26     	; 0x4d66 <__unpack_f+0x80>
    4d4c:	22 0f       	add	r18, r18
    4d4e:	33 1f       	adc	r19, r19
    4d50:	44 1f       	adc	r20, r20
    4d52:	55 1f       	adc	r21, r21
    4d54:	12 96       	adiw	r26, 0x02	; 2
    4d56:	8d 91       	ld	r24, X+
    4d58:	9c 91       	ld	r25, X
    4d5a:	13 97       	sbiw	r26, 0x03	; 3
    4d5c:	01 97       	sbiw	r24, 0x01	; 1
    4d5e:	13 96       	adiw	r26, 0x03	; 3
    4d60:	9c 93       	st	X, r25
    4d62:	8e 93       	st	-X, r24
    4d64:	12 97       	sbiw	r26, 0x02	; 2
    4d66:	20 30       	cpi	r18, 0x00	; 0
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	38 07       	cpc	r19, r24
    4d6c:	80 e0       	ldi	r24, 0x00	; 0
    4d6e:	48 07       	cpc	r20, r24
    4d70:	80 e4       	ldi	r24, 0x40	; 64
    4d72:	58 07       	cpc	r21, r24
    4d74:	58 f3       	brcs	.-42     	; 0x4d4c <__unpack_f+0x66>
    4d76:	14 96       	adiw	r26, 0x04	; 4
    4d78:	2d 93       	st	X+, r18
    4d7a:	3d 93       	st	X+, r19
    4d7c:	4d 93       	st	X+, r20
    4d7e:	5c 93       	st	X, r21
    4d80:	17 97       	sbiw	r26, 0x07	; 7
    4d82:	08 95       	ret
    4d84:	2f 3f       	cpi	r18, 0xFF	; 255
    4d86:	31 05       	cpc	r19, r1
    4d88:	79 f4       	brne	.+30     	; 0x4da8 <__unpack_f+0xc2>
    4d8a:	41 15       	cp	r20, r1
    4d8c:	51 05       	cpc	r21, r1
    4d8e:	61 05       	cpc	r22, r1
    4d90:	71 05       	cpc	r23, r1
    4d92:	19 f4       	brne	.+6      	; 0x4d9a <__unpack_f+0xb4>
    4d94:	84 e0       	ldi	r24, 0x04	; 4
    4d96:	8c 93       	st	X, r24
    4d98:	08 95       	ret
    4d9a:	64 ff       	sbrs	r22, 4
    4d9c:	03 c0       	rjmp	.+6      	; 0x4da4 <__unpack_f+0xbe>
    4d9e:	81 e0       	ldi	r24, 0x01	; 1
    4da0:	8c 93       	st	X, r24
    4da2:	12 c0       	rjmp	.+36     	; 0x4dc8 <__unpack_f+0xe2>
    4da4:	1c 92       	st	X, r1
    4da6:	10 c0       	rjmp	.+32     	; 0x4dc8 <__unpack_f+0xe2>
    4da8:	2f 57       	subi	r18, 0x7F	; 127
    4daa:	30 40       	sbci	r19, 0x00	; 0
    4dac:	13 96       	adiw	r26, 0x03	; 3
    4dae:	3c 93       	st	X, r19
    4db0:	2e 93       	st	-X, r18
    4db2:	12 97       	sbiw	r26, 0x02	; 2
    4db4:	83 e0       	ldi	r24, 0x03	; 3
    4db6:	8c 93       	st	X, r24
    4db8:	87 e0       	ldi	r24, 0x07	; 7
    4dba:	44 0f       	add	r20, r20
    4dbc:	55 1f       	adc	r21, r21
    4dbe:	66 1f       	adc	r22, r22
    4dc0:	77 1f       	adc	r23, r23
    4dc2:	8a 95       	dec	r24
    4dc4:	d1 f7       	brne	.-12     	; 0x4dba <__unpack_f+0xd4>
    4dc6:	70 64       	ori	r23, 0x40	; 64
    4dc8:	14 96       	adiw	r26, 0x04	; 4
    4dca:	4d 93       	st	X+, r20
    4dcc:	5d 93       	st	X+, r21
    4dce:	6d 93       	st	X+, r22
    4dd0:	7c 93       	st	X, r23
    4dd2:	17 97       	sbiw	r26, 0x07	; 7
    4dd4:	08 95       	ret

00004dd6 <__fpcmp_parts_f>:
    4dd6:	1f 93       	push	r17
    4dd8:	dc 01       	movw	r26, r24
    4dda:	fb 01       	movw	r30, r22
    4ddc:	9c 91       	ld	r25, X
    4dde:	92 30       	cpi	r25, 0x02	; 2
    4de0:	08 f4       	brcc	.+2      	; 0x4de4 <__fpcmp_parts_f+0xe>
    4de2:	47 c0       	rjmp	.+142    	; 0x4e72 <__fpcmp_parts_f+0x9c>
    4de4:	80 81       	ld	r24, Z
    4de6:	82 30       	cpi	r24, 0x02	; 2
    4de8:	08 f4       	brcc	.+2      	; 0x4dec <__fpcmp_parts_f+0x16>
    4dea:	43 c0       	rjmp	.+134    	; 0x4e72 <__fpcmp_parts_f+0x9c>
    4dec:	94 30       	cpi	r25, 0x04	; 4
    4dee:	51 f4       	brne	.+20     	; 0x4e04 <__fpcmp_parts_f+0x2e>
    4df0:	11 96       	adiw	r26, 0x01	; 1
    4df2:	1c 91       	ld	r17, X
    4df4:	84 30       	cpi	r24, 0x04	; 4
    4df6:	99 f5       	brne	.+102    	; 0x4e5e <__fpcmp_parts_f+0x88>
    4df8:	81 81       	ldd	r24, Z+1	; 0x01
    4dfa:	68 2f       	mov	r22, r24
    4dfc:	70 e0       	ldi	r23, 0x00	; 0
    4dfe:	61 1b       	sub	r22, r17
    4e00:	71 09       	sbc	r23, r1
    4e02:	3f c0       	rjmp	.+126    	; 0x4e82 <__fpcmp_parts_f+0xac>
    4e04:	84 30       	cpi	r24, 0x04	; 4
    4e06:	21 f0       	breq	.+8      	; 0x4e10 <__fpcmp_parts_f+0x3a>
    4e08:	92 30       	cpi	r25, 0x02	; 2
    4e0a:	31 f4       	brne	.+12     	; 0x4e18 <__fpcmp_parts_f+0x42>
    4e0c:	82 30       	cpi	r24, 0x02	; 2
    4e0e:	b9 f1       	breq	.+110    	; 0x4e7e <__fpcmp_parts_f+0xa8>
    4e10:	81 81       	ldd	r24, Z+1	; 0x01
    4e12:	88 23       	and	r24, r24
    4e14:	89 f1       	breq	.+98     	; 0x4e78 <__fpcmp_parts_f+0xa2>
    4e16:	2d c0       	rjmp	.+90     	; 0x4e72 <__fpcmp_parts_f+0x9c>
    4e18:	11 96       	adiw	r26, 0x01	; 1
    4e1a:	1c 91       	ld	r17, X
    4e1c:	11 97       	sbiw	r26, 0x01	; 1
    4e1e:	82 30       	cpi	r24, 0x02	; 2
    4e20:	f1 f0       	breq	.+60     	; 0x4e5e <__fpcmp_parts_f+0x88>
    4e22:	81 81       	ldd	r24, Z+1	; 0x01
    4e24:	18 17       	cp	r17, r24
    4e26:	d9 f4       	brne	.+54     	; 0x4e5e <__fpcmp_parts_f+0x88>
    4e28:	12 96       	adiw	r26, 0x02	; 2
    4e2a:	2d 91       	ld	r18, X+
    4e2c:	3c 91       	ld	r19, X
    4e2e:	13 97       	sbiw	r26, 0x03	; 3
    4e30:	82 81       	ldd	r24, Z+2	; 0x02
    4e32:	93 81       	ldd	r25, Z+3	; 0x03
    4e34:	82 17       	cp	r24, r18
    4e36:	93 07       	cpc	r25, r19
    4e38:	94 f0       	brlt	.+36     	; 0x4e5e <__fpcmp_parts_f+0x88>
    4e3a:	28 17       	cp	r18, r24
    4e3c:	39 07       	cpc	r19, r25
    4e3e:	bc f0       	brlt	.+46     	; 0x4e6e <__fpcmp_parts_f+0x98>
    4e40:	14 96       	adiw	r26, 0x04	; 4
    4e42:	8d 91       	ld	r24, X+
    4e44:	9d 91       	ld	r25, X+
    4e46:	0d 90       	ld	r0, X+
    4e48:	bc 91       	ld	r27, X
    4e4a:	a0 2d       	mov	r26, r0
    4e4c:	24 81       	ldd	r18, Z+4	; 0x04
    4e4e:	35 81       	ldd	r19, Z+5	; 0x05
    4e50:	46 81       	ldd	r20, Z+6	; 0x06
    4e52:	57 81       	ldd	r21, Z+7	; 0x07
    4e54:	28 17       	cp	r18, r24
    4e56:	39 07       	cpc	r19, r25
    4e58:	4a 07       	cpc	r20, r26
    4e5a:	5b 07       	cpc	r21, r27
    4e5c:	18 f4       	brcc	.+6      	; 0x4e64 <__fpcmp_parts_f+0x8e>
    4e5e:	11 23       	and	r17, r17
    4e60:	41 f0       	breq	.+16     	; 0x4e72 <__fpcmp_parts_f+0x9c>
    4e62:	0a c0       	rjmp	.+20     	; 0x4e78 <__fpcmp_parts_f+0xa2>
    4e64:	82 17       	cp	r24, r18
    4e66:	93 07       	cpc	r25, r19
    4e68:	a4 07       	cpc	r26, r20
    4e6a:	b5 07       	cpc	r27, r21
    4e6c:	40 f4       	brcc	.+16     	; 0x4e7e <__fpcmp_parts_f+0xa8>
    4e6e:	11 23       	and	r17, r17
    4e70:	19 f0       	breq	.+6      	; 0x4e78 <__fpcmp_parts_f+0xa2>
    4e72:	61 e0       	ldi	r22, 0x01	; 1
    4e74:	70 e0       	ldi	r23, 0x00	; 0
    4e76:	05 c0       	rjmp	.+10     	; 0x4e82 <__fpcmp_parts_f+0xac>
    4e78:	6f ef       	ldi	r22, 0xFF	; 255
    4e7a:	7f ef       	ldi	r23, 0xFF	; 255
    4e7c:	02 c0       	rjmp	.+4      	; 0x4e82 <__fpcmp_parts_f+0xac>
    4e7e:	60 e0       	ldi	r22, 0x00	; 0
    4e80:	70 e0       	ldi	r23, 0x00	; 0
    4e82:	cb 01       	movw	r24, r22
    4e84:	1f 91       	pop	r17
    4e86:	08 95       	ret

00004e88 <__mulsi3>:
    4e88:	62 9f       	mul	r22, r18
    4e8a:	d0 01       	movw	r26, r0
    4e8c:	73 9f       	mul	r23, r19
    4e8e:	f0 01       	movw	r30, r0
    4e90:	82 9f       	mul	r24, r18
    4e92:	e0 0d       	add	r30, r0
    4e94:	f1 1d       	adc	r31, r1
    4e96:	64 9f       	mul	r22, r20
    4e98:	e0 0d       	add	r30, r0
    4e9a:	f1 1d       	adc	r31, r1
    4e9c:	92 9f       	mul	r25, r18
    4e9e:	f0 0d       	add	r31, r0
    4ea0:	83 9f       	mul	r24, r19
    4ea2:	f0 0d       	add	r31, r0
    4ea4:	74 9f       	mul	r23, r20
    4ea6:	f0 0d       	add	r31, r0
    4ea8:	65 9f       	mul	r22, r21
    4eaa:	f0 0d       	add	r31, r0
    4eac:	99 27       	eor	r25, r25
    4eae:	72 9f       	mul	r23, r18
    4eb0:	b0 0d       	add	r27, r0
    4eb2:	e1 1d       	adc	r30, r1
    4eb4:	f9 1f       	adc	r31, r25
    4eb6:	63 9f       	mul	r22, r19
    4eb8:	b0 0d       	add	r27, r0
    4eba:	e1 1d       	adc	r30, r1
    4ebc:	f9 1f       	adc	r31, r25
    4ebe:	bd 01       	movw	r22, r26
    4ec0:	cf 01       	movw	r24, r30
    4ec2:	11 24       	eor	r1, r1
    4ec4:	08 95       	ret

00004ec6 <__prologue_saves__>:
    4ec6:	2f 92       	push	r2
    4ec8:	3f 92       	push	r3
    4eca:	4f 92       	push	r4
    4ecc:	5f 92       	push	r5
    4ece:	6f 92       	push	r6
    4ed0:	7f 92       	push	r7
    4ed2:	8f 92       	push	r8
    4ed4:	9f 92       	push	r9
    4ed6:	af 92       	push	r10
    4ed8:	bf 92       	push	r11
    4eda:	cf 92       	push	r12
    4edc:	df 92       	push	r13
    4ede:	ef 92       	push	r14
    4ee0:	ff 92       	push	r15
    4ee2:	0f 93       	push	r16
    4ee4:	1f 93       	push	r17
    4ee6:	cf 93       	push	r28
    4ee8:	df 93       	push	r29
    4eea:	cd b7       	in	r28, 0x3d	; 61
    4eec:	de b7       	in	r29, 0x3e	; 62
    4eee:	ca 1b       	sub	r28, r26
    4ef0:	db 0b       	sbc	r29, r27
    4ef2:	0f b6       	in	r0, 0x3f	; 63
    4ef4:	f8 94       	cli
    4ef6:	de bf       	out	0x3e, r29	; 62
    4ef8:	0f be       	out	0x3f, r0	; 63
    4efa:	cd bf       	out	0x3d, r28	; 61
    4efc:	19 94       	eijmp

00004efe <__epilogue_restores__>:
    4efe:	2a 88       	ldd	r2, Y+18	; 0x12
    4f00:	39 88       	ldd	r3, Y+17	; 0x11
    4f02:	48 88       	ldd	r4, Y+16	; 0x10
    4f04:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f06:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f08:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f10:	b9 84       	ldd	r11, Y+9	; 0x09
    4f12:	c8 84       	ldd	r12, Y+8	; 0x08
    4f14:	df 80       	ldd	r13, Y+7	; 0x07
    4f16:	ee 80       	ldd	r14, Y+6	; 0x06
    4f18:	fd 80       	ldd	r15, Y+5	; 0x05
    4f1a:	0c 81       	ldd	r16, Y+4	; 0x04
    4f1c:	1b 81       	ldd	r17, Y+3	; 0x03
    4f1e:	aa 81       	ldd	r26, Y+2	; 0x02
    4f20:	b9 81       	ldd	r27, Y+1	; 0x01
    4f22:	ce 0f       	add	r28, r30
    4f24:	d1 1d       	adc	r29, r1
    4f26:	0f b6       	in	r0, 0x3f	; 63
    4f28:	f8 94       	cli
    4f2a:	de bf       	out	0x3e, r29	; 62
    4f2c:	0f be       	out	0x3f, r0	; 63
    4f2e:	cd bf       	out	0x3d, r28	; 61
    4f30:	ed 01       	movw	r28, r26
    4f32:	08 95       	ret

00004f34 <fdevopen>:
    4f34:	0f 93       	push	r16
    4f36:	1f 93       	push	r17
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	8c 01       	movw	r16, r24
    4f3e:	eb 01       	movw	r28, r22
    4f40:	00 97       	sbiw	r24, 0x00	; 0
    4f42:	31 f4       	brne	.+12     	; 0x4f50 <fdevopen+0x1c>
    4f44:	61 15       	cp	r22, r1
    4f46:	71 05       	cpc	r23, r1
    4f48:	19 f4       	brne	.+6      	; 0x4f50 <fdevopen+0x1c>
    4f4a:	20 e0       	ldi	r18, 0x00	; 0
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	38 c0       	rjmp	.+112    	; 0x4fc0 <fdevopen+0x8c>
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	6e e0       	ldi	r22, 0x0E	; 14
    4f56:	70 e0       	ldi	r23, 0x00	; 0
    4f58:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <calloc>
    4f5c:	fc 01       	movw	r30, r24
    4f5e:	9c 01       	movw	r18, r24
    4f60:	00 97       	sbiw	r24, 0x00	; 0
    4f62:	71 f1       	breq	.+92     	; 0x4fc0 <fdevopen+0x8c>
    4f64:	80 e8       	ldi	r24, 0x80	; 128
    4f66:	83 83       	std	Z+3, r24	; 0x03
    4f68:	20 97       	sbiw	r28, 0x00	; 0
    4f6a:	71 f0       	breq	.+28     	; 0x4f88 <fdevopen+0x54>
    4f6c:	d3 87       	std	Z+11, r29	; 0x0b
    4f6e:	c2 87       	std	Z+10, r28	; 0x0a
    4f70:	81 e8       	ldi	r24, 0x81	; 129
    4f72:	83 83       	std	Z+3, r24	; 0x03
    4f74:	80 91 92 04 	lds	r24, 0x0492
    4f78:	90 91 93 04 	lds	r25, 0x0493
    4f7c:	89 2b       	or	r24, r25
    4f7e:	21 f4       	brne	.+8      	; 0x4f88 <fdevopen+0x54>
    4f80:	f0 93 93 04 	sts	0x0493, r31
    4f84:	e0 93 92 04 	sts	0x0492, r30
    4f88:	01 15       	cp	r16, r1
    4f8a:	11 05       	cpc	r17, r1
    4f8c:	c9 f0       	breq	.+50     	; 0x4fc0 <fdevopen+0x8c>
    4f8e:	11 87       	std	Z+9, r17	; 0x09
    4f90:	00 87       	std	Z+8, r16	; 0x08
    4f92:	83 81       	ldd	r24, Z+3	; 0x03
    4f94:	82 60       	ori	r24, 0x02	; 2
    4f96:	83 83       	std	Z+3, r24	; 0x03
    4f98:	80 91 94 04 	lds	r24, 0x0494
    4f9c:	90 91 95 04 	lds	r25, 0x0495
    4fa0:	89 2b       	or	r24, r25
    4fa2:	71 f4       	brne	.+28     	; 0x4fc0 <fdevopen+0x8c>
    4fa4:	f0 93 95 04 	sts	0x0495, r31
    4fa8:	e0 93 94 04 	sts	0x0494, r30
    4fac:	80 91 96 04 	lds	r24, 0x0496
    4fb0:	90 91 97 04 	lds	r25, 0x0497
    4fb4:	89 2b       	or	r24, r25
    4fb6:	21 f4       	brne	.+8      	; 0x4fc0 <fdevopen+0x8c>
    4fb8:	f0 93 97 04 	sts	0x0497, r31
    4fbc:	e0 93 96 04 	sts	0x0496, r30
    4fc0:	c9 01       	movw	r24, r18
    4fc2:	df 91       	pop	r29
    4fc4:	cf 91       	pop	r28
    4fc6:	1f 91       	pop	r17
    4fc8:	0f 91       	pop	r16
    4fca:	08 95       	ret

00004fcc <fputc>:
    4fcc:	0f 93       	push	r16
    4fce:	1f 93       	push	r17
    4fd0:	cf 93       	push	r28
    4fd2:	df 93       	push	r29
    4fd4:	8c 01       	movw	r16, r24
    4fd6:	eb 01       	movw	r28, r22
    4fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fda:	81 ff       	sbrs	r24, 1
    4fdc:	1b c0       	rjmp	.+54     	; 0x5014 <fputc+0x48>
    4fde:	82 ff       	sbrs	r24, 2
    4fe0:	0d c0       	rjmp	.+26     	; 0x4ffc <fputc+0x30>
    4fe2:	2e 81       	ldd	r18, Y+6	; 0x06
    4fe4:	3f 81       	ldd	r19, Y+7	; 0x07
    4fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    4fea:	28 17       	cp	r18, r24
    4fec:	39 07       	cpc	r19, r25
    4fee:	64 f4       	brge	.+24     	; 0x5008 <fputc+0x3c>
    4ff0:	e8 81       	ld	r30, Y
    4ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    4ff4:	01 93       	st	Z+, r16
    4ff6:	f9 83       	std	Y+1, r31	; 0x01
    4ff8:	e8 83       	st	Y, r30
    4ffa:	06 c0       	rjmp	.+12     	; 0x5008 <fputc+0x3c>
    4ffc:	e8 85       	ldd	r30, Y+8	; 0x08
    4ffe:	f9 85       	ldd	r31, Y+9	; 0x09
    5000:	80 2f       	mov	r24, r16
    5002:	19 95       	eicall
    5004:	89 2b       	or	r24, r25
    5006:	31 f4       	brne	.+12     	; 0x5014 <fputc+0x48>
    5008:	8e 81       	ldd	r24, Y+6	; 0x06
    500a:	9f 81       	ldd	r25, Y+7	; 0x07
    500c:	01 96       	adiw	r24, 0x01	; 1
    500e:	9f 83       	std	Y+7, r25	; 0x07
    5010:	8e 83       	std	Y+6, r24	; 0x06
    5012:	02 c0       	rjmp	.+4      	; 0x5018 <fputc+0x4c>
    5014:	0f ef       	ldi	r16, 0xFF	; 255
    5016:	1f ef       	ldi	r17, 0xFF	; 255
    5018:	c8 01       	movw	r24, r16
    501a:	df 91       	pop	r29
    501c:	cf 91       	pop	r28
    501e:	1f 91       	pop	r17
    5020:	0f 91       	pop	r16
    5022:	08 95       	ret

00005024 <printf>:
    5024:	df 93       	push	r29
    5026:	cf 93       	push	r28
    5028:	cd b7       	in	r28, 0x3d	; 61
    502a:	de b7       	in	r29, 0x3e	; 62
    502c:	fe 01       	movw	r30, r28
    502e:	36 96       	adiw	r30, 0x06	; 6
    5030:	61 91       	ld	r22, Z+
    5032:	71 91       	ld	r23, Z+
    5034:	80 91 94 04 	lds	r24, 0x0494
    5038:	90 91 95 04 	lds	r25, 0x0495
    503c:	af 01       	movw	r20, r30
    503e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <vfprintf>
    5042:	cf 91       	pop	r28
    5044:	df 91       	pop	r29
    5046:	08 95       	ret

00005048 <putchar>:
    5048:	60 91 94 04 	lds	r22, 0x0494
    504c:	70 91 95 04 	lds	r23, 0x0495
    5050:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    5054:	08 95       	ret

00005056 <puts>:
    5056:	0f 93       	push	r16
    5058:	1f 93       	push	r17
    505a:	cf 93       	push	r28
    505c:	df 93       	push	r29
    505e:	8c 01       	movw	r16, r24
    5060:	e0 91 94 04 	lds	r30, 0x0494
    5064:	f0 91 95 04 	lds	r31, 0x0495
    5068:	83 81       	ldd	r24, Z+3	; 0x03
    506a:	81 ff       	sbrs	r24, 1
    506c:	21 c0       	rjmp	.+66     	; 0x50b0 <puts+0x5a>
    506e:	c0 e0       	ldi	r28, 0x00	; 0
    5070:	d0 e0       	ldi	r29, 0x00	; 0
    5072:	0d c0       	rjmp	.+26     	; 0x508e <puts+0x38>
    5074:	e0 91 94 04 	lds	r30, 0x0494
    5078:	f0 91 95 04 	lds	r31, 0x0495
    507c:	20 85       	ldd	r18, Z+8	; 0x08
    507e:	31 85       	ldd	r19, Z+9	; 0x09
    5080:	bf 01       	movw	r22, r30
    5082:	f9 01       	movw	r30, r18
    5084:	19 95       	eicall
    5086:	89 2b       	or	r24, r25
    5088:	11 f0       	breq	.+4      	; 0x508e <puts+0x38>
    508a:	cf ef       	ldi	r28, 0xFF	; 255
    508c:	df ef       	ldi	r29, 0xFF	; 255
    508e:	f8 01       	movw	r30, r16
    5090:	81 91       	ld	r24, Z+
    5092:	8f 01       	movw	r16, r30
    5094:	88 23       	and	r24, r24
    5096:	71 f7       	brne	.-36     	; 0x5074 <puts+0x1e>
    5098:	e0 91 94 04 	lds	r30, 0x0494
    509c:	f0 91 95 04 	lds	r31, 0x0495
    50a0:	20 85       	ldd	r18, Z+8	; 0x08
    50a2:	31 85       	ldd	r19, Z+9	; 0x09
    50a4:	8a e0       	ldi	r24, 0x0A	; 10
    50a6:	bf 01       	movw	r22, r30
    50a8:	f9 01       	movw	r30, r18
    50aa:	19 95       	eicall
    50ac:	89 2b       	or	r24, r25
    50ae:	11 f0       	breq	.+4      	; 0x50b4 <puts+0x5e>
    50b0:	cf ef       	ldi	r28, 0xFF	; 255
    50b2:	df ef       	ldi	r29, 0xFF	; 255
    50b4:	ce 01       	movw	r24, r28
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	1f 91       	pop	r17
    50bc:	0f 91       	pop	r16
    50be:	08 95       	ret

000050c0 <atan>:
    50c0:	df 93       	push	r29
    50c2:	dd 27       	eor	r29, r29
    50c4:	b9 2f       	mov	r27, r25
    50c6:	bf 77       	andi	r27, 0x7F	; 127
    50c8:	40 e8       	ldi	r20, 0x80	; 128
    50ca:	5f e3       	ldi	r21, 0x3F	; 63
    50cc:	16 16       	cp	r1, r22
    50ce:	17 06       	cpc	r1, r23
    50d0:	48 07       	cpc	r20, r24
    50d2:	5b 07       	cpc	r21, r27
    50d4:	10 f4       	brcc	.+4      	; 0x50da <atan+0x1a>
    50d6:	d9 2f       	mov	r29, r25
    50d8:	51 d0       	rcall	.+162    	; 0x517c <inverse>
    50da:	9f 93       	push	r25
    50dc:	8f 93       	push	r24
    50de:	7f 93       	push	r23
    50e0:	6f 93       	push	r22
    50e2:	f6 d0       	rcall	.+492    	; 0x52d0 <square>
    50e4:	e4 ee       	ldi	r30, 0xE4	; 228
    50e6:	f0 e0       	ldi	r31, 0x00	; 0
    50e8:	13 d0       	rcall	.+38     	; 0x5110 <__fp_powser>
    50ea:	37 d0       	rcall	.+110    	; 0x515a <__fp_round>
    50ec:	2f 91       	pop	r18
    50ee:	3f 91       	pop	r19
    50f0:	4f 91       	pop	r20
    50f2:	5f 91       	pop	r21
    50f4:	54 d0       	rcall	.+168    	; 0x519e <__mulsf3x>
    50f6:	dd 23       	and	r29, r29
    50f8:	49 f0       	breq	.+18     	; 0x510c <atan+0x4c>
    50fa:	90 58       	subi	r25, 0x80	; 128
    50fc:	a2 ea       	ldi	r26, 0xA2	; 162
    50fe:	2a ed       	ldi	r18, 0xDA	; 218
    5100:	3f e0       	ldi	r19, 0x0F	; 15
    5102:	49 ec       	ldi	r20, 0xC9	; 201
    5104:	5f e3       	ldi	r21, 0x3F	; 63
    5106:	d0 78       	andi	r29, 0x80	; 128
    5108:	5d 27       	eor	r21, r29
    510a:	94 d4       	rcall	.+2344   	; 0x5a34 <__addsf3x>
    510c:	df 91       	pop	r29
    510e:	25 c0       	rjmp	.+74     	; 0x515a <__fp_round>

00005110 <__fp_powser>:
    5110:	df 93       	push	r29
    5112:	cf 93       	push	r28
    5114:	1f 93       	push	r17
    5116:	0f 93       	push	r16
    5118:	ff 92       	push	r15
    511a:	ef 92       	push	r14
    511c:	df 92       	push	r13
    511e:	7b 01       	movw	r14, r22
    5120:	8c 01       	movw	r16, r24
    5122:	68 94       	set
    5124:	05 c0       	rjmp	.+10     	; 0x5130 <__fp_powser+0x20>
    5126:	da 2e       	mov	r13, r26
    5128:	ef 01       	movw	r28, r30
    512a:	39 d0       	rcall	.+114    	; 0x519e <__mulsf3x>
    512c:	fe 01       	movw	r30, r28
    512e:	e8 94       	clt
    5130:	a5 91       	lpm	r26, Z+
    5132:	25 91       	lpm	r18, Z+
    5134:	35 91       	lpm	r19, Z+
    5136:	45 91       	lpm	r20, Z+
    5138:	55 91       	lpm	r21, Z+
    513a:	ae f3       	brts	.-22     	; 0x5126 <__fp_powser+0x16>
    513c:	ef 01       	movw	r28, r30
    513e:	7a d4       	rcall	.+2292   	; 0x5a34 <__addsf3x>
    5140:	fe 01       	movw	r30, r28
    5142:	97 01       	movw	r18, r14
    5144:	a8 01       	movw	r20, r16
    5146:	da 94       	dec	r13
    5148:	79 f7       	brne	.-34     	; 0x5128 <__fp_powser+0x18>
    514a:	df 90       	pop	r13
    514c:	ef 90       	pop	r14
    514e:	ff 90       	pop	r15
    5150:	0f 91       	pop	r16
    5152:	1f 91       	pop	r17
    5154:	cf 91       	pop	r28
    5156:	df 91       	pop	r29
    5158:	08 95       	ret

0000515a <__fp_round>:
    515a:	09 2e       	mov	r0, r25
    515c:	03 94       	inc	r0
    515e:	00 0c       	add	r0, r0
    5160:	11 f4       	brne	.+4      	; 0x5166 <__fp_round+0xc>
    5162:	88 23       	and	r24, r24
    5164:	52 f0       	brmi	.+20     	; 0x517a <__fp_round+0x20>
    5166:	bb 0f       	add	r27, r27
    5168:	40 f4       	brcc	.+16     	; 0x517a <__fp_round+0x20>
    516a:	bf 2b       	or	r27, r31
    516c:	11 f4       	brne	.+4      	; 0x5172 <__fp_round+0x18>
    516e:	60 ff       	sbrs	r22, 0
    5170:	04 c0       	rjmp	.+8      	; 0x517a <__fp_round+0x20>
    5172:	6f 5f       	subi	r22, 0xFF	; 255
    5174:	7f 4f       	sbci	r23, 0xFF	; 255
    5176:	8f 4f       	sbci	r24, 0xFF	; 255
    5178:	9f 4f       	sbci	r25, 0xFF	; 255
    517a:	08 95       	ret

0000517c <inverse>:
    517c:	9b 01       	movw	r18, r22
    517e:	ac 01       	movw	r20, r24
    5180:	60 e0       	ldi	r22, 0x00	; 0
    5182:	70 e0       	ldi	r23, 0x00	; 0
    5184:	80 e8       	ldi	r24, 0x80	; 128
    5186:	9f e3       	ldi	r25, 0x3F	; 63
    5188:	9c ca       	rjmp	.-2760   	; 0x46c2 <__divsf3>
    518a:	c5 d4       	rcall	.+2442   	; 0x5b16 <__fp_pscA>
    518c:	28 f0       	brcs	.+10     	; 0x5198 <inverse+0x1c>
    518e:	ca d4       	rcall	.+2452   	; 0x5b24 <__fp_pscB>
    5190:	18 f0       	brcs	.+6      	; 0x5198 <inverse+0x1c>
    5192:	95 23       	and	r25, r21
    5194:	09 f0       	breq	.+2      	; 0x5198 <inverse+0x1c>
    5196:	a1 c4       	rjmp	.+2370   	; 0x5ada <__fp_inf>
    5198:	b4 c4       	rjmp	.+2408   	; 0x5b02 <__fp_nan>
    519a:	11 24       	eor	r1, r1
    519c:	ed c4       	rjmp	.+2522   	; 0x5b78 <__fp_szero>

0000519e <__mulsf3x>:
    519e:	c9 d4       	rcall	.+2450   	; 0x5b32 <__fp_split3>
    51a0:	a0 f3       	brcs	.-24     	; 0x518a <inverse+0xe>

000051a2 <__mulsf3_pse>:
    51a2:	95 9f       	mul	r25, r21
    51a4:	d1 f3       	breq	.-12     	; 0x519a <inverse+0x1e>
    51a6:	95 0f       	add	r25, r21
    51a8:	50 e0       	ldi	r21, 0x00	; 0
    51aa:	55 1f       	adc	r21, r21
    51ac:	62 9f       	mul	r22, r18
    51ae:	f0 01       	movw	r30, r0
    51b0:	72 9f       	mul	r23, r18
    51b2:	bb 27       	eor	r27, r27
    51b4:	f0 0d       	add	r31, r0
    51b6:	b1 1d       	adc	r27, r1
    51b8:	63 9f       	mul	r22, r19
    51ba:	aa 27       	eor	r26, r26
    51bc:	f0 0d       	add	r31, r0
    51be:	b1 1d       	adc	r27, r1
    51c0:	aa 1f       	adc	r26, r26
    51c2:	64 9f       	mul	r22, r20
    51c4:	66 27       	eor	r22, r22
    51c6:	b0 0d       	add	r27, r0
    51c8:	a1 1d       	adc	r26, r1
    51ca:	66 1f       	adc	r22, r22
    51cc:	82 9f       	mul	r24, r18
    51ce:	22 27       	eor	r18, r18
    51d0:	b0 0d       	add	r27, r0
    51d2:	a1 1d       	adc	r26, r1
    51d4:	62 1f       	adc	r22, r18
    51d6:	73 9f       	mul	r23, r19
    51d8:	b0 0d       	add	r27, r0
    51da:	a1 1d       	adc	r26, r1
    51dc:	62 1f       	adc	r22, r18
    51de:	83 9f       	mul	r24, r19
    51e0:	a0 0d       	add	r26, r0
    51e2:	61 1d       	adc	r22, r1
    51e4:	22 1f       	adc	r18, r18
    51e6:	74 9f       	mul	r23, r20
    51e8:	33 27       	eor	r19, r19
    51ea:	a0 0d       	add	r26, r0
    51ec:	61 1d       	adc	r22, r1
    51ee:	23 1f       	adc	r18, r19
    51f0:	84 9f       	mul	r24, r20
    51f2:	60 0d       	add	r22, r0
    51f4:	21 1d       	adc	r18, r1
    51f6:	82 2f       	mov	r24, r18
    51f8:	76 2f       	mov	r23, r22
    51fa:	6a 2f       	mov	r22, r26
    51fc:	11 24       	eor	r1, r1
    51fe:	9f 57       	subi	r25, 0x7F	; 127
    5200:	50 40       	sbci	r21, 0x00	; 0
    5202:	8a f0       	brmi	.+34     	; 0x5226 <__mulsf3_pse+0x84>
    5204:	e1 f0       	breq	.+56     	; 0x523e <__mulsf3_pse+0x9c>
    5206:	88 23       	and	r24, r24
    5208:	4a f0       	brmi	.+18     	; 0x521c <__mulsf3_pse+0x7a>
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	bb 1f       	adc	r27, r27
    5210:	66 1f       	adc	r22, r22
    5212:	77 1f       	adc	r23, r23
    5214:	88 1f       	adc	r24, r24
    5216:	91 50       	subi	r25, 0x01	; 1
    5218:	50 40       	sbci	r21, 0x00	; 0
    521a:	a9 f7       	brne	.-22     	; 0x5206 <__mulsf3_pse+0x64>
    521c:	9e 3f       	cpi	r25, 0xFE	; 254
    521e:	51 05       	cpc	r21, r1
    5220:	70 f0       	brcs	.+28     	; 0x523e <__mulsf3_pse+0x9c>
    5222:	5b c4       	rjmp	.+2230   	; 0x5ada <__fp_inf>
    5224:	a9 c4       	rjmp	.+2386   	; 0x5b78 <__fp_szero>
    5226:	5f 3f       	cpi	r21, 0xFF	; 255
    5228:	ec f3       	brlt	.-6      	; 0x5224 <__mulsf3_pse+0x82>
    522a:	98 3e       	cpi	r25, 0xE8	; 232
    522c:	dc f3       	brlt	.-10     	; 0x5224 <__mulsf3_pse+0x82>
    522e:	86 95       	lsr	r24
    5230:	77 95       	ror	r23
    5232:	67 95       	ror	r22
    5234:	b7 95       	ror	r27
    5236:	f7 95       	ror	r31
    5238:	e7 95       	ror	r30
    523a:	9f 5f       	subi	r25, 0xFF	; 255
    523c:	c1 f7       	brne	.-16     	; 0x522e <__mulsf3_pse+0x8c>
    523e:	fe 2b       	or	r31, r30
    5240:	88 0f       	add	r24, r24
    5242:	91 1d       	adc	r25, r1
    5244:	96 95       	lsr	r25
    5246:	87 95       	ror	r24
    5248:	97 f9       	bld	r25, 7
    524a:	08 95       	ret
    524c:	11 f4       	brne	.+4      	; 0x5252 <__mulsf3_pse+0xb0>
    524e:	0e f4       	brtc	.+2      	; 0x5252 <__mulsf3_pse+0xb0>
    5250:	58 c4       	rjmp	.+2224   	; 0x5b02 <__fp_nan>
    5252:	49 c4       	rjmp	.+2194   	; 0x5ae6 <__fp_mpack>

00005254 <sqrt>:
    5254:	76 d4       	rcall	.+2284   	; 0x5b42 <__fp_splitA>
    5256:	d0 f3       	brcs	.-12     	; 0x524c <__mulsf3_pse+0xaa>
    5258:	99 23       	and	r25, r25
    525a:	d9 f3       	breq	.-10     	; 0x5252 <__mulsf3_pse+0xb0>
    525c:	ce f3       	brts	.-14     	; 0x5250 <__mulsf3_pse+0xae>
    525e:	9f 57       	subi	r25, 0x7F	; 127
    5260:	55 0b       	sbc	r21, r21
    5262:	87 ff       	sbrs	r24, 7
    5264:	51 d4       	rcall	.+2210   	; 0x5b08 <__fp_norm2>
    5266:	00 24       	eor	r0, r0
    5268:	a0 e6       	ldi	r26, 0x60	; 96
    526a:	40 ea       	ldi	r20, 0xA0	; 160
    526c:	90 01       	movw	r18, r0
    526e:	80 58       	subi	r24, 0x80	; 128
    5270:	56 95       	lsr	r21
    5272:	97 95       	ror	r25
    5274:	28 f4       	brcc	.+10     	; 0x5280 <sqrt+0x2c>
    5276:	80 5c       	subi	r24, 0xC0	; 192
    5278:	66 0f       	add	r22, r22
    527a:	77 1f       	adc	r23, r23
    527c:	88 1f       	adc	r24, r24
    527e:	20 f0       	brcs	.+8      	; 0x5288 <sqrt+0x34>
    5280:	26 17       	cp	r18, r22
    5282:	37 07       	cpc	r19, r23
    5284:	48 07       	cpc	r20, r24
    5286:	30 f4       	brcc	.+12     	; 0x5294 <sqrt+0x40>
    5288:	62 1b       	sub	r22, r18
    528a:	73 0b       	sbc	r23, r19
    528c:	84 0b       	sbc	r24, r20
    528e:	20 29       	or	r18, r0
    5290:	31 29       	or	r19, r1
    5292:	4a 2b       	or	r20, r26
    5294:	a6 95       	lsr	r26
    5296:	17 94       	ror	r1
    5298:	07 94       	ror	r0
    529a:	20 25       	eor	r18, r0
    529c:	31 25       	eor	r19, r1
    529e:	4a 27       	eor	r20, r26
    52a0:	58 f7       	brcc	.-42     	; 0x5278 <sqrt+0x24>
    52a2:	66 0f       	add	r22, r22
    52a4:	77 1f       	adc	r23, r23
    52a6:	88 1f       	adc	r24, r24
    52a8:	20 f0       	brcs	.+8      	; 0x52b2 <sqrt+0x5e>
    52aa:	26 17       	cp	r18, r22
    52ac:	37 07       	cpc	r19, r23
    52ae:	48 07       	cpc	r20, r24
    52b0:	30 f4       	brcc	.+12     	; 0x52be <sqrt+0x6a>
    52b2:	62 0b       	sbc	r22, r18
    52b4:	73 0b       	sbc	r23, r19
    52b6:	84 0b       	sbc	r24, r20
    52b8:	20 0d       	add	r18, r0
    52ba:	31 1d       	adc	r19, r1
    52bc:	41 1d       	adc	r20, r1
    52be:	a0 95       	com	r26
    52c0:	81 f7       	brne	.-32     	; 0x52a2 <sqrt+0x4e>
    52c2:	b9 01       	movw	r22, r18
    52c4:	84 2f       	mov	r24, r20
    52c6:	91 58       	subi	r25, 0x81	; 129
    52c8:	88 0f       	add	r24, r24
    52ca:	96 95       	lsr	r25
    52cc:	87 95       	ror	r24
    52ce:	08 95       	ret

000052d0 <square>:
    52d0:	9b 01       	movw	r18, r22
    52d2:	ac 01       	movw	r20, r24
    52d4:	fc c8       	rjmp	.-3592   	; 0x44ce <__mulsf3>

000052d6 <vfprintf>:
    52d6:	2f 92       	push	r2
    52d8:	3f 92       	push	r3
    52da:	4f 92       	push	r4
    52dc:	5f 92       	push	r5
    52de:	6f 92       	push	r6
    52e0:	7f 92       	push	r7
    52e2:	8f 92       	push	r8
    52e4:	9f 92       	push	r9
    52e6:	af 92       	push	r10
    52e8:	bf 92       	push	r11
    52ea:	cf 92       	push	r12
    52ec:	df 92       	push	r13
    52ee:	ef 92       	push	r14
    52f0:	ff 92       	push	r15
    52f2:	0f 93       	push	r16
    52f4:	1f 93       	push	r17
    52f6:	df 93       	push	r29
    52f8:	cf 93       	push	r28
    52fa:	cd b7       	in	r28, 0x3d	; 61
    52fc:	de b7       	in	r29, 0x3e	; 62
    52fe:	2b 97       	sbiw	r28, 0x0b	; 11
    5300:	0f b6       	in	r0, 0x3f	; 63
    5302:	f8 94       	cli
    5304:	de bf       	out	0x3e, r29	; 62
    5306:	0f be       	out	0x3f, r0	; 63
    5308:	cd bf       	out	0x3d, r28	; 61
    530a:	3c 01       	movw	r6, r24
    530c:	2b 01       	movw	r4, r22
    530e:	5a 01       	movw	r10, r20
    5310:	fc 01       	movw	r30, r24
    5312:	17 82       	std	Z+7, r1	; 0x07
    5314:	16 82       	std	Z+6, r1	; 0x06
    5316:	83 81       	ldd	r24, Z+3	; 0x03
    5318:	81 fd       	sbrc	r24, 1
    531a:	03 c0       	rjmp	.+6      	; 0x5322 <vfprintf+0x4c>
    531c:	6f ef       	ldi	r22, 0xFF	; 255
    531e:	7f ef       	ldi	r23, 0xFF	; 255
    5320:	c6 c1       	rjmp	.+908    	; 0x56ae <vfprintf+0x3d8>
    5322:	9a e0       	ldi	r25, 0x0A	; 10
    5324:	89 2e       	mov	r8, r25
    5326:	1e 01       	movw	r2, r28
    5328:	08 94       	sec
    532a:	21 1c       	adc	r2, r1
    532c:	31 1c       	adc	r3, r1
    532e:	f3 01       	movw	r30, r6
    5330:	23 81       	ldd	r18, Z+3	; 0x03
    5332:	f2 01       	movw	r30, r4
    5334:	23 fd       	sbrc	r18, 3
    5336:	85 91       	lpm	r24, Z+
    5338:	23 ff       	sbrs	r18, 3
    533a:	81 91       	ld	r24, Z+
    533c:	2f 01       	movw	r4, r30
    533e:	88 23       	and	r24, r24
    5340:	09 f4       	brne	.+2      	; 0x5344 <vfprintf+0x6e>
    5342:	b2 c1       	rjmp	.+868    	; 0x56a8 <vfprintf+0x3d2>
    5344:	85 32       	cpi	r24, 0x25	; 37
    5346:	39 f4       	brne	.+14     	; 0x5356 <vfprintf+0x80>
    5348:	23 fd       	sbrc	r18, 3
    534a:	85 91       	lpm	r24, Z+
    534c:	23 ff       	sbrs	r18, 3
    534e:	81 91       	ld	r24, Z+
    5350:	2f 01       	movw	r4, r30
    5352:	85 32       	cpi	r24, 0x25	; 37
    5354:	29 f4       	brne	.+10     	; 0x5360 <vfprintf+0x8a>
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	b3 01       	movw	r22, r6
    535a:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    535e:	e7 cf       	rjmp	.-50     	; 0x532e <vfprintf+0x58>
    5360:	98 2f       	mov	r25, r24
    5362:	ff 24       	eor	r15, r15
    5364:	ee 24       	eor	r14, r14
    5366:	99 24       	eor	r9, r9
    5368:	ff e1       	ldi	r31, 0x1F	; 31
    536a:	ff 15       	cp	r31, r15
    536c:	d0 f0       	brcs	.+52     	; 0x53a2 <vfprintf+0xcc>
    536e:	9b 32       	cpi	r25, 0x2B	; 43
    5370:	69 f0       	breq	.+26     	; 0x538c <vfprintf+0xb6>
    5372:	9c 32       	cpi	r25, 0x2C	; 44
    5374:	28 f4       	brcc	.+10     	; 0x5380 <vfprintf+0xaa>
    5376:	90 32       	cpi	r25, 0x20	; 32
    5378:	59 f0       	breq	.+22     	; 0x5390 <vfprintf+0xba>
    537a:	93 32       	cpi	r25, 0x23	; 35
    537c:	91 f4       	brne	.+36     	; 0x53a2 <vfprintf+0xcc>
    537e:	0e c0       	rjmp	.+28     	; 0x539c <vfprintf+0xc6>
    5380:	9d 32       	cpi	r25, 0x2D	; 45
    5382:	49 f0       	breq	.+18     	; 0x5396 <vfprintf+0xc0>
    5384:	90 33       	cpi	r25, 0x30	; 48
    5386:	69 f4       	brne	.+26     	; 0x53a2 <vfprintf+0xcc>
    5388:	41 e0       	ldi	r20, 0x01	; 1
    538a:	24 c0       	rjmp	.+72     	; 0x53d4 <vfprintf+0xfe>
    538c:	52 e0       	ldi	r21, 0x02	; 2
    538e:	f5 2a       	or	r15, r21
    5390:	84 e0       	ldi	r24, 0x04	; 4
    5392:	f8 2a       	or	r15, r24
    5394:	28 c0       	rjmp	.+80     	; 0x53e6 <vfprintf+0x110>
    5396:	98 e0       	ldi	r25, 0x08	; 8
    5398:	f9 2a       	or	r15, r25
    539a:	25 c0       	rjmp	.+74     	; 0x53e6 <vfprintf+0x110>
    539c:	e0 e1       	ldi	r30, 0x10	; 16
    539e:	fe 2a       	or	r15, r30
    53a0:	22 c0       	rjmp	.+68     	; 0x53e6 <vfprintf+0x110>
    53a2:	f7 fc       	sbrc	r15, 7
    53a4:	29 c0       	rjmp	.+82     	; 0x53f8 <vfprintf+0x122>
    53a6:	89 2f       	mov	r24, r25
    53a8:	80 53       	subi	r24, 0x30	; 48
    53aa:	8a 30       	cpi	r24, 0x0A	; 10
    53ac:	70 f4       	brcc	.+28     	; 0x53ca <vfprintf+0xf4>
    53ae:	f6 fe       	sbrs	r15, 6
    53b0:	05 c0       	rjmp	.+10     	; 0x53bc <vfprintf+0xe6>
    53b2:	98 9c       	mul	r9, r8
    53b4:	90 2c       	mov	r9, r0
    53b6:	11 24       	eor	r1, r1
    53b8:	98 0e       	add	r9, r24
    53ba:	15 c0       	rjmp	.+42     	; 0x53e6 <vfprintf+0x110>
    53bc:	e8 9c       	mul	r14, r8
    53be:	e0 2c       	mov	r14, r0
    53c0:	11 24       	eor	r1, r1
    53c2:	e8 0e       	add	r14, r24
    53c4:	f0 e2       	ldi	r31, 0x20	; 32
    53c6:	ff 2a       	or	r15, r31
    53c8:	0e c0       	rjmp	.+28     	; 0x53e6 <vfprintf+0x110>
    53ca:	9e 32       	cpi	r25, 0x2E	; 46
    53cc:	29 f4       	brne	.+10     	; 0x53d8 <vfprintf+0x102>
    53ce:	f6 fc       	sbrc	r15, 6
    53d0:	6b c1       	rjmp	.+726    	; 0x56a8 <vfprintf+0x3d2>
    53d2:	40 e4       	ldi	r20, 0x40	; 64
    53d4:	f4 2a       	or	r15, r20
    53d6:	07 c0       	rjmp	.+14     	; 0x53e6 <vfprintf+0x110>
    53d8:	9c 36       	cpi	r25, 0x6C	; 108
    53da:	19 f4       	brne	.+6      	; 0x53e2 <vfprintf+0x10c>
    53dc:	50 e8       	ldi	r21, 0x80	; 128
    53de:	f5 2a       	or	r15, r21
    53e0:	02 c0       	rjmp	.+4      	; 0x53e6 <vfprintf+0x110>
    53e2:	98 36       	cpi	r25, 0x68	; 104
    53e4:	49 f4       	brne	.+18     	; 0x53f8 <vfprintf+0x122>
    53e6:	f2 01       	movw	r30, r4
    53e8:	23 fd       	sbrc	r18, 3
    53ea:	95 91       	lpm	r25, Z+
    53ec:	23 ff       	sbrs	r18, 3
    53ee:	91 91       	ld	r25, Z+
    53f0:	2f 01       	movw	r4, r30
    53f2:	99 23       	and	r25, r25
    53f4:	09 f0       	breq	.+2      	; 0x53f8 <vfprintf+0x122>
    53f6:	b8 cf       	rjmp	.-144    	; 0x5368 <vfprintf+0x92>
    53f8:	89 2f       	mov	r24, r25
    53fa:	85 54       	subi	r24, 0x45	; 69
    53fc:	83 30       	cpi	r24, 0x03	; 3
    53fe:	18 f0       	brcs	.+6      	; 0x5406 <vfprintf+0x130>
    5400:	80 52       	subi	r24, 0x20	; 32
    5402:	83 30       	cpi	r24, 0x03	; 3
    5404:	38 f4       	brcc	.+14     	; 0x5414 <vfprintf+0x13e>
    5406:	44 e0       	ldi	r20, 0x04	; 4
    5408:	50 e0       	ldi	r21, 0x00	; 0
    540a:	a4 0e       	add	r10, r20
    540c:	b5 1e       	adc	r11, r21
    540e:	5f e3       	ldi	r21, 0x3F	; 63
    5410:	59 83       	std	Y+1, r21	; 0x01
    5412:	0f c0       	rjmp	.+30     	; 0x5432 <vfprintf+0x15c>
    5414:	93 36       	cpi	r25, 0x63	; 99
    5416:	31 f0       	breq	.+12     	; 0x5424 <vfprintf+0x14e>
    5418:	93 37       	cpi	r25, 0x73	; 115
    541a:	79 f0       	breq	.+30     	; 0x543a <vfprintf+0x164>
    541c:	93 35       	cpi	r25, 0x53	; 83
    541e:	09 f0       	breq	.+2      	; 0x5422 <vfprintf+0x14c>
    5420:	56 c0       	rjmp	.+172    	; 0x54ce <vfprintf+0x1f8>
    5422:	20 c0       	rjmp	.+64     	; 0x5464 <vfprintf+0x18e>
    5424:	f5 01       	movw	r30, r10
    5426:	80 81       	ld	r24, Z
    5428:	89 83       	std	Y+1, r24	; 0x01
    542a:	42 e0       	ldi	r20, 0x02	; 2
    542c:	50 e0       	ldi	r21, 0x00	; 0
    542e:	a4 0e       	add	r10, r20
    5430:	b5 1e       	adc	r11, r21
    5432:	61 01       	movw	r12, r2
    5434:	01 e0       	ldi	r16, 0x01	; 1
    5436:	10 e0       	ldi	r17, 0x00	; 0
    5438:	12 c0       	rjmp	.+36     	; 0x545e <vfprintf+0x188>
    543a:	f5 01       	movw	r30, r10
    543c:	c0 80       	ld	r12, Z
    543e:	d1 80       	ldd	r13, Z+1	; 0x01
    5440:	f6 fc       	sbrc	r15, 6
    5442:	03 c0       	rjmp	.+6      	; 0x544a <vfprintf+0x174>
    5444:	6f ef       	ldi	r22, 0xFF	; 255
    5446:	7f ef       	ldi	r23, 0xFF	; 255
    5448:	02 c0       	rjmp	.+4      	; 0x544e <vfprintf+0x178>
    544a:	69 2d       	mov	r22, r9
    544c:	70 e0       	ldi	r23, 0x00	; 0
    544e:	42 e0       	ldi	r20, 0x02	; 2
    5450:	50 e0       	ldi	r21, 0x00	; 0
    5452:	a4 0e       	add	r10, r20
    5454:	b5 1e       	adc	r11, r21
    5456:	c6 01       	movw	r24, r12
    5458:	0e 94 a4 2c 	call	0x5948	; 0x5948 <strnlen>
    545c:	8c 01       	movw	r16, r24
    545e:	5f e7       	ldi	r21, 0x7F	; 127
    5460:	f5 22       	and	r15, r21
    5462:	14 c0       	rjmp	.+40     	; 0x548c <vfprintf+0x1b6>
    5464:	f5 01       	movw	r30, r10
    5466:	c0 80       	ld	r12, Z
    5468:	d1 80       	ldd	r13, Z+1	; 0x01
    546a:	f6 fc       	sbrc	r15, 6
    546c:	03 c0       	rjmp	.+6      	; 0x5474 <vfprintf+0x19e>
    546e:	6f ef       	ldi	r22, 0xFF	; 255
    5470:	7f ef       	ldi	r23, 0xFF	; 255
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <vfprintf+0x1a2>
    5474:	69 2d       	mov	r22, r9
    5476:	70 e0       	ldi	r23, 0x00	; 0
    5478:	42 e0       	ldi	r20, 0x02	; 2
    547a:	50 e0       	ldi	r21, 0x00	; 0
    547c:	a4 0e       	add	r10, r20
    547e:	b5 1e       	adc	r11, r21
    5480:	c6 01       	movw	r24, r12
    5482:	0e 94 92 2c 	call	0x5924	; 0x5924 <strnlen_P>
    5486:	8c 01       	movw	r16, r24
    5488:	50 e8       	ldi	r21, 0x80	; 128
    548a:	f5 2a       	or	r15, r21
    548c:	f3 fe       	sbrs	r15, 3
    548e:	07 c0       	rjmp	.+14     	; 0x549e <vfprintf+0x1c8>
    5490:	1a c0       	rjmp	.+52     	; 0x54c6 <vfprintf+0x1f0>
    5492:	80 e2       	ldi	r24, 0x20	; 32
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	b3 01       	movw	r22, r6
    5498:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    549c:	ea 94       	dec	r14
    549e:	8e 2d       	mov	r24, r14
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	08 17       	cp	r16, r24
    54a4:	19 07       	cpc	r17, r25
    54a6:	a8 f3       	brcs	.-22     	; 0x5492 <vfprintf+0x1bc>
    54a8:	0e c0       	rjmp	.+28     	; 0x54c6 <vfprintf+0x1f0>
    54aa:	f6 01       	movw	r30, r12
    54ac:	f7 fc       	sbrc	r15, 7
    54ae:	85 91       	lpm	r24, Z+
    54b0:	f7 fe       	sbrs	r15, 7
    54b2:	81 91       	ld	r24, Z+
    54b4:	6f 01       	movw	r12, r30
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	b3 01       	movw	r22, r6
    54ba:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    54be:	e1 10       	cpse	r14, r1
    54c0:	ea 94       	dec	r14
    54c2:	01 50       	subi	r16, 0x01	; 1
    54c4:	10 40       	sbci	r17, 0x00	; 0
    54c6:	01 15       	cp	r16, r1
    54c8:	11 05       	cpc	r17, r1
    54ca:	79 f7       	brne	.-34     	; 0x54aa <vfprintf+0x1d4>
    54cc:	ea c0       	rjmp	.+468    	; 0x56a2 <vfprintf+0x3cc>
    54ce:	94 36       	cpi	r25, 0x64	; 100
    54d0:	11 f0       	breq	.+4      	; 0x54d6 <vfprintf+0x200>
    54d2:	99 36       	cpi	r25, 0x69	; 105
    54d4:	69 f5       	brne	.+90     	; 0x5530 <vfprintf+0x25a>
    54d6:	f7 fe       	sbrs	r15, 7
    54d8:	08 c0       	rjmp	.+16     	; 0x54ea <vfprintf+0x214>
    54da:	f5 01       	movw	r30, r10
    54dc:	20 81       	ld	r18, Z
    54de:	31 81       	ldd	r19, Z+1	; 0x01
    54e0:	42 81       	ldd	r20, Z+2	; 0x02
    54e2:	53 81       	ldd	r21, Z+3	; 0x03
    54e4:	84 e0       	ldi	r24, 0x04	; 4
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	0a c0       	rjmp	.+20     	; 0x54fe <vfprintf+0x228>
    54ea:	f5 01       	movw	r30, r10
    54ec:	80 81       	ld	r24, Z
    54ee:	91 81       	ldd	r25, Z+1	; 0x01
    54f0:	9c 01       	movw	r18, r24
    54f2:	44 27       	eor	r20, r20
    54f4:	37 fd       	sbrc	r19, 7
    54f6:	40 95       	com	r20
    54f8:	54 2f       	mov	r21, r20
    54fa:	82 e0       	ldi	r24, 0x02	; 2
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	a8 0e       	add	r10, r24
    5500:	b9 1e       	adc	r11, r25
    5502:	9f e6       	ldi	r25, 0x6F	; 111
    5504:	f9 22       	and	r15, r25
    5506:	57 ff       	sbrs	r21, 7
    5508:	09 c0       	rjmp	.+18     	; 0x551c <vfprintf+0x246>
    550a:	50 95       	com	r21
    550c:	40 95       	com	r20
    550e:	30 95       	com	r19
    5510:	21 95       	neg	r18
    5512:	3f 4f       	sbci	r19, 0xFF	; 255
    5514:	4f 4f       	sbci	r20, 0xFF	; 255
    5516:	5f 4f       	sbci	r21, 0xFF	; 255
    5518:	e0 e8       	ldi	r30, 0x80	; 128
    551a:	fe 2a       	or	r15, r30
    551c:	ca 01       	movw	r24, r20
    551e:	b9 01       	movw	r22, r18
    5520:	a1 01       	movw	r20, r2
    5522:	2a e0       	ldi	r18, 0x0A	; 10
    5524:	30 e0       	ldi	r19, 0x00	; 0
    5526:	0e 94 af 2c 	call	0x595e	; 0x595e <__ultoa_invert>
    552a:	d8 2e       	mov	r13, r24
    552c:	d2 18       	sub	r13, r2
    552e:	40 c0       	rjmp	.+128    	; 0x55b0 <vfprintf+0x2da>
    5530:	95 37       	cpi	r25, 0x75	; 117
    5532:	29 f4       	brne	.+10     	; 0x553e <vfprintf+0x268>
    5534:	1f 2d       	mov	r17, r15
    5536:	1f 7e       	andi	r17, 0xEF	; 239
    5538:	2a e0       	ldi	r18, 0x0A	; 10
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	1d c0       	rjmp	.+58     	; 0x5578 <vfprintf+0x2a2>
    553e:	1f 2d       	mov	r17, r15
    5540:	19 7f       	andi	r17, 0xF9	; 249
    5542:	9f 36       	cpi	r25, 0x6F	; 111
    5544:	61 f0       	breq	.+24     	; 0x555e <vfprintf+0x288>
    5546:	90 37       	cpi	r25, 0x70	; 112
    5548:	20 f4       	brcc	.+8      	; 0x5552 <vfprintf+0x27c>
    554a:	98 35       	cpi	r25, 0x58	; 88
    554c:	09 f0       	breq	.+2      	; 0x5550 <vfprintf+0x27a>
    554e:	ac c0       	rjmp	.+344    	; 0x56a8 <vfprintf+0x3d2>
    5550:	0f c0       	rjmp	.+30     	; 0x5570 <vfprintf+0x29a>
    5552:	90 37       	cpi	r25, 0x70	; 112
    5554:	39 f0       	breq	.+14     	; 0x5564 <vfprintf+0x28e>
    5556:	98 37       	cpi	r25, 0x78	; 120
    5558:	09 f0       	breq	.+2      	; 0x555c <vfprintf+0x286>
    555a:	a6 c0       	rjmp	.+332    	; 0x56a8 <vfprintf+0x3d2>
    555c:	04 c0       	rjmp	.+8      	; 0x5566 <vfprintf+0x290>
    555e:	28 e0       	ldi	r18, 0x08	; 8
    5560:	30 e0       	ldi	r19, 0x00	; 0
    5562:	0a c0       	rjmp	.+20     	; 0x5578 <vfprintf+0x2a2>
    5564:	10 61       	ori	r17, 0x10	; 16
    5566:	14 fd       	sbrc	r17, 4
    5568:	14 60       	ori	r17, 0x04	; 4
    556a:	20 e1       	ldi	r18, 0x10	; 16
    556c:	30 e0       	ldi	r19, 0x00	; 0
    556e:	04 c0       	rjmp	.+8      	; 0x5578 <vfprintf+0x2a2>
    5570:	14 fd       	sbrc	r17, 4
    5572:	16 60       	ori	r17, 0x06	; 6
    5574:	20 e1       	ldi	r18, 0x10	; 16
    5576:	32 e0       	ldi	r19, 0x02	; 2
    5578:	17 ff       	sbrs	r17, 7
    557a:	08 c0       	rjmp	.+16     	; 0x558c <vfprintf+0x2b6>
    557c:	f5 01       	movw	r30, r10
    557e:	60 81       	ld	r22, Z
    5580:	71 81       	ldd	r23, Z+1	; 0x01
    5582:	82 81       	ldd	r24, Z+2	; 0x02
    5584:	93 81       	ldd	r25, Z+3	; 0x03
    5586:	44 e0       	ldi	r20, 0x04	; 4
    5588:	50 e0       	ldi	r21, 0x00	; 0
    558a:	08 c0       	rjmp	.+16     	; 0x559c <vfprintf+0x2c6>
    558c:	f5 01       	movw	r30, r10
    558e:	80 81       	ld	r24, Z
    5590:	91 81       	ldd	r25, Z+1	; 0x01
    5592:	bc 01       	movw	r22, r24
    5594:	80 e0       	ldi	r24, 0x00	; 0
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	42 e0       	ldi	r20, 0x02	; 2
    559a:	50 e0       	ldi	r21, 0x00	; 0
    559c:	a4 0e       	add	r10, r20
    559e:	b5 1e       	adc	r11, r21
    55a0:	a1 01       	movw	r20, r2
    55a2:	0e 94 af 2c 	call	0x595e	; 0x595e <__ultoa_invert>
    55a6:	d8 2e       	mov	r13, r24
    55a8:	d2 18       	sub	r13, r2
    55aa:	8f e7       	ldi	r24, 0x7F	; 127
    55ac:	f8 2e       	mov	r15, r24
    55ae:	f1 22       	and	r15, r17
    55b0:	f6 fe       	sbrs	r15, 6
    55b2:	0b c0       	rjmp	.+22     	; 0x55ca <vfprintf+0x2f4>
    55b4:	5e ef       	ldi	r21, 0xFE	; 254
    55b6:	f5 22       	and	r15, r21
    55b8:	d9 14       	cp	r13, r9
    55ba:	38 f4       	brcc	.+14     	; 0x55ca <vfprintf+0x2f4>
    55bc:	f4 fe       	sbrs	r15, 4
    55be:	07 c0       	rjmp	.+14     	; 0x55ce <vfprintf+0x2f8>
    55c0:	f2 fc       	sbrc	r15, 2
    55c2:	05 c0       	rjmp	.+10     	; 0x55ce <vfprintf+0x2f8>
    55c4:	8f ee       	ldi	r24, 0xEF	; 239
    55c6:	f8 22       	and	r15, r24
    55c8:	02 c0       	rjmp	.+4      	; 0x55ce <vfprintf+0x2f8>
    55ca:	1d 2d       	mov	r17, r13
    55cc:	01 c0       	rjmp	.+2      	; 0x55d0 <vfprintf+0x2fa>
    55ce:	19 2d       	mov	r17, r9
    55d0:	f4 fe       	sbrs	r15, 4
    55d2:	0d c0       	rjmp	.+26     	; 0x55ee <vfprintf+0x318>
    55d4:	fe 01       	movw	r30, r28
    55d6:	ed 0d       	add	r30, r13
    55d8:	f1 1d       	adc	r31, r1
    55da:	80 81       	ld	r24, Z
    55dc:	80 33       	cpi	r24, 0x30	; 48
    55de:	19 f4       	brne	.+6      	; 0x55e6 <vfprintf+0x310>
    55e0:	99 ee       	ldi	r25, 0xE9	; 233
    55e2:	f9 22       	and	r15, r25
    55e4:	08 c0       	rjmp	.+16     	; 0x55f6 <vfprintf+0x320>
    55e6:	1f 5f       	subi	r17, 0xFF	; 255
    55e8:	f2 fe       	sbrs	r15, 2
    55ea:	05 c0       	rjmp	.+10     	; 0x55f6 <vfprintf+0x320>
    55ec:	03 c0       	rjmp	.+6      	; 0x55f4 <vfprintf+0x31e>
    55ee:	8f 2d       	mov	r24, r15
    55f0:	86 78       	andi	r24, 0x86	; 134
    55f2:	09 f0       	breq	.+2      	; 0x55f6 <vfprintf+0x320>
    55f4:	1f 5f       	subi	r17, 0xFF	; 255
    55f6:	0f 2d       	mov	r16, r15
    55f8:	f3 fc       	sbrc	r15, 3
    55fa:	14 c0       	rjmp	.+40     	; 0x5624 <vfprintf+0x34e>
    55fc:	f0 fe       	sbrs	r15, 0
    55fe:	0f c0       	rjmp	.+30     	; 0x561e <vfprintf+0x348>
    5600:	1e 15       	cp	r17, r14
    5602:	10 f0       	brcs	.+4      	; 0x5608 <vfprintf+0x332>
    5604:	9d 2c       	mov	r9, r13
    5606:	0b c0       	rjmp	.+22     	; 0x561e <vfprintf+0x348>
    5608:	9d 2c       	mov	r9, r13
    560a:	9e 0c       	add	r9, r14
    560c:	91 1a       	sub	r9, r17
    560e:	1e 2d       	mov	r17, r14
    5610:	06 c0       	rjmp	.+12     	; 0x561e <vfprintf+0x348>
    5612:	80 e2       	ldi	r24, 0x20	; 32
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	b3 01       	movw	r22, r6
    5618:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    561c:	1f 5f       	subi	r17, 0xFF	; 255
    561e:	1e 15       	cp	r17, r14
    5620:	c0 f3       	brcs	.-16     	; 0x5612 <vfprintf+0x33c>
    5622:	04 c0       	rjmp	.+8      	; 0x562c <vfprintf+0x356>
    5624:	1e 15       	cp	r17, r14
    5626:	10 f4       	brcc	.+4      	; 0x562c <vfprintf+0x356>
    5628:	e1 1a       	sub	r14, r17
    562a:	01 c0       	rjmp	.+2      	; 0x562e <vfprintf+0x358>
    562c:	ee 24       	eor	r14, r14
    562e:	04 ff       	sbrs	r16, 4
    5630:	0f c0       	rjmp	.+30     	; 0x5650 <vfprintf+0x37a>
    5632:	80 e3       	ldi	r24, 0x30	; 48
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	b3 01       	movw	r22, r6
    5638:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    563c:	02 ff       	sbrs	r16, 2
    563e:	1d c0       	rjmp	.+58     	; 0x567a <vfprintf+0x3a4>
    5640:	01 fd       	sbrc	r16, 1
    5642:	03 c0       	rjmp	.+6      	; 0x564a <vfprintf+0x374>
    5644:	88 e7       	ldi	r24, 0x78	; 120
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	0e c0       	rjmp	.+28     	; 0x5666 <vfprintf+0x390>
    564a:	88 e5       	ldi	r24, 0x58	; 88
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	0b c0       	rjmp	.+22     	; 0x5666 <vfprintf+0x390>
    5650:	80 2f       	mov	r24, r16
    5652:	86 78       	andi	r24, 0x86	; 134
    5654:	91 f0       	breq	.+36     	; 0x567a <vfprintf+0x3a4>
    5656:	01 ff       	sbrs	r16, 1
    5658:	02 c0       	rjmp	.+4      	; 0x565e <vfprintf+0x388>
    565a:	8b e2       	ldi	r24, 0x2B	; 43
    565c:	01 c0       	rjmp	.+2      	; 0x5660 <vfprintf+0x38a>
    565e:	80 e2       	ldi	r24, 0x20	; 32
    5660:	f7 fc       	sbrc	r15, 7
    5662:	8d e2       	ldi	r24, 0x2D	; 45
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	b3 01       	movw	r22, r6
    5668:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    566c:	06 c0       	rjmp	.+12     	; 0x567a <vfprintf+0x3a4>
    566e:	80 e3       	ldi	r24, 0x30	; 48
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	b3 01       	movw	r22, r6
    5674:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    5678:	9a 94       	dec	r9
    567a:	d9 14       	cp	r13, r9
    567c:	c0 f3       	brcs	.-16     	; 0x566e <vfprintf+0x398>
    567e:	da 94       	dec	r13
    5680:	f1 01       	movw	r30, r2
    5682:	ed 0d       	add	r30, r13
    5684:	f1 1d       	adc	r31, r1
    5686:	80 81       	ld	r24, Z
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	b3 01       	movw	r22, r6
    568c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    5690:	dd 20       	and	r13, r13
    5692:	a9 f7       	brne	.-22     	; 0x567e <vfprintf+0x3a8>
    5694:	06 c0       	rjmp	.+12     	; 0x56a2 <vfprintf+0x3cc>
    5696:	80 e2       	ldi	r24, 0x20	; 32
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	b3 01       	movw	r22, r6
    569c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <fputc>
    56a0:	ea 94       	dec	r14
    56a2:	ee 20       	and	r14, r14
    56a4:	c1 f7       	brne	.-16     	; 0x5696 <vfprintf+0x3c0>
    56a6:	43 ce       	rjmp	.-890    	; 0x532e <vfprintf+0x58>
    56a8:	f3 01       	movw	r30, r6
    56aa:	66 81       	ldd	r22, Z+6	; 0x06
    56ac:	77 81       	ldd	r23, Z+7	; 0x07
    56ae:	cb 01       	movw	r24, r22
    56b0:	2b 96       	adiw	r28, 0x0b	; 11
    56b2:	0f b6       	in	r0, 0x3f	; 63
    56b4:	f8 94       	cli
    56b6:	de bf       	out	0x3e, r29	; 62
    56b8:	0f be       	out	0x3f, r0	; 63
    56ba:	cd bf       	out	0x3d, r28	; 61
    56bc:	cf 91       	pop	r28
    56be:	df 91       	pop	r29
    56c0:	1f 91       	pop	r17
    56c2:	0f 91       	pop	r16
    56c4:	ff 90       	pop	r15
    56c6:	ef 90       	pop	r14
    56c8:	df 90       	pop	r13
    56ca:	cf 90       	pop	r12
    56cc:	bf 90       	pop	r11
    56ce:	af 90       	pop	r10
    56d0:	9f 90       	pop	r9
    56d2:	8f 90       	pop	r8
    56d4:	7f 90       	pop	r7
    56d6:	6f 90       	pop	r6
    56d8:	5f 90       	pop	r5
    56da:	4f 90       	pop	r4
    56dc:	3f 90       	pop	r3
    56de:	2f 90       	pop	r2
    56e0:	08 95       	ret

000056e2 <calloc>:
    56e2:	0f 93       	push	r16
    56e4:	1f 93       	push	r17
    56e6:	cf 93       	push	r28
    56e8:	df 93       	push	r29
    56ea:	68 9f       	mul	r22, r24
    56ec:	80 01       	movw	r16, r0
    56ee:	69 9f       	mul	r22, r25
    56f0:	10 0d       	add	r17, r0
    56f2:	78 9f       	mul	r23, r24
    56f4:	10 0d       	add	r17, r0
    56f6:	11 24       	eor	r1, r1
    56f8:	c8 01       	movw	r24, r16
    56fa:	0e 94 8d 2b 	call	0x571a	; 0x571a <malloc>
    56fe:	ec 01       	movw	r28, r24
    5700:	00 97       	sbiw	r24, 0x00	; 0
    5702:	29 f0       	breq	.+10     	; 0x570e <calloc+0x2c>
    5704:	60 e0       	ldi	r22, 0x00	; 0
    5706:	70 e0       	ldi	r23, 0x00	; 0
    5708:	a8 01       	movw	r20, r16
    570a:	0e 94 9d 2c 	call	0x593a	; 0x593a <memset>
    570e:	ce 01       	movw	r24, r28
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	1f 91       	pop	r17
    5716:	0f 91       	pop	r16
    5718:	08 95       	ret

0000571a <malloc>:
    571a:	cf 93       	push	r28
    571c:	df 93       	push	r29
    571e:	bc 01       	movw	r22, r24
    5720:	82 30       	cpi	r24, 0x02	; 2
    5722:	91 05       	cpc	r25, r1
    5724:	10 f4       	brcc	.+4      	; 0x572a <malloc+0x10>
    5726:	62 e0       	ldi	r22, 0x02	; 2
    5728:	70 e0       	ldi	r23, 0x00	; 0
    572a:	a0 91 9a 04 	lds	r26, 0x049A
    572e:	b0 91 9b 04 	lds	r27, 0x049B
    5732:	ed 01       	movw	r28, r26
    5734:	e0 e0       	ldi	r30, 0x00	; 0
    5736:	f0 e0       	ldi	r31, 0x00	; 0
    5738:	40 e0       	ldi	r20, 0x00	; 0
    573a:	50 e0       	ldi	r21, 0x00	; 0
    573c:	21 c0       	rjmp	.+66     	; 0x5780 <malloc+0x66>
    573e:	88 81       	ld	r24, Y
    5740:	99 81       	ldd	r25, Y+1	; 0x01
    5742:	86 17       	cp	r24, r22
    5744:	97 07       	cpc	r25, r23
    5746:	69 f4       	brne	.+26     	; 0x5762 <malloc+0x48>
    5748:	8a 81       	ldd	r24, Y+2	; 0x02
    574a:	9b 81       	ldd	r25, Y+3	; 0x03
    574c:	30 97       	sbiw	r30, 0x00	; 0
    574e:	19 f0       	breq	.+6      	; 0x5756 <malloc+0x3c>
    5750:	93 83       	std	Z+3, r25	; 0x03
    5752:	82 83       	std	Z+2, r24	; 0x02
    5754:	04 c0       	rjmp	.+8      	; 0x575e <malloc+0x44>
    5756:	90 93 9b 04 	sts	0x049B, r25
    575a:	80 93 9a 04 	sts	0x049A, r24
    575e:	fe 01       	movw	r30, r28
    5760:	34 c0       	rjmp	.+104    	; 0x57ca <malloc+0xb0>
    5762:	68 17       	cp	r22, r24
    5764:	79 07       	cpc	r23, r25
    5766:	38 f4       	brcc	.+14     	; 0x5776 <malloc+0x5c>
    5768:	41 15       	cp	r20, r1
    576a:	51 05       	cpc	r21, r1
    576c:	19 f0       	breq	.+6      	; 0x5774 <malloc+0x5a>
    576e:	84 17       	cp	r24, r20
    5770:	95 07       	cpc	r25, r21
    5772:	08 f4       	brcc	.+2      	; 0x5776 <malloc+0x5c>
    5774:	ac 01       	movw	r20, r24
    5776:	fe 01       	movw	r30, r28
    5778:	8a 81       	ldd	r24, Y+2	; 0x02
    577a:	9b 81       	ldd	r25, Y+3	; 0x03
    577c:	9c 01       	movw	r18, r24
    577e:	e9 01       	movw	r28, r18
    5780:	20 97       	sbiw	r28, 0x00	; 0
    5782:	e9 f6       	brne	.-70     	; 0x573e <malloc+0x24>
    5784:	41 15       	cp	r20, r1
    5786:	51 05       	cpc	r21, r1
    5788:	a9 f1       	breq	.+106    	; 0x57f4 <malloc+0xda>
    578a:	ca 01       	movw	r24, r20
    578c:	86 1b       	sub	r24, r22
    578e:	97 0b       	sbc	r25, r23
    5790:	04 97       	sbiw	r24, 0x04	; 4
    5792:	08 f4       	brcc	.+2      	; 0x5796 <malloc+0x7c>
    5794:	ba 01       	movw	r22, r20
    5796:	e0 e0       	ldi	r30, 0x00	; 0
    5798:	f0 e0       	ldi	r31, 0x00	; 0
    579a:	2a c0       	rjmp	.+84     	; 0x57f0 <malloc+0xd6>
    579c:	8d 91       	ld	r24, X+
    579e:	9c 91       	ld	r25, X
    57a0:	11 97       	sbiw	r26, 0x01	; 1
    57a2:	84 17       	cp	r24, r20
    57a4:	95 07       	cpc	r25, r21
    57a6:	f9 f4       	brne	.+62     	; 0x57e6 <malloc+0xcc>
    57a8:	64 17       	cp	r22, r20
    57aa:	75 07       	cpc	r23, r21
    57ac:	81 f4       	brne	.+32     	; 0x57ce <malloc+0xb4>
    57ae:	12 96       	adiw	r26, 0x02	; 2
    57b0:	8d 91       	ld	r24, X+
    57b2:	9c 91       	ld	r25, X
    57b4:	13 97       	sbiw	r26, 0x03	; 3
    57b6:	30 97       	sbiw	r30, 0x00	; 0
    57b8:	19 f0       	breq	.+6      	; 0x57c0 <malloc+0xa6>
    57ba:	93 83       	std	Z+3, r25	; 0x03
    57bc:	82 83       	std	Z+2, r24	; 0x02
    57be:	04 c0       	rjmp	.+8      	; 0x57c8 <malloc+0xae>
    57c0:	90 93 9b 04 	sts	0x049B, r25
    57c4:	80 93 9a 04 	sts	0x049A, r24
    57c8:	fd 01       	movw	r30, r26
    57ca:	32 96       	adiw	r30, 0x02	; 2
    57cc:	4f c0       	rjmp	.+158    	; 0x586c <malloc+0x152>
    57ce:	ca 01       	movw	r24, r20
    57d0:	86 1b       	sub	r24, r22
    57d2:	97 0b       	sbc	r25, r23
    57d4:	fd 01       	movw	r30, r26
    57d6:	e8 0f       	add	r30, r24
    57d8:	f9 1f       	adc	r31, r25
    57da:	61 93       	st	Z+, r22
    57dc:	71 93       	st	Z+, r23
    57de:	02 97       	sbiw	r24, 0x02	; 2
    57e0:	8d 93       	st	X+, r24
    57e2:	9c 93       	st	X, r25
    57e4:	43 c0       	rjmp	.+134    	; 0x586c <malloc+0x152>
    57e6:	fd 01       	movw	r30, r26
    57e8:	82 81       	ldd	r24, Z+2	; 0x02
    57ea:	93 81       	ldd	r25, Z+3	; 0x03
    57ec:	9c 01       	movw	r18, r24
    57ee:	d9 01       	movw	r26, r18
    57f0:	10 97       	sbiw	r26, 0x00	; 0
    57f2:	a1 f6       	brne	.-88     	; 0x579c <malloc+0x82>
    57f4:	80 91 98 04 	lds	r24, 0x0498
    57f8:	90 91 99 04 	lds	r25, 0x0499
    57fc:	89 2b       	or	r24, r25
    57fe:	41 f4       	brne	.+16     	; 0x5810 <malloc+0xf6>
    5800:	80 91 44 04 	lds	r24, 0x0444
    5804:	90 91 45 04 	lds	r25, 0x0445
    5808:	90 93 99 04 	sts	0x0499, r25
    580c:	80 93 98 04 	sts	0x0498, r24
    5810:	40 91 46 04 	lds	r20, 0x0446
    5814:	50 91 47 04 	lds	r21, 0x0447
    5818:	41 15       	cp	r20, r1
    581a:	51 05       	cpc	r21, r1
    581c:	41 f4       	brne	.+16     	; 0x582e <malloc+0x114>
    581e:	4d b7       	in	r20, 0x3d	; 61
    5820:	5e b7       	in	r21, 0x3e	; 62
    5822:	80 91 42 04 	lds	r24, 0x0442
    5826:	90 91 43 04 	lds	r25, 0x0443
    582a:	48 1b       	sub	r20, r24
    582c:	59 0b       	sbc	r21, r25
    582e:	20 91 98 04 	lds	r18, 0x0498
    5832:	30 91 99 04 	lds	r19, 0x0499
    5836:	24 17       	cp	r18, r20
    5838:	35 07       	cpc	r19, r21
    583a:	b0 f4       	brcc	.+44     	; 0x5868 <malloc+0x14e>
    583c:	ca 01       	movw	r24, r20
    583e:	82 1b       	sub	r24, r18
    5840:	93 0b       	sbc	r25, r19
    5842:	86 17       	cp	r24, r22
    5844:	97 07       	cpc	r25, r23
    5846:	80 f0       	brcs	.+32     	; 0x5868 <malloc+0x14e>
    5848:	ab 01       	movw	r20, r22
    584a:	4e 5f       	subi	r20, 0xFE	; 254
    584c:	5f 4f       	sbci	r21, 0xFF	; 255
    584e:	84 17       	cp	r24, r20
    5850:	95 07       	cpc	r25, r21
    5852:	50 f0       	brcs	.+20     	; 0x5868 <malloc+0x14e>
    5854:	42 0f       	add	r20, r18
    5856:	53 1f       	adc	r21, r19
    5858:	50 93 99 04 	sts	0x0499, r21
    585c:	40 93 98 04 	sts	0x0498, r20
    5860:	f9 01       	movw	r30, r18
    5862:	61 93       	st	Z+, r22
    5864:	71 93       	st	Z+, r23
    5866:	02 c0       	rjmp	.+4      	; 0x586c <malloc+0x152>
    5868:	e0 e0       	ldi	r30, 0x00	; 0
    586a:	f0 e0       	ldi	r31, 0x00	; 0
    586c:	cf 01       	movw	r24, r30
    586e:	df 91       	pop	r29
    5870:	cf 91       	pop	r28
    5872:	08 95       	ret

00005874 <free>:
    5874:	cf 93       	push	r28
    5876:	df 93       	push	r29
    5878:	00 97       	sbiw	r24, 0x00	; 0
    587a:	09 f4       	brne	.+2      	; 0x587e <free+0xa>
    587c:	50 c0       	rjmp	.+160    	; 0x591e <free+0xaa>
    587e:	ec 01       	movw	r28, r24
    5880:	22 97       	sbiw	r28, 0x02	; 2
    5882:	1b 82       	std	Y+3, r1	; 0x03
    5884:	1a 82       	std	Y+2, r1	; 0x02
    5886:	a0 91 9a 04 	lds	r26, 0x049A
    588a:	b0 91 9b 04 	lds	r27, 0x049B
    588e:	10 97       	sbiw	r26, 0x00	; 0
    5890:	09 f1       	breq	.+66     	; 0x58d4 <free+0x60>
    5892:	40 e0       	ldi	r20, 0x00	; 0
    5894:	50 e0       	ldi	r21, 0x00	; 0
    5896:	ac 17       	cp	r26, r28
    5898:	bd 07       	cpc	r27, r29
    589a:	08 f1       	brcs	.+66     	; 0x58de <free+0x6a>
    589c:	bb 83       	std	Y+3, r27	; 0x03
    589e:	aa 83       	std	Y+2, r26	; 0x02
    58a0:	fe 01       	movw	r30, r28
    58a2:	21 91       	ld	r18, Z+
    58a4:	31 91       	ld	r19, Z+
    58a6:	e2 0f       	add	r30, r18
    58a8:	f3 1f       	adc	r31, r19
    58aa:	ae 17       	cp	r26, r30
    58ac:	bf 07       	cpc	r27, r31
    58ae:	79 f4       	brne	.+30     	; 0x58ce <free+0x5a>
    58b0:	8d 91       	ld	r24, X+
    58b2:	9c 91       	ld	r25, X
    58b4:	11 97       	sbiw	r26, 0x01	; 1
    58b6:	28 0f       	add	r18, r24
    58b8:	39 1f       	adc	r19, r25
    58ba:	2e 5f       	subi	r18, 0xFE	; 254
    58bc:	3f 4f       	sbci	r19, 0xFF	; 255
    58be:	39 83       	std	Y+1, r19	; 0x01
    58c0:	28 83       	st	Y, r18
    58c2:	12 96       	adiw	r26, 0x02	; 2
    58c4:	8d 91       	ld	r24, X+
    58c6:	9c 91       	ld	r25, X
    58c8:	13 97       	sbiw	r26, 0x03	; 3
    58ca:	9b 83       	std	Y+3, r25	; 0x03
    58cc:	8a 83       	std	Y+2, r24	; 0x02
    58ce:	41 15       	cp	r20, r1
    58d0:	51 05       	cpc	r21, r1
    58d2:	71 f4       	brne	.+28     	; 0x58f0 <free+0x7c>
    58d4:	d0 93 9b 04 	sts	0x049B, r29
    58d8:	c0 93 9a 04 	sts	0x049A, r28
    58dc:	20 c0       	rjmp	.+64     	; 0x591e <free+0xaa>
    58de:	12 96       	adiw	r26, 0x02	; 2
    58e0:	8d 91       	ld	r24, X+
    58e2:	9c 91       	ld	r25, X
    58e4:	13 97       	sbiw	r26, 0x03	; 3
    58e6:	ad 01       	movw	r20, r26
    58e8:	00 97       	sbiw	r24, 0x00	; 0
    58ea:	11 f0       	breq	.+4      	; 0x58f0 <free+0x7c>
    58ec:	dc 01       	movw	r26, r24
    58ee:	d3 cf       	rjmp	.-90     	; 0x5896 <free+0x22>
    58f0:	fa 01       	movw	r30, r20
    58f2:	d3 83       	std	Z+3, r29	; 0x03
    58f4:	c2 83       	std	Z+2, r28	; 0x02
    58f6:	21 91       	ld	r18, Z+
    58f8:	31 91       	ld	r19, Z+
    58fa:	e2 0f       	add	r30, r18
    58fc:	f3 1f       	adc	r31, r19
    58fe:	ce 17       	cp	r28, r30
    5900:	df 07       	cpc	r29, r31
    5902:	69 f4       	brne	.+26     	; 0x591e <free+0xaa>
    5904:	88 81       	ld	r24, Y
    5906:	99 81       	ldd	r25, Y+1	; 0x01
    5908:	28 0f       	add	r18, r24
    590a:	39 1f       	adc	r19, r25
    590c:	2e 5f       	subi	r18, 0xFE	; 254
    590e:	3f 4f       	sbci	r19, 0xFF	; 255
    5910:	fa 01       	movw	r30, r20
    5912:	31 83       	std	Z+1, r19	; 0x01
    5914:	20 83       	st	Z, r18
    5916:	8a 81       	ldd	r24, Y+2	; 0x02
    5918:	9b 81       	ldd	r25, Y+3	; 0x03
    591a:	93 83       	std	Z+3, r25	; 0x03
    591c:	82 83       	std	Z+2, r24	; 0x02
    591e:	df 91       	pop	r29
    5920:	cf 91       	pop	r28
    5922:	08 95       	ret

00005924 <strnlen_P>:
    5924:	fc 01       	movw	r30, r24
    5926:	05 90       	lpm	r0, Z+
    5928:	61 50       	subi	r22, 0x01	; 1
    592a:	70 40       	sbci	r23, 0x00	; 0
    592c:	01 10       	cpse	r0, r1
    592e:	d8 f7       	brcc	.-10     	; 0x5926 <strnlen_P+0x2>
    5930:	80 95       	com	r24
    5932:	90 95       	com	r25
    5934:	8e 0f       	add	r24, r30
    5936:	9f 1f       	adc	r25, r31
    5938:	08 95       	ret

0000593a <memset>:
    593a:	dc 01       	movw	r26, r24
    593c:	01 c0       	rjmp	.+2      	; 0x5940 <memset+0x6>
    593e:	6d 93       	st	X+, r22
    5940:	41 50       	subi	r20, 0x01	; 1
    5942:	50 40       	sbci	r21, 0x00	; 0
    5944:	e0 f7       	brcc	.-8      	; 0x593e <memset+0x4>
    5946:	08 95       	ret

00005948 <strnlen>:
    5948:	fc 01       	movw	r30, r24
    594a:	61 50       	subi	r22, 0x01	; 1
    594c:	70 40       	sbci	r23, 0x00	; 0
    594e:	01 90       	ld	r0, Z+
    5950:	01 10       	cpse	r0, r1
    5952:	d8 f7       	brcc	.-10     	; 0x594a <strnlen+0x2>
    5954:	80 95       	com	r24
    5956:	90 95       	com	r25
    5958:	8e 0f       	add	r24, r30
    595a:	9f 1f       	adc	r25, r31
    595c:	08 95       	ret

0000595e <__ultoa_invert>:
    595e:	fa 01       	movw	r30, r20
    5960:	aa 27       	eor	r26, r26
    5962:	28 30       	cpi	r18, 0x08	; 8
    5964:	51 f1       	breq	.+84     	; 0x59ba <__ultoa_invert+0x5c>
    5966:	20 31       	cpi	r18, 0x10	; 16
    5968:	81 f1       	breq	.+96     	; 0x59ca <__ultoa_invert+0x6c>
    596a:	e8 94       	clt
    596c:	6f 93       	push	r22
    596e:	6e 7f       	andi	r22, 0xFE	; 254
    5970:	6e 5f       	subi	r22, 0xFE	; 254
    5972:	7f 4f       	sbci	r23, 0xFF	; 255
    5974:	8f 4f       	sbci	r24, 0xFF	; 255
    5976:	9f 4f       	sbci	r25, 0xFF	; 255
    5978:	af 4f       	sbci	r26, 0xFF	; 255
    597a:	b1 e0       	ldi	r27, 0x01	; 1
    597c:	3e d0       	rcall	.+124    	; 0x59fa <__ultoa_invert+0x9c>
    597e:	b4 e0       	ldi	r27, 0x04	; 4
    5980:	3c d0       	rcall	.+120    	; 0x59fa <__ultoa_invert+0x9c>
    5982:	67 0f       	add	r22, r23
    5984:	78 1f       	adc	r23, r24
    5986:	89 1f       	adc	r24, r25
    5988:	9a 1f       	adc	r25, r26
    598a:	a1 1d       	adc	r26, r1
    598c:	68 0f       	add	r22, r24
    598e:	79 1f       	adc	r23, r25
    5990:	8a 1f       	adc	r24, r26
    5992:	91 1d       	adc	r25, r1
    5994:	a1 1d       	adc	r26, r1
    5996:	6a 0f       	add	r22, r26
    5998:	71 1d       	adc	r23, r1
    599a:	81 1d       	adc	r24, r1
    599c:	91 1d       	adc	r25, r1
    599e:	a1 1d       	adc	r26, r1
    59a0:	20 d0       	rcall	.+64     	; 0x59e2 <__ultoa_invert+0x84>
    59a2:	09 f4       	brne	.+2      	; 0x59a6 <__ultoa_invert+0x48>
    59a4:	68 94       	set
    59a6:	3f 91       	pop	r19
    59a8:	2a e0       	ldi	r18, 0x0A	; 10
    59aa:	26 9f       	mul	r18, r22
    59ac:	11 24       	eor	r1, r1
    59ae:	30 19       	sub	r19, r0
    59b0:	30 5d       	subi	r19, 0xD0	; 208
    59b2:	31 93       	st	Z+, r19
    59b4:	de f6       	brtc	.-74     	; 0x596c <__ultoa_invert+0xe>
    59b6:	cf 01       	movw	r24, r30
    59b8:	08 95       	ret
    59ba:	46 2f       	mov	r20, r22
    59bc:	47 70       	andi	r20, 0x07	; 7
    59be:	40 5d       	subi	r20, 0xD0	; 208
    59c0:	41 93       	st	Z+, r20
    59c2:	b3 e0       	ldi	r27, 0x03	; 3
    59c4:	0f d0       	rcall	.+30     	; 0x59e4 <__ultoa_invert+0x86>
    59c6:	c9 f7       	brne	.-14     	; 0x59ba <__ultoa_invert+0x5c>
    59c8:	f6 cf       	rjmp	.-20     	; 0x59b6 <__ultoa_invert+0x58>
    59ca:	46 2f       	mov	r20, r22
    59cc:	4f 70       	andi	r20, 0x0F	; 15
    59ce:	40 5d       	subi	r20, 0xD0	; 208
    59d0:	4a 33       	cpi	r20, 0x3A	; 58
    59d2:	18 f0       	brcs	.+6      	; 0x59da <__ultoa_invert+0x7c>
    59d4:	49 5d       	subi	r20, 0xD9	; 217
    59d6:	31 fd       	sbrc	r19, 1
    59d8:	40 52       	subi	r20, 0x20	; 32
    59da:	41 93       	st	Z+, r20
    59dc:	02 d0       	rcall	.+4      	; 0x59e2 <__ultoa_invert+0x84>
    59de:	a9 f7       	brne	.-22     	; 0x59ca <__ultoa_invert+0x6c>
    59e0:	ea cf       	rjmp	.-44     	; 0x59b6 <__ultoa_invert+0x58>
    59e2:	b4 e0       	ldi	r27, 0x04	; 4
    59e4:	a6 95       	lsr	r26
    59e6:	97 95       	ror	r25
    59e8:	87 95       	ror	r24
    59ea:	77 95       	ror	r23
    59ec:	67 95       	ror	r22
    59ee:	ba 95       	dec	r27
    59f0:	c9 f7       	brne	.-14     	; 0x59e4 <__ultoa_invert+0x86>
    59f2:	00 97       	sbiw	r24, 0x00	; 0
    59f4:	61 05       	cpc	r22, r1
    59f6:	71 05       	cpc	r23, r1
    59f8:	08 95       	ret
    59fa:	9b 01       	movw	r18, r22
    59fc:	ac 01       	movw	r20, r24
    59fe:	0a 2e       	mov	r0, r26
    5a00:	06 94       	lsr	r0
    5a02:	57 95       	ror	r21
    5a04:	47 95       	ror	r20
    5a06:	37 95       	ror	r19
    5a08:	27 95       	ror	r18
    5a0a:	ba 95       	dec	r27
    5a0c:	c9 f7       	brne	.-14     	; 0x5a00 <__ultoa_invert+0xa2>
    5a0e:	62 0f       	add	r22, r18
    5a10:	73 1f       	adc	r23, r19
    5a12:	84 1f       	adc	r24, r20
    5a14:	95 1f       	adc	r25, r21
    5a16:	a0 1d       	adc	r26, r0
    5a18:	08 95       	ret
    5a1a:	7d d0       	rcall	.+250    	; 0x5b16 <__fp_pscA>
    5a1c:	30 f0       	brcs	.+12     	; 0x5a2a <__ultoa_invert+0xcc>
    5a1e:	82 d0       	rcall	.+260    	; 0x5b24 <__fp_pscB>
    5a20:	20 f0       	brcs	.+8      	; 0x5a2a <__ultoa_invert+0xcc>
    5a22:	31 f4       	brne	.+12     	; 0x5a30 <__ultoa_invert+0xd2>
    5a24:	9f 3f       	cpi	r25, 0xFF	; 255
    5a26:	11 f4       	brne	.+4      	; 0x5a2c <__ultoa_invert+0xce>
    5a28:	1e f4       	brtc	.+6      	; 0x5a30 <__ultoa_invert+0xd2>
    5a2a:	6b c0       	rjmp	.+214    	; 0x5b02 <__fp_nan>
    5a2c:	0e f4       	brtc	.+2      	; 0x5a30 <__ultoa_invert+0xd2>
    5a2e:	e0 95       	com	r30
    5a30:	e7 fb       	bst	r30, 7
    5a32:	53 c0       	rjmp	.+166    	; 0x5ada <__fp_inf>

00005a34 <__addsf3x>:
    5a34:	e9 2f       	mov	r30, r25
    5a36:	7d d0       	rcall	.+250    	; 0x5b32 <__fp_split3>
    5a38:	80 f3       	brcs	.-32     	; 0x5a1a <__ultoa_invert+0xbc>
    5a3a:	ba 17       	cp	r27, r26
    5a3c:	62 07       	cpc	r22, r18
    5a3e:	73 07       	cpc	r23, r19
    5a40:	84 07       	cpc	r24, r20
    5a42:	95 07       	cpc	r25, r21
    5a44:	18 f0       	brcs	.+6      	; 0x5a4c <__addsf3x+0x18>
    5a46:	71 f4       	brne	.+28     	; 0x5a64 <__addsf3x+0x30>
    5a48:	9e f5       	brtc	.+102    	; 0x5ab0 <__addsf3x+0x7c>
    5a4a:	95 c0       	rjmp	.+298    	; 0x5b76 <__fp_zero>
    5a4c:	0e f4       	brtc	.+2      	; 0x5a50 <__addsf3x+0x1c>
    5a4e:	e0 95       	com	r30
    5a50:	0b 2e       	mov	r0, r27
    5a52:	ba 2f       	mov	r27, r26
    5a54:	a0 2d       	mov	r26, r0
    5a56:	0b 01       	movw	r0, r22
    5a58:	b9 01       	movw	r22, r18
    5a5a:	90 01       	movw	r18, r0
    5a5c:	0c 01       	movw	r0, r24
    5a5e:	ca 01       	movw	r24, r20
    5a60:	a0 01       	movw	r20, r0
    5a62:	11 24       	eor	r1, r1
    5a64:	ff 27       	eor	r31, r31
    5a66:	59 1b       	sub	r21, r25
    5a68:	99 f0       	breq	.+38     	; 0x5a90 <__addsf3x+0x5c>
    5a6a:	59 3f       	cpi	r21, 0xF9	; 249
    5a6c:	50 f4       	brcc	.+20     	; 0x5a82 <__addsf3x+0x4e>
    5a6e:	50 3e       	cpi	r21, 0xE0	; 224
    5a70:	68 f1       	brcs	.+90     	; 0x5acc <__addsf3x+0x98>
    5a72:	1a 16       	cp	r1, r26
    5a74:	f0 40       	sbci	r31, 0x00	; 0
    5a76:	a2 2f       	mov	r26, r18
    5a78:	23 2f       	mov	r18, r19
    5a7a:	34 2f       	mov	r19, r20
    5a7c:	44 27       	eor	r20, r20
    5a7e:	58 5f       	subi	r21, 0xF8	; 248
    5a80:	f3 cf       	rjmp	.-26     	; 0x5a68 <__addsf3x+0x34>
    5a82:	46 95       	lsr	r20
    5a84:	37 95       	ror	r19
    5a86:	27 95       	ror	r18
    5a88:	a7 95       	ror	r26
    5a8a:	f0 40       	sbci	r31, 0x00	; 0
    5a8c:	53 95       	inc	r21
    5a8e:	c9 f7       	brne	.-14     	; 0x5a82 <__addsf3x+0x4e>
    5a90:	7e f4       	brtc	.+30     	; 0x5ab0 <__addsf3x+0x7c>
    5a92:	1f 16       	cp	r1, r31
    5a94:	ba 0b       	sbc	r27, r26
    5a96:	62 0b       	sbc	r22, r18
    5a98:	73 0b       	sbc	r23, r19
    5a9a:	84 0b       	sbc	r24, r20
    5a9c:	ba f0       	brmi	.+46     	; 0x5acc <__addsf3x+0x98>
    5a9e:	91 50       	subi	r25, 0x01	; 1
    5aa0:	a1 f0       	breq	.+40     	; 0x5aca <__addsf3x+0x96>
    5aa2:	ff 0f       	add	r31, r31
    5aa4:	bb 1f       	adc	r27, r27
    5aa6:	66 1f       	adc	r22, r22
    5aa8:	77 1f       	adc	r23, r23
    5aaa:	88 1f       	adc	r24, r24
    5aac:	c2 f7       	brpl	.-16     	; 0x5a9e <__addsf3x+0x6a>
    5aae:	0e c0       	rjmp	.+28     	; 0x5acc <__addsf3x+0x98>
    5ab0:	ba 0f       	add	r27, r26
    5ab2:	62 1f       	adc	r22, r18
    5ab4:	73 1f       	adc	r23, r19
    5ab6:	84 1f       	adc	r24, r20
    5ab8:	48 f4       	brcc	.+18     	; 0x5acc <__addsf3x+0x98>
    5aba:	87 95       	ror	r24
    5abc:	77 95       	ror	r23
    5abe:	67 95       	ror	r22
    5ac0:	b7 95       	ror	r27
    5ac2:	f7 95       	ror	r31
    5ac4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ac6:	08 f0       	brcs	.+2      	; 0x5aca <__addsf3x+0x96>
    5ac8:	b3 cf       	rjmp	.-154    	; 0x5a30 <__ultoa_invert+0xd2>
    5aca:	93 95       	inc	r25
    5acc:	88 0f       	add	r24, r24
    5ace:	08 f0       	brcs	.+2      	; 0x5ad2 <__addsf3x+0x9e>
    5ad0:	99 27       	eor	r25, r25
    5ad2:	ee 0f       	add	r30, r30
    5ad4:	97 95       	ror	r25
    5ad6:	87 95       	ror	r24
    5ad8:	08 95       	ret

00005ada <__fp_inf>:
    5ada:	97 f9       	bld	r25, 7
    5adc:	9f 67       	ori	r25, 0x7F	; 127
    5ade:	80 e8       	ldi	r24, 0x80	; 128
    5ae0:	70 e0       	ldi	r23, 0x00	; 0
    5ae2:	60 e0       	ldi	r22, 0x00	; 0
    5ae4:	08 95       	ret

00005ae6 <__fp_mpack>:
    5ae6:	9f 3f       	cpi	r25, 0xFF	; 255
    5ae8:	31 f0       	breq	.+12     	; 0x5af6 <__fp_mpack_finite+0xc>

00005aea <__fp_mpack_finite>:
    5aea:	91 50       	subi	r25, 0x01	; 1
    5aec:	20 f4       	brcc	.+8      	; 0x5af6 <__fp_mpack_finite+0xc>
    5aee:	87 95       	ror	r24
    5af0:	77 95       	ror	r23
    5af2:	67 95       	ror	r22
    5af4:	b7 95       	ror	r27
    5af6:	88 0f       	add	r24, r24
    5af8:	91 1d       	adc	r25, r1
    5afa:	96 95       	lsr	r25
    5afc:	87 95       	ror	r24
    5afe:	97 f9       	bld	r25, 7
    5b00:	08 95       	ret

00005b02 <__fp_nan>:
    5b02:	9f ef       	ldi	r25, 0xFF	; 255
    5b04:	80 ec       	ldi	r24, 0xC0	; 192
    5b06:	08 95       	ret

00005b08 <__fp_norm2>:
    5b08:	91 50       	subi	r25, 0x01	; 1
    5b0a:	50 40       	sbci	r21, 0x00	; 0
    5b0c:	66 0f       	add	r22, r22
    5b0e:	77 1f       	adc	r23, r23
    5b10:	88 1f       	adc	r24, r24
    5b12:	d2 f7       	brpl	.-12     	; 0x5b08 <__fp_norm2>
    5b14:	08 95       	ret

00005b16 <__fp_pscA>:
    5b16:	00 24       	eor	r0, r0
    5b18:	0a 94       	dec	r0
    5b1a:	16 16       	cp	r1, r22
    5b1c:	17 06       	cpc	r1, r23
    5b1e:	18 06       	cpc	r1, r24
    5b20:	09 06       	cpc	r0, r25
    5b22:	08 95       	ret

00005b24 <__fp_pscB>:
    5b24:	00 24       	eor	r0, r0
    5b26:	0a 94       	dec	r0
    5b28:	12 16       	cp	r1, r18
    5b2a:	13 06       	cpc	r1, r19
    5b2c:	14 06       	cpc	r1, r20
    5b2e:	05 06       	cpc	r0, r21
    5b30:	08 95       	ret

00005b32 <__fp_split3>:
    5b32:	57 fd       	sbrc	r21, 7
    5b34:	90 58       	subi	r25, 0x80	; 128
    5b36:	44 0f       	add	r20, r20
    5b38:	55 1f       	adc	r21, r21
    5b3a:	59 f0       	breq	.+22     	; 0x5b52 <__fp_splitA+0x10>
    5b3c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b3e:	71 f0       	breq	.+28     	; 0x5b5c <__fp_splitA+0x1a>
    5b40:	47 95       	ror	r20

00005b42 <__fp_splitA>:
    5b42:	88 0f       	add	r24, r24
    5b44:	97 fb       	bst	r25, 7
    5b46:	99 1f       	adc	r25, r25
    5b48:	61 f0       	breq	.+24     	; 0x5b62 <__fp_splitA+0x20>
    5b4a:	9f 3f       	cpi	r25, 0xFF	; 255
    5b4c:	79 f0       	breq	.+30     	; 0x5b6c <__fp_splitA+0x2a>
    5b4e:	87 95       	ror	r24
    5b50:	08 95       	ret
    5b52:	12 16       	cp	r1, r18
    5b54:	13 06       	cpc	r1, r19
    5b56:	14 06       	cpc	r1, r20
    5b58:	55 1f       	adc	r21, r21
    5b5a:	f2 cf       	rjmp	.-28     	; 0x5b40 <__fp_split3+0xe>
    5b5c:	46 95       	lsr	r20
    5b5e:	f1 df       	rcall	.-30     	; 0x5b42 <__fp_splitA>
    5b60:	08 c0       	rjmp	.+16     	; 0x5b72 <__fp_splitA+0x30>
    5b62:	16 16       	cp	r1, r22
    5b64:	17 06       	cpc	r1, r23
    5b66:	18 06       	cpc	r1, r24
    5b68:	99 1f       	adc	r25, r25
    5b6a:	f1 cf       	rjmp	.-30     	; 0x5b4e <__fp_splitA+0xc>
    5b6c:	86 95       	lsr	r24
    5b6e:	71 05       	cpc	r23, r1
    5b70:	61 05       	cpc	r22, r1
    5b72:	08 94       	sec
    5b74:	08 95       	ret

00005b76 <__fp_zero>:
    5b76:	e8 94       	clt

00005b78 <__fp_szero>:
    5b78:	bb 27       	eor	r27, r27
    5b7a:	66 27       	eor	r22, r22
    5b7c:	77 27       	eor	r23, r23
    5b7e:	cb 01       	movw	r24, r22
    5b80:	97 f9       	bld	r25, 7
    5b82:	08 95       	ret

00005b84 <_exit>:
    5b84:	f8 94       	cli

00005b86 <__stop_program>:
    5b86:	ff cf       	rjmp	.-2      	; 0x5b86 <__stop_program>
