
IronMan_1003.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00002bf6  00002c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080020e  0080020e  00002d98  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002cb  00000000  00000000  00002ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025be  00000000  00000000  000031c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000114f  00000000  00000000  00005781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b28  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000083f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049d  00000000  00000000  000086b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00008b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00009323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ef       	ldi	r30, 0xF6	; 246
      a0:	fb e2       	ldi	r31, 0x2B	; 43
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 30       	cpi	r26, 0x0E	; 14
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ae e0       	ldi	r26, 0x0E	; 14
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 33       	cpi	r26, 0x35	; 53
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 0d 09 	call	0x121a	; 0x121a <main>
      c6:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_5>:
static int call_size_cnt;
static int command;

// *** 버튼 인터럽트 관련 부분 ***
ISR(INT4_vect)
{
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	00 90 5b 00 	lds	r0, 0x005B
      da:	0f 92       	push	r0
      dc:	11 24       	eor	r1, r1
      de:	2f 93       	push	r18
      e0:	3f 93       	push	r19
      e2:	4f 93       	push	r20
      e4:	5f 93       	push	r21
      e6:	6f 93       	push	r22
      e8:	7f 93       	push	r23
      ea:	8f 93       	push	r24
      ec:	9f 93       	push	r25
      ee:	af 93       	push	r26
      f0:	bf 93       	push	r27
      f2:	ef 93       	push	r30
      f4:	ff 93       	push	r31
      f6:	df 93       	push	r29
      f8:	cf 93       	push	r28
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	6c 97       	sbiw	r28, 0x1c	; 28
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
	if(TEST)
		printf("INT4 Call!!!\n");
     104:	89 e0       	ldi	r24, 0x09	; 9
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 f6 11 	call	0x23ec	; 0x23ec <puts>
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	a0 ea       	ldi	r26, 0xA0	; 160
     112:	b1 e4       	ldi	r27, 0x41	; 65
     114:	89 8f       	std	Y+25, r24	; 0x19
     116:	9a 8f       	std	Y+26, r25	; 0x1a
     118:	ab 8f       	std	Y+27, r26	; 0x1b
     11a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     11c:	69 8d       	ldd	r22, Y+25	; 0x19
     11e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     120:	8b 8d       	ldd	r24, Y+27	; 0x1b
     122:	9c 8d       	ldd	r25, Y+28	; 0x1c
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	4a e7       	ldi	r20, 0x7A	; 122
     12a:	55 e4       	ldi	r21, 0x45	; 69
     12c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     130:	dc 01       	movw	r26, r24
     132:	cb 01       	movw	r24, r22
     134:	8d 8b       	std	Y+21, r24	; 0x15
     136:	9e 8b       	std	Y+22, r25	; 0x16
     138:	af 8b       	std	Y+23, r26	; 0x17
     13a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     13c:	6d 89       	ldd	r22, Y+21	; 0x15
     13e:	7e 89       	ldd	r23, Y+22	; 0x16
     140:	8f 89       	ldd	r24, Y+23	; 0x17
     142:	98 8d       	ldd	r25, Y+24	; 0x18
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	40 e8       	ldi	r20, 0x80	; 128
     14a:	5f e3       	ldi	r21, 0x3F	; 63
     14c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     150:	88 23       	and	r24, r24
     152:	2c f4       	brge	.+10     	; 0x15e <__vector_5+0x90>
		__ticks = 1;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	9c 8b       	std	Y+20, r25	; 0x14
     15a:	8b 8b       	std	Y+19, r24	; 0x13
     15c:	3f c0       	rjmp	.+126    	; 0x1dc <__vector_5+0x10e>
	else if (__tmp > 65535)
     15e:	6d 89       	ldd	r22, Y+21	; 0x15
     160:	7e 89       	ldd	r23, Y+22	; 0x16
     162:	8f 89       	ldd	r24, Y+23	; 0x17
     164:	98 8d       	ldd	r25, Y+24	; 0x18
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	3f ef       	ldi	r19, 0xFF	; 255
     16a:	4f e7       	ldi	r20, 0x7F	; 127
     16c:	57 e4       	ldi	r21, 0x47	; 71
     16e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     172:	18 16       	cp	r1, r24
     174:	4c f5       	brge	.+82     	; 0x1c8 <__vector_5+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     176:	69 8d       	ldd	r22, Y+25	; 0x19
     178:	7a 8d       	ldd	r23, Y+26	; 0x1a
     17a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     17c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e2       	ldi	r20, 0x20	; 32
     184:	51 e4       	ldi	r21, 0x41	; 65
     186:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     18a:	dc 01       	movw	r26, r24
     18c:	cb 01       	movw	r24, r22
     18e:	bc 01       	movw	r22, r24
     190:	cd 01       	movw	r24, r26
     192:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     196:	dc 01       	movw	r26, r24
     198:	cb 01       	movw	r24, r22
     19a:	9c 8b       	std	Y+20, r25	; 0x14
     19c:	8b 8b       	std	Y+19, r24	; 0x13
     19e:	0f c0       	rjmp	.+30     	; 0x1be <__vector_5+0xf0>
     1a0:	80 e9       	ldi	r24, 0x90	; 144
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	9a 8b       	std	Y+18, r25	; 0x12
     1a6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a8:	89 89       	ldd	r24, Y+17	; 0x11
     1aa:	9a 89       	ldd	r25, Y+18	; 0x12
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <__vector_5+0xde>
     1b0:	9a 8b       	std	Y+18, r25	; 0x12
     1b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1b4:	8b 89       	ldd	r24, Y+19	; 0x13
     1b6:	9c 89       	ldd	r25, Y+20	; 0x14
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	9c 8b       	std	Y+20, r25	; 0x14
     1bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1be:	8b 89       	ldd	r24, Y+19	; 0x13
     1c0:	9c 89       	ldd	r25, Y+20	; 0x14
     1c2:	00 97       	sbiw	r24, 0x00	; 0
     1c4:	69 f7       	brne	.-38     	; 0x1a0 <__vector_5+0xd2>
     1c6:	14 c0       	rjmp	.+40     	; 0x1f0 <__vector_5+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1c8:	6d 89       	ldd	r22, Y+21	; 0x15
     1ca:	7e 89       	ldd	r23, Y+22	; 0x16
     1cc:	8f 89       	ldd	r24, Y+23	; 0x17
     1ce:	98 8d       	ldd	r25, Y+24	; 0x18
     1d0:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
     1d8:	9c 8b       	std	Y+20, r25	; 0x14
     1da:	8b 8b       	std	Y+19, r24	; 0x13
     1dc:	8b 89       	ldd	r24, Y+19	; 0x13
     1de:	9c 89       	ldd	r25, Y+20	; 0x14
     1e0:	98 8b       	std	Y+16, r25	; 0x10
     1e2:	8f 87       	std	Y+15, r24	; 0x0f
     1e4:	8f 85       	ldd	r24, Y+15	; 0x0f
     1e6:	98 89       	ldd	r25, Y+16	; 0x10
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <__vector_5+0x11a>
     1ec:	98 8b       	std	Y+16, r25	; 0x10
     1ee:	8f 87       	std	Y+15, r24	; 0x0f
	
	
	_delay_ms(20);		//디바운싱
	while(~PINE & 0x10);	//스위치 누름을 기다림
     1f0:	e1 e2       	ldi	r30, 0x21	; 33
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	88 2f       	mov	r24, r24
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	80 71       	andi	r24, 0x10	; 16
     1fc:	90 70       	andi	r25, 0x00	; 0
     1fe:	00 97       	sbiw	r24, 0x00	; 0
     200:	b9 f3       	breq	.-18     	; 0x1f0 <__vector_5+0x122>
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	a0 ea       	ldi	r26, 0xA0	; 160
     208:	b1 e4       	ldi	r27, 0x41	; 65
     20a:	8b 87       	std	Y+11, r24	; 0x0b
     20c:	9c 87       	std	Y+12, r25	; 0x0c
     20e:	ad 87       	std	Y+13, r26	; 0x0d
     210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     212:	6b 85       	ldd	r22, Y+11	; 0x0b
     214:	7c 85       	ldd	r23, Y+12	; 0x0c
     216:	8d 85       	ldd	r24, Y+13	; 0x0d
     218:	9e 85       	ldd	r25, Y+14	; 0x0e
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	4a e7       	ldi	r20, 0x7A	; 122
     220:	55 e4       	ldi	r21, 0x45	; 69
     222:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     226:	dc 01       	movw	r26, r24
     228:	cb 01       	movw	r24, r22
     22a:	8f 83       	std	Y+7, r24	; 0x07
     22c:	98 87       	std	Y+8, r25	; 0x08
     22e:	a9 87       	std	Y+9, r26	; 0x09
     230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     232:	6f 81       	ldd	r22, Y+7	; 0x07
     234:	78 85       	ldd	r23, Y+8	; 0x08
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e8       	ldi	r20, 0x80	; 128
     240:	5f e3       	ldi	r21, 0x3F	; 63
     242:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     246:	88 23       	and	r24, r24
     248:	2c f4       	brge	.+10     	; 0x254 <__vector_5+0x186>
		__ticks = 1;
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	9e 83       	std	Y+6, r25	; 0x06
     250:	8d 83       	std	Y+5, r24	; 0x05
     252:	3f c0       	rjmp	.+126    	; 0x2d2 <__vector_5+0x204>
	else if (__tmp > 65535)
     254:	6f 81       	ldd	r22, Y+7	; 0x07
     256:	78 85       	ldd	r23, Y+8	; 0x08
     258:	89 85       	ldd	r24, Y+9	; 0x09
     25a:	9a 85       	ldd	r25, Y+10	; 0x0a
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	3f ef       	ldi	r19, 0xFF	; 255
     260:	4f e7       	ldi	r20, 0x7F	; 127
     262:	57 e4       	ldi	r21, 0x47	; 71
     264:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     268:	18 16       	cp	r1, r24
     26a:	4c f5       	brge	.+82     	; 0x2be <__vector_5+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     26c:	6b 85       	ldd	r22, Y+11	; 0x0b
     26e:	7c 85       	ldd	r23, Y+12	; 0x0c
     270:	8d 85       	ldd	r24, Y+13	; 0x0d
     272:	9e 85       	ldd	r25, Y+14	; 0x0e
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e2       	ldi	r20, 0x20	; 32
     27a:	51 e4       	ldi	r21, 0x41	; 65
     27c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     280:	dc 01       	movw	r26, r24
     282:	cb 01       	movw	r24, r22
     284:	bc 01       	movw	r22, r24
     286:	cd 01       	movw	r24, r26
     288:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	9e 83       	std	Y+6, r25	; 0x06
     292:	8d 83       	std	Y+5, r24	; 0x05
     294:	0f c0       	rjmp	.+30     	; 0x2b4 <__vector_5+0x1e6>
     296:	80 e9       	ldi	r24, 0x90	; 144
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	9c 83       	std	Y+4, r25	; 0x04
     29c:	8b 83       	std	Y+3, r24	; 0x03
     29e:	8b 81       	ldd	r24, Y+3	; 0x03
     2a0:	9c 81       	ldd	r25, Y+4	; 0x04
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <__vector_5+0x1d4>
     2a6:	9c 83       	std	Y+4, r25	; 0x04
     2a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2aa:	8d 81       	ldd	r24, Y+5	; 0x05
     2ac:	9e 81       	ldd	r25, Y+6	; 0x06
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	9e 83       	std	Y+6, r25	; 0x06
     2b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b4:	8d 81       	ldd	r24, Y+5	; 0x05
     2b6:	9e 81       	ldd	r25, Y+6	; 0x06
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	69 f7       	brne	.-38     	; 0x296 <__vector_5+0x1c8>
     2bc:	14 c0       	rjmp	.+40     	; 0x2e6 <__vector_5+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2be:	6f 81       	ldd	r22, Y+7	; 0x07
     2c0:	78 85       	ldd	r23, Y+8	; 0x08
     2c2:	89 85       	ldd	r24, Y+9	; 0x09
     2c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     2c6:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	9e 83       	std	Y+6, r25	; 0x06
     2d0:	8d 83       	std	Y+5, r24	; 0x05
     2d2:	8d 81       	ldd	r24, Y+5	; 0x05
     2d4:	9e 81       	ldd	r25, Y+6	; 0x06
     2d6:	9a 83       	std	Y+2, r25	; 0x02
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <__vector_5+0x210>
     2e2:	9a 83       	std	Y+2, r25	; 0x02
     2e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		//디바운싱
		
	// 인터럽트 Disable 시키는 부분
  	EIMSK = 0x00;	//외부 인터럽트 DISABLE 
     2e6:	e9 e5       	ldi	r30, 0x59	; 89
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	10 82       	st	Z, r1
	ADCSRA = 0x00;	//AD 컨버팅 중지	
     2ec:	e6 e2       	ldi	r30, 0x26	; 38
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	10 82       	st	Z, r1

	idle();
     2f2:	0e 94 32 02 	call	0x464	; 0x464 <idle>

	EIFR = 0x10;		//인터럽트 플래그 레지스터 리셋	- 실행후 리셋시켜야함
     2f6:	e8 e5       	ldi	r30, 0x58	; 88
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	80 83       	st	Z, r24
}
     2fe:	6c 96       	adiw	r28, 0x1c	; 28
     300:	de bf       	out	0x3e, r29	; 62
     302:	cd bf       	out	0x3d, r28	; 61
     304:	cf 91       	pop	r28
     306:	df 91       	pop	r29
     308:	ff 91       	pop	r31
     30a:	ef 91       	pop	r30
     30c:	bf 91       	pop	r27
     30e:	af 91       	pop	r26
     310:	9f 91       	pop	r25
     312:	8f 91       	pop	r24
     314:	7f 91       	pop	r23
     316:	6f 91       	pop	r22
     318:	5f 91       	pop	r21
     31a:	4f 91       	pop	r20
     31c:	3f 91       	pop	r19
     31e:	2f 91       	pop	r18
     320:	0f 90       	pop	r0
     322:	00 92 5b 00 	sts	0x005B, r0
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <putchar1>:

static int putchar1(char c)	//카메라에 명령어 전송
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	0f 92       	push	r0
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
     33c:	eb e2       	ldi	r30, 0x2B	; 43
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	88 2f       	mov	r24, r24
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	80 72       	andi	r24, 0x20	; 32
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	b9 f3       	breq	.-18     	; 0x33c <putchar1+0xc>
		UDR0 = c;
     34e:	ec e2       	ldi	r30, 0x2C	; 44
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	80 83       	st	Z, r24
	return 0;
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
}
     35a:	0f 90       	pop	r0
     35c:	cf 91       	pop	r28
     35e:	df 91       	pop	r29
     360:	08 95       	ret

00000362 <reset>:


void reset(){		//Camera Command(reset)
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
 if(TEST)
 	printf("\r\nRESET  ");
     36a:	00 d0       	rcall	.+0      	; 0x36c <reset+0xa>
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	31 96       	adiw	r30, 0x01	; 1
     372:	86 e1       	ldi	r24, 0x16	; 22
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	91 83       	std	Z+1, r25	; 0x01
     378:	80 83       	st	Z, r24
     37a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
 putchar1(0x56);
     382:	86 e5       	ldi	r24, 0x56	; 86
     384:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x26);
     38e:	86 e2       	ldi	r24, 0x26	; 38
     390:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 img_cnt = 0;
     39a:	10 92 1a 02 	sts	0x021A, r1
     39e:	10 92 19 02 	sts	0x0219, r1
}
     3a2:	cf 91       	pop	r28
     3a4:	df 91       	pop	r29
     3a6:	08 95       	ret

000003a8 <resize>:
 
void resize(){		//Camera Command(resize)
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
 if(TEST)
 	printf("\r\nRESIZE  ");
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <resize+0xa>
     3b2:	ed b7       	in	r30, 0x3d	; 61
     3b4:	fe b7       	in	r31, 0x3e	; 62
     3b6:	31 96       	adiw	r30, 0x01	; 1
     3b8:	80 e2       	ldi	r24, 0x20	; 32
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	91 83       	std	Z+1, r25	; 0x01
     3be:	80 83       	st	Z, r24
     3c0:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
 putchar1(0x56);
     3c8:	86 e5       	ldi	r24, 0x56	; 86
     3ca:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x31);
     3d4:	81 e3       	ldi	r24, 0x31	; 49
     3d6:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x05);
     3da:	85 e0       	ldi	r24, 0x05	; 5
     3dc:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x04);
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x01);
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x19);
     3f2:	89 e1       	ldi	r24, 0x19	; 25
     3f4:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x11);
     3f8:	81 e1       	ldi	r24, 0x11	; 17
     3fa:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 img_cnt = 0;
     3fe:	10 92 1a 02 	sts	0x021A, r1
     402:	10 92 19 02 	sts	0x0219, r1
}
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	08 95       	ret

0000040c <set_rate>:
 
void set_rate(){	//Camera Command(set_rate 115200)
     40c:	df 93       	push	r29
     40e:	cf 93       	push	r28
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
 if(TEST)
 	printf("\r\nSET_RATE ");
     414:	00 d0       	rcall	.+0      	; 0x416 <set_rate+0xa>
     416:	ed b7       	in	r30, 0x3d	; 61
     418:	fe b7       	in	r31, 0x3e	; 62
     41a:	31 96       	adiw	r30, 0x01	; 1
     41c:	8b e2       	ldi	r24, 0x2B	; 43
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	91 83       	std	Z+1, r25	; 0x01
     422:	80 83       	st	Z, r24
     424:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
 putchar1(0x56);
     42c:	86 e5       	ldi	r24, 0x56	; 86
     42e:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x24);
     438:	84 e2       	ldi	r24, 0x24	; 36
     43a:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x03);
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x01);
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x0D);
     44a:	8d e0       	ldi	r24, 0x0D	; 13
     44c:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0xA6);
     450:	86 ea       	ldi	r24, 0xA6	; 166
     452:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 img_cnt = 0;
     456:	10 92 1a 02 	sts	0x021A, r1
     45a:	10 92 19 02 	sts	0x0219, r1
}
     45e:	cf 91       	pop	r28
     460:	df 91       	pop	r29
     462:	08 95       	ret

00000464 <idle>:

void idle(){		//Camera Command(Idle)
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	df 93       	push	r29
     46a:	cf 93       	push	r28
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	c6 54       	subi	r28, 0x46	; 70
     472:	d0 40       	sbci	r29, 0x00	; 0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
 if(TEST)
 	printf("\r\nIDLE  ");
     47e:	00 d0       	rcall	.+0      	; 0x480 <idle+0x1c>
     480:	ed b7       	in	r30, 0x3d	; 61
     482:	fe b7       	in	r31, 0x3e	; 62
     484:	31 96       	adiw	r30, 0x01	; 1
     486:	87 e3       	ldi	r24, 0x37	; 55
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	91 83       	std	Z+1, r25	; 0x01
     48c:	80 83       	st	Z, r24
     48e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
 
 init_buffer(CAMERA);
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <init_buffer>
 command = IDLE;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	90 93 2a 02 	sts	0x022A, r25
     4a6:	80 93 29 02 	sts	0x0229, r24
 idle_cnt = 0;
     4aa:	10 92 24 02 	sts	0x0224, r1
     4ae:	10 92 23 02 	sts	0x0223, r1
 img_cnt = 0;
     4b2:	10 92 1a 02 	sts	0x021A, r1
     4b6:	10 92 19 02 	sts	0x0219, r1
 call_img_flag = 0;
     4ba:	10 92 1e 02 	sts	0x021E, r1
     4be:	10 92 1d 02 	sts	0x021D, r1
 img_data_start_flag = 0;
     4c2:	10 92 20 02 	sts	0x0220, r1
     4c6:	10 92 1f 02 	sts	0x021F, r1
 
 putchar1(0x56); _delay_ms(1);
     4ca:	86 e5       	ldi	r24, 0x56	; 86
     4cc:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
     4d0:	fe 01       	movw	r30, r28
     4d2:	ed 5b       	subi	r30, 0xBD	; 189
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	a0 e8       	ldi	r26, 0x80	; 128
     4dc:	bf e3       	ldi	r27, 0x3F	; 63
     4de:	80 83       	st	Z, r24
     4e0:	91 83       	std	Z+1, r25	; 0x01
     4e2:	a2 83       	std	Z+2, r26	; 0x02
     4e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e6:	8e 01       	movw	r16, r28
     4e8:	01 5c       	subi	r16, 0xC1	; 193
     4ea:	1f 4f       	sbci	r17, 0xFF	; 255
     4ec:	fe 01       	movw	r30, r28
     4ee:	ed 5b       	subi	r30, 0xBD	; 189
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	4a e7       	ldi	r20, 0x7A	; 122
     500:	55 e4       	ldi	r21, 0x45	; 69
     502:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	f8 01       	movw	r30, r16
     50c:	80 83       	st	Z, r24
     50e:	91 83       	std	Z+1, r25	; 0x01
     510:	a2 83       	std	Z+2, r26	; 0x02
     512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     514:	fe 01       	movw	r30, r28
     516:	ff 96       	adiw	r30, 0x3f	; 63
     518:	60 81       	ld	r22, Z
     51a:	71 81       	ldd	r23, Z+1	; 0x01
     51c:	82 81       	ldd	r24, Z+2	; 0x02
     51e:	93 81       	ldd	r25, Z+3	; 0x03
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e8       	ldi	r20, 0x80	; 128
     526:	5f e3       	ldi	r21, 0x3F	; 63
     528:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     52c:	88 23       	and	r24, r24
     52e:	2c f4       	brge	.+10     	; 0x53a <idle+0xd6>
		__ticks = 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	9e af       	std	Y+62, r25	; 0x3e
     536:	8d af       	std	Y+61, r24	; 0x3d
     538:	46 c0       	rjmp	.+140    	; 0x5c6 <idle+0x162>
	else if (__tmp > 65535)
     53a:	fe 01       	movw	r30, r28
     53c:	ff 96       	adiw	r30, 0x3f	; 63
     53e:	60 81       	ld	r22, Z
     540:	71 81       	ldd	r23, Z+1	; 0x01
     542:	82 81       	ldd	r24, Z+2	; 0x02
     544:	93 81       	ldd	r25, Z+3	; 0x03
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	3f ef       	ldi	r19, 0xFF	; 255
     54a:	4f e7       	ldi	r20, 0x7F	; 127
     54c:	57 e4       	ldi	r21, 0x47	; 71
     54e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     552:	18 16       	cp	r1, r24
     554:	64 f5       	brge	.+88     	; 0x5ae <idle+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     556:	fe 01       	movw	r30, r28
     558:	ed 5b       	subi	r30, 0xBD	; 189
     55a:	ff 4f       	sbci	r31, 0xFF	; 255
     55c:	60 81       	ld	r22, Z
     55e:	71 81       	ldd	r23, Z+1	; 0x01
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9e af       	std	Y+62, r25	; 0x3e
     582:	8d af       	std	Y+61, r24	; 0x3d
     584:	0f c0       	rjmp	.+30     	; 0x5a4 <idle+0x140>
     586:	80 e9       	ldi	r24, 0x90	; 144
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9c af       	std	Y+60, r25	; 0x3c
     58c:	8b af       	std	Y+59, r24	; 0x3b
     58e:	8b ad       	ldd	r24, Y+59	; 0x3b
     590:	9c ad       	ldd	r25, Y+60	; 0x3c
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <idle+0x12e>
     596:	9c af       	std	Y+60, r25	; 0x3c
     598:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     59a:	8d ad       	ldd	r24, Y+61	; 0x3d
     59c:	9e ad       	ldd	r25, Y+62	; 0x3e
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	9e af       	std	Y+62, r25	; 0x3e
     5a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a4:	8d ad       	ldd	r24, Y+61	; 0x3d
     5a6:	9e ad       	ldd	r25, Y+62	; 0x3e
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	69 f7       	brne	.-38     	; 0x586 <idle+0x122>
     5ac:	16 c0       	rjmp	.+44     	; 0x5da <idle+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ae:	fe 01       	movw	r30, r28
     5b0:	ff 96       	adiw	r30, 0x3f	; 63
     5b2:	60 81       	ld	r22, Z
     5b4:	71 81       	ldd	r23, Z+1	; 0x01
     5b6:	82 81       	ldd	r24, Z+2	; 0x02
     5b8:	93 81       	ldd	r25, Z+3	; 0x03
     5ba:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	9e af       	std	Y+62, r25	; 0x3e
     5c4:	8d af       	std	Y+61, r24	; 0x3d
     5c6:	8d ad       	ldd	r24, Y+61	; 0x3d
     5c8:	9e ad       	ldd	r25, Y+62	; 0x3e
     5ca:	9a af       	std	Y+58, r25	; 0x3a
     5cc:	89 af       	std	Y+57, r24	; 0x39
     5ce:	89 ad       	ldd	r24, Y+57	; 0x39
     5d0:	9a ad       	ldd	r25, Y+58	; 0x3a
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <idle+0x16e>
     5d6:	9a af       	std	Y+58, r25	; 0x3a
     5d8:	89 af       	std	Y+57, r24	; 0x39
 putchar1(0x00); _delay_ms(1);
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	a0 e8       	ldi	r26, 0x80	; 128
     5e6:	bf e3       	ldi	r27, 0x3F	; 63
     5e8:	8d ab       	std	Y+53, r24	; 0x35
     5ea:	9e ab       	std	Y+54, r25	; 0x36
     5ec:	af ab       	std	Y+55, r26	; 0x37
     5ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5f0:	6d a9       	ldd	r22, Y+53	; 0x35
     5f2:	7e a9       	ldd	r23, Y+54	; 0x36
     5f4:	8f a9       	ldd	r24, Y+55	; 0x37
     5f6:	98 ad       	ldd	r25, Y+56	; 0x38
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	4a e7       	ldi	r20, 0x7A	; 122
     5fe:	55 e4       	ldi	r21, 0x45	; 69
     600:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	89 ab       	std	Y+49, r24	; 0x31
     60a:	9a ab       	std	Y+50, r25	; 0x32
     60c:	ab ab       	std	Y+51, r26	; 0x33
     60e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     610:	69 a9       	ldd	r22, Y+49	; 0x31
     612:	7a a9       	ldd	r23, Y+50	; 0x32
     614:	8b a9       	ldd	r24, Y+51	; 0x33
     616:	9c a9       	ldd	r25, Y+52	; 0x34
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e8       	ldi	r20, 0x80	; 128
     61e:	5f e3       	ldi	r21, 0x3F	; 63
     620:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     624:	88 23       	and	r24, r24
     626:	2c f4       	brge	.+10     	; 0x632 <idle+0x1ce>
		__ticks = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	98 ab       	std	Y+48, r25	; 0x30
     62e:	8f a7       	std	Y+47, r24	; 0x2f
     630:	3f c0       	rjmp	.+126    	; 0x6b0 <idle+0x24c>
	else if (__tmp > 65535)
     632:	69 a9       	ldd	r22, Y+49	; 0x31
     634:	7a a9       	ldd	r23, Y+50	; 0x32
     636:	8b a9       	ldd	r24, Y+51	; 0x33
     638:	9c a9       	ldd	r25, Y+52	; 0x34
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	3f ef       	ldi	r19, 0xFF	; 255
     63e:	4f e7       	ldi	r20, 0x7F	; 127
     640:	57 e4       	ldi	r21, 0x47	; 71
     642:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     646:	18 16       	cp	r1, r24
     648:	4c f5       	brge	.+82     	; 0x69c <idle+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     64a:	6d a9       	ldd	r22, Y+53	; 0x35
     64c:	7e a9       	ldd	r23, Y+54	; 0x36
     64e:	8f a9       	ldd	r24, Y+55	; 0x37
     650:	98 ad       	ldd	r25, Y+56	; 0x38
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e2       	ldi	r20, 0x20	; 32
     658:	51 e4       	ldi	r21, 0x41	; 65
     65a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	bc 01       	movw	r22, r24
     664:	cd 01       	movw	r24, r26
     666:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	98 ab       	std	Y+48, r25	; 0x30
     670:	8f a7       	std	Y+47, r24	; 0x2f
     672:	0f c0       	rjmp	.+30     	; 0x692 <idle+0x22e>
     674:	80 e9       	ldi	r24, 0x90	; 144
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	9e a7       	std	Y+46, r25	; 0x2e
     67a:	8d a7       	std	Y+45, r24	; 0x2d
     67c:	8d a5       	ldd	r24, Y+45	; 0x2d
     67e:	9e a5       	ldd	r25, Y+46	; 0x2e
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	f1 f7       	brne	.-4      	; 0x680 <idle+0x21c>
     684:	9e a7       	std	Y+46, r25	; 0x2e
     686:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     688:	8f a5       	ldd	r24, Y+47	; 0x2f
     68a:	98 a9       	ldd	r25, Y+48	; 0x30
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	98 ab       	std	Y+48, r25	; 0x30
     690:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     692:	8f a5       	ldd	r24, Y+47	; 0x2f
     694:	98 a9       	ldd	r25, Y+48	; 0x30
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	69 f7       	brne	.-38     	; 0x674 <idle+0x210>
     69a:	14 c0       	rjmp	.+40     	; 0x6c4 <idle+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     69c:	69 a9       	ldd	r22, Y+49	; 0x31
     69e:	7a a9       	ldd	r23, Y+50	; 0x32
     6a0:	8b a9       	ldd	r24, Y+51	; 0x33
     6a2:	9c a9       	ldd	r25, Y+52	; 0x34
     6a4:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	98 ab       	std	Y+48, r25	; 0x30
     6ae:	8f a7       	std	Y+47, r24	; 0x2f
     6b0:	8f a5       	ldd	r24, Y+47	; 0x2f
     6b2:	98 a9       	ldd	r25, Y+48	; 0x30
     6b4:	9c a7       	std	Y+44, r25	; 0x2c
     6b6:	8b a7       	std	Y+43, r24	; 0x2b
     6b8:	8b a5       	ldd	r24, Y+43	; 0x2b
     6ba:	9c a5       	ldd	r25, Y+44	; 0x2c
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <idle+0x258>
     6c0:	9c a7       	std	Y+44, r25	; 0x2c
     6c2:	8b a7       	std	Y+43, r24	; 0x2b
 putchar1(0x36); _delay_ms(1);
     6c4:	86 e3       	ldi	r24, 0x36	; 54
     6c6:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	a0 e8       	ldi	r26, 0x80	; 128
     6d0:	bf e3       	ldi	r27, 0x3F	; 63
     6d2:	8f a3       	std	Y+39, r24	; 0x27
     6d4:	98 a7       	std	Y+40, r25	; 0x28
     6d6:	a9 a7       	std	Y+41, r26	; 0x29
     6d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6da:	6f a1       	ldd	r22, Y+39	; 0x27
     6dc:	78 a5       	ldd	r23, Y+40	; 0x28
     6de:	89 a5       	ldd	r24, Y+41	; 0x29
     6e0:	9a a5       	ldd	r25, Y+42	; 0x2a
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	4a e7       	ldi	r20, 0x7A	; 122
     6e8:	55 e4       	ldi	r21, 0x45	; 69
     6ea:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	8b a3       	std	Y+35, r24	; 0x23
     6f4:	9c a3       	std	Y+36, r25	; 0x24
     6f6:	ad a3       	std	Y+37, r26	; 0x25
     6f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     6fa:	6b a1       	ldd	r22, Y+35	; 0x23
     6fc:	7c a1       	ldd	r23, Y+36	; 0x24
     6fe:	8d a1       	ldd	r24, Y+37	; 0x25
     700:	9e a1       	ldd	r25, Y+38	; 0x26
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e8       	ldi	r20, 0x80	; 128
     708:	5f e3       	ldi	r21, 0x3F	; 63
     70a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     70e:	88 23       	and	r24, r24
     710:	2c f4       	brge	.+10     	; 0x71c <idle+0x2b8>
		__ticks = 1;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	9a a3       	std	Y+34, r25	; 0x22
     718:	89 a3       	std	Y+33, r24	; 0x21
     71a:	3f c0       	rjmp	.+126    	; 0x79a <idle+0x336>
	else if (__tmp > 65535)
     71c:	6b a1       	ldd	r22, Y+35	; 0x23
     71e:	7c a1       	ldd	r23, Y+36	; 0x24
     720:	8d a1       	ldd	r24, Y+37	; 0x25
     722:	9e a1       	ldd	r25, Y+38	; 0x26
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	3f ef       	ldi	r19, 0xFF	; 255
     728:	4f e7       	ldi	r20, 0x7F	; 127
     72a:	57 e4       	ldi	r21, 0x47	; 71
     72c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     730:	18 16       	cp	r1, r24
     732:	4c f5       	brge	.+82     	; 0x786 <idle+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     734:	6f a1       	ldd	r22, Y+39	; 0x27
     736:	78 a5       	ldd	r23, Y+40	; 0x28
     738:	89 a5       	ldd	r24, Y+41	; 0x29
     73a:	9a a5       	ldd	r25, Y+42	; 0x2a
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e2       	ldi	r20, 0x20	; 32
     742:	51 e4       	ldi	r21, 0x41	; 65
     744:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	bc 01       	movw	r22, r24
     74e:	cd 01       	movw	r24, r26
     750:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	9a a3       	std	Y+34, r25	; 0x22
     75a:	89 a3       	std	Y+33, r24	; 0x21
     75c:	0f c0       	rjmp	.+30     	; 0x77c <idle+0x318>
     75e:	80 e9       	ldi	r24, 0x90	; 144
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	98 a3       	std	Y+32, r25	; 0x20
     764:	8f 8f       	std	Y+31, r24	; 0x1f
     766:	8f 8d       	ldd	r24, Y+31	; 0x1f
     768:	98 a1       	ldd	r25, Y+32	; 0x20
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <idle+0x306>
     76e:	98 a3       	std	Y+32, r25	; 0x20
     770:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     772:	89 a1       	ldd	r24, Y+33	; 0x21
     774:	9a a1       	ldd	r25, Y+34	; 0x22
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	9a a3       	std	Y+34, r25	; 0x22
     77a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     77c:	89 a1       	ldd	r24, Y+33	; 0x21
     77e:	9a a1       	ldd	r25, Y+34	; 0x22
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	69 f7       	brne	.-38     	; 0x75e <idle+0x2fa>
     784:	14 c0       	rjmp	.+40     	; 0x7ae <idle+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     786:	6b a1       	ldd	r22, Y+35	; 0x23
     788:	7c a1       	ldd	r23, Y+36	; 0x24
     78a:	8d a1       	ldd	r24, Y+37	; 0x25
     78c:	9e a1       	ldd	r25, Y+38	; 0x26
     78e:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     792:	dc 01       	movw	r26, r24
     794:	cb 01       	movw	r24, r22
     796:	9a a3       	std	Y+34, r25	; 0x22
     798:	89 a3       	std	Y+33, r24	; 0x21
     79a:	89 a1       	ldd	r24, Y+33	; 0x21
     79c:	9a a1       	ldd	r25, Y+34	; 0x22
     79e:	9e 8f       	std	Y+30, r25	; 0x1e
     7a0:	8d 8f       	std	Y+29, r24	; 0x1d
     7a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <idle+0x342>
     7aa:	9e 8f       	std	Y+30, r25	; 0x1e
     7ac:	8d 8f       	std	Y+29, r24	; 0x1d
 putchar1(0x01); _delay_ms(1);
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 e8       	ldi	r26, 0x80	; 128
     7ba:	bf e3       	ldi	r27, 0x3F	; 63
     7bc:	89 8f       	std	Y+25, r24	; 0x19
     7be:	9a 8f       	std	Y+26, r25	; 0x1a
     7c0:	ab 8f       	std	Y+27, r26	; 0x1b
     7c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7c4:	69 8d       	ldd	r22, Y+25	; 0x19
     7c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	4a e7       	ldi	r20, 0x7A	; 122
     7d2:	55 e4       	ldi	r21, 0x45	; 69
     7d4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	8d 8b       	std	Y+21, r24	; 0x15
     7de:	9e 8b       	std	Y+22, r25	; 0x16
     7e0:	af 8b       	std	Y+23, r26	; 0x17
     7e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     7e4:	6d 89       	ldd	r22, Y+21	; 0x15
     7e6:	7e 89       	ldd	r23, Y+22	; 0x16
     7e8:	8f 89       	ldd	r24, Y+23	; 0x17
     7ea:	98 8d       	ldd	r25, Y+24	; 0x18
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e8       	ldi	r20, 0x80	; 128
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     7f8:	88 23       	and	r24, r24
     7fa:	2c f4       	brge	.+10     	; 0x806 <idle+0x3a2>
		__ticks = 1;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	9c 8b       	std	Y+20, r25	; 0x14
     802:	8b 8b       	std	Y+19, r24	; 0x13
     804:	3f c0       	rjmp	.+126    	; 0x884 <idle+0x420>
	else if (__tmp > 65535)
     806:	6d 89       	ldd	r22, Y+21	; 0x15
     808:	7e 89       	ldd	r23, Y+22	; 0x16
     80a:	8f 89       	ldd	r24, Y+23	; 0x17
     80c:	98 8d       	ldd	r25, Y+24	; 0x18
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	3f ef       	ldi	r19, 0xFF	; 255
     812:	4f e7       	ldi	r20, 0x7F	; 127
     814:	57 e4       	ldi	r21, 0x47	; 71
     816:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     81a:	18 16       	cp	r1, r24
     81c:	4c f5       	brge	.+82     	; 0x870 <idle+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     81e:	69 8d       	ldd	r22, Y+25	; 0x19
     820:	7a 8d       	ldd	r23, Y+26	; 0x1a
     822:	8b 8d       	ldd	r24, Y+27	; 0x1b
     824:	9c 8d       	ldd	r25, Y+28	; 0x1c
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e2       	ldi	r20, 0x20	; 32
     82c:	51 e4       	ldi	r21, 0x41	; 65
     82e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	bc 01       	movw	r22, r24
     838:	cd 01       	movw	r24, r26
     83a:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     83e:	dc 01       	movw	r26, r24
     840:	cb 01       	movw	r24, r22
     842:	9c 8b       	std	Y+20, r25	; 0x14
     844:	8b 8b       	std	Y+19, r24	; 0x13
     846:	0f c0       	rjmp	.+30     	; 0x866 <idle+0x402>
     848:	80 e9       	ldi	r24, 0x90	; 144
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	9a 8b       	std	Y+18, r25	; 0x12
     84e:	89 8b       	std	Y+17, r24	; 0x11
     850:	89 89       	ldd	r24, Y+17	; 0x11
     852:	9a 89       	ldd	r25, Y+18	; 0x12
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <idle+0x3f0>
     858:	9a 8b       	std	Y+18, r25	; 0x12
     85a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     85c:	8b 89       	ldd	r24, Y+19	; 0x13
     85e:	9c 89       	ldd	r25, Y+20	; 0x14
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	9c 8b       	std	Y+20, r25	; 0x14
     864:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     866:	8b 89       	ldd	r24, Y+19	; 0x13
     868:	9c 89       	ldd	r25, Y+20	; 0x14
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	69 f7       	brne	.-38     	; 0x848 <idle+0x3e4>
     86e:	14 c0       	rjmp	.+40     	; 0x898 <idle+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     870:	6d 89       	ldd	r22, Y+21	; 0x15
     872:	7e 89       	ldd	r23, Y+22	; 0x16
     874:	8f 89       	ldd	r24, Y+23	; 0x17
     876:	98 8d       	ldd	r25, Y+24	; 0x18
     878:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	9c 8b       	std	Y+20, r25	; 0x14
     882:	8b 8b       	std	Y+19, r24	; 0x13
     884:	8b 89       	ldd	r24, Y+19	; 0x13
     886:	9c 89       	ldd	r25, Y+20	; 0x14
     888:	98 8b       	std	Y+16, r25	; 0x10
     88a:	8f 87       	std	Y+15, r24	; 0x0f
     88c:	8f 85       	ldd	r24, Y+15	; 0x0f
     88e:	98 89       	ldd	r25, Y+16	; 0x10
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <idle+0x42c>
     894:	98 8b       	std	Y+16, r25	; 0x10
     896:	8f 87       	std	Y+15, r24	; 0x0f
 putchar1(0x03); _delay_ms(1);
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	a0 e8       	ldi	r26, 0x80	; 128
     8a4:	bf e3       	ldi	r27, 0x3F	; 63
     8a6:	8b 87       	std	Y+11, r24	; 0x0b
     8a8:	9c 87       	std	Y+12, r25	; 0x0c
     8aa:	ad 87       	std	Y+13, r26	; 0x0d
     8ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8ae:	6b 85       	ldd	r22, Y+11	; 0x0b
     8b0:	7c 85       	ldd	r23, Y+12	; 0x0c
     8b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     8b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	4a e7       	ldi	r20, 0x7A	; 122
     8bc:	55 e4       	ldi	r21, 0x45	; 69
     8be:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	8f 83       	std	Y+7, r24	; 0x07
     8c8:	98 87       	std	Y+8, r25	; 0x08
     8ca:	a9 87       	std	Y+9, r26	; 0x09
     8cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8ce:	6f 81       	ldd	r22, Y+7	; 0x07
     8d0:	78 85       	ldd	r23, Y+8	; 0x08
     8d2:	89 85       	ldd	r24, Y+9	; 0x09
     8d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e8       	ldi	r20, 0x80	; 128
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     8e2:	88 23       	and	r24, r24
     8e4:	2c f4       	brge	.+10     	; 0x8f0 <idle+0x48c>
		__ticks = 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	9e 83       	std	Y+6, r25	; 0x06
     8ec:	8d 83       	std	Y+5, r24	; 0x05
     8ee:	3f c0       	rjmp	.+126    	; 0x96e <idle+0x50a>
	else if (__tmp > 65535)
     8f0:	6f 81       	ldd	r22, Y+7	; 0x07
     8f2:	78 85       	ldd	r23, Y+8	; 0x08
     8f4:	89 85       	ldd	r24, Y+9	; 0x09
     8f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f e7       	ldi	r20, 0x7F	; 127
     8fe:	57 e4       	ldi	r21, 0x47	; 71
     900:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     904:	18 16       	cp	r1, r24
     906:	4c f5       	brge	.+82     	; 0x95a <idle+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     908:	6b 85       	ldd	r22, Y+11	; 0x0b
     90a:	7c 85       	ldd	r23, Y+12	; 0x0c
     90c:	8d 85       	ldd	r24, Y+13	; 0x0d
     90e:	9e 85       	ldd	r25, Y+14	; 0x0e
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e2       	ldi	r20, 0x20	; 32
     916:	51 e4       	ldi	r21, 0x41	; 65
     918:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	bc 01       	movw	r22, r24
     922:	cd 01       	movw	r24, r26
     924:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	9e 83       	std	Y+6, r25	; 0x06
     92e:	8d 83       	std	Y+5, r24	; 0x05
     930:	0f c0       	rjmp	.+30     	; 0x950 <idle+0x4ec>
     932:	80 e9       	ldi	r24, 0x90	; 144
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	9c 83       	std	Y+4, r25	; 0x04
     938:	8b 83       	std	Y+3, r24	; 0x03
     93a:	8b 81       	ldd	r24, Y+3	; 0x03
     93c:	9c 81       	ldd	r25, Y+4	; 0x04
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <idle+0x4da>
     942:	9c 83       	std	Y+4, r25	; 0x04
     944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	9e 83       	std	Y+6, r25	; 0x06
     94e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	9e 81       	ldd	r25, Y+6	; 0x06
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	69 f7       	brne	.-38     	; 0x932 <idle+0x4ce>
     958:	14 c0       	rjmp	.+40     	; 0x982 <idle+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     95a:	6f 81       	ldd	r22, Y+7	; 0x07
     95c:	78 85       	ldd	r23, Y+8	; 0x08
     95e:	89 85       	ldd	r24, Y+9	; 0x09
     960:	9a 85       	ldd	r25, Y+10	; 0x0a
     962:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	9e 83       	std	Y+6, r25	; 0x06
     96c:	8d 83       	std	Y+5, r24	; 0x05
     96e:	8d 81       	ldd	r24, Y+5	; 0x05
     970:	9e 81       	ldd	r25, Y+6	; 0x06
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <idle+0x516>
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
}
     982:	ca 5b       	subi	r28, 0xBA	; 186
     984:	df 4f       	sbci	r29, 0xFF	; 255
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <shot>:
 
void shot(){		//Camera Command(shot)
     99a:	df 93       	push	r29
     99c:	cf 93       	push	r28
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
 if(TEST)
 	printf("\r\nSHOT  ");
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <shot+0xa>
     9a4:	ed b7       	in	r30, 0x3d	; 61
     9a6:	fe b7       	in	r31, 0x3e	; 62
     9a8:	31 96       	adiw	r30, 0x01	; 1
     9aa:	80 e4       	ldi	r24, 0x40	; 64
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	91 83       	std	Z+1, r25	; 0x01
     9b0:	80 83       	st	Z, r24
     9b2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0

 command = SHOT;
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	90 93 2a 02 	sts	0x022A, r25
     9c2:	80 93 29 02 	sts	0x0229, r24
 idle_cnt = 0;
     9c6:	10 92 24 02 	sts	0x0224, r1
     9ca:	10 92 23 02 	sts	0x0223, r1
 shot_cnt = 0;
     9ce:	10 92 26 02 	sts	0x0226, r1
     9d2:	10 92 25 02 	sts	0x0225, r1
 putchar1(0x56);
     9d6:	86 e5       	ldi	r24, 0x56	; 86
     9d8:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x36);
     9e2:	86 e3       	ldi	r24, 0x36	; 54
     9e4:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x01);
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 img_cnt = 0;
     9f4:	10 92 1a 02 	sts	0x021A, r1
     9f8:	10 92 19 02 	sts	0x0219, r1
}
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	08 95       	ret

00000a02 <call_size>:
 
void call_size(){	//Camera Command(call_size)
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
 if(TEST)
 	printf("\r\nCALL_SIZE ");
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <call_size+0xa>
     a0c:	ed b7       	in	r30, 0x3d	; 61
     a0e:	fe b7       	in	r31, 0x3e	; 62
     a10:	31 96       	adiw	r30, 0x01	; 1
     a12:	89 e4       	ldi	r24, 0x49	; 73
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	91 83       	std	Z+1, r25	; 0x01
     a18:	80 83       	st	Z, r24
     a1a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0

 command = CALL_SIZE;
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	90 93 2a 02 	sts	0x022A, r25
     a2a:	80 93 29 02 	sts	0x0229, r24
 shot_cnt = 0;
     a2e:	10 92 26 02 	sts	0x0226, r1
     a32:	10 92 25 02 	sts	0x0225, r1
 call_size_cnt = 0;
     a36:	10 92 28 02 	sts	0x0228, r1
     a3a:	10 92 27 02 	sts	0x0227, r1
 call_size_flag = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 1c 02 	sts	0x021C, r25
     a46:	80 93 1b 02 	sts	0x021B, r24
 putchar1(0x56);
     a4a:	86 e5       	ldi	r24, 0x56	; 86
     a4c:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x34);
     a56:	84 e3       	ldi	r24, 0x34	; 52
     a58:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x01);
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
}
     a68:	cf 91       	pop	r28
     a6a:	df 91       	pop	r29
     a6c:	08 95       	ret

00000a6e <call_img>:
 
void call_img(){	//Camera Command(call_img)
     a6e:	df 93       	push	r29
     a70:	cf 93       	push	r28
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
 if(TEST)
 	printf("\r\nCALL_IMG ");
     a76:	00 d0       	rcall	.+0      	; 0xa78 <call_img+0xa>
     a78:	ed b7       	in	r30, 0x3d	; 61
     a7a:	fe b7       	in	r31, 0x3e	; 62
     a7c:	31 96       	adiw	r30, 0x01	; 1
     a7e:	86 e5       	ldi	r24, 0x56	; 86
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	80 83       	st	Z, r24
     a86:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
 command = 0;
     a8e:	10 92 2a 02 	sts	0x022A, r1
     a92:	10 92 29 02 	sts	0x0229, r1
 call_size_flag = 0;
     a96:	10 92 1c 02 	sts	0x021C, r1
     a9a:	10 92 1b 02 	sts	0x021B, r1
 call_img_flag = 1;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 1e 02 	sts	0x021E, r25
     aa6:	80 93 1d 02 	sts	0x021D, r24
 img_data_start_flag = 0;
     aaa:	10 92 20 02 	sts	0x0220, r1
     aae:	10 92 1f 02 	sts	0x021F, r1
 putchar1(0x56);
     ab2:	86 e5       	ldi	r24, 0x56	; 86
     ab4:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x32);
     abe:	82 e3       	ldi	r24, 0x32	; 50
     ac0:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x0c);
     ac4:	8c e0       	ldi	r24, 0x0C	; 12
     ac6:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x0A);
     ad0:	8a e0       	ldi	r24, 0x0A	; 10
     ad2:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(img_buffer[7]);
     afa:	80 91 07 01 	lds	r24, 0x0107
     afe:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(img_buffer[8]);
     b02:	80 91 08 01 	lds	r24, 0x0108
     b06:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x0A);
     b10:	8a e0       	ldi	r24, 0x0A	; 10
     b12:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 img_cnt = 0;
     b16:	10 92 1a 02 	sts	0x021A, r1
     b1a:	10 92 19 02 	sts	0x0219, r1
}
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	08 95       	ret

00000b24 <zip>:
 
void zip(){			//Camera Command(zip)
     b24:	df 93       	push	r29
     b26:	cf 93       	push	r28
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
 if(TEST)
 	printf("\r\nZIP  ");
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <zip+0xa>
     b2e:	ed b7       	in	r30, 0x3d	; 61
     b30:	fe b7       	in	r31, 0x3e	; 62
     b32:	31 96       	adiw	r30, 0x01	; 1
     b34:	82 e6       	ldi	r24, 0x62	; 98
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	91 83       	std	Z+1, r25	; 0x01
     b3a:	80 83       	st	Z, r24
     b3c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
 putchar1(0x56);
     b44:	86 e5       	ldi	r24, 0x56	; 86
     b46:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x00);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x31);
     b50:	81 e3       	ldi	r24, 0x31	; 49
     b52:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x05);
     b56:	85 e0       	ldi	r24, 0x05	; 5
     b58:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x01);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x01);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x12);
     b68:	82 e1       	ldi	r24, 0x12	; 18
     b6a:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0x04);
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 putchar1(0xFF);
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	0e 94 98 01 	call	0x330	; 0x330 <putchar1>
 img_cnt = 0;
     b7a:	10 92 1a 02 	sts	0x021A, r1
     b7e:	10 92 19 02 	sts	0x0219, r1
}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <init_camera>:

void init_camera()
{
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	c6 54       	subi	r28, 0x46	; 70
     b96:	d0 40       	sbci	r29, 0x00	; 0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
 if(TEST)
 	printf("INIT CAMERA CALL!\n");
     ba2:	8a e6       	ldi	r24, 0x6A	; 106
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <puts>

 reset(); _delay_ms(1000);
     baa:	0e 94 b1 01 	call	0x362	; 0x362 <reset>
     bae:	fe 01       	movw	r30, r28
     bb0:	ed 5b       	subi	r30, 0xBD	; 189
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	aa e7       	ldi	r26, 0x7A	; 122
     bba:	b4 e4       	ldi	r27, 0x44	; 68
     bbc:	80 83       	st	Z, r24
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	a2 83       	std	Z+2, r26	; 0x02
     bc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	8e 01       	movw	r16, r28
     bc6:	01 5c       	subi	r16, 0xC1	; 193
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
     bca:	fe 01       	movw	r30, r28
     bcc:	ed 5b       	subi	r30, 0xBD	; 189
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	60 81       	ld	r22, Z
     bd2:	71 81       	ldd	r23, Z+1	; 0x01
     bd4:	82 81       	ldd	r24, Z+2	; 0x02
     bd6:	93 81       	ldd	r25, Z+3	; 0x03
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	4a e7       	ldi	r20, 0x7A	; 122
     bde:	55 e4       	ldi	r21, 0x45	; 69
     be0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	f8 01       	movw	r30, r16
     bea:	80 83       	st	Z, r24
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	a2 83       	std	Z+2, r26	; 0x02
     bf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bf2:	fe 01       	movw	r30, r28
     bf4:	ff 96       	adiw	r30, 0x3f	; 63
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e8       	ldi	r20, 0x80	; 128
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     c0a:	88 23       	and	r24, r24
     c0c:	2c f4       	brge	.+10     	; 0xc18 <init_camera+0x90>
		__ticks = 1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9e af       	std	Y+62, r25	; 0x3e
     c14:	8d af       	std	Y+61, r24	; 0x3d
     c16:	46 c0       	rjmp	.+140    	; 0xca4 <init_camera+0x11c>
	else if (__tmp > 65535)
     c18:	fe 01       	movw	r30, r28
     c1a:	ff 96       	adiw	r30, 0x3f	; 63
     c1c:	60 81       	ld	r22, Z
     c1e:	71 81       	ldd	r23, Z+1	; 0x01
     c20:	82 81       	ldd	r24, Z+2	; 0x02
     c22:	93 81       	ldd	r25, Z+3	; 0x03
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	3f ef       	ldi	r19, 0xFF	; 255
     c28:	4f e7       	ldi	r20, 0x7F	; 127
     c2a:	57 e4       	ldi	r21, 0x47	; 71
     c2c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     c30:	18 16       	cp	r1, r24
     c32:	64 f5       	brge	.+88     	; 0xc8c <init_camera+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c34:	fe 01       	movw	r30, r28
     c36:	ed 5b       	subi	r30, 0xBD	; 189
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	60 81       	ld	r22, Z
     c3c:	71 81       	ldd	r23, Z+1	; 0x01
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e2       	ldi	r20, 0x20	; 32
     c48:	51 e4       	ldi	r21, 0x41	; 65
     c4a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	bc 01       	movw	r22, r24
     c54:	cd 01       	movw	r24, r26
     c56:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	9e af       	std	Y+62, r25	; 0x3e
     c60:	8d af       	std	Y+61, r24	; 0x3d
     c62:	0f c0       	rjmp	.+30     	; 0xc82 <init_camera+0xfa>
     c64:	80 e9       	ldi	r24, 0x90	; 144
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	9c af       	std	Y+60, r25	; 0x3c
     c6a:	8b af       	std	Y+59, r24	; 0x3b
     c6c:	8b ad       	ldd	r24, Y+59	; 0x3b
     c6e:	9c ad       	ldd	r25, Y+60	; 0x3c
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <init_camera+0xe8>
     c74:	9c af       	std	Y+60, r25	; 0x3c
     c76:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c78:	8d ad       	ldd	r24, Y+61	; 0x3d
     c7a:	9e ad       	ldd	r25, Y+62	; 0x3e
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	9e af       	std	Y+62, r25	; 0x3e
     c80:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c82:	8d ad       	ldd	r24, Y+61	; 0x3d
     c84:	9e ad       	ldd	r25, Y+62	; 0x3e
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	69 f7       	brne	.-38     	; 0xc64 <init_camera+0xdc>
     c8a:	16 c0       	rjmp	.+44     	; 0xcb8 <init_camera+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8c:	fe 01       	movw	r30, r28
     c8e:	ff 96       	adiw	r30, 0x3f	; 63
     c90:	60 81       	ld	r22, Z
     c92:	71 81       	ldd	r23, Z+1	; 0x01
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	93 81       	ldd	r25, Z+3	; 0x03
     c98:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9e af       	std	Y+62, r25	; 0x3e
     ca2:	8d af       	std	Y+61, r24	; 0x3d
     ca4:	8d ad       	ldd	r24, Y+61	; 0x3d
     ca6:	9e ad       	ldd	r25, Y+62	; 0x3e
     ca8:	9a af       	std	Y+58, r25	; 0x3a
     caa:	89 af       	std	Y+57, r24	; 0x39
     cac:	89 ad       	ldd	r24, Y+57	; 0x39
     cae:	9a ad       	ldd	r25, Y+58	; 0x3a
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <init_camera+0x128>
     cb4:	9a af       	std	Y+58, r25	; 0x3a
     cb6:	89 af       	std	Y+57, r24	; 0x39
 resize(); _delay_ms(50);
     cb8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <resize>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a8 e4       	ldi	r26, 0x48	; 72
     cc2:	b2 e4       	ldi	r27, 0x42	; 66
     cc4:	8d ab       	std	Y+53, r24	; 0x35
     cc6:	9e ab       	std	Y+54, r25	; 0x36
     cc8:	af ab       	std	Y+55, r26	; 0x37
     cca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ccc:	6d a9       	ldd	r22, Y+53	; 0x35
     cce:	7e a9       	ldd	r23, Y+54	; 0x36
     cd0:	8f a9       	ldd	r24, Y+55	; 0x37
     cd2:	98 ad       	ldd	r25, Y+56	; 0x38
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	4a e7       	ldi	r20, 0x7A	; 122
     cda:	55 e4       	ldi	r21, 0x45	; 69
     cdc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	89 ab       	std	Y+49, r24	; 0x31
     ce6:	9a ab       	std	Y+50, r25	; 0x32
     ce8:	ab ab       	std	Y+51, r26	; 0x33
     cea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cec:	69 a9       	ldd	r22, Y+49	; 0x31
     cee:	7a a9       	ldd	r23, Y+50	; 0x32
     cf0:	8b a9       	ldd	r24, Y+51	; 0x33
     cf2:	9c a9       	ldd	r25, Y+52	; 0x34
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e8       	ldi	r20, 0x80	; 128
     cfa:	5f e3       	ldi	r21, 0x3F	; 63
     cfc:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     d00:	88 23       	and	r24, r24
     d02:	2c f4       	brge	.+10     	; 0xd0e <init_camera+0x186>
		__ticks = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	98 ab       	std	Y+48, r25	; 0x30
     d0a:	8f a7       	std	Y+47, r24	; 0x2f
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <init_camera+0x204>
	else if (__tmp > 65535)
     d0e:	69 a9       	ldd	r22, Y+49	; 0x31
     d10:	7a a9       	ldd	r23, Y+50	; 0x32
     d12:	8b a9       	ldd	r24, Y+51	; 0x33
     d14:	9c a9       	ldd	r25, Y+52	; 0x34
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	3f ef       	ldi	r19, 0xFF	; 255
     d1a:	4f e7       	ldi	r20, 0x7F	; 127
     d1c:	57 e4       	ldi	r21, 0x47	; 71
     d1e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     d22:	18 16       	cp	r1, r24
     d24:	4c f5       	brge	.+82     	; 0xd78 <init_camera+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d26:	6d a9       	ldd	r22, Y+53	; 0x35
     d28:	7e a9       	ldd	r23, Y+54	; 0x36
     d2a:	8f a9       	ldd	r24, Y+55	; 0x37
     d2c:	98 ad       	ldd	r25, Y+56	; 0x38
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e2       	ldi	r20, 0x20	; 32
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	98 ab       	std	Y+48, r25	; 0x30
     d4c:	8f a7       	std	Y+47, r24	; 0x2f
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <init_camera+0x1e6>
     d50:	80 e9       	ldi	r24, 0x90	; 144
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	9e a7       	std	Y+46, r25	; 0x2e
     d56:	8d a7       	std	Y+45, r24	; 0x2d
     d58:	8d a5       	ldd	r24, Y+45	; 0x2d
     d5a:	9e a5       	ldd	r25, Y+46	; 0x2e
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <init_camera+0x1d4>
     d60:	9e a7       	std	Y+46, r25	; 0x2e
     d62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d64:	8f a5       	ldd	r24, Y+47	; 0x2f
     d66:	98 a9       	ldd	r25, Y+48	; 0x30
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	98 ab       	std	Y+48, r25	; 0x30
     d6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d70:	98 a9       	ldd	r25, Y+48	; 0x30
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	69 f7       	brne	.-38     	; 0xd50 <init_camera+0x1c8>
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <init_camera+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d78:	69 a9       	ldd	r22, Y+49	; 0x31
     d7a:	7a a9       	ldd	r23, Y+50	; 0x32
     d7c:	8b a9       	ldd	r24, Y+51	; 0x33
     d7e:	9c a9       	ldd	r25, Y+52	; 0x34
     d80:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	98 ab       	std	Y+48, r25	; 0x30
     d8a:	8f a7       	std	Y+47, r24	; 0x2f
     d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d8e:	98 a9       	ldd	r25, Y+48	; 0x30
     d90:	9c a7       	std	Y+44, r25	; 0x2c
     d92:	8b a7       	std	Y+43, r24	; 0x2b
     d94:	8b a5       	ldd	r24, Y+43	; 0x2b
     d96:	9c a5       	ldd	r25, Y+44	; 0x2c
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <init_camera+0x210>
     d9c:	9c a7       	std	Y+44, r25	; 0x2c
     d9e:	8b a7       	std	Y+43, r24	; 0x2b
 zip(); _delay_ms(50);
     da0:	0e 94 92 05 	call	0xb24	; 0xb24 <zip>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a8 e4       	ldi	r26, 0x48	; 72
     daa:	b2 e4       	ldi	r27, 0x42	; 66
     dac:	8f a3       	std	Y+39, r24	; 0x27
     dae:	98 a7       	std	Y+40, r25	; 0x28
     db0:	a9 a7       	std	Y+41, r26	; 0x29
     db2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db4:	6f a1       	ldd	r22, Y+39	; 0x27
     db6:	78 a5       	ldd	r23, Y+40	; 0x28
     db8:	89 a5       	ldd	r24, Y+41	; 0x29
     dba:	9a a5       	ldd	r25, Y+42	; 0x2a
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	4a e7       	ldi	r20, 0x7A	; 122
     dc2:	55 e4       	ldi	r21, 0x45	; 69
     dc4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	8b a3       	std	Y+35, r24	; 0x23
     dce:	9c a3       	std	Y+36, r25	; 0x24
     dd0:	ad a3       	std	Y+37, r26	; 0x25
     dd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dd4:	6b a1       	ldd	r22, Y+35	; 0x23
     dd6:	7c a1       	ldd	r23, Y+36	; 0x24
     dd8:	8d a1       	ldd	r24, Y+37	; 0x25
     dda:	9e a1       	ldd	r25, Y+38	; 0x26
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e8       	ldi	r20, 0x80	; 128
     de2:	5f e3       	ldi	r21, 0x3F	; 63
     de4:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     de8:	88 23       	and	r24, r24
     dea:	2c f4       	brge	.+10     	; 0xdf6 <init_camera+0x26e>
		__ticks = 1;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9a a3       	std	Y+34, r25	; 0x22
     df2:	89 a3       	std	Y+33, r24	; 0x21
     df4:	3f c0       	rjmp	.+126    	; 0xe74 <init_camera+0x2ec>
	else if (__tmp > 65535)
     df6:	6b a1       	ldd	r22, Y+35	; 0x23
     df8:	7c a1       	ldd	r23, Y+36	; 0x24
     dfa:	8d a1       	ldd	r24, Y+37	; 0x25
     dfc:	9e a1       	ldd	r25, Y+38	; 0x26
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	3f ef       	ldi	r19, 0xFF	; 255
     e02:	4f e7       	ldi	r20, 0x7F	; 127
     e04:	57 e4       	ldi	r21, 0x47	; 71
     e06:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     e0a:	18 16       	cp	r1, r24
     e0c:	4c f5       	brge	.+82     	; 0xe60 <init_camera+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0e:	6f a1       	ldd	r22, Y+39	; 0x27
     e10:	78 a5       	ldd	r23, Y+40	; 0x28
     e12:	89 a5       	ldd	r24, Y+41	; 0x29
     e14:	9a a5       	ldd	r25, Y+42	; 0x2a
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e2       	ldi	r20, 0x20	; 32
     e1c:	51 e4       	ldi	r21, 0x41	; 65
     e1e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	bc 01       	movw	r22, r24
     e28:	cd 01       	movw	r24, r26
     e2a:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	9a a3       	std	Y+34, r25	; 0x22
     e34:	89 a3       	std	Y+33, r24	; 0x21
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <init_camera+0x2ce>
     e38:	80 e9       	ldi	r24, 0x90	; 144
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	98 a3       	std	Y+32, r25	; 0x20
     e3e:	8f 8f       	std	Y+31, r24	; 0x1f
     e40:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e42:	98 a1       	ldd	r25, Y+32	; 0x20
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <init_camera+0x2bc>
     e48:	98 a3       	std	Y+32, r25	; 0x20
     e4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4c:	89 a1       	ldd	r24, Y+33	; 0x21
     e4e:	9a a1       	ldd	r25, Y+34	; 0x22
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	9a a3       	std	Y+34, r25	; 0x22
     e54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e56:	89 a1       	ldd	r24, Y+33	; 0x21
     e58:	9a a1       	ldd	r25, Y+34	; 0x22
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	69 f7       	brne	.-38     	; 0xe38 <init_camera+0x2b0>
     e5e:	14 c0       	rjmp	.+40     	; 0xe88 <init_camera+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e60:	6b a1       	ldd	r22, Y+35	; 0x23
     e62:	7c a1       	ldd	r23, Y+36	; 0x24
     e64:	8d a1       	ldd	r24, Y+37	; 0x25
     e66:	9e a1       	ldd	r25, Y+38	; 0x26
     e68:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9a a3       	std	Y+34, r25	; 0x22
     e72:	89 a3       	std	Y+33, r24	; 0x21
     e74:	89 a1       	ldd	r24, Y+33	; 0x21
     e76:	9a a1       	ldd	r25, Y+34	; 0x22
     e78:	9e 8f       	std	Y+30, r25	; 0x1e
     e7a:	8d 8f       	std	Y+29, r24	; 0x1d
     e7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <init_camera+0x2f8>
     e84:	9e 8f       	std	Y+30, r25	; 0x1e
     e86:	8d 8f       	std	Y+29, r24	; 0x1d
 set_rate(); _delay_ms(50);		//
     e88:	0e 94 06 02 	call	0x40c	; 0x40c <set_rate>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a8 e4       	ldi	r26, 0x48	; 72
     e92:	b2 e4       	ldi	r27, 0x42	; 66
     e94:	89 8f       	std	Y+25, r24	; 0x19
     e96:	9a 8f       	std	Y+26, r25	; 0x1a
     e98:	ab 8f       	std	Y+27, r26	; 0x1b
     e9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	69 8d       	ldd	r22, Y+25	; 0x19
     e9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a e7       	ldi	r20, 0x7A	; 122
     eaa:	55 e4       	ldi	r21, 0x45	; 69
     eac:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8d 8b       	std	Y+21, r24	; 0x15
     eb6:	9e 8b       	std	Y+22, r25	; 0x16
     eb8:	af 8b       	std	Y+23, r26	; 0x17
     eba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ebc:	6d 89       	ldd	r22, Y+21	; 0x15
     ebe:	7e 89       	ldd	r23, Y+22	; 0x16
     ec0:	8f 89       	ldd	r24, Y+23	; 0x17
     ec2:	98 8d       	ldd	r25, Y+24	; 0x18
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <init_camera+0x356>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 8b       	std	Y+20, r25	; 0x14
     eda:	8b 8b       	std	Y+19, r24	; 0x13
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <init_camera+0x3d4>
	else if (__tmp > 65535)
     ede:	6d 89       	ldd	r22, Y+21	; 0x15
     ee0:	7e 89       	ldd	r23, Y+22	; 0x16
     ee2:	8f 89       	ldd	r24, Y+23	; 0x17
     ee4:	98 8d       	ldd	r25, Y+24	; 0x18
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <init_camera+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	69 8d       	ldd	r22, Y+25	; 0x19
     ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9c 8b       	std	Y+20, r25	; 0x14
     f1c:	8b 8b       	std	Y+19, r24	; 0x13
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <init_camera+0x3b6>
     f20:	80 e9       	ldi	r24, 0x90	; 144
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	9a 8b       	std	Y+18, r25	; 0x12
     f26:	89 8b       	std	Y+17, r24	; 0x11
     f28:	89 89       	ldd	r24, Y+17	; 0x11
     f2a:	9a 89       	ldd	r25, Y+18	; 0x12
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <init_camera+0x3a4>
     f30:	9a 8b       	std	Y+18, r25	; 0x12
     f32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8b 89       	ldd	r24, Y+19	; 0x13
     f36:	9c 89       	ldd	r25, Y+20	; 0x14
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9c 8b       	std	Y+20, r25	; 0x14
     f3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8b 89       	ldd	r24, Y+19	; 0x13
     f40:	9c 89       	ldd	r25, Y+20	; 0x14
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <init_camera+0x398>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <init_camera+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6d 89       	ldd	r22, Y+21	; 0x15
     f4a:	7e 89       	ldd	r23, Y+22	; 0x16
     f4c:	8f 89       	ldd	r24, Y+23	; 0x17
     f4e:	98 8d       	ldd	r25, Y+24	; 0x18
     f50:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9c 8b       	std	Y+20, r25	; 0x14
     f5a:	8b 8b       	std	Y+19, r24	; 0x13
     f5c:	8b 89       	ldd	r24, Y+19	; 0x13
     f5e:	9c 89       	ldd	r25, Y+20	; 0x14
     f60:	98 8b       	std	Y+16, r25	; 0x10
     f62:	8f 87       	std	Y+15, r24	; 0x0f
     f64:	8f 85       	ldd	r24, Y+15	; 0x0f
     f66:	98 89       	ldd	r25, Y+16	; 0x10
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <init_camera+0x3e0>
     f6c:	98 8b       	std	Y+16, r25	; 0x10
     f6e:	8f 87       	std	Y+15, r24	; 0x0f
 UBRR0L = 0x08; printf("\r\n chang boudrate"); _delay_ms(50);
     f70:	e9 e2       	ldi	r30, 0x29	; 41
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	88 e0       	ldi	r24, 0x08	; 8
     f76:	80 83       	st	Z, r24
     f78:	00 d0       	rcall	.+0      	; 0xf7a <init_camera+0x3f2>
     f7a:	ed b7       	in	r30, 0x3d	; 61
     f7c:	fe b7       	in	r31, 0x3e	; 62
     f7e:	31 96       	adiw	r30, 0x01	; 1
     f80:	8c e7       	ldi	r24, 0x7C	; 124
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
     f88:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a8 e4       	ldi	r26, 0x48	; 72
     f96:	b2 e4       	ldi	r27, 0x42	; 66
     f98:	8b 87       	std	Y+11, r24	; 0x0b
     f9a:	9c 87       	std	Y+12, r25	; 0x0c
     f9c:	ad 87       	std	Y+13, r26	; 0x0d
     f9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4a e7       	ldi	r20, 0x7A	; 122
     fae:	55 e4       	ldi	r21, 0x45	; 69
     fb0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	8f 83       	std	Y+7, r24	; 0x07
     fba:	98 87       	std	Y+8, r25	; 0x08
     fbc:	a9 87       	std	Y+9, r26	; 0x09
     fbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <init_camera+0x45a>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	3f c0       	rjmp	.+126    	; 0x1060 <init_camera+0x4d8>
	else if (__tmp > 65535)
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	4f e7       	ldi	r20, 0x7F	; 127
     ff0:	57 e4       	ldi	r21, 0x47	; 71
     ff2:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	4c f5       	brge	.+82     	; 0x104c <init_camera+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <init_camera+0x4ba>
    1024:	80 e9       	ldi	r24, 0x90	; 144
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	9c 83       	std	Y+4, r25	; 0x04
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <init_camera+0x4a8>
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f7       	brne	.-38     	; 0x1024 <init_camera+0x49c>
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <init_camera+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <init_camera+0x4e4>
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
 idle();
    1074:	0e 94 32 02 	call	0x464	; 0x464 <idle>
}
    1078:	ca 5b       	subi	r28, 0xBA	; 186
    107a:	df 4f       	sbci	r29, 0xFF	; 255
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <port_init>:

void port_init(void)
{}
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Putchar>:
 
static int Putchar(char c, FILE *stream)//FILE 사용안함, 송신, avr->컴퓨터
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <Putchar+0x6>
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	7b 83       	std	Y+3, r23	; 0x03
    10ae:	6a 83       	std	Y+2, r22	; 0x02
 if(c == '\n')
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	8a 30       	cpi	r24, 0x0A	; 10
    10b4:	29 f4       	brne	.+10     	; 0x10c0 <Putchar+0x22>
  Putchar('\r', 0); 
    10b6:	8d e0       	ldi	r24, 0x0D	; 13
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	0e 94 4f 08 	call	0x109e	; 0x109e <Putchar>

 while(!(UCSR1A & 0x20)); // UDRE, data register empty
    10c0:	eb e9       	ldi	r30, 0x9B	; 155
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	80 72       	andi	r24, 0x20	; 32
    10cc:	90 70       	andi	r25, 0x00	; 0
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	b9 f3       	breq	.-18     	; 0x10c0 <Putchar+0x22>
   UDR1 = c;
    10d2:	ec e9       	ldi	r30, 0x9C	; 156
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	80 83       	st	Z, r24
 return 0;
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
}
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <Getchar>:
 
static int Getchar(FILE *stream)//수신, 컴퓨터->avr
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <Getchar+0x6>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01
 while(!(UCSR1A & 0x80));
    10f8:	eb e9       	ldi	r30, 0x9B	; 155
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 23       	and	r24, r24
    1100:	dc f7       	brge	.-10     	; 0x10f8 <Getchar+0xe>
 return UDR1;
    1102:	ec e9       	ldi	r30, 0x9C	; 156
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <uart0_init>:

void uart0_init(void) //
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    111e:	ea e2       	ldi	r30, 0x2A	; 42
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1124:	eb e2       	ldi	r30, 0x2B	; 43
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    112a:	e5 e9       	ldi	r30, 0x95	; 149
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	86 e0       	ldi	r24, 0x06	; 6
    1130:	80 83       	st	Z, r24
 UBRR0L = 0x08; //1152
    1132:	e9 e2       	ldi	r30, 0x29	; 41
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	88 e0       	ldi	r24, 0x08	; 8
    1138:	80 83       	st	Z, r24
 UBRR0H = 0x00; 
    113a:	e0 e9       	ldi	r30, 0x90	; 144
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	10 82       	st	Z, r1
 UCSR0B = 0b10011000; //수신만
    1140:	ea e2       	ldi	r30, 0x2A	; 42
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	88 e9       	ldi	r24, 0x98	; 152
    1146:	80 83       	st	Z, r24
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <uart1_init>:

void uart1_init(void) //PC와 통신
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
 UCSR1B = 0x00; //disable while setting baud rate
    1156:	ea e9       	ldi	r30, 0x9A	; 154
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	10 82       	st	Z, r1
 UCSR1A = 0x00;
    115c:	eb e9       	ldi	r30, 0x9B	; 155
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	10 82       	st	Z, r1
 UCSR1C = 0x06;
    1162:	ed e9       	ldi	r30, 0x9D	; 157
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	86 e0       	ldi	r24, 0x06	; 6
    1168:	80 83       	st	Z, r24
 UBRR1L = 0x08; //set baud rate 115200
    116a:	e9 e9       	ldi	r30, 0x99	; 153
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	88 e0       	ldi	r24, 0x08	; 8
    1170:	80 83       	st	Z, r24
 UBRR1H = 0x00; 
    1172:	e8 e9       	ldi	r30, 0x98	; 152
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	10 82       	st	Z, r1
 UCSR1B = 0b10011000; //송신 인터럽트 개방
    1178:	ea e9       	ldi	r30, 0x9A	; 154
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	88 e9       	ldi	r24, 0x98	; 152
    117e:	80 83       	st	Z, r24
}
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <init_devices>:
 
void init_devices(void)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
  cli(); //disable all interrupts
    118e:	f8 94       	cli
  port_init();
    1190:	0e 94 48 08 	call	0x1090	; 0x1090 <port_init>
  uart0_init();  
    1194:	0e 94 8b 08 	call	0x1116	; 0x1116 <uart0_init>
  uart1_init();
    1198:	0e 94 a7 08 	call	0x114e	; 0x114e <uart1_init>
  fdevopen(Putchar, Getchar);//file stream 0
    119c:	8f e4       	ldi	r24, 0x4F	; 79
    119e:	98 e0       	ldi	r25, 0x08	; 8
    11a0:	25 e7       	ldi	r18, 0x75	; 117
    11a2:	38 e0       	ldi	r19, 0x08	; 8
    11a4:	b9 01       	movw	r22, r18
    11a6:	0e 94 91 11 	call	0x2322	; 0x2322 <fdevopen>
  sei(); 
    11aa:	78 94       	sei
  //DDRF=0xF8;	//F 0, 1, 2(가슴)번 핀 입력 설정
  //ADCSRA = 0xFF;

  //DDRA=0x07;	//A 0, 1번 핀 출력 설정(진동) || 2번 핀 출력 설정 (LED)
  
  DDRE = 0x00;	//E 7, 6, 5, 4 입력 설정(인터럽트) -> e 7, 6, 5, 4, 사용 - 0, 1 카메라
    11ac:	e2 e2       	ldi	r30, 0x22	; 34
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	10 82       	st	Z, r1
  EICRB = 0x55;	//인터럽트 7, 6, 5, 4 하강,상승에지 인터럽트 요구 - O
    11b2:	ea e5       	ldi	r30, 0x5A	; 90
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	85 e5       	ldi	r24, 0x55	; 85
    11b8:	80 83       	st	Z, r24
  EIMSK |= 0x10;	//INT4 인터럽트 요구
    11ba:	a9 e5       	ldi	r26, 0x59	; 89
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e9 e5       	ldi	r30, 0x59	; 89
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 61       	ori	r24, 0x10	; 16
    11c6:	8c 93       	st	X, r24
  3 : ADIE : ***인터럽트 개별적으로 허용
  2~0 : 분주비 설정
  ADMUX = 0xC0;		//MUX 설정
  */

}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <init_buffer>:

void init_buffer(int select)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <init_buffer+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <init_buffer+0x8>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	switch(select)
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	99 f4       	brne	.+38     	; 0x120c <init_buffer+0x3e>
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    11e6:	1a 82       	std	Y+2, r1	; 0x02
    11e8:	19 82       	std	Y+1, r1	; 0x01
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <init_buffer+0x34>
			img_buffer[i] = 0x00;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	fc 01       	movw	r30, r24
    11f2:	e0 50       	subi	r30, 0x00	; 0
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	10 82       	st	Z, r1
	int i;
	
	switch(select)
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	89 30       	cpi	r24, 0x09	; 9
    1208:	91 05       	cpc	r25, r1
    120a:	84 f3       	brlt	.-32     	; 0x11ec <init_buffer+0x1e>
			img_buffer[i] = 0x00;
		break;
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <main>:
 
int main(void)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	6c 97       	sbiw	r28, 0x1c	; 28
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
 init_devices();
    122e:	0e 94 c3 08 	call	0x1186	; 0x1186 <init_devices>
 init_camera();
    1232:	0e 94 c4 05 	call	0xb88	; 0xb88 <init_camera>
 
 printf("\r\n\r\nConnect with IronMan_Suit\r\n");
    1236:	8e e8       	ldi	r24, 0x8E	; 142
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <puts>

 if(TEST)
 	printf("MAIN CALL_ME!\n");
    123e:	8d ea       	ldi	r24, 0xAD	; 173
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 f6 11 	call	0x23ec	; 0x23ec <puts>
		front_h = 0;
	}
	//ADCSRA = 0x00;
	*/
	// *** 카메라 관련 카운트*** //
	if(idle_cnt >= 3)	{
    1246:	80 91 23 02 	lds	r24, 0x0223
    124a:	90 91 24 02 	lds	r25, 0x0224
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	91 05       	cpc	r25, r1
    1252:	0c f4       	brge	.+2      	; 0x1256 <main+0x3c>
    1254:	74 c0       	rjmp	.+232    	; 0x133e <main+0x124>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a4 e3       	ldi	r26, 0x34	; 52
    125c:	b2 e4       	ldi	r27, 0x42	; 66
    125e:	89 8f       	std	Y+25, r24	; 0x19
    1260:	9a 8f       	std	Y+26, r25	; 0x1a
    1262:	ab 8f       	std	Y+27, r26	; 0x1b
    1264:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1266:	69 8d       	ldd	r22, Y+25	; 0x19
    1268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    126a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4a e7       	ldi	r20, 0x7A	; 122
    1274:	55 e4       	ldi	r21, 0x45	; 69
    1276:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	8d 8b       	std	Y+21, r24	; 0x15
    1280:	9e 8b       	std	Y+22, r25	; 0x16
    1282:	af 8b       	std	Y+23, r26	; 0x17
    1284:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1286:	6d 89       	ldd	r22, Y+21	; 0x15
    1288:	7e 89       	ldd	r23, Y+22	; 0x16
    128a:	8f 89       	ldd	r24, Y+23	; 0x17
    128c:	98 8d       	ldd	r25, Y+24	; 0x18
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	2c f4       	brge	.+10     	; 0x12a8 <main+0x8e>
		__ticks = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 8b       	std	Y+20, r25	; 0x14
    12a4:	8b 8b       	std	Y+19, r24	; 0x13
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <main+0x10c>
	else if (__tmp > 65535)
    12a8:	6d 89       	ldd	r22, Y+21	; 0x15
    12aa:	7e 89       	ldd	r23, Y+22	; 0x16
    12ac:	8f 89       	ldd	r24, Y+23	; 0x17
    12ae:	98 8d       	ldd	r25, Y+24	; 0x18
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	4c f5       	brge	.+82     	; 0x1312 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	69 8d       	ldd	r22, Y+25	; 0x19
    12c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9c 8b       	std	Y+20, r25	; 0x14
    12e6:	8b 8b       	std	Y+19, r24	; 0x13
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <main+0xee>
    12ea:	80 e9       	ldi	r24, 0x90	; 144
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	9a 8b       	std	Y+18, r25	; 0x12
    12f0:	89 8b       	std	Y+17, r24	; 0x11
    12f2:	89 89       	ldd	r24, Y+17	; 0x11
    12f4:	9a 89       	ldd	r25, Y+18	; 0x12
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <main+0xdc>
    12fa:	9a 8b       	std	Y+18, r25	; 0x12
    12fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1300:	9c 89       	ldd	r25, Y+20	; 0x14
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9c 8b       	std	Y+20, r25	; 0x14
    1306:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1308:	8b 89       	ldd	r24, Y+19	; 0x13
    130a:	9c 89       	ldd	r25, Y+20	; 0x14
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	69 f7       	brne	.-38     	; 0x12ea <main+0xd0>
    1310:	14 c0       	rjmp	.+40     	; 0x133a <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1312:	6d 89       	ldd	r22, Y+21	; 0x15
    1314:	7e 89       	ldd	r23, Y+22	; 0x16
    1316:	8f 89       	ldd	r24, Y+23	; 0x17
    1318:	98 8d       	ldd	r25, Y+24	; 0x18
    131a:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9c 8b       	std	Y+20, r25	; 0x14
    1324:	8b 8b       	std	Y+19, r24	; 0x13
    1326:	8b 89       	ldd	r24, Y+19	; 0x13
    1328:	9c 89       	ldd	r25, Y+20	; 0x14
    132a:	98 8b       	std	Y+16, r25	; 0x10
    132c:	8f 87       	std	Y+15, r24	; 0x0f
    132e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1330:	98 89       	ldd	r25, Y+16	; 0x10
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <main+0x118>
    1336:	98 8b       	std	Y+16, r25	; 0x10
    1338:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(45);
		shot();
    133a:	0e 94 cd 04 	call	0x99a	; 0x99a <shot>
	}
	
	if(shot_cnt == 5)
    133e:	80 91 25 02 	lds	r24, 0x0225
    1342:	90 91 26 02 	lds	r25, 0x0226
    1346:	85 30       	cpi	r24, 0x05	; 5
    1348:	91 05       	cpc	r25, r1
    134a:	11 f4       	brne	.+4      	; 0x1350 <main+0x136>
		call_size();
    134c:	0e 94 01 05 	call	0xa02	; 0xa02 <call_size>

	if(call_size_cnt == 9)	{
    1350:	80 91 27 02 	lds	r24, 0x0227
    1354:	90 91 28 02 	lds	r25, 0x0228
    1358:	89 30       	cpi	r24, 0x09	; 9
    135a:	91 05       	cpc	r25, r1
    135c:	09 f0       	breq	.+2      	; 0x1360 <main+0x146>
    135e:	73 cf       	rjmp	.-282    	; 0x1246 <main+0x2c>
	   //printf("#%x#%x\r\n", img_buffer[7], img_buffer[8]);
		call_size_cnt = 0;
    1360:	10 92 28 02 	sts	0x0228, r1
    1364:	10 92 27 02 	sts	0x0227, r1
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a8 e4       	ldi	r26, 0x48	; 72
    136e:	b2 e4       	ldi	r27, 0x42	; 66
    1370:	8b 87       	std	Y+11, r24	; 0x0b
    1372:	9c 87       	std	Y+12, r25	; 0x0c
    1374:	ad 87       	std	Y+13, r26	; 0x0d
    1376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	6b 85       	ldd	r22, Y+11	; 0x0b
    137a:	7c 85       	ldd	r23, Y+12	; 0x0c
    137c:	8d 85       	ldd	r24, Y+13	; 0x0d
    137e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a e7       	ldi	r20, 0x7A	; 122
    1386:	55 e4       	ldi	r21, 0x45	; 69
    1388:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8f 83       	std	Y+7, r24	; 0x07
    1392:	98 87       	std	Y+8, r25	; 0x08
    1394:	a9 87       	std	Y+9, r26	; 0x09
    1396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <main+0x1a0>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <main+0x21e>
	else if (__tmp > 65535)
    13ba:	6f 81       	ldd	r22, Y+7	; 0x07
    13bc:	78 85       	ldd	r23, Y+8	; 0x08
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <main+0x200>
    13fc:	80 e9       	ldi	r24, 0x90	; 144
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <main+0x1ee>
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <main+0x1e2>
    1422:	14 c0       	rjmp	.+40     	; 0x144c <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	6f 81       	ldd	r22, Y+7	; 0x07
    1426:	78 85       	ldd	r23, Y+8	; 0x08
    1428:	89 85       	ldd	r24, Y+9	; 0x09
    142a:	9a 85       	ldd	r25, Y+10	; 0x0a
    142c:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <main+0x22a>
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		call_img();
    144c:	0e 94 37 05 	call	0xa6e	; 0xa6e <call_img>
    1450:	fa ce       	rjmp	.-524    	; 0x1246 <main+0x2c>

00001452 <__vector_18>:
 return 0;

}

ISR(USART0_RX_vect)	//Camera의 수신완료 인터럽트
{
    1452:	1f 92       	push	r1
    1454:	0f 92       	push	r0
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	0f 92       	push	r0
    145a:	00 90 5b 00 	lds	r0, 0x005B
    145e:	0f 92       	push	r0
    1460:	11 24       	eor	r1, r1
    1462:	2f 93       	push	r18
    1464:	3f 93       	push	r19
    1466:	4f 93       	push	r20
    1468:	5f 93       	push	r21
    146a:	6f 93       	push	r22
    146c:	7f 93       	push	r23
    146e:	8f 93       	push	r24
    1470:	9f 93       	push	r25
    1472:	af 93       	push	r26
    1474:	bf 93       	push	r27
    1476:	ef 93       	push	r30
    1478:	ff 93       	push	r31
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	61 97       	sbiw	r28, 0x11	; 17
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	cd bf       	out	0x3d, r28	; 61
	char uart0_data = UDR0;
    1488:	ec e2       	ldi	r30, 0x2C	; 44
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 87       	std	Y+15, r24	; 0x0f

	switch(command)
    1490:	80 91 29 02 	lds	r24, 0x0229
    1494:	90 91 2a 02 	lds	r25, 0x022A
    1498:	99 8b       	std	Y+17, r25	; 0x11
    149a:	88 8b       	std	Y+16, r24	; 0x10
    149c:	88 89       	ldd	r24, Y+16	; 0x10
    149e:	99 89       	ldd	r25, Y+17	; 0x11
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	91 05       	cpc	r25, r1
    14a4:	a1 f0       	breq	.+40     	; 0x14ce <__vector_18+0x7c>
    14a6:	88 89       	ldd	r24, Y+16	; 0x10
    14a8:	99 89       	ldd	r25, Y+17	; 0x11
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	c9 f0       	breq	.+50     	; 0x14e2 <__vector_18+0x90>
    14b0:	88 89       	ldd	r24, Y+16	; 0x10
    14b2:	99 89       	ldd	r25, Y+17	; 0x11
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	e9 f4       	brne	.+58     	; 0x14f4 <__vector_18+0xa2>
	{
	case IDLE:
		idle_cnt++;
    14ba:	80 91 23 02 	lds	r24, 0x0223
    14be:	90 91 24 02 	lds	r25, 0x0224
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	90 93 24 02 	sts	0x0224, r25
    14c8:	80 93 23 02 	sts	0x0223, r24
    14cc:	13 c0       	rjmp	.+38     	; 0x14f4 <__vector_18+0xa2>
		break;
	case SHOT:
		shot_cnt++;
    14ce:	80 91 25 02 	lds	r24, 0x0225
    14d2:	90 91 26 02 	lds	r25, 0x0226
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	90 93 26 02 	sts	0x0226, r25
    14dc:	80 93 25 02 	sts	0x0225, r24
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <__vector_18+0xa2>
		break;
	case CALL_SIZE:
		call_size_cnt++;
    14e2:	80 91 27 02 	lds	r24, 0x0227
    14e6:	90 91 28 02 	lds	r25, 0x0228
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	90 93 28 02 	sts	0x0228, r25
    14f0:	80 93 27 02 	sts	0x0227, r24
		break;
	}
	
	if(call_size_flag == 1)	{
    14f4:	80 91 1b 02 	lds	r24, 0x021B
    14f8:	90 91 1c 02 	lds	r25, 0x021C
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	91 f4       	brne	.+36     	; 0x1526 <__vector_18+0xd4>
		img_buffer[img_cnt] = uart0_data;
    1502:	80 91 19 02 	lds	r24, 0x0219
    1506:	90 91 1a 02 	lds	r25, 0x021A
    150a:	fc 01       	movw	r30, r24
    150c:	e0 50       	subi	r30, 0x00	; 0
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	8f 85       	ldd	r24, Y+15	; 0x0f
    1512:	80 83       	st	Z, r24
		img_cnt++;
    1514:	80 91 19 02 	lds	r24, 0x0219
    1518:	90 91 1a 02 	lds	r25, 0x021A
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	90 93 1a 02 	sts	0x021A, r25
    1522:	80 93 19 02 	sts	0x0219, r24
	}

	if(uart0_data == 0xff)
    1526:	8f 85       	ldd	r24, Y+15	; 0x0f
    1528:	8f 3f       	cpi	r24, 0xFF	; 255
    152a:	31 f4       	brne	.+12     	; 0x1538 <__vector_18+0xe6>
		img_data_start_flag = 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	90 93 20 02 	sts	0x0220, r25
    1534:	80 93 1f 02 	sts	0x021F, r24
	
	if(uart0_data == 0xd9)
    1538:	8f 85       	ldd	r24, Y+15	; 0x0f
    153a:	89 3d       	cpi	r24, 0xD9	; 217
    153c:	39 f4       	brne	.+14     	; 0x154c <__vector_18+0xfa>
		img_data_cnt = 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	90 93 22 02 	sts	0x0222, r25
    1546:	80 93 21 02 	sts	0x0221, r24
    154a:	93 c0       	rjmp	.+294    	; 0x1672 <__vector_18+0x220>
	else	{
		if(uart0_data == 0x76 && img_data_cnt == 1)	{
    154c:	8f 85       	ldd	r24, Y+15	; 0x0f
    154e:	86 37       	cpi	r24, 0x76	; 118
    1550:	09 f0       	breq	.+2      	; 0x1554 <__vector_18+0x102>
    1552:	8b c0       	rjmp	.+278    	; 0x166a <__vector_18+0x218>
    1554:	80 91 21 02 	lds	r24, 0x0221
    1558:	90 91 22 02 	lds	r25, 0x0222
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	09 f0       	breq	.+2      	; 0x1564 <__vector_18+0x112>
    1562:	83 c0       	rjmp	.+262    	; 0x166a <__vector_18+0x218>
			img_data_start_flag = 0;
    1564:	10 92 20 02 	sts	0x0220, r1
    1568:	10 92 1f 02 	sts	0x021F, r1
			img_data_cnt = 0;
    156c:	10 92 22 02 	sts	0x0222, r1
    1570:	10 92 21 02 	sts	0x0221, r1
			printf("\n");
    1574:	8a e0       	ldi	r24, 0x0A	; 10
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 ef 11 	call	0x23de	; 0x23de <putchar>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a8 ec       	ldi	r26, 0xC8	; 200
    1582:	b2 e4       	ldi	r27, 0x42	; 66
    1584:	8b 87       	std	Y+11, r24	; 0x0b
    1586:	9c 87       	std	Y+12, r25	; 0x0c
    1588:	ad 87       	std	Y+13, r26	; 0x0d
    158a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	6b 85       	ldd	r22, Y+11	; 0x0b
    158e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1590:	8d 85       	ldd	r24, Y+13	; 0x0d
    1592:	9e 85       	ldd	r25, Y+14	; 0x0e
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a e7       	ldi	r20, 0x7A	; 122
    159a:	55 e4       	ldi	r21, 0x45	; 69
    159c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	8f 83       	std	Y+7, r24	; 0x07
    15a6:	98 87       	std	Y+8, r25	; 0x08
    15a8:	a9 87       	std	Y+9, r26	; 0x09
    15aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <__vector_18+0x17c>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <__vector_18+0x1fa>
	else if (__tmp > 65535)
    15ce:	6f 81       	ldd	r22, Y+7	; 0x07
    15d0:	78 85       	ldd	r23, Y+8	; 0x08
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <__vector_18+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9e 83       	std	Y+6, r25	; 0x06
    160c:	8d 83       	std	Y+5, r24	; 0x05
    160e:	0f c0       	rjmp	.+30     	; 0x162e <__vector_18+0x1dc>
    1610:	80 e9       	ldi	r24, 0x90	; 144
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	9c 83       	std	Y+4, r25	; 0x04
    1616:	8b 83       	std	Y+3, r24	; 0x03
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <__vector_18+0x1ca>
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f7       	brne	.-38     	; 0x1610 <__vector_18+0x1be>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <__vector_18+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	6f 81       	ldd	r22, Y+7	; 0x07
    163a:	78 85       	ldd	r23, Y+8	; 0x08
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1640:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <__vector_18+0x206>
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			init_buffer(CAMERA);
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 e7 08 	call	0x11ce	; 0x11ce <init_buffer>
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <__vector_18+0x220>
		}
		else
			img_data_cnt = 0;
    166a:	10 92 22 02 	sts	0x0222, r1
    166e:	10 92 21 02 	sts	0x0221, r1
	}

	if(call_img_flag == 1 && img_data_start_flag == 1)
    1672:	80 91 1d 02 	lds	r24, 0x021D
    1676:	90 91 1e 02 	lds	r25, 0x021E
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	59 f4       	brne	.+22     	; 0x1696 <__vector_18+0x244>
    1680:	80 91 1f 02 	lds	r24, 0x021F
    1684:	90 91 20 02 	lds	r25, 0x0220
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	21 f4       	brne	.+8      	; 0x1696 <__vector_18+0x244>
		UDR1 = uart0_data;
    168e:	ec e9       	ldi	r30, 0x9C	; 156
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8f 85       	ldd	r24, Y+15	; 0x0f
    1694:	80 83       	st	Z, r24
}
    1696:	61 96       	adiw	r28, 0x11	; 17
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	bf 91       	pop	r27
    16a6:	af 91       	pop	r26
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	7f 91       	pop	r23
    16ae:	6f 91       	pop	r22
    16b0:	5f 91       	pop	r21
    16b2:	4f 91       	pop	r20
    16b4:	3f 91       	pop	r19
    16b6:	2f 91       	pop	r18
    16b8:	0f 90       	pop	r0
    16ba:	00 92 5b 00 	sts	0x005B, r0
    16be:	0f 90       	pop	r0
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	0f 90       	pop	r0
    16c4:	1f 90       	pop	r1
    16c6:	18 95       	reti

000016c8 <__vector_30>:

ISR(USART1_RX_vect)	//Computer
{
    16c8:	1f 92       	push	r1
    16ca:	0f 92       	push	r0
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	0f 92       	push	r0
    16d0:	00 90 5b 00 	lds	r0, 0x005B
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	2f 93       	push	r18
    16da:	3f 93       	push	r19
    16dc:	4f 93       	push	r20
    16de:	5f 93       	push	r21
    16e0:	6f 93       	push	r22
    16e2:	7f 93       	push	r23
    16e4:	8f 93       	push	r24
    16e6:	9f 93       	push	r25
    16e8:	af 93       	push	r26
    16ea:	bf 93       	push	r27
    16ec:	ef 93       	push	r30
    16ee:	ff 93       	push	r31
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <__vector_30+0x2e>
    16f6:	0f 92       	push	r0
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	/*** 현재는 컴퓨터로부터 받는 데이터 ***/
	/*** 나중에는 스마트폰으로부터 받는 데이터 ***/
	
	char ch = UDR1;
    16fc:	ec e9       	ldi	r30, 0x9C	; 156
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	89 83       	std	Y+1, r24	; 0x01

	switch(ch)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3b 83       	std	Y+3, r19	; 0x03
    170c:	2a 83       	std	Y+2, r18	; 0x02
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	83 36       	cpi	r24, 0x63	; 99
    1714:	91 05       	cpc	r25, r1
    1716:	31 f0       	breq	.+12     	; 0x1724 <__vector_30+0x5c>
    1718:	2a 81       	ldd	r18, Y+2	; 0x02
    171a:	3b 81       	ldd	r19, Y+3	; 0x03
    171c:	24 36       	cpi	r18, 0x64	; 100
    171e:	31 05       	cpc	r19, r1
    1720:	41 f0       	breq	.+16     	; 0x1732 <__vector_30+0x6a>
    1722:	4a c0       	rjmp	.+148    	; 0x17b8 <__vector_30+0xf0>
	{
			case 'c':
			printf("c\n");
    1724:	8b eb       	ldi	r24, 0xBB	; 187
    1726:	91 e0       	ldi	r25, 0x01	; 1
    1728:	0e 94 f6 11 	call	0x23ec	; 0x23ec <puts>
			//ADCSRA = 0x00;	//ADC 인터럽트 디스에이블
			//EIMSK = 0x00;	//외부 인터럽트 디스에이블
			idle();
    172c:	0e 94 32 02 	call	0x464	; 0x464 <idle>
    1730:	43 c0       	rjmp	.+134    	; 0x17b8 <__vector_30+0xf0>
			break;

			case 'd'://
			printf("d");
    1732:	84 e6       	ldi	r24, 0x64	; 100
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 ef 11 	call	0x23de	; 0x23de <putchar>
			printf("idle cnt : %d\n", idle_cnt);
    173a:	20 91 23 02 	lds	r18, 0x0223
    173e:	30 91 24 02 	lds	r19, 0x0224
    1742:	00 d0       	rcall	.+0      	; 0x1744 <__vector_30+0x7c>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <__vector_30+0x7e>
    1746:	ed b7       	in	r30, 0x3d	; 61
    1748:	fe b7       	in	r31, 0x3e	; 62
    174a:	31 96       	adiw	r30, 0x01	; 1
    174c:	8d eb       	ldi	r24, 0xBD	; 189
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
    1754:	33 83       	std	Z+3, r19	; 0x03
    1756:	22 83       	std	Z+2, r18	; 0x02
    1758:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
			printf("shot_cnt : %d\n", shot_cnt);
    1764:	20 91 25 02 	lds	r18, 0x0225
    1768:	30 91 26 02 	lds	r19, 0x0226
    176c:	00 d0       	rcall	.+0      	; 0x176e <__vector_30+0xa6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <__vector_30+0xa8>
    1770:	ed b7       	in	r30, 0x3d	; 61
    1772:	fe b7       	in	r31, 0x3e	; 62
    1774:	31 96       	adiw	r30, 0x01	; 1
    1776:	8c ec       	ldi	r24, 0xCC	; 204
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
    177e:	33 83       	std	Z+3, r19	; 0x03
    1780:	22 83       	std	Z+2, r18	; 0x02
    1782:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
			printf("call_size_cnt : %d\n", call_size_cnt);
    178e:	20 91 27 02 	lds	r18, 0x0227
    1792:	30 91 28 02 	lds	r19, 0x0228
    1796:	00 d0       	rcall	.+0      	; 0x1798 <__vector_30+0xd0>
    1798:	00 d0       	rcall	.+0      	; 0x179a <__vector_30+0xd2>
    179a:	ed b7       	in	r30, 0x3d	; 61
    179c:	fe b7       	in	r31, 0x3e	; 62
    179e:	31 96       	adiw	r30, 0x01	; 1
    17a0:	8b ed       	ldi	r24, 0xDB	; 219
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
    17a8:	33 83       	std	Z+3, r19	; 0x03
    17aa:	22 83       	std	Z+2, r18	; 0x02
    17ac:	0e 94 dd 11 	call	0x23ba	; 0x23ba <printf>
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
			break;
	}
	
	if(TEST)
		printf("%c", UDR1);	
    17b8:	ec e9       	ldi	r30, 0x9C	; 156
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 ef 11 	call	0x23de	; 0x23de <putchar>
		printf("USART1 RX CALL!\n");
    17c6:	8f ee       	ldi	r24, 0xEF	; 239
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	0e 94 f6 11 	call	0x23ec	; 0x23ec <puts>

}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	ff 91       	pop	r31
    17da:	ef 91       	pop	r30
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	0f 90       	pop	r0
    17f2:	00 92 5b 00 	sts	0x005B, r0
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__fixunssfsi>:
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	7b 01       	movw	r14, r22
    180a:	8c 01       	movw	r16, r24
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	5f e4       	ldi	r21, 0x4F	; 79
    1814:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__gesf2>
    1818:	88 23       	and	r24, r24
    181a:	8c f0       	brlt	.+34     	; 0x183e <__fixunssfsi+0x3e>
    181c:	c8 01       	movw	r24, r16
    181e:	b7 01       	movw	r22, r14
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	5f e4       	ldi	r21, 0x4F	; 79
    1828:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__subsf3>
    182c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__fixsfsi>
    1830:	9b 01       	movw	r18, r22
    1832:	ac 01       	movw	r20, r24
    1834:	20 50       	subi	r18, 0x00	; 0
    1836:	30 40       	sbci	r19, 0x00	; 0
    1838:	40 40       	sbci	r20, 0x00	; 0
    183a:	50 48       	sbci	r21, 0x80	; 128
    183c:	06 c0       	rjmp	.+12     	; 0x184a <__fixunssfsi+0x4a>
    183e:	c8 01       	movw	r24, r16
    1840:	b7 01       	movw	r22, r14
    1842:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__fixsfsi>
    1846:	9b 01       	movw	r18, r22
    1848:	ac 01       	movw	r20, r24
    184a:	b9 01       	movw	r22, r18
    184c:	ca 01       	movw	r24, r20
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	08 95       	ret

00001858 <_fpadd_parts>:
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e2 e3       	ldi	r30, 0x32	; 50
    185e:	fc e0       	ldi	r31, 0x0C	; 12
    1860:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__prologue_saves__>
    1864:	dc 01       	movw	r26, r24
    1866:	2b 01       	movw	r4, r22
    1868:	fa 01       	movw	r30, r20
    186a:	9c 91       	ld	r25, X
    186c:	92 30       	cpi	r25, 0x02	; 2
    186e:	08 f4       	brcc	.+2      	; 0x1872 <_fpadd_parts+0x1a>
    1870:	39 c1       	rjmp	.+626    	; 0x1ae4 <_fpadd_parts+0x28c>
    1872:	eb 01       	movw	r28, r22
    1874:	88 81       	ld	r24, Y
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	08 f4       	brcc	.+2      	; 0x187c <_fpadd_parts+0x24>
    187a:	33 c1       	rjmp	.+614    	; 0x1ae2 <_fpadd_parts+0x28a>
    187c:	94 30       	cpi	r25, 0x04	; 4
    187e:	69 f4       	brne	.+26     	; 0x189a <_fpadd_parts+0x42>
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	09 f0       	breq	.+2      	; 0x1886 <_fpadd_parts+0x2e>
    1884:	2f c1       	rjmp	.+606    	; 0x1ae4 <_fpadd_parts+0x28c>
    1886:	11 96       	adiw	r26, 0x01	; 1
    1888:	9c 91       	ld	r25, X
    188a:	11 97       	sbiw	r26, 0x01	; 1
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	98 17       	cp	r25, r24
    1890:	09 f4       	brne	.+2      	; 0x1894 <_fpadd_parts+0x3c>
    1892:	28 c1       	rjmp	.+592    	; 0x1ae4 <_fpadd_parts+0x28c>
    1894:	af ef       	ldi	r26, 0xFF	; 255
    1896:	b1 e0       	ldi	r27, 0x01	; 1
    1898:	25 c1       	rjmp	.+586    	; 0x1ae4 <_fpadd_parts+0x28c>
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	09 f4       	brne	.+2      	; 0x18a0 <_fpadd_parts+0x48>
    189e:	21 c1       	rjmp	.+578    	; 0x1ae2 <_fpadd_parts+0x28a>
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	a9 f4       	brne	.+42     	; 0x18ce <_fpadd_parts+0x76>
    18a4:	92 30       	cpi	r25, 0x02	; 2
    18a6:	09 f0       	breq	.+2      	; 0x18aa <_fpadd_parts+0x52>
    18a8:	1d c1       	rjmp	.+570    	; 0x1ae4 <_fpadd_parts+0x28c>
    18aa:	9a 01       	movw	r18, r20
    18ac:	ad 01       	movw	r20, r26
    18ae:	88 e0       	ldi	r24, 0x08	; 8
    18b0:	ea 01       	movw	r28, r20
    18b2:	09 90       	ld	r0, Y+
    18b4:	ae 01       	movw	r20, r28
    18b6:	e9 01       	movw	r28, r18
    18b8:	09 92       	st	Y+, r0
    18ba:	9e 01       	movw	r18, r28
    18bc:	81 50       	subi	r24, 0x01	; 1
    18be:	c1 f7       	brne	.-16     	; 0x18b0 <_fpadd_parts+0x58>
    18c0:	e2 01       	movw	r28, r4
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	9c 91       	ld	r25, X
    18c8:	89 23       	and	r24, r25
    18ca:	81 83       	std	Z+1, r24	; 0x01
    18cc:	08 c1       	rjmp	.+528    	; 0x1ade <_fpadd_parts+0x286>
    18ce:	92 30       	cpi	r25, 0x02	; 2
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <_fpadd_parts+0x7c>
    18d2:	07 c1       	rjmp	.+526    	; 0x1ae2 <_fpadd_parts+0x28a>
    18d4:	12 96       	adiw	r26, 0x02	; 2
    18d6:	2d 90       	ld	r2, X+
    18d8:	3c 90       	ld	r3, X
    18da:	13 97       	sbiw	r26, 0x03	; 3
    18dc:	eb 01       	movw	r28, r22
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	14 96       	adiw	r26, 0x04	; 4
    18e4:	ad 90       	ld	r10, X+
    18e6:	bd 90       	ld	r11, X+
    18e8:	cd 90       	ld	r12, X+
    18ea:	dc 90       	ld	r13, X
    18ec:	17 97       	sbiw	r26, 0x07	; 7
    18ee:	ec 80       	ldd	r14, Y+4	; 0x04
    18f0:	fd 80       	ldd	r15, Y+5	; 0x05
    18f2:	0e 81       	ldd	r16, Y+6	; 0x06
    18f4:	1f 81       	ldd	r17, Y+7	; 0x07
    18f6:	91 01       	movw	r18, r2
    18f8:	28 1b       	sub	r18, r24
    18fa:	39 0b       	sbc	r19, r25
    18fc:	b9 01       	movw	r22, r18
    18fe:	37 ff       	sbrs	r19, 7
    1900:	04 c0       	rjmp	.+8      	; 0x190a <_fpadd_parts+0xb2>
    1902:	66 27       	eor	r22, r22
    1904:	77 27       	eor	r23, r23
    1906:	62 1b       	sub	r22, r18
    1908:	73 0b       	sbc	r23, r19
    190a:	60 32       	cpi	r22, 0x20	; 32
    190c:	71 05       	cpc	r23, r1
    190e:	0c f0       	brlt	.+2      	; 0x1912 <_fpadd_parts+0xba>
    1910:	61 c0       	rjmp	.+194    	; 0x19d4 <_fpadd_parts+0x17c>
    1912:	12 16       	cp	r1, r18
    1914:	13 06       	cpc	r1, r19
    1916:	6c f5       	brge	.+90     	; 0x1972 <_fpadd_parts+0x11a>
    1918:	37 01       	movw	r6, r14
    191a:	48 01       	movw	r8, r16
    191c:	06 2e       	mov	r0, r22
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <_fpadd_parts+0xd0>
    1920:	96 94       	lsr	r9
    1922:	87 94       	ror	r8
    1924:	77 94       	ror	r7
    1926:	67 94       	ror	r6
    1928:	0a 94       	dec	r0
    192a:	d2 f7       	brpl	.-12     	; 0x1920 <_fpadd_parts+0xc8>
    192c:	21 e0       	ldi	r18, 0x01	; 1
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	04 c0       	rjmp	.+8      	; 0x193e <_fpadd_parts+0xe6>
    1936:	22 0f       	add	r18, r18
    1938:	33 1f       	adc	r19, r19
    193a:	44 1f       	adc	r20, r20
    193c:	55 1f       	adc	r21, r21
    193e:	6a 95       	dec	r22
    1940:	d2 f7       	brpl	.-12     	; 0x1936 <_fpadd_parts+0xde>
    1942:	21 50       	subi	r18, 0x01	; 1
    1944:	30 40       	sbci	r19, 0x00	; 0
    1946:	40 40       	sbci	r20, 0x00	; 0
    1948:	50 40       	sbci	r21, 0x00	; 0
    194a:	2e 21       	and	r18, r14
    194c:	3f 21       	and	r19, r15
    194e:	40 23       	and	r20, r16
    1950:	51 23       	and	r21, r17
    1952:	21 15       	cp	r18, r1
    1954:	31 05       	cpc	r19, r1
    1956:	41 05       	cpc	r20, r1
    1958:	51 05       	cpc	r21, r1
    195a:	21 f0       	breq	.+8      	; 0x1964 <_fpadd_parts+0x10c>
    195c:	21 e0       	ldi	r18, 0x01	; 1
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	79 01       	movw	r14, r18
    1966:	8a 01       	movw	r16, r20
    1968:	e6 28       	or	r14, r6
    196a:	f7 28       	or	r15, r7
    196c:	08 29       	or	r16, r8
    196e:	19 29       	or	r17, r9
    1970:	3c c0       	rjmp	.+120    	; 0x19ea <_fpadd_parts+0x192>
    1972:	23 2b       	or	r18, r19
    1974:	d1 f1       	breq	.+116    	; 0x19ea <_fpadd_parts+0x192>
    1976:	26 0e       	add	r2, r22
    1978:	37 1e       	adc	r3, r23
    197a:	35 01       	movw	r6, r10
    197c:	46 01       	movw	r8, r12
    197e:	06 2e       	mov	r0, r22
    1980:	04 c0       	rjmp	.+8      	; 0x198a <_fpadd_parts+0x132>
    1982:	96 94       	lsr	r9
    1984:	87 94       	ror	r8
    1986:	77 94       	ror	r7
    1988:	67 94       	ror	r6
    198a:	0a 94       	dec	r0
    198c:	d2 f7       	brpl	.-12     	; 0x1982 <_fpadd_parts+0x12a>
    198e:	21 e0       	ldi	r18, 0x01	; 1
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <_fpadd_parts+0x148>
    1998:	22 0f       	add	r18, r18
    199a:	33 1f       	adc	r19, r19
    199c:	44 1f       	adc	r20, r20
    199e:	55 1f       	adc	r21, r21
    19a0:	6a 95       	dec	r22
    19a2:	d2 f7       	brpl	.-12     	; 0x1998 <_fpadd_parts+0x140>
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	30 40       	sbci	r19, 0x00	; 0
    19a8:	40 40       	sbci	r20, 0x00	; 0
    19aa:	50 40       	sbci	r21, 0x00	; 0
    19ac:	2a 21       	and	r18, r10
    19ae:	3b 21       	and	r19, r11
    19b0:	4c 21       	and	r20, r12
    19b2:	5d 21       	and	r21, r13
    19b4:	21 15       	cp	r18, r1
    19b6:	31 05       	cpc	r19, r1
    19b8:	41 05       	cpc	r20, r1
    19ba:	51 05       	cpc	r21, r1
    19bc:	21 f0       	breq	.+8      	; 0x19c6 <_fpadd_parts+0x16e>
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	59 01       	movw	r10, r18
    19c8:	6a 01       	movw	r12, r20
    19ca:	a6 28       	or	r10, r6
    19cc:	b7 28       	or	r11, r7
    19ce:	c8 28       	or	r12, r8
    19d0:	d9 28       	or	r13, r9
    19d2:	0b c0       	rjmp	.+22     	; 0x19ea <_fpadd_parts+0x192>
    19d4:	82 15       	cp	r24, r2
    19d6:	93 05       	cpc	r25, r3
    19d8:	2c f0       	brlt	.+10     	; 0x19e4 <_fpadd_parts+0x18c>
    19da:	1c 01       	movw	r2, r24
    19dc:	aa 24       	eor	r10, r10
    19de:	bb 24       	eor	r11, r11
    19e0:	65 01       	movw	r12, r10
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <_fpadd_parts+0x192>
    19e4:	ee 24       	eor	r14, r14
    19e6:	ff 24       	eor	r15, r15
    19e8:	87 01       	movw	r16, r14
    19ea:	11 96       	adiw	r26, 0x01	; 1
    19ec:	9c 91       	ld	r25, X
    19ee:	d2 01       	movw	r26, r4
    19f0:	11 96       	adiw	r26, 0x01	; 1
    19f2:	8c 91       	ld	r24, X
    19f4:	98 17       	cp	r25, r24
    19f6:	09 f4       	brne	.+2      	; 0x19fa <_fpadd_parts+0x1a2>
    19f8:	45 c0       	rjmp	.+138    	; 0x1a84 <_fpadd_parts+0x22c>
    19fa:	99 23       	and	r25, r25
    19fc:	39 f0       	breq	.+14     	; 0x1a0c <_fpadd_parts+0x1b4>
    19fe:	a8 01       	movw	r20, r16
    1a00:	97 01       	movw	r18, r14
    1a02:	2a 19       	sub	r18, r10
    1a04:	3b 09       	sbc	r19, r11
    1a06:	4c 09       	sbc	r20, r12
    1a08:	5d 09       	sbc	r21, r13
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <_fpadd_parts+0x1c0>
    1a0c:	a6 01       	movw	r20, r12
    1a0e:	95 01       	movw	r18, r10
    1a10:	2e 19       	sub	r18, r14
    1a12:	3f 09       	sbc	r19, r15
    1a14:	40 0b       	sbc	r20, r16
    1a16:	51 0b       	sbc	r21, r17
    1a18:	57 fd       	sbrc	r21, 7
    1a1a:	08 c0       	rjmp	.+16     	; 0x1a2c <_fpadd_parts+0x1d4>
    1a1c:	11 82       	std	Z+1, r1	; 0x01
    1a1e:	33 82       	std	Z+3, r3	; 0x03
    1a20:	22 82       	std	Z+2, r2	; 0x02
    1a22:	24 83       	std	Z+4, r18	; 0x04
    1a24:	35 83       	std	Z+5, r19	; 0x05
    1a26:	46 83       	std	Z+6, r20	; 0x06
    1a28:	57 83       	std	Z+7, r21	; 0x07
    1a2a:	1d c0       	rjmp	.+58     	; 0x1a66 <_fpadd_parts+0x20e>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	81 83       	std	Z+1, r24	; 0x01
    1a30:	33 82       	std	Z+3, r3	; 0x03
    1a32:	22 82       	std	Z+2, r2	; 0x02
    1a34:	88 27       	eor	r24, r24
    1a36:	99 27       	eor	r25, r25
    1a38:	dc 01       	movw	r26, r24
    1a3a:	82 1b       	sub	r24, r18
    1a3c:	93 0b       	sbc	r25, r19
    1a3e:	a4 0b       	sbc	r26, r20
    1a40:	b5 0b       	sbc	r27, r21
    1a42:	84 83       	std	Z+4, r24	; 0x04
    1a44:	95 83       	std	Z+5, r25	; 0x05
    1a46:	a6 83       	std	Z+6, r26	; 0x06
    1a48:	b7 83       	std	Z+7, r27	; 0x07
    1a4a:	0d c0       	rjmp	.+26     	; 0x1a66 <_fpadd_parts+0x20e>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	24 83       	std	Z+4, r18	; 0x04
    1a56:	35 83       	std	Z+5, r19	; 0x05
    1a58:	46 83       	std	Z+6, r20	; 0x06
    1a5a:	57 83       	std	Z+7, r21	; 0x07
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	93 83       	std	Z+3, r25	; 0x03
    1a64:	82 83       	std	Z+2, r24	; 0x02
    1a66:	24 81       	ldd	r18, Z+4	; 0x04
    1a68:	35 81       	ldd	r19, Z+5	; 0x05
    1a6a:	46 81       	ldd	r20, Z+6	; 0x06
    1a6c:	57 81       	ldd	r21, Z+7	; 0x07
    1a6e:	da 01       	movw	r26, r20
    1a70:	c9 01       	movw	r24, r18
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	a1 09       	sbc	r26, r1
    1a76:	b1 09       	sbc	r27, r1
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	af 4f       	sbci	r26, 0xFF	; 255
    1a7e:	bf 43       	sbci	r27, 0x3F	; 63
    1a80:	28 f3       	brcs	.-54     	; 0x1a4c <_fpadd_parts+0x1f4>
    1a82:	0b c0       	rjmp	.+22     	; 0x1a9a <_fpadd_parts+0x242>
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	33 82       	std	Z+3, r3	; 0x03
    1a88:	22 82       	std	Z+2, r2	; 0x02
    1a8a:	ea 0c       	add	r14, r10
    1a8c:	fb 1c       	adc	r15, r11
    1a8e:	0c 1d       	adc	r16, r12
    1a90:	1d 1d       	adc	r17, r13
    1a92:	e4 82       	std	Z+4, r14	; 0x04
    1a94:	f5 82       	std	Z+5, r15	; 0x05
    1a96:	06 83       	std	Z+6, r16	; 0x06
    1a98:	17 83       	std	Z+7, r17	; 0x07
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	80 83       	st	Z, r24
    1a9e:	24 81       	ldd	r18, Z+4	; 0x04
    1aa0:	35 81       	ldd	r19, Z+5	; 0x05
    1aa2:	46 81       	ldd	r20, Z+6	; 0x06
    1aa4:	57 81       	ldd	r21, Z+7	; 0x07
    1aa6:	57 ff       	sbrs	r21, 7
    1aa8:	1a c0       	rjmp	.+52     	; 0x1ade <_fpadd_parts+0x286>
    1aaa:	c9 01       	movw	r24, r18
    1aac:	aa 27       	eor	r26, r26
    1aae:	97 fd       	sbrc	r25, 7
    1ab0:	a0 95       	com	r26
    1ab2:	ba 2f       	mov	r27, r26
    1ab4:	81 70       	andi	r24, 0x01	; 1
    1ab6:	90 70       	andi	r25, 0x00	; 0
    1ab8:	a0 70       	andi	r26, 0x00	; 0
    1aba:	b0 70       	andi	r27, 0x00	; 0
    1abc:	56 95       	lsr	r21
    1abe:	47 95       	ror	r20
    1ac0:	37 95       	ror	r19
    1ac2:	27 95       	ror	r18
    1ac4:	82 2b       	or	r24, r18
    1ac6:	93 2b       	or	r25, r19
    1ac8:	a4 2b       	or	r26, r20
    1aca:	b5 2b       	or	r27, r21
    1acc:	84 83       	std	Z+4, r24	; 0x04
    1ace:	95 83       	std	Z+5, r25	; 0x05
    1ad0:	a6 83       	std	Z+6, r26	; 0x06
    1ad2:	b7 83       	std	Z+7, r27	; 0x07
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	93 83       	std	Z+3, r25	; 0x03
    1adc:	82 83       	std	Z+2, r24	; 0x02
    1ade:	df 01       	movw	r26, r30
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <_fpadd_parts+0x28c>
    1ae2:	d2 01       	movw	r26, r4
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	e2 e1       	ldi	r30, 0x12	; 18
    1aec:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__epilogue_restores__>

00001af0 <__subsf3>:
    1af0:	a0 e2       	ldi	r26, 0x20	; 32
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ee e7       	ldi	r30, 0x7E	; 126
    1af6:	fd e0       	ldi	r31, 0x0D	; 13
    1af8:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__+0x18>
    1afc:	69 83       	std	Y+1, r22	; 0x01
    1afe:	7a 83       	std	Y+2, r23	; 0x02
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	2d 83       	std	Y+5, r18	; 0x05
    1b06:	3e 83       	std	Y+6, r19	; 0x06
    1b08:	4f 83       	std	Y+7, r20	; 0x07
    1b0a:	58 87       	std	Y+8, r21	; 0x08
    1b0c:	e9 e0       	ldi	r30, 0x09	; 9
    1b0e:	ee 2e       	mov	r14, r30
    1b10:	f1 2c       	mov	r15, r1
    1b12:	ec 0e       	add	r14, r28
    1b14:	fd 1e       	adc	r15, r29
    1b16:	ce 01       	movw	r24, r28
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1b20:	8e 01       	movw	r16, r28
    1b22:	0f 5e       	subi	r16, 0xEF	; 239
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	ce 01       	movw	r24, r28
    1b28:	05 96       	adiw	r24, 0x05	; 5
    1b2a:	b8 01       	movw	r22, r16
    1b2c:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1b30:	8a 89       	ldd	r24, Y+18	; 0x12
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	89 27       	eor	r24, r25
    1b36:	8a 8b       	std	Y+18, r24	; 0x12
    1b38:	c7 01       	movw	r24, r14
    1b3a:	b8 01       	movw	r22, r16
    1b3c:	ae 01       	movw	r20, r28
    1b3e:	47 5e       	subi	r20, 0xE7	; 231
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_fpadd_parts>
    1b46:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__pack_f>
    1b4a:	a0 96       	adiw	r28, 0x20	; 32
    1b4c:	e6 e0       	ldi	r30, 0x06	; 6
    1b4e:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__+0x18>

00001b52 <__addsf3>:
    1b52:	a0 e2       	ldi	r26, 0x20	; 32
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	ef ea       	ldi	r30, 0xAF	; 175
    1b58:	fd e0       	ldi	r31, 0x0D	; 13
    1b5a:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__+0x18>
    1b5e:	69 83       	std	Y+1, r22	; 0x01
    1b60:	7a 83       	std	Y+2, r23	; 0x02
    1b62:	8b 83       	std	Y+3, r24	; 0x03
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	2d 83       	std	Y+5, r18	; 0x05
    1b68:	3e 83       	std	Y+6, r19	; 0x06
    1b6a:	4f 83       	std	Y+7, r20	; 0x07
    1b6c:	58 87       	std	Y+8, r21	; 0x08
    1b6e:	f9 e0       	ldi	r31, 0x09	; 9
    1b70:	ef 2e       	mov	r14, r31
    1b72:	f1 2c       	mov	r15, r1
    1b74:	ec 0e       	add	r14, r28
    1b76:	fd 1e       	adc	r15, r29
    1b78:	ce 01       	movw	r24, r28
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	b7 01       	movw	r22, r14
    1b7e:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1b82:	8e 01       	movw	r16, r28
    1b84:	0f 5e       	subi	r16, 0xEF	; 239
    1b86:	1f 4f       	sbci	r17, 0xFF	; 255
    1b88:	ce 01       	movw	r24, r28
    1b8a:	05 96       	adiw	r24, 0x05	; 5
    1b8c:	b8 01       	movw	r22, r16
    1b8e:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1b92:	c7 01       	movw	r24, r14
    1b94:	b8 01       	movw	r22, r16
    1b96:	ae 01       	movw	r20, r28
    1b98:	47 5e       	subi	r20, 0xE7	; 231
    1b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_fpadd_parts>
    1ba0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__pack_f>
    1ba4:	a0 96       	adiw	r28, 0x20	; 32
    1ba6:	e6 e0       	ldi	r30, 0x06	; 6
    1ba8:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__+0x18>

00001bac <__mulsf3>:
    1bac:	a0 e2       	ldi	r26, 0x20	; 32
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ec ed       	ldi	r30, 0xDC	; 220
    1bb2:	fd e0       	ldi	r31, 0x0D	; 13
    1bb4:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__prologue_saves__>
    1bb8:	69 83       	std	Y+1, r22	; 0x01
    1bba:	7a 83       	std	Y+2, r23	; 0x02
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	2d 83       	std	Y+5, r18	; 0x05
    1bc2:	3e 83       	std	Y+6, r19	; 0x06
    1bc4:	4f 83       	std	Y+7, r20	; 0x07
    1bc6:	58 87       	std	Y+8, r21	; 0x08
    1bc8:	ce 01       	movw	r24, r28
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	be 01       	movw	r22, r28
    1bce:	67 5f       	subi	r22, 0xF7	; 247
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	05 96       	adiw	r24, 0x05	; 5
    1bda:	be 01       	movw	r22, r28
    1bdc:	6f 5e       	subi	r22, 0xEF	; 239
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1be4:	99 85       	ldd	r25, Y+9	; 0x09
    1be6:	92 30       	cpi	r25, 0x02	; 2
    1be8:	88 f0       	brcs	.+34     	; 0x1c0c <__mulsf3+0x60>
    1bea:	89 89       	ldd	r24, Y+17	; 0x11
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	c8 f0       	brcs	.+50     	; 0x1c22 <__mulsf3+0x76>
    1bf0:	94 30       	cpi	r25, 0x04	; 4
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <__mulsf3+0x4e>
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	51 f4       	brne	.+20     	; 0x1c0c <__mulsf3+0x60>
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <__mulsf3+0x56>
    1bfa:	84 30       	cpi	r24, 0x04	; 4
    1bfc:	29 f4       	brne	.+10     	; 0x1c08 <__mulsf3+0x5c>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	81 f4       	brne	.+32     	; 0x1c22 <__mulsf3+0x76>
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	c6 c0       	rjmp	.+396    	; 0x1d94 <__mulsf3+0x1e8>
    1c08:	92 30       	cpi	r25, 0x02	; 2
    1c0a:	49 f4       	brne	.+18     	; 0x1c1e <__mulsf3+0x72>
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	8a 89       	ldd	r24, Y+18	; 0x12
    1c12:	98 13       	cpse	r25, r24
    1c14:	21 e0       	ldi	r18, 0x01	; 1
    1c16:	2a 87       	std	Y+10, r18	; 0x0a
    1c18:	ce 01       	movw	r24, r28
    1c1a:	09 96       	adiw	r24, 0x09	; 9
    1c1c:	bb c0       	rjmp	.+374    	; 0x1d94 <__mulsf3+0x1e8>
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	49 f4       	brne	.+18     	; 0x1c34 <__mulsf3+0x88>
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	8a 89       	ldd	r24, Y+18	; 0x12
    1c28:	98 13       	cpse	r25, r24
    1c2a:	21 e0       	ldi	r18, 0x01	; 1
    1c2c:	2a 8b       	std	Y+18, r18	; 0x12
    1c2e:	ce 01       	movw	r24, r28
    1c30:	41 96       	adiw	r24, 0x11	; 17
    1c32:	b0 c0       	rjmp	.+352    	; 0x1d94 <__mulsf3+0x1e8>
    1c34:	2d 84       	ldd	r2, Y+13	; 0x0d
    1c36:	3e 84       	ldd	r3, Y+14	; 0x0e
    1c38:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c3a:	58 88       	ldd	r5, Y+16	; 0x10
    1c3c:	6d 88       	ldd	r6, Y+21	; 0x15
    1c3e:	7e 88       	ldd	r7, Y+22	; 0x16
    1c40:	8f 88       	ldd	r8, Y+23	; 0x17
    1c42:	98 8c       	ldd	r9, Y+24	; 0x18
    1c44:	ee 24       	eor	r14, r14
    1c46:	ff 24       	eor	r15, r15
    1c48:	87 01       	movw	r16, r14
    1c4a:	aa 24       	eor	r10, r10
    1c4c:	bb 24       	eor	r11, r11
    1c4e:	65 01       	movw	r12, r10
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	e0 e0       	ldi	r30, 0x00	; 0
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	c1 01       	movw	r24, r2
    1c5e:	81 70       	andi	r24, 0x01	; 1
    1c60:	90 70       	andi	r25, 0x00	; 0
    1c62:	89 2b       	or	r24, r25
    1c64:	e9 f0       	breq	.+58     	; 0x1ca0 <__mulsf3+0xf4>
    1c66:	e6 0c       	add	r14, r6
    1c68:	f7 1c       	adc	r15, r7
    1c6a:	08 1d       	adc	r16, r8
    1c6c:	19 1d       	adc	r17, r9
    1c6e:	9a 01       	movw	r18, r20
    1c70:	ab 01       	movw	r20, r22
    1c72:	2a 0d       	add	r18, r10
    1c74:	3b 1d       	adc	r19, r11
    1c76:	4c 1d       	adc	r20, r12
    1c78:	5d 1d       	adc	r21, r13
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 e0       	ldi	r26, 0x00	; 0
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e6 14       	cp	r14, r6
    1c84:	f7 04       	cpc	r15, r7
    1c86:	08 05       	cpc	r16, r8
    1c88:	19 05       	cpc	r17, r9
    1c8a:	20 f4       	brcc	.+8      	; 0x1c94 <__mulsf3+0xe8>
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ba 01       	movw	r22, r20
    1c96:	a9 01       	movw	r20, r18
    1c98:	48 0f       	add	r20, r24
    1c9a:	59 1f       	adc	r21, r25
    1c9c:	6a 1f       	adc	r22, r26
    1c9e:	7b 1f       	adc	r23, r27
    1ca0:	aa 0c       	add	r10, r10
    1ca2:	bb 1c       	adc	r11, r11
    1ca4:	cc 1c       	adc	r12, r12
    1ca6:	dd 1c       	adc	r13, r13
    1ca8:	97 fe       	sbrs	r9, 7
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <__mulsf3+0x110>
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e0       	ldi	r26, 0x00	; 0
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	a8 2a       	or	r10, r24
    1cb6:	b9 2a       	or	r11, r25
    1cb8:	ca 2a       	or	r12, r26
    1cba:	db 2a       	or	r13, r27
    1cbc:	31 96       	adiw	r30, 0x01	; 1
    1cbe:	e0 32       	cpi	r30, 0x20	; 32
    1cc0:	f1 05       	cpc	r31, r1
    1cc2:	49 f0       	breq	.+18     	; 0x1cd6 <__mulsf3+0x12a>
    1cc4:	66 0c       	add	r6, r6
    1cc6:	77 1c       	adc	r7, r7
    1cc8:	88 1c       	adc	r8, r8
    1cca:	99 1c       	adc	r9, r9
    1ccc:	56 94       	lsr	r5
    1cce:	47 94       	ror	r4
    1cd0:	37 94       	ror	r3
    1cd2:	27 94       	ror	r2
    1cd4:	c3 cf       	rjmp	.-122    	; 0x1c5c <__mulsf3+0xb0>
    1cd6:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cd8:	ea 89       	ldd	r30, Y+18	; 0x12
    1cda:	2b 89       	ldd	r18, Y+19	; 0x13
    1cdc:	3c 89       	ldd	r19, Y+20	; 0x14
    1cde:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ce0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ce2:	28 0f       	add	r18, r24
    1ce4:	39 1f       	adc	r19, r25
    1ce6:	2e 5f       	subi	r18, 0xFE	; 254
    1ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cea:	17 c0       	rjmp	.+46     	; 0x1d1a <__mulsf3+0x16e>
    1cec:	ca 01       	movw	r24, r20
    1cee:	81 70       	andi	r24, 0x01	; 1
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	89 2b       	or	r24, r25
    1cf4:	61 f0       	breq	.+24     	; 0x1d0e <__mulsf3+0x162>
    1cf6:	16 95       	lsr	r17
    1cf8:	07 95       	ror	r16
    1cfa:	f7 94       	ror	r15
    1cfc:	e7 94       	ror	r14
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e8       	ldi	r27, 0x80	; 128
    1d06:	e8 2a       	or	r14, r24
    1d08:	f9 2a       	or	r15, r25
    1d0a:	0a 2b       	or	r16, r26
    1d0c:	1b 2b       	or	r17, r27
    1d0e:	76 95       	lsr	r23
    1d10:	67 95       	ror	r22
    1d12:	57 95       	ror	r21
    1d14:	47 95       	ror	r20
    1d16:	2f 5f       	subi	r18, 0xFF	; 255
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	77 fd       	sbrc	r23, 7
    1d1c:	e7 cf       	rjmp	.-50     	; 0x1cec <__mulsf3+0x140>
    1d1e:	0c c0       	rjmp	.+24     	; 0x1d38 <__mulsf3+0x18c>
    1d20:	44 0f       	add	r20, r20
    1d22:	55 1f       	adc	r21, r21
    1d24:	66 1f       	adc	r22, r22
    1d26:	77 1f       	adc	r23, r23
    1d28:	17 fd       	sbrc	r17, 7
    1d2a:	41 60       	ori	r20, 0x01	; 1
    1d2c:	ee 0c       	add	r14, r14
    1d2e:	ff 1c       	adc	r15, r15
    1d30:	00 1f       	adc	r16, r16
    1d32:	11 1f       	adc	r17, r17
    1d34:	21 50       	subi	r18, 0x01	; 1
    1d36:	30 40       	sbci	r19, 0x00	; 0
    1d38:	40 30       	cpi	r20, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	59 07       	cpc	r21, r25
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	69 07       	cpc	r22, r25
    1d42:	90 e4       	ldi	r25, 0x40	; 64
    1d44:	79 07       	cpc	r23, r25
    1d46:	60 f3       	brcs	.-40     	; 0x1d20 <__mulsf3+0x174>
    1d48:	2b 8f       	std	Y+27, r18	; 0x1b
    1d4a:	3c 8f       	std	Y+28, r19	; 0x1c
    1d4c:	db 01       	movw	r26, r22
    1d4e:	ca 01       	movw	r24, r20
    1d50:	8f 77       	andi	r24, 0x7F	; 127
    1d52:	90 70       	andi	r25, 0x00	; 0
    1d54:	a0 70       	andi	r26, 0x00	; 0
    1d56:	b0 70       	andi	r27, 0x00	; 0
    1d58:	80 34       	cpi	r24, 0x40	; 64
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	a1 05       	cpc	r26, r1
    1d5e:	b1 05       	cpc	r27, r1
    1d60:	61 f4       	brne	.+24     	; 0x1d7a <__mulsf3+0x1ce>
    1d62:	47 fd       	sbrc	r20, 7
    1d64:	0a c0       	rjmp	.+20     	; 0x1d7a <__mulsf3+0x1ce>
    1d66:	e1 14       	cp	r14, r1
    1d68:	f1 04       	cpc	r15, r1
    1d6a:	01 05       	cpc	r16, r1
    1d6c:	11 05       	cpc	r17, r1
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <__mulsf3+0x1ce>
    1d70:	40 5c       	subi	r20, 0xC0	; 192
    1d72:	5f 4f       	sbci	r21, 0xFF	; 255
    1d74:	6f 4f       	sbci	r22, 0xFF	; 255
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	40 78       	andi	r20, 0x80	; 128
    1d7a:	1a 8e       	std	Y+26, r1	; 0x1a
    1d7c:	fe 17       	cp	r31, r30
    1d7e:	11 f0       	breq	.+4      	; 0x1d84 <__mulsf3+0x1d8>
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	8a 8f       	std	Y+26, r24	; 0x1a
    1d84:	4d 8f       	std	Y+29, r20	; 0x1d
    1d86:	5e 8f       	std	Y+30, r21	; 0x1e
    1d88:	6f 8f       	std	Y+31, r22	; 0x1f
    1d8a:	78 a3       	std	Y+32, r23	; 0x20
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	89 8f       	std	Y+25, r24	; 0x19
    1d90:	ce 01       	movw	r24, r28
    1d92:	49 96       	adiw	r24, 0x19	; 25
    1d94:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__pack_f>
    1d98:	a0 96       	adiw	r28, 0x20	; 32
    1d9a:	e2 e1       	ldi	r30, 0x12	; 18
    1d9c:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__epilogue_restores__>

00001da0 <__gtsf2>:
    1da0:	a8 e1       	ldi	r26, 0x18	; 24
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e6 ed       	ldi	r30, 0xD6	; 214
    1da6:	fe e0       	ldi	r31, 0x0E	; 14
    1da8:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__+0x18>
    1dac:	69 83       	std	Y+1, r22	; 0x01
    1dae:	7a 83       	std	Y+2, r23	; 0x02
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	2d 83       	std	Y+5, r18	; 0x05
    1db6:	3e 83       	std	Y+6, r19	; 0x06
    1db8:	4f 83       	std	Y+7, r20	; 0x07
    1dba:	58 87       	std	Y+8, r21	; 0x08
    1dbc:	89 e0       	ldi	r24, 0x09	; 9
    1dbe:	e8 2e       	mov	r14, r24
    1dc0:	f1 2c       	mov	r15, r1
    1dc2:	ec 0e       	add	r14, r28
    1dc4:	fd 1e       	adc	r15, r29
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	b7 01       	movw	r22, r14
    1dcc:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	0f 5e       	subi	r16, 0xEF	; 239
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	05 96       	adiw	r24, 0x05	; 5
    1dda:	b8 01       	movw	r22, r16
    1ddc:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	40 f0       	brcs	.+16     	; 0x1df6 <__gtsf2+0x56>
    1de6:	89 89       	ldd	r24, Y+17	; 0x11
    1de8:	82 30       	cpi	r24, 0x02	; 2
    1dea:	28 f0       	brcs	.+10     	; 0x1df6 <__gtsf2+0x56>
    1dec:	c7 01       	movw	r24, r14
    1dee:	b8 01       	movw	r22, r16
    1df0:	0e 94 01 11 	call	0x2202	; 0x2202 <__fpcmp_parts_f>
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <__gtsf2+0x58>
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
    1df8:	68 96       	adiw	r28, 0x18	; 24
    1dfa:	e6 e0       	ldi	r30, 0x06	; 6
    1dfc:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__+0x18>

00001e00 <__gesf2>:
    1e00:	a8 e1       	ldi	r26, 0x18	; 24
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e0       	ldi	r30, 0x06	; 6
    1e06:	ff e0       	ldi	r31, 0x0F	; 15
    1e08:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__+0x18>
    1e0c:	69 83       	std	Y+1, r22	; 0x01
    1e0e:	7a 83       	std	Y+2, r23	; 0x02
    1e10:	8b 83       	std	Y+3, r24	; 0x03
    1e12:	9c 83       	std	Y+4, r25	; 0x04
    1e14:	2d 83       	std	Y+5, r18	; 0x05
    1e16:	3e 83       	std	Y+6, r19	; 0x06
    1e18:	4f 83       	std	Y+7, r20	; 0x07
    1e1a:	58 87       	std	Y+8, r21	; 0x08
    1e1c:	89 e0       	ldi	r24, 0x09	; 9
    1e1e:	e8 2e       	mov	r14, r24
    1e20:	f1 2c       	mov	r15, r1
    1e22:	ec 0e       	add	r14, r28
    1e24:	fd 1e       	adc	r15, r29
    1e26:	ce 01       	movw	r24, r28
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	b7 01       	movw	r22, r14
    1e2c:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1e30:	8e 01       	movw	r16, r28
    1e32:	0f 5e       	subi	r16, 0xEF	; 239
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	ce 01       	movw	r24, r28
    1e38:	05 96       	adiw	r24, 0x05	; 5
    1e3a:	b8 01       	movw	r22, r16
    1e3c:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1e40:	89 85       	ldd	r24, Y+9	; 0x09
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	40 f0       	brcs	.+16     	; 0x1e56 <__gesf2+0x56>
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	28 f0       	brcs	.+10     	; 0x1e56 <__gesf2+0x56>
    1e4c:	c7 01       	movw	r24, r14
    1e4e:	b8 01       	movw	r22, r16
    1e50:	0e 94 01 11 	call	0x2202	; 0x2202 <__fpcmp_parts_f>
    1e54:	01 c0       	rjmp	.+2      	; 0x1e58 <__gesf2+0x58>
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	68 96       	adiw	r28, 0x18	; 24
    1e5a:	e6 e0       	ldi	r30, 0x06	; 6
    1e5c:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__+0x18>

00001e60 <__ltsf2>:
    1e60:	a8 e1       	ldi	r26, 0x18	; 24
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e6 e3       	ldi	r30, 0x36	; 54
    1e66:	ff e0       	ldi	r31, 0x0F	; 15
    1e68:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__+0x18>
    1e6c:	69 83       	std	Y+1, r22	; 0x01
    1e6e:	7a 83       	std	Y+2, r23	; 0x02
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	2d 83       	std	Y+5, r18	; 0x05
    1e76:	3e 83       	std	Y+6, r19	; 0x06
    1e78:	4f 83       	std	Y+7, r20	; 0x07
    1e7a:	58 87       	std	Y+8, r21	; 0x08
    1e7c:	89 e0       	ldi	r24, 0x09	; 9
    1e7e:	e8 2e       	mov	r14, r24
    1e80:	f1 2c       	mov	r15, r1
    1e82:	ec 0e       	add	r14, r28
    1e84:	fd 1e       	adc	r15, r29
    1e86:	ce 01       	movw	r24, r28
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	b7 01       	movw	r22, r14
    1e8c:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1e90:	8e 01       	movw	r16, r28
    1e92:	0f 5e       	subi	r16, 0xEF	; 239
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	ce 01       	movw	r24, r28
    1e98:	05 96       	adiw	r24, 0x05	; 5
    1e9a:	b8 01       	movw	r22, r16
    1e9c:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	40 f0       	brcs	.+16     	; 0x1eb6 <__ltsf2+0x56>
    1ea6:	89 89       	ldd	r24, Y+17	; 0x11
    1ea8:	82 30       	cpi	r24, 0x02	; 2
    1eaa:	28 f0       	brcs	.+10     	; 0x1eb6 <__ltsf2+0x56>
    1eac:	c7 01       	movw	r24, r14
    1eae:	b8 01       	movw	r22, r16
    1eb0:	0e 94 01 11 	call	0x2202	; 0x2202 <__fpcmp_parts_f>
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <__ltsf2+0x58>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	68 96       	adiw	r28, 0x18	; 24
    1eba:	e6 e0       	ldi	r30, 0x06	; 6
    1ebc:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__+0x18>

00001ec0 <__fixsfsi>:
    1ec0:	ac e0       	ldi	r26, 0x0C	; 12
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e6 e6       	ldi	r30, 0x66	; 102
    1ec6:	ff e0       	ldi	r31, 0x0F	; 15
    1ec8:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__prologue_saves__+0x20>
    1ecc:	69 83       	std	Y+1, r22	; 0x01
    1ece:	7a 83       	std	Y+2, r23	; 0x02
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	be 01       	movw	r22, r28
    1eda:	6b 5f       	subi	r22, 0xFB	; 251
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	0e 94 89 10 	call	0x2112	; 0x2112 <__unpack_f>
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	82 30       	cpi	r24, 0x02	; 2
    1ee6:	61 f1       	breq	.+88     	; 0x1f40 <__fixsfsi+0x80>
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	50 f1       	brcs	.+84     	; 0x1f40 <__fixsfsi+0x80>
    1eec:	84 30       	cpi	r24, 0x04	; 4
    1eee:	21 f4       	brne	.+8      	; 0x1ef8 <__fixsfsi+0x38>
    1ef0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef2:	88 23       	and	r24, r24
    1ef4:	51 f1       	breq	.+84     	; 0x1f4a <__fixsfsi+0x8a>
    1ef6:	2e c0       	rjmp	.+92     	; 0x1f54 <__fixsfsi+0x94>
    1ef8:	2f 81       	ldd	r18, Y+7	; 0x07
    1efa:	38 85       	ldd	r19, Y+8	; 0x08
    1efc:	37 fd       	sbrc	r19, 7
    1efe:	20 c0       	rjmp	.+64     	; 0x1f40 <__fixsfsi+0x80>
    1f00:	6e 81       	ldd	r22, Y+6	; 0x06
    1f02:	2f 31       	cpi	r18, 0x1F	; 31
    1f04:	31 05       	cpc	r19, r1
    1f06:	1c f0       	brlt	.+6      	; 0x1f0e <__fixsfsi+0x4e>
    1f08:	66 23       	and	r22, r22
    1f0a:	f9 f0       	breq	.+62     	; 0x1f4a <__fixsfsi+0x8a>
    1f0c:	23 c0       	rjmp	.+70     	; 0x1f54 <__fixsfsi+0x94>
    1f0e:	8e e1       	ldi	r24, 0x1E	; 30
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	82 1b       	sub	r24, r18
    1f14:	93 0b       	sbc	r25, r19
    1f16:	29 85       	ldd	r18, Y+9	; 0x09
    1f18:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f1a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f1c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <__fixsfsi+0x68>
    1f20:	56 95       	lsr	r21
    1f22:	47 95       	ror	r20
    1f24:	37 95       	ror	r19
    1f26:	27 95       	ror	r18
    1f28:	8a 95       	dec	r24
    1f2a:	d2 f7       	brpl	.-12     	; 0x1f20 <__fixsfsi+0x60>
    1f2c:	66 23       	and	r22, r22
    1f2e:	b1 f0       	breq	.+44     	; 0x1f5c <__fixsfsi+0x9c>
    1f30:	50 95       	com	r21
    1f32:	40 95       	com	r20
    1f34:	30 95       	com	r19
    1f36:	21 95       	neg	r18
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3e:	0e c0       	rjmp	.+28     	; 0x1f5c <__fixsfsi+0x9c>
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	09 c0       	rjmp	.+18     	; 0x1f5c <__fixsfsi+0x9c>
    1f4a:	2f ef       	ldi	r18, 0xFF	; 255
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f ef       	ldi	r20, 0xFF	; 255
    1f50:	5f e7       	ldi	r21, 0x7F	; 127
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__fixsfsi+0x9c>
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	50 e8       	ldi	r21, 0x80	; 128
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	ca 01       	movw	r24, r20
    1f60:	2c 96       	adiw	r28, 0x0c	; 12
    1f62:	e2 e0       	ldi	r30, 0x02	; 2
    1f64:	0c 94 86 11 	jmp	0x230c	; 0x230c <__epilogue_restores__+0x20>

00001f68 <__pack_f>:
    1f68:	df 92       	push	r13
    1f6a:	ef 92       	push	r14
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	fc 01       	movw	r30, r24
    1f74:	e4 80       	ldd	r14, Z+4	; 0x04
    1f76:	f5 80       	ldd	r15, Z+5	; 0x05
    1f78:	06 81       	ldd	r16, Z+6	; 0x06
    1f7a:	17 81       	ldd	r17, Z+7	; 0x07
    1f7c:	d1 80       	ldd	r13, Z+1	; 0x01
    1f7e:	80 81       	ld	r24, Z
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	48 f4       	brcc	.+18     	; 0x1f96 <__pack_f+0x2e>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e1       	ldi	r26, 0x10	; 16
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e8 2a       	or	r14, r24
    1f8e:	f9 2a       	or	r15, r25
    1f90:	0a 2b       	or	r16, r26
    1f92:	1b 2b       	or	r17, r27
    1f94:	a5 c0       	rjmp	.+330    	; 0x20e0 <__pack_f+0x178>
    1f96:	84 30       	cpi	r24, 0x04	; 4
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <__pack_f+0x34>
    1f9a:	9f c0       	rjmp	.+318    	; 0x20da <__pack_f+0x172>
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	21 f4       	brne	.+8      	; 0x1fa8 <__pack_f+0x40>
    1fa0:	ee 24       	eor	r14, r14
    1fa2:	ff 24       	eor	r15, r15
    1fa4:	87 01       	movw	r16, r14
    1fa6:	05 c0       	rjmp	.+10     	; 0x1fb2 <__pack_f+0x4a>
    1fa8:	e1 14       	cp	r14, r1
    1faa:	f1 04       	cpc	r15, r1
    1fac:	01 05       	cpc	r16, r1
    1fae:	11 05       	cpc	r17, r1
    1fb0:	19 f4       	brne	.+6      	; 0x1fb8 <__pack_f+0x50>
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	96 c0       	rjmp	.+300    	; 0x20e4 <__pack_f+0x17c>
    1fb8:	62 81       	ldd	r22, Z+2	; 0x02
    1fba:	73 81       	ldd	r23, Z+3	; 0x03
    1fbc:	9f ef       	ldi	r25, 0xFF	; 255
    1fbe:	62 38       	cpi	r22, 0x82	; 130
    1fc0:	79 07       	cpc	r23, r25
    1fc2:	0c f0       	brlt	.+2      	; 0x1fc6 <__pack_f+0x5e>
    1fc4:	5b c0       	rjmp	.+182    	; 0x207c <__pack_f+0x114>
    1fc6:	22 e8       	ldi	r18, 0x82	; 130
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	26 1b       	sub	r18, r22
    1fcc:	37 0b       	sbc	r19, r23
    1fce:	2a 31       	cpi	r18, 0x1A	; 26
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	2c f0       	brlt	.+10     	; 0x1fde <__pack_f+0x76>
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	2a c0       	rjmp	.+84     	; 0x2032 <__pack_f+0xca>
    1fde:	b8 01       	movw	r22, r16
    1fe0:	a7 01       	movw	r20, r14
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	04 c0       	rjmp	.+8      	; 0x1fee <__pack_f+0x86>
    1fe6:	76 95       	lsr	r23
    1fe8:	67 95       	ror	r22
    1fea:	57 95       	ror	r21
    1fec:	47 95       	ror	r20
    1fee:	0a 94       	dec	r0
    1ff0:	d2 f7       	brpl	.-12     	; 0x1fe6 <__pack_f+0x7e>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a0 e0       	ldi	r26, 0x00	; 0
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <__pack_f+0x9c>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	aa 1f       	adc	r26, r26
    2002:	bb 1f       	adc	r27, r27
    2004:	2a 95       	dec	r18
    2006:	d2 f7       	brpl	.-12     	; 0x1ffc <__pack_f+0x94>
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	a1 09       	sbc	r26, r1
    200c:	b1 09       	sbc	r27, r1
    200e:	8e 21       	and	r24, r14
    2010:	9f 21       	and	r25, r15
    2012:	a0 23       	and	r26, r16
    2014:	b1 23       	and	r27, r17
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	a1 05       	cpc	r26, r1
    201a:	b1 05       	cpc	r27, r1
    201c:	21 f0       	breq	.+8      	; 0x2026 <__pack_f+0xbe>
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	9a 01       	movw	r18, r20
    2028:	ab 01       	movw	r20, r22
    202a:	28 2b       	or	r18, r24
    202c:	39 2b       	or	r19, r25
    202e:	4a 2b       	or	r20, r26
    2030:	5b 2b       	or	r21, r27
    2032:	da 01       	movw	r26, r20
    2034:	c9 01       	movw	r24, r18
    2036:	8f 77       	andi	r24, 0x7F	; 127
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	a0 70       	andi	r26, 0x00	; 0
    203c:	b0 70       	andi	r27, 0x00	; 0
    203e:	80 34       	cpi	r24, 0x40	; 64
    2040:	91 05       	cpc	r25, r1
    2042:	a1 05       	cpc	r26, r1
    2044:	b1 05       	cpc	r27, r1
    2046:	39 f4       	brne	.+14     	; 0x2056 <__pack_f+0xee>
    2048:	27 ff       	sbrs	r18, 7
    204a:	09 c0       	rjmp	.+18     	; 0x205e <__pack_f+0xf6>
    204c:	20 5c       	subi	r18, 0xC0	; 192
    204e:	3f 4f       	sbci	r19, 0xFF	; 255
    2050:	4f 4f       	sbci	r20, 0xFF	; 255
    2052:	5f 4f       	sbci	r21, 0xFF	; 255
    2054:	04 c0       	rjmp	.+8      	; 0x205e <__pack_f+0xf6>
    2056:	21 5c       	subi	r18, 0xC1	; 193
    2058:	3f 4f       	sbci	r19, 0xFF	; 255
    205a:	4f 4f       	sbci	r20, 0xFF	; 255
    205c:	5f 4f       	sbci	r21, 0xFF	; 255
    205e:	e0 e0       	ldi	r30, 0x00	; 0
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	20 30       	cpi	r18, 0x00	; 0
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	3a 07       	cpc	r19, r26
    2068:	a0 e0       	ldi	r26, 0x00	; 0
    206a:	4a 07       	cpc	r20, r26
    206c:	a0 e4       	ldi	r26, 0x40	; 64
    206e:	5a 07       	cpc	r21, r26
    2070:	10 f0       	brcs	.+4      	; 0x2076 <__pack_f+0x10e>
    2072:	e1 e0       	ldi	r30, 0x01	; 1
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	79 01       	movw	r14, r18
    2078:	8a 01       	movw	r16, r20
    207a:	27 c0       	rjmp	.+78     	; 0x20ca <__pack_f+0x162>
    207c:	60 38       	cpi	r22, 0x80	; 128
    207e:	71 05       	cpc	r23, r1
    2080:	64 f5       	brge	.+88     	; 0x20da <__pack_f+0x172>
    2082:	fb 01       	movw	r30, r22
    2084:	e1 58       	subi	r30, 0x81	; 129
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	d8 01       	movw	r26, r16
    208a:	c7 01       	movw	r24, r14
    208c:	8f 77       	andi	r24, 0x7F	; 127
    208e:	90 70       	andi	r25, 0x00	; 0
    2090:	a0 70       	andi	r26, 0x00	; 0
    2092:	b0 70       	andi	r27, 0x00	; 0
    2094:	80 34       	cpi	r24, 0x40	; 64
    2096:	91 05       	cpc	r25, r1
    2098:	a1 05       	cpc	r26, r1
    209a:	b1 05       	cpc	r27, r1
    209c:	39 f4       	brne	.+14     	; 0x20ac <__pack_f+0x144>
    209e:	e7 fe       	sbrs	r14, 7
    20a0:	0d c0       	rjmp	.+26     	; 0x20bc <__pack_f+0x154>
    20a2:	80 e4       	ldi	r24, 0x40	; 64
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e0       	ldi	r26, 0x00	; 0
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <__pack_f+0x14c>
    20ac:	8f e3       	ldi	r24, 0x3F	; 63
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e0       	ldi	r26, 0x00	; 0
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e8 0e       	add	r14, r24
    20b6:	f9 1e       	adc	r15, r25
    20b8:	0a 1f       	adc	r16, r26
    20ba:	1b 1f       	adc	r17, r27
    20bc:	17 ff       	sbrs	r17, 7
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <__pack_f+0x162>
    20c0:	16 95       	lsr	r17
    20c2:	07 95       	ror	r16
    20c4:	f7 94       	ror	r15
    20c6:	e7 94       	ror	r14
    20c8:	31 96       	adiw	r30, 0x01	; 1
    20ca:	87 e0       	ldi	r24, 0x07	; 7
    20cc:	16 95       	lsr	r17
    20ce:	07 95       	ror	r16
    20d0:	f7 94       	ror	r15
    20d2:	e7 94       	ror	r14
    20d4:	8a 95       	dec	r24
    20d6:	d1 f7       	brne	.-12     	; 0x20cc <__pack_f+0x164>
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <__pack_f+0x17c>
    20da:	ee 24       	eor	r14, r14
    20dc:	ff 24       	eor	r15, r15
    20de:	87 01       	movw	r16, r14
    20e0:	ef ef       	ldi	r30, 0xFF	; 255
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	6e 2f       	mov	r22, r30
    20e6:	67 95       	ror	r22
    20e8:	66 27       	eor	r22, r22
    20ea:	67 95       	ror	r22
    20ec:	90 2f       	mov	r25, r16
    20ee:	9f 77       	andi	r25, 0x7F	; 127
    20f0:	d7 94       	ror	r13
    20f2:	dd 24       	eor	r13, r13
    20f4:	d7 94       	ror	r13
    20f6:	8e 2f       	mov	r24, r30
    20f8:	86 95       	lsr	r24
    20fa:	49 2f       	mov	r20, r25
    20fc:	46 2b       	or	r20, r22
    20fe:	58 2f       	mov	r21, r24
    2100:	5d 29       	or	r21, r13
    2102:	b7 01       	movw	r22, r14
    2104:	ca 01       	movw	r24, r20
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	08 95       	ret

00002112 <__unpack_f>:
    2112:	fc 01       	movw	r30, r24
    2114:	db 01       	movw	r26, r22
    2116:	40 81       	ld	r20, Z
    2118:	51 81       	ldd	r21, Z+1	; 0x01
    211a:	22 81       	ldd	r18, Z+2	; 0x02
    211c:	62 2f       	mov	r22, r18
    211e:	6f 77       	andi	r22, 0x7F	; 127
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	22 1f       	adc	r18, r18
    2124:	22 27       	eor	r18, r18
    2126:	22 1f       	adc	r18, r18
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	89 2f       	mov	r24, r25
    212c:	88 0f       	add	r24, r24
    212e:	82 2b       	or	r24, r18
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	99 1f       	adc	r25, r25
    2136:	99 27       	eor	r25, r25
    2138:	99 1f       	adc	r25, r25
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	9c 93       	st	X, r25
    213e:	11 97       	sbiw	r26, 0x01	; 1
    2140:	21 15       	cp	r18, r1
    2142:	31 05       	cpc	r19, r1
    2144:	a9 f5       	brne	.+106    	; 0x21b0 <__unpack_f+0x9e>
    2146:	41 15       	cp	r20, r1
    2148:	51 05       	cpc	r21, r1
    214a:	61 05       	cpc	r22, r1
    214c:	71 05       	cpc	r23, r1
    214e:	11 f4       	brne	.+4      	; 0x2154 <__unpack_f+0x42>
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	37 c0       	rjmp	.+110    	; 0x21c2 <__unpack_f+0xb0>
    2154:	82 e8       	ldi	r24, 0x82	; 130
    2156:	9f ef       	ldi	r25, 0xFF	; 255
    2158:	13 96       	adiw	r26, 0x03	; 3
    215a:	9c 93       	st	X, r25
    215c:	8e 93       	st	-X, r24
    215e:	12 97       	sbiw	r26, 0x02	; 2
    2160:	9a 01       	movw	r18, r20
    2162:	ab 01       	movw	r20, r22
    2164:	67 e0       	ldi	r22, 0x07	; 7
    2166:	22 0f       	add	r18, r18
    2168:	33 1f       	adc	r19, r19
    216a:	44 1f       	adc	r20, r20
    216c:	55 1f       	adc	r21, r21
    216e:	6a 95       	dec	r22
    2170:	d1 f7       	brne	.-12     	; 0x2166 <__unpack_f+0x54>
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	8c 93       	st	X, r24
    2176:	0d c0       	rjmp	.+26     	; 0x2192 <__unpack_f+0x80>
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	44 1f       	adc	r20, r20
    217e:	55 1f       	adc	r21, r21
    2180:	12 96       	adiw	r26, 0x02	; 2
    2182:	8d 91       	ld	r24, X+
    2184:	9c 91       	ld	r25, X
    2186:	13 97       	sbiw	r26, 0x03	; 3
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	13 96       	adiw	r26, 0x03	; 3
    218c:	9c 93       	st	X, r25
    218e:	8e 93       	st	-X, r24
    2190:	12 97       	sbiw	r26, 0x02	; 2
    2192:	20 30       	cpi	r18, 0x00	; 0
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	38 07       	cpc	r19, r24
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	48 07       	cpc	r20, r24
    219c:	80 e4       	ldi	r24, 0x40	; 64
    219e:	58 07       	cpc	r21, r24
    21a0:	58 f3       	brcs	.-42     	; 0x2178 <__unpack_f+0x66>
    21a2:	14 96       	adiw	r26, 0x04	; 4
    21a4:	2d 93       	st	X+, r18
    21a6:	3d 93       	st	X+, r19
    21a8:	4d 93       	st	X+, r20
    21aa:	5c 93       	st	X, r21
    21ac:	17 97       	sbiw	r26, 0x07	; 7
    21ae:	08 95       	ret
    21b0:	2f 3f       	cpi	r18, 0xFF	; 255
    21b2:	31 05       	cpc	r19, r1
    21b4:	79 f4       	brne	.+30     	; 0x21d4 <__unpack_f+0xc2>
    21b6:	41 15       	cp	r20, r1
    21b8:	51 05       	cpc	r21, r1
    21ba:	61 05       	cpc	r22, r1
    21bc:	71 05       	cpc	r23, r1
    21be:	19 f4       	brne	.+6      	; 0x21c6 <__unpack_f+0xb4>
    21c0:	84 e0       	ldi	r24, 0x04	; 4
    21c2:	8c 93       	st	X, r24
    21c4:	08 95       	ret
    21c6:	64 ff       	sbrs	r22, 4
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <__unpack_f+0xbe>
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	8c 93       	st	X, r24
    21ce:	12 c0       	rjmp	.+36     	; 0x21f4 <__unpack_f+0xe2>
    21d0:	1c 92       	st	X, r1
    21d2:	10 c0       	rjmp	.+32     	; 0x21f4 <__unpack_f+0xe2>
    21d4:	2f 57       	subi	r18, 0x7F	; 127
    21d6:	30 40       	sbci	r19, 0x00	; 0
    21d8:	13 96       	adiw	r26, 0x03	; 3
    21da:	3c 93       	st	X, r19
    21dc:	2e 93       	st	-X, r18
    21de:	12 97       	sbiw	r26, 0x02	; 2
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	8c 93       	st	X, r24
    21e4:	87 e0       	ldi	r24, 0x07	; 7
    21e6:	44 0f       	add	r20, r20
    21e8:	55 1f       	adc	r21, r21
    21ea:	66 1f       	adc	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	8a 95       	dec	r24
    21f0:	d1 f7       	brne	.-12     	; 0x21e6 <__unpack_f+0xd4>
    21f2:	70 64       	ori	r23, 0x40	; 64
    21f4:	14 96       	adiw	r26, 0x04	; 4
    21f6:	4d 93       	st	X+, r20
    21f8:	5d 93       	st	X+, r21
    21fa:	6d 93       	st	X+, r22
    21fc:	7c 93       	st	X, r23
    21fe:	17 97       	sbiw	r26, 0x07	; 7
    2200:	08 95       	ret

00002202 <__fpcmp_parts_f>:
    2202:	1f 93       	push	r17
    2204:	dc 01       	movw	r26, r24
    2206:	fb 01       	movw	r30, r22
    2208:	9c 91       	ld	r25, X
    220a:	92 30       	cpi	r25, 0x02	; 2
    220c:	08 f4       	brcc	.+2      	; 0x2210 <__fpcmp_parts_f+0xe>
    220e:	47 c0       	rjmp	.+142    	; 0x229e <__fpcmp_parts_f+0x9c>
    2210:	80 81       	ld	r24, Z
    2212:	82 30       	cpi	r24, 0x02	; 2
    2214:	08 f4       	brcc	.+2      	; 0x2218 <__fpcmp_parts_f+0x16>
    2216:	43 c0       	rjmp	.+134    	; 0x229e <__fpcmp_parts_f+0x9c>
    2218:	94 30       	cpi	r25, 0x04	; 4
    221a:	51 f4       	brne	.+20     	; 0x2230 <__fpcmp_parts_f+0x2e>
    221c:	11 96       	adiw	r26, 0x01	; 1
    221e:	1c 91       	ld	r17, X
    2220:	84 30       	cpi	r24, 0x04	; 4
    2222:	99 f5       	brne	.+102    	; 0x228a <__fpcmp_parts_f+0x88>
    2224:	81 81       	ldd	r24, Z+1	; 0x01
    2226:	68 2f       	mov	r22, r24
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	61 1b       	sub	r22, r17
    222c:	71 09       	sbc	r23, r1
    222e:	3f c0       	rjmp	.+126    	; 0x22ae <__fpcmp_parts_f+0xac>
    2230:	84 30       	cpi	r24, 0x04	; 4
    2232:	21 f0       	breq	.+8      	; 0x223c <__fpcmp_parts_f+0x3a>
    2234:	92 30       	cpi	r25, 0x02	; 2
    2236:	31 f4       	brne	.+12     	; 0x2244 <__fpcmp_parts_f+0x42>
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	b9 f1       	breq	.+110    	; 0x22aa <__fpcmp_parts_f+0xa8>
    223c:	81 81       	ldd	r24, Z+1	; 0x01
    223e:	88 23       	and	r24, r24
    2240:	89 f1       	breq	.+98     	; 0x22a4 <__fpcmp_parts_f+0xa2>
    2242:	2d c0       	rjmp	.+90     	; 0x229e <__fpcmp_parts_f+0x9c>
    2244:	11 96       	adiw	r26, 0x01	; 1
    2246:	1c 91       	ld	r17, X
    2248:	11 97       	sbiw	r26, 0x01	; 1
    224a:	82 30       	cpi	r24, 0x02	; 2
    224c:	f1 f0       	breq	.+60     	; 0x228a <__fpcmp_parts_f+0x88>
    224e:	81 81       	ldd	r24, Z+1	; 0x01
    2250:	18 17       	cp	r17, r24
    2252:	d9 f4       	brne	.+54     	; 0x228a <__fpcmp_parts_f+0x88>
    2254:	12 96       	adiw	r26, 0x02	; 2
    2256:	2d 91       	ld	r18, X+
    2258:	3c 91       	ld	r19, X
    225a:	13 97       	sbiw	r26, 0x03	; 3
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	82 17       	cp	r24, r18
    2262:	93 07       	cpc	r25, r19
    2264:	94 f0       	brlt	.+36     	; 0x228a <__fpcmp_parts_f+0x88>
    2266:	28 17       	cp	r18, r24
    2268:	39 07       	cpc	r19, r25
    226a:	bc f0       	brlt	.+46     	; 0x229a <__fpcmp_parts_f+0x98>
    226c:	14 96       	adiw	r26, 0x04	; 4
    226e:	8d 91       	ld	r24, X+
    2270:	9d 91       	ld	r25, X+
    2272:	0d 90       	ld	r0, X+
    2274:	bc 91       	ld	r27, X
    2276:	a0 2d       	mov	r26, r0
    2278:	24 81       	ldd	r18, Z+4	; 0x04
    227a:	35 81       	ldd	r19, Z+5	; 0x05
    227c:	46 81       	ldd	r20, Z+6	; 0x06
    227e:	57 81       	ldd	r21, Z+7	; 0x07
    2280:	28 17       	cp	r18, r24
    2282:	39 07       	cpc	r19, r25
    2284:	4a 07       	cpc	r20, r26
    2286:	5b 07       	cpc	r21, r27
    2288:	18 f4       	brcc	.+6      	; 0x2290 <__fpcmp_parts_f+0x8e>
    228a:	11 23       	and	r17, r17
    228c:	41 f0       	breq	.+16     	; 0x229e <__fpcmp_parts_f+0x9c>
    228e:	0a c0       	rjmp	.+20     	; 0x22a4 <__fpcmp_parts_f+0xa2>
    2290:	82 17       	cp	r24, r18
    2292:	93 07       	cpc	r25, r19
    2294:	a4 07       	cpc	r26, r20
    2296:	b5 07       	cpc	r27, r21
    2298:	40 f4       	brcc	.+16     	; 0x22aa <__fpcmp_parts_f+0xa8>
    229a:	11 23       	and	r17, r17
    229c:	19 f0       	breq	.+6      	; 0x22a4 <__fpcmp_parts_f+0xa2>
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	05 c0       	rjmp	.+10     	; 0x22ae <__fpcmp_parts_f+0xac>
    22a4:	6f ef       	ldi	r22, 0xFF	; 255
    22a6:	7f ef       	ldi	r23, 0xFF	; 255
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <__fpcmp_parts_f+0xac>
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	cb 01       	movw	r24, r22
    22b0:	1f 91       	pop	r17
    22b2:	08 95       	ret

000022b4 <__prologue_saves__>:
    22b4:	2f 92       	push	r2
    22b6:	3f 92       	push	r3
    22b8:	4f 92       	push	r4
    22ba:	5f 92       	push	r5
    22bc:	6f 92       	push	r6
    22be:	7f 92       	push	r7
    22c0:	8f 92       	push	r8
    22c2:	9f 92       	push	r9
    22c4:	af 92       	push	r10
    22c6:	bf 92       	push	r11
    22c8:	cf 92       	push	r12
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	ca 1b       	sub	r28, r26
    22de:	db 0b       	sbc	r29, r27
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	09 94       	ijmp

000022ec <__epilogue_restores__>:
    22ec:	2a 88       	ldd	r2, Y+18	; 0x12
    22ee:	39 88       	ldd	r3, Y+17	; 0x11
    22f0:	48 88       	ldd	r4, Y+16	; 0x10
    22f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    22f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    22f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    22f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    22fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    22fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    22fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2300:	c8 84       	ldd	r12, Y+8	; 0x08
    2302:	df 80       	ldd	r13, Y+7	; 0x07
    2304:	ee 80       	ldd	r14, Y+6	; 0x06
    2306:	fd 80       	ldd	r15, Y+5	; 0x05
    2308:	0c 81       	ldd	r16, Y+4	; 0x04
    230a:	1b 81       	ldd	r17, Y+3	; 0x03
    230c:	aa 81       	ldd	r26, Y+2	; 0x02
    230e:	b9 81       	ldd	r27, Y+1	; 0x01
    2310:	ce 0f       	add	r28, r30
    2312:	d1 1d       	adc	r29, r1
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	ed 01       	movw	r28, r26
    2320:	08 95       	ret

00002322 <fdevopen>:
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	8c 01       	movw	r16, r24
    232c:	eb 01       	movw	r28, r22
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	31 f4       	brne	.+12     	; 0x233e <fdevopen+0x1c>
    2332:	61 15       	cp	r22, r1
    2334:	71 05       	cpc	r23, r1
    2336:	19 f4       	brne	.+6      	; 0x233e <fdevopen+0x1c>
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	38 c0       	rjmp	.+112    	; 0x23ae <fdevopen+0x8c>
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	6e e0       	ldi	r22, 0x0E	; 14
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	0e 94 31 14 	call	0x2862	; 0x2862 <calloc>
    234a:	fc 01       	movw	r30, r24
    234c:	9c 01       	movw	r18, r24
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	71 f1       	breq	.+92     	; 0x23ae <fdevopen+0x8c>
    2352:	80 e8       	ldi	r24, 0x80	; 128
    2354:	83 83       	std	Z+3, r24	; 0x03
    2356:	20 97       	sbiw	r28, 0x00	; 0
    2358:	71 f0       	breq	.+28     	; 0x2376 <fdevopen+0x54>
    235a:	d3 87       	std	Z+11, r29	; 0x0b
    235c:	c2 87       	std	Z+10, r28	; 0x0a
    235e:	81 e8       	ldi	r24, 0x81	; 129
    2360:	83 83       	std	Z+3, r24	; 0x03
    2362:	80 91 2b 02 	lds	r24, 0x022B
    2366:	90 91 2c 02 	lds	r25, 0x022C
    236a:	89 2b       	or	r24, r25
    236c:	21 f4       	brne	.+8      	; 0x2376 <fdevopen+0x54>
    236e:	f0 93 2c 02 	sts	0x022C, r31
    2372:	e0 93 2b 02 	sts	0x022B, r30
    2376:	01 15       	cp	r16, r1
    2378:	11 05       	cpc	r17, r1
    237a:	c9 f0       	breq	.+50     	; 0x23ae <fdevopen+0x8c>
    237c:	11 87       	std	Z+9, r17	; 0x09
    237e:	00 87       	std	Z+8, r16	; 0x08
    2380:	83 81       	ldd	r24, Z+3	; 0x03
    2382:	82 60       	ori	r24, 0x02	; 2
    2384:	83 83       	std	Z+3, r24	; 0x03
    2386:	80 91 2d 02 	lds	r24, 0x022D
    238a:	90 91 2e 02 	lds	r25, 0x022E
    238e:	89 2b       	or	r24, r25
    2390:	71 f4       	brne	.+28     	; 0x23ae <fdevopen+0x8c>
    2392:	f0 93 2e 02 	sts	0x022E, r31
    2396:	e0 93 2d 02 	sts	0x022D, r30
    239a:	80 91 2f 02 	lds	r24, 0x022F
    239e:	90 91 30 02 	lds	r25, 0x0230
    23a2:	89 2b       	or	r24, r25
    23a4:	21 f4       	brne	.+8      	; 0x23ae <fdevopen+0x8c>
    23a6:	f0 93 30 02 	sts	0x0230, r31
    23aa:	e0 93 2f 02 	sts	0x022F, r30
    23ae:	c9 01       	movw	r24, r18
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	08 95       	ret

000023ba <printf>:
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	fe 01       	movw	r30, r28
    23c4:	35 96       	adiw	r30, 0x05	; 5
    23c6:	61 91       	ld	r22, Z+
    23c8:	71 91       	ld	r23, Z+
    23ca:	80 91 2d 02 	lds	r24, 0x022D
    23ce:	90 91 2e 02 	lds	r25, 0x022E
    23d2:	af 01       	movw	r20, r30
    23d4:	0e 94 2b 12 	call	0x2456	; 0x2456 <vfprintf>
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <putchar>:
    23de:	60 91 2d 02 	lds	r22, 0x022D
    23e2:	70 91 2e 02 	lds	r23, 0x022E
    23e6:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    23ea:	08 95       	ret

000023ec <puts>:
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	8c 01       	movw	r16, r24
    23f6:	e0 91 2d 02 	lds	r30, 0x022D
    23fa:	f0 91 2e 02 	lds	r31, 0x022E
    23fe:	83 81       	ldd	r24, Z+3	; 0x03
    2400:	81 ff       	sbrs	r24, 1
    2402:	21 c0       	rjmp	.+66     	; 0x2446 <puts+0x5a>
    2404:	c0 e0       	ldi	r28, 0x00	; 0
    2406:	d0 e0       	ldi	r29, 0x00	; 0
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <puts+0x38>
    240a:	e0 91 2d 02 	lds	r30, 0x022D
    240e:	f0 91 2e 02 	lds	r31, 0x022E
    2412:	20 85       	ldd	r18, Z+8	; 0x08
    2414:	31 85       	ldd	r19, Z+9	; 0x09
    2416:	bf 01       	movw	r22, r30
    2418:	f9 01       	movw	r30, r18
    241a:	09 95       	icall
    241c:	89 2b       	or	r24, r25
    241e:	11 f0       	breq	.+4      	; 0x2424 <puts+0x38>
    2420:	cf ef       	ldi	r28, 0xFF	; 255
    2422:	df ef       	ldi	r29, 0xFF	; 255
    2424:	f8 01       	movw	r30, r16
    2426:	81 91       	ld	r24, Z+
    2428:	8f 01       	movw	r16, r30
    242a:	88 23       	and	r24, r24
    242c:	71 f7       	brne	.-36     	; 0x240a <puts+0x1e>
    242e:	e0 91 2d 02 	lds	r30, 0x022D
    2432:	f0 91 2e 02 	lds	r31, 0x022E
    2436:	20 85       	ldd	r18, Z+8	; 0x08
    2438:	31 85       	ldd	r19, Z+9	; 0x09
    243a:	8a e0       	ldi	r24, 0x0A	; 10
    243c:	bf 01       	movw	r22, r30
    243e:	f9 01       	movw	r30, r18
    2440:	09 95       	icall
    2442:	89 2b       	or	r24, r25
    2444:	11 f0       	breq	.+4      	; 0x244a <puts+0x5e>
    2446:	cf ef       	ldi	r28, 0xFF	; 255
    2448:	df ef       	ldi	r29, 0xFF	; 255
    244a:	ce 01       	movw	r24, r28
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	08 95       	ret

00002456 <vfprintf>:
    2456:	2f 92       	push	r2
    2458:	3f 92       	push	r3
    245a:	4f 92       	push	r4
    245c:	5f 92       	push	r5
    245e:	6f 92       	push	r6
    2460:	7f 92       	push	r7
    2462:	8f 92       	push	r8
    2464:	9f 92       	push	r9
    2466:	af 92       	push	r10
    2468:	bf 92       	push	r11
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	2b 97       	sbiw	r28, 0x0b	; 11
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	3c 01       	movw	r6, r24
    248c:	2b 01       	movw	r4, r22
    248e:	5a 01       	movw	r10, r20
    2490:	fc 01       	movw	r30, r24
    2492:	17 82       	std	Z+7, r1	; 0x07
    2494:	16 82       	std	Z+6, r1	; 0x06
    2496:	83 81       	ldd	r24, Z+3	; 0x03
    2498:	81 fd       	sbrc	r24, 1
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <vfprintf+0x4c>
    249c:	6f ef       	ldi	r22, 0xFF	; 255
    249e:	7f ef       	ldi	r23, 0xFF	; 255
    24a0:	c6 c1       	rjmp	.+908    	; 0x282e <vfprintf+0x3d8>
    24a2:	9a e0       	ldi	r25, 0x0A	; 10
    24a4:	89 2e       	mov	r8, r25
    24a6:	1e 01       	movw	r2, r28
    24a8:	08 94       	sec
    24aa:	21 1c       	adc	r2, r1
    24ac:	31 1c       	adc	r3, r1
    24ae:	f3 01       	movw	r30, r6
    24b0:	23 81       	ldd	r18, Z+3	; 0x03
    24b2:	f2 01       	movw	r30, r4
    24b4:	23 fd       	sbrc	r18, 3
    24b6:	85 91       	lpm	r24, Z+
    24b8:	23 ff       	sbrs	r18, 3
    24ba:	81 91       	ld	r24, Z+
    24bc:	2f 01       	movw	r4, r30
    24be:	88 23       	and	r24, r24
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <vfprintf+0x6e>
    24c2:	b2 c1       	rjmp	.+868    	; 0x2828 <vfprintf+0x3d2>
    24c4:	85 32       	cpi	r24, 0x25	; 37
    24c6:	39 f4       	brne	.+14     	; 0x24d6 <vfprintf+0x80>
    24c8:	23 fd       	sbrc	r18, 3
    24ca:	85 91       	lpm	r24, Z+
    24cc:	23 ff       	sbrs	r18, 3
    24ce:	81 91       	ld	r24, Z+
    24d0:	2f 01       	movw	r4, r30
    24d2:	85 32       	cpi	r24, 0x25	; 37
    24d4:	29 f4       	brne	.+10     	; 0x24e0 <vfprintf+0x8a>
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	b3 01       	movw	r22, r6
    24da:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    24de:	e7 cf       	rjmp	.-50     	; 0x24ae <vfprintf+0x58>
    24e0:	98 2f       	mov	r25, r24
    24e2:	ff 24       	eor	r15, r15
    24e4:	ee 24       	eor	r14, r14
    24e6:	99 24       	eor	r9, r9
    24e8:	ff e1       	ldi	r31, 0x1F	; 31
    24ea:	ff 15       	cp	r31, r15
    24ec:	d0 f0       	brcs	.+52     	; 0x2522 <vfprintf+0xcc>
    24ee:	9b 32       	cpi	r25, 0x2B	; 43
    24f0:	69 f0       	breq	.+26     	; 0x250c <vfprintf+0xb6>
    24f2:	9c 32       	cpi	r25, 0x2C	; 44
    24f4:	28 f4       	brcc	.+10     	; 0x2500 <vfprintf+0xaa>
    24f6:	90 32       	cpi	r25, 0x20	; 32
    24f8:	59 f0       	breq	.+22     	; 0x2510 <vfprintf+0xba>
    24fa:	93 32       	cpi	r25, 0x23	; 35
    24fc:	91 f4       	brne	.+36     	; 0x2522 <vfprintf+0xcc>
    24fe:	0e c0       	rjmp	.+28     	; 0x251c <vfprintf+0xc6>
    2500:	9d 32       	cpi	r25, 0x2D	; 45
    2502:	49 f0       	breq	.+18     	; 0x2516 <vfprintf+0xc0>
    2504:	90 33       	cpi	r25, 0x30	; 48
    2506:	69 f4       	brne	.+26     	; 0x2522 <vfprintf+0xcc>
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	24 c0       	rjmp	.+72     	; 0x2554 <vfprintf+0xfe>
    250c:	52 e0       	ldi	r21, 0x02	; 2
    250e:	f5 2a       	or	r15, r21
    2510:	84 e0       	ldi	r24, 0x04	; 4
    2512:	f8 2a       	or	r15, r24
    2514:	28 c0       	rjmp	.+80     	; 0x2566 <vfprintf+0x110>
    2516:	98 e0       	ldi	r25, 0x08	; 8
    2518:	f9 2a       	or	r15, r25
    251a:	25 c0       	rjmp	.+74     	; 0x2566 <vfprintf+0x110>
    251c:	e0 e1       	ldi	r30, 0x10	; 16
    251e:	fe 2a       	or	r15, r30
    2520:	22 c0       	rjmp	.+68     	; 0x2566 <vfprintf+0x110>
    2522:	f7 fc       	sbrc	r15, 7
    2524:	29 c0       	rjmp	.+82     	; 0x2578 <vfprintf+0x122>
    2526:	89 2f       	mov	r24, r25
    2528:	80 53       	subi	r24, 0x30	; 48
    252a:	8a 30       	cpi	r24, 0x0A	; 10
    252c:	70 f4       	brcc	.+28     	; 0x254a <vfprintf+0xf4>
    252e:	f6 fe       	sbrs	r15, 6
    2530:	05 c0       	rjmp	.+10     	; 0x253c <vfprintf+0xe6>
    2532:	98 9c       	mul	r9, r8
    2534:	90 2c       	mov	r9, r0
    2536:	11 24       	eor	r1, r1
    2538:	98 0e       	add	r9, r24
    253a:	15 c0       	rjmp	.+42     	; 0x2566 <vfprintf+0x110>
    253c:	e8 9c       	mul	r14, r8
    253e:	e0 2c       	mov	r14, r0
    2540:	11 24       	eor	r1, r1
    2542:	e8 0e       	add	r14, r24
    2544:	f0 e2       	ldi	r31, 0x20	; 32
    2546:	ff 2a       	or	r15, r31
    2548:	0e c0       	rjmp	.+28     	; 0x2566 <vfprintf+0x110>
    254a:	9e 32       	cpi	r25, 0x2E	; 46
    254c:	29 f4       	brne	.+10     	; 0x2558 <vfprintf+0x102>
    254e:	f6 fc       	sbrc	r15, 6
    2550:	6b c1       	rjmp	.+726    	; 0x2828 <vfprintf+0x3d2>
    2552:	40 e4       	ldi	r20, 0x40	; 64
    2554:	f4 2a       	or	r15, r20
    2556:	07 c0       	rjmp	.+14     	; 0x2566 <vfprintf+0x110>
    2558:	9c 36       	cpi	r25, 0x6C	; 108
    255a:	19 f4       	brne	.+6      	; 0x2562 <vfprintf+0x10c>
    255c:	50 e8       	ldi	r21, 0x80	; 128
    255e:	f5 2a       	or	r15, r21
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <vfprintf+0x110>
    2562:	98 36       	cpi	r25, 0x68	; 104
    2564:	49 f4       	brne	.+18     	; 0x2578 <vfprintf+0x122>
    2566:	f2 01       	movw	r30, r4
    2568:	23 fd       	sbrc	r18, 3
    256a:	95 91       	lpm	r25, Z+
    256c:	23 ff       	sbrs	r18, 3
    256e:	91 91       	ld	r25, Z+
    2570:	2f 01       	movw	r4, r30
    2572:	99 23       	and	r25, r25
    2574:	09 f0       	breq	.+2      	; 0x2578 <vfprintf+0x122>
    2576:	b8 cf       	rjmp	.-144    	; 0x24e8 <vfprintf+0x92>
    2578:	89 2f       	mov	r24, r25
    257a:	85 54       	subi	r24, 0x45	; 69
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	18 f0       	brcs	.+6      	; 0x2586 <vfprintf+0x130>
    2580:	80 52       	subi	r24, 0x20	; 32
    2582:	83 30       	cpi	r24, 0x03	; 3
    2584:	38 f4       	brcc	.+14     	; 0x2594 <vfprintf+0x13e>
    2586:	44 e0       	ldi	r20, 0x04	; 4
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	a4 0e       	add	r10, r20
    258c:	b5 1e       	adc	r11, r21
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	59 83       	std	Y+1, r21	; 0x01
    2592:	0f c0       	rjmp	.+30     	; 0x25b2 <vfprintf+0x15c>
    2594:	93 36       	cpi	r25, 0x63	; 99
    2596:	31 f0       	breq	.+12     	; 0x25a4 <vfprintf+0x14e>
    2598:	93 37       	cpi	r25, 0x73	; 115
    259a:	79 f0       	breq	.+30     	; 0x25ba <vfprintf+0x164>
    259c:	93 35       	cpi	r25, 0x53	; 83
    259e:	09 f0       	breq	.+2      	; 0x25a2 <vfprintf+0x14c>
    25a0:	56 c0       	rjmp	.+172    	; 0x264e <vfprintf+0x1f8>
    25a2:	20 c0       	rjmp	.+64     	; 0x25e4 <vfprintf+0x18e>
    25a4:	f5 01       	movw	r30, r10
    25a6:	80 81       	ld	r24, Z
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	42 e0       	ldi	r20, 0x02	; 2
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	a4 0e       	add	r10, r20
    25b0:	b5 1e       	adc	r11, r21
    25b2:	61 01       	movw	r12, r2
    25b4:	01 e0       	ldi	r16, 0x01	; 1
    25b6:	10 e0       	ldi	r17, 0x00	; 0
    25b8:	12 c0       	rjmp	.+36     	; 0x25de <vfprintf+0x188>
    25ba:	f5 01       	movw	r30, r10
    25bc:	c0 80       	ld	r12, Z
    25be:	d1 80       	ldd	r13, Z+1	; 0x01
    25c0:	f6 fc       	sbrc	r15, 6
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <vfprintf+0x174>
    25c4:	6f ef       	ldi	r22, 0xFF	; 255
    25c6:	7f ef       	ldi	r23, 0xFF	; 255
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <vfprintf+0x178>
    25ca:	69 2d       	mov	r22, r9
    25cc:	70 e0       	ldi	r23, 0x00	; 0
    25ce:	42 e0       	ldi	r20, 0x02	; 2
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	a4 0e       	add	r10, r20
    25d4:	b5 1e       	adc	r11, r21
    25d6:	c6 01       	movw	r24, r12
    25d8:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <strnlen>
    25dc:	8c 01       	movw	r16, r24
    25de:	5f e7       	ldi	r21, 0x7F	; 127
    25e0:	f5 22       	and	r15, r21
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <vfprintf+0x1b6>
    25e4:	f5 01       	movw	r30, r10
    25e6:	c0 80       	ld	r12, Z
    25e8:	d1 80       	ldd	r13, Z+1	; 0x01
    25ea:	f6 fc       	sbrc	r15, 6
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <vfprintf+0x19e>
    25ee:	6f ef       	ldi	r22, 0xFF	; 255
    25f0:	7f ef       	ldi	r23, 0xFF	; 255
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <vfprintf+0x1a2>
    25f4:	69 2d       	mov	r22, r9
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	42 e0       	ldi	r20, 0x02	; 2
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	a4 0e       	add	r10, r20
    25fe:	b5 1e       	adc	r11, r21
    2600:	c6 01       	movw	r24, r12
    2602:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <strnlen_P>
    2606:	8c 01       	movw	r16, r24
    2608:	50 e8       	ldi	r21, 0x80	; 128
    260a:	f5 2a       	or	r15, r21
    260c:	f3 fe       	sbrs	r15, 3
    260e:	07 c0       	rjmp	.+14     	; 0x261e <vfprintf+0x1c8>
    2610:	1a c0       	rjmp	.+52     	; 0x2646 <vfprintf+0x1f0>
    2612:	80 e2       	ldi	r24, 0x20	; 32
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	b3 01       	movw	r22, r6
    2618:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    261c:	ea 94       	dec	r14
    261e:	8e 2d       	mov	r24, r14
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	08 17       	cp	r16, r24
    2624:	19 07       	cpc	r17, r25
    2626:	a8 f3       	brcs	.-22     	; 0x2612 <vfprintf+0x1bc>
    2628:	0e c0       	rjmp	.+28     	; 0x2646 <vfprintf+0x1f0>
    262a:	f6 01       	movw	r30, r12
    262c:	f7 fc       	sbrc	r15, 7
    262e:	85 91       	lpm	r24, Z+
    2630:	f7 fe       	sbrs	r15, 7
    2632:	81 91       	ld	r24, Z+
    2634:	6f 01       	movw	r12, r30
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	b3 01       	movw	r22, r6
    263a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    263e:	e1 10       	cpse	r14, r1
    2640:	ea 94       	dec	r14
    2642:	01 50       	subi	r16, 0x01	; 1
    2644:	10 40       	sbci	r17, 0x00	; 0
    2646:	01 15       	cp	r16, r1
    2648:	11 05       	cpc	r17, r1
    264a:	79 f7       	brne	.-34     	; 0x262a <vfprintf+0x1d4>
    264c:	ea c0       	rjmp	.+468    	; 0x2822 <vfprintf+0x3cc>
    264e:	94 36       	cpi	r25, 0x64	; 100
    2650:	11 f0       	breq	.+4      	; 0x2656 <vfprintf+0x200>
    2652:	99 36       	cpi	r25, 0x69	; 105
    2654:	69 f5       	brne	.+90     	; 0x26b0 <vfprintf+0x25a>
    2656:	f7 fe       	sbrs	r15, 7
    2658:	08 c0       	rjmp	.+16     	; 0x266a <vfprintf+0x214>
    265a:	f5 01       	movw	r30, r10
    265c:	20 81       	ld	r18, Z
    265e:	31 81       	ldd	r19, Z+1	; 0x01
    2660:	42 81       	ldd	r20, Z+2	; 0x02
    2662:	53 81       	ldd	r21, Z+3	; 0x03
    2664:	84 e0       	ldi	r24, 0x04	; 4
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0a c0       	rjmp	.+20     	; 0x267e <vfprintf+0x228>
    266a:	f5 01       	movw	r30, r10
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	9c 01       	movw	r18, r24
    2672:	44 27       	eor	r20, r20
    2674:	37 fd       	sbrc	r19, 7
    2676:	40 95       	com	r20
    2678:	54 2f       	mov	r21, r20
    267a:	82 e0       	ldi	r24, 0x02	; 2
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a8 0e       	add	r10, r24
    2680:	b9 1e       	adc	r11, r25
    2682:	9f e6       	ldi	r25, 0x6F	; 111
    2684:	f9 22       	and	r15, r25
    2686:	57 ff       	sbrs	r21, 7
    2688:	09 c0       	rjmp	.+18     	; 0x269c <vfprintf+0x246>
    268a:	50 95       	com	r21
    268c:	40 95       	com	r20
    268e:	30 95       	com	r19
    2690:	21 95       	neg	r18
    2692:	3f 4f       	sbci	r19, 0xFF	; 255
    2694:	4f 4f       	sbci	r20, 0xFF	; 255
    2696:	5f 4f       	sbci	r21, 0xFF	; 255
    2698:	e0 e8       	ldi	r30, 0x80	; 128
    269a:	fe 2a       	or	r15, r30
    269c:	ca 01       	movw	r24, r20
    269e:	b9 01       	movw	r22, r18
    26a0:	a1 01       	movw	r20, r2
    26a2:	2a e0       	ldi	r18, 0x0A	; 10
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__ultoa_invert>
    26aa:	d8 2e       	mov	r13, r24
    26ac:	d2 18       	sub	r13, r2
    26ae:	40 c0       	rjmp	.+128    	; 0x2730 <vfprintf+0x2da>
    26b0:	95 37       	cpi	r25, 0x75	; 117
    26b2:	29 f4       	brne	.+10     	; 0x26be <vfprintf+0x268>
    26b4:	1f 2d       	mov	r17, r15
    26b6:	1f 7e       	andi	r17, 0xEF	; 239
    26b8:	2a e0       	ldi	r18, 0x0A	; 10
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	1d c0       	rjmp	.+58     	; 0x26f8 <vfprintf+0x2a2>
    26be:	1f 2d       	mov	r17, r15
    26c0:	19 7f       	andi	r17, 0xF9	; 249
    26c2:	9f 36       	cpi	r25, 0x6F	; 111
    26c4:	61 f0       	breq	.+24     	; 0x26de <vfprintf+0x288>
    26c6:	90 37       	cpi	r25, 0x70	; 112
    26c8:	20 f4       	brcc	.+8      	; 0x26d2 <vfprintf+0x27c>
    26ca:	98 35       	cpi	r25, 0x58	; 88
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <vfprintf+0x27a>
    26ce:	ac c0       	rjmp	.+344    	; 0x2828 <vfprintf+0x3d2>
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <vfprintf+0x29a>
    26d2:	90 37       	cpi	r25, 0x70	; 112
    26d4:	39 f0       	breq	.+14     	; 0x26e4 <vfprintf+0x28e>
    26d6:	98 37       	cpi	r25, 0x78	; 120
    26d8:	09 f0       	breq	.+2      	; 0x26dc <vfprintf+0x286>
    26da:	a6 c0       	rjmp	.+332    	; 0x2828 <vfprintf+0x3d2>
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <vfprintf+0x290>
    26de:	28 e0       	ldi	r18, 0x08	; 8
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	0a c0       	rjmp	.+20     	; 0x26f8 <vfprintf+0x2a2>
    26e4:	10 61       	ori	r17, 0x10	; 16
    26e6:	14 fd       	sbrc	r17, 4
    26e8:	14 60       	ori	r17, 0x04	; 4
    26ea:	20 e1       	ldi	r18, 0x10	; 16
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	04 c0       	rjmp	.+8      	; 0x26f8 <vfprintf+0x2a2>
    26f0:	14 fd       	sbrc	r17, 4
    26f2:	16 60       	ori	r17, 0x06	; 6
    26f4:	20 e1       	ldi	r18, 0x10	; 16
    26f6:	32 e0       	ldi	r19, 0x02	; 2
    26f8:	17 ff       	sbrs	r17, 7
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <vfprintf+0x2b6>
    26fc:	f5 01       	movw	r30, r10
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	44 e0       	ldi	r20, 0x04	; 4
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	08 c0       	rjmp	.+16     	; 0x271c <vfprintf+0x2c6>
    270c:	f5 01       	movw	r30, r10
    270e:	80 81       	ld	r24, Z
    2710:	91 81       	ldd	r25, Z+1	; 0x01
    2712:	bc 01       	movw	r22, r24
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	42 e0       	ldi	r20, 0x02	; 2
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	a4 0e       	add	r10, r20
    271e:	b5 1e       	adc	r11, r21
    2720:	a1 01       	movw	r20, r2
    2722:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__ultoa_invert>
    2726:	d8 2e       	mov	r13, r24
    2728:	d2 18       	sub	r13, r2
    272a:	8f e7       	ldi	r24, 0x7F	; 127
    272c:	f8 2e       	mov	r15, r24
    272e:	f1 22       	and	r15, r17
    2730:	f6 fe       	sbrs	r15, 6
    2732:	0b c0       	rjmp	.+22     	; 0x274a <vfprintf+0x2f4>
    2734:	5e ef       	ldi	r21, 0xFE	; 254
    2736:	f5 22       	and	r15, r21
    2738:	d9 14       	cp	r13, r9
    273a:	38 f4       	brcc	.+14     	; 0x274a <vfprintf+0x2f4>
    273c:	f4 fe       	sbrs	r15, 4
    273e:	07 c0       	rjmp	.+14     	; 0x274e <vfprintf+0x2f8>
    2740:	f2 fc       	sbrc	r15, 2
    2742:	05 c0       	rjmp	.+10     	; 0x274e <vfprintf+0x2f8>
    2744:	8f ee       	ldi	r24, 0xEF	; 239
    2746:	f8 22       	and	r15, r24
    2748:	02 c0       	rjmp	.+4      	; 0x274e <vfprintf+0x2f8>
    274a:	1d 2d       	mov	r17, r13
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <vfprintf+0x2fa>
    274e:	19 2d       	mov	r17, r9
    2750:	f4 fe       	sbrs	r15, 4
    2752:	0d c0       	rjmp	.+26     	; 0x276e <vfprintf+0x318>
    2754:	fe 01       	movw	r30, r28
    2756:	ed 0d       	add	r30, r13
    2758:	f1 1d       	adc	r31, r1
    275a:	80 81       	ld	r24, Z
    275c:	80 33       	cpi	r24, 0x30	; 48
    275e:	19 f4       	brne	.+6      	; 0x2766 <vfprintf+0x310>
    2760:	99 ee       	ldi	r25, 0xE9	; 233
    2762:	f9 22       	and	r15, r25
    2764:	08 c0       	rjmp	.+16     	; 0x2776 <vfprintf+0x320>
    2766:	1f 5f       	subi	r17, 0xFF	; 255
    2768:	f2 fe       	sbrs	r15, 2
    276a:	05 c0       	rjmp	.+10     	; 0x2776 <vfprintf+0x320>
    276c:	03 c0       	rjmp	.+6      	; 0x2774 <vfprintf+0x31e>
    276e:	8f 2d       	mov	r24, r15
    2770:	86 78       	andi	r24, 0x86	; 134
    2772:	09 f0       	breq	.+2      	; 0x2776 <vfprintf+0x320>
    2774:	1f 5f       	subi	r17, 0xFF	; 255
    2776:	0f 2d       	mov	r16, r15
    2778:	f3 fc       	sbrc	r15, 3
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <vfprintf+0x34e>
    277c:	f0 fe       	sbrs	r15, 0
    277e:	0f c0       	rjmp	.+30     	; 0x279e <vfprintf+0x348>
    2780:	1e 15       	cp	r17, r14
    2782:	10 f0       	brcs	.+4      	; 0x2788 <vfprintf+0x332>
    2784:	9d 2c       	mov	r9, r13
    2786:	0b c0       	rjmp	.+22     	; 0x279e <vfprintf+0x348>
    2788:	9d 2c       	mov	r9, r13
    278a:	9e 0c       	add	r9, r14
    278c:	91 1a       	sub	r9, r17
    278e:	1e 2d       	mov	r17, r14
    2790:	06 c0       	rjmp	.+12     	; 0x279e <vfprintf+0x348>
    2792:	80 e2       	ldi	r24, 0x20	; 32
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	b3 01       	movw	r22, r6
    2798:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    279c:	1f 5f       	subi	r17, 0xFF	; 255
    279e:	1e 15       	cp	r17, r14
    27a0:	c0 f3       	brcs	.-16     	; 0x2792 <vfprintf+0x33c>
    27a2:	04 c0       	rjmp	.+8      	; 0x27ac <vfprintf+0x356>
    27a4:	1e 15       	cp	r17, r14
    27a6:	10 f4       	brcc	.+4      	; 0x27ac <vfprintf+0x356>
    27a8:	e1 1a       	sub	r14, r17
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <vfprintf+0x358>
    27ac:	ee 24       	eor	r14, r14
    27ae:	04 ff       	sbrs	r16, 4
    27b0:	0f c0       	rjmp	.+30     	; 0x27d0 <vfprintf+0x37a>
    27b2:	80 e3       	ldi	r24, 0x30	; 48
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	b3 01       	movw	r22, r6
    27b8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    27bc:	02 ff       	sbrs	r16, 2
    27be:	1d c0       	rjmp	.+58     	; 0x27fa <vfprintf+0x3a4>
    27c0:	01 fd       	sbrc	r16, 1
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <vfprintf+0x374>
    27c4:	88 e7       	ldi	r24, 0x78	; 120
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	0e c0       	rjmp	.+28     	; 0x27e6 <vfprintf+0x390>
    27ca:	88 e5       	ldi	r24, 0x58	; 88
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0b c0       	rjmp	.+22     	; 0x27e6 <vfprintf+0x390>
    27d0:	80 2f       	mov	r24, r16
    27d2:	86 78       	andi	r24, 0x86	; 134
    27d4:	91 f0       	breq	.+36     	; 0x27fa <vfprintf+0x3a4>
    27d6:	01 ff       	sbrs	r16, 1
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <vfprintf+0x388>
    27da:	8b e2       	ldi	r24, 0x2B	; 43
    27dc:	01 c0       	rjmp	.+2      	; 0x27e0 <vfprintf+0x38a>
    27de:	80 e2       	ldi	r24, 0x20	; 32
    27e0:	f7 fc       	sbrc	r15, 7
    27e2:	8d e2       	ldi	r24, 0x2D	; 45
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	b3 01       	movw	r22, r6
    27e8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    27ec:	06 c0       	rjmp	.+12     	; 0x27fa <vfprintf+0x3a4>
    27ee:	80 e3       	ldi	r24, 0x30	; 48
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	b3 01       	movw	r22, r6
    27f4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    27f8:	9a 94       	dec	r9
    27fa:	d9 14       	cp	r13, r9
    27fc:	c0 f3       	brcs	.-16     	; 0x27ee <vfprintf+0x398>
    27fe:	da 94       	dec	r13
    2800:	f1 01       	movw	r30, r2
    2802:	ed 0d       	add	r30, r13
    2804:	f1 1d       	adc	r31, r1
    2806:	80 81       	ld	r24, Z
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	b3 01       	movw	r22, r6
    280c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2810:	dd 20       	and	r13, r13
    2812:	a9 f7       	brne	.-22     	; 0x27fe <vfprintf+0x3a8>
    2814:	06 c0       	rjmp	.+12     	; 0x2822 <vfprintf+0x3cc>
    2816:	80 e2       	ldi	r24, 0x20	; 32
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	b3 01       	movw	r22, r6
    281c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2820:	ea 94       	dec	r14
    2822:	ee 20       	and	r14, r14
    2824:	c1 f7       	brne	.-16     	; 0x2816 <vfprintf+0x3c0>
    2826:	43 ce       	rjmp	.-890    	; 0x24ae <vfprintf+0x58>
    2828:	f3 01       	movw	r30, r6
    282a:	66 81       	ldd	r22, Z+6	; 0x06
    282c:	77 81       	ldd	r23, Z+7	; 0x07
    282e:	cb 01       	movw	r24, r22
    2830:	2b 96       	adiw	r28, 0x0b	; 11
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	df 90       	pop	r13
    284a:	cf 90       	pop	r12
    284c:	bf 90       	pop	r11
    284e:	af 90       	pop	r10
    2850:	9f 90       	pop	r9
    2852:	8f 90       	pop	r8
    2854:	7f 90       	pop	r7
    2856:	6f 90       	pop	r6
    2858:	5f 90       	pop	r5
    285a:	4f 90       	pop	r4
    285c:	3f 90       	pop	r3
    285e:	2f 90       	pop	r2
    2860:	08 95       	ret

00002862 <calloc>:
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	68 9f       	mul	r22, r24
    286c:	80 01       	movw	r16, r0
    286e:	69 9f       	mul	r22, r25
    2870:	10 0d       	add	r17, r0
    2872:	78 9f       	mul	r23, r24
    2874:	10 0d       	add	r17, r0
    2876:	11 24       	eor	r1, r1
    2878:	c8 01       	movw	r24, r16
    287a:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
    287e:	ec 01       	movw	r28, r24
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	29 f0       	breq	.+10     	; 0x288e <calloc+0x2c>
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	a8 01       	movw	r20, r16
    288a:	0e 94 5d 15 	call	0x2aba	; 0x2aba <memset>
    288e:	ce 01       	movw	r24, r28
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	08 95       	ret

0000289a <malloc>:
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	bc 01       	movw	r22, r24
    28a0:	82 30       	cpi	r24, 0x02	; 2
    28a2:	91 05       	cpc	r25, r1
    28a4:	10 f4       	brcc	.+4      	; 0x28aa <malloc+0x10>
    28a6:	62 e0       	ldi	r22, 0x02	; 2
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	a0 91 33 02 	lds	r26, 0x0233
    28ae:	b0 91 34 02 	lds	r27, 0x0234
    28b2:	ed 01       	movw	r28, r26
    28b4:	e0 e0       	ldi	r30, 0x00	; 0
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	21 c0       	rjmp	.+66     	; 0x2900 <malloc+0x66>
    28be:	88 81       	ld	r24, Y
    28c0:	99 81       	ldd	r25, Y+1	; 0x01
    28c2:	86 17       	cp	r24, r22
    28c4:	97 07       	cpc	r25, r23
    28c6:	69 f4       	brne	.+26     	; 0x28e2 <malloc+0x48>
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	30 97       	sbiw	r30, 0x00	; 0
    28ce:	19 f0       	breq	.+6      	; 0x28d6 <malloc+0x3c>
    28d0:	93 83       	std	Z+3, r25	; 0x03
    28d2:	82 83       	std	Z+2, r24	; 0x02
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <malloc+0x44>
    28d6:	90 93 34 02 	sts	0x0234, r25
    28da:	80 93 33 02 	sts	0x0233, r24
    28de:	fe 01       	movw	r30, r28
    28e0:	34 c0       	rjmp	.+104    	; 0x294a <malloc+0xb0>
    28e2:	68 17       	cp	r22, r24
    28e4:	79 07       	cpc	r23, r25
    28e6:	38 f4       	brcc	.+14     	; 0x28f6 <malloc+0x5c>
    28e8:	41 15       	cp	r20, r1
    28ea:	51 05       	cpc	r21, r1
    28ec:	19 f0       	breq	.+6      	; 0x28f4 <malloc+0x5a>
    28ee:	84 17       	cp	r24, r20
    28f0:	95 07       	cpc	r25, r21
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <malloc+0x5c>
    28f4:	ac 01       	movw	r20, r24
    28f6:	fe 01       	movw	r30, r28
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	9b 81       	ldd	r25, Y+3	; 0x03
    28fc:	9c 01       	movw	r18, r24
    28fe:	e9 01       	movw	r28, r18
    2900:	20 97       	sbiw	r28, 0x00	; 0
    2902:	e9 f6       	brne	.-70     	; 0x28be <malloc+0x24>
    2904:	41 15       	cp	r20, r1
    2906:	51 05       	cpc	r21, r1
    2908:	a9 f1       	breq	.+106    	; 0x2974 <malloc+0xda>
    290a:	ca 01       	movw	r24, r20
    290c:	86 1b       	sub	r24, r22
    290e:	97 0b       	sbc	r25, r23
    2910:	04 97       	sbiw	r24, 0x04	; 4
    2912:	08 f4       	brcc	.+2      	; 0x2916 <malloc+0x7c>
    2914:	ba 01       	movw	r22, r20
    2916:	e0 e0       	ldi	r30, 0x00	; 0
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	2a c0       	rjmp	.+84     	; 0x2970 <malloc+0xd6>
    291c:	8d 91       	ld	r24, X+
    291e:	9c 91       	ld	r25, X
    2920:	11 97       	sbiw	r26, 0x01	; 1
    2922:	84 17       	cp	r24, r20
    2924:	95 07       	cpc	r25, r21
    2926:	f9 f4       	brne	.+62     	; 0x2966 <malloc+0xcc>
    2928:	64 17       	cp	r22, r20
    292a:	75 07       	cpc	r23, r21
    292c:	81 f4       	brne	.+32     	; 0x294e <malloc+0xb4>
    292e:	12 96       	adiw	r26, 0x02	; 2
    2930:	8d 91       	ld	r24, X+
    2932:	9c 91       	ld	r25, X
    2934:	13 97       	sbiw	r26, 0x03	; 3
    2936:	30 97       	sbiw	r30, 0x00	; 0
    2938:	19 f0       	breq	.+6      	; 0x2940 <malloc+0xa6>
    293a:	93 83       	std	Z+3, r25	; 0x03
    293c:	82 83       	std	Z+2, r24	; 0x02
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <malloc+0xae>
    2940:	90 93 34 02 	sts	0x0234, r25
    2944:	80 93 33 02 	sts	0x0233, r24
    2948:	fd 01       	movw	r30, r26
    294a:	32 96       	adiw	r30, 0x02	; 2
    294c:	4f c0       	rjmp	.+158    	; 0x29ec <malloc+0x152>
    294e:	ca 01       	movw	r24, r20
    2950:	86 1b       	sub	r24, r22
    2952:	97 0b       	sbc	r25, r23
    2954:	fd 01       	movw	r30, r26
    2956:	e8 0f       	add	r30, r24
    2958:	f9 1f       	adc	r31, r25
    295a:	61 93       	st	Z+, r22
    295c:	71 93       	st	Z+, r23
    295e:	02 97       	sbiw	r24, 0x02	; 2
    2960:	8d 93       	st	X+, r24
    2962:	9c 93       	st	X, r25
    2964:	43 c0       	rjmp	.+134    	; 0x29ec <malloc+0x152>
    2966:	fd 01       	movw	r30, r26
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	9c 01       	movw	r18, r24
    296e:	d9 01       	movw	r26, r18
    2970:	10 97       	sbiw	r26, 0x00	; 0
    2972:	a1 f6       	brne	.-88     	; 0x291c <malloc+0x82>
    2974:	80 91 31 02 	lds	r24, 0x0231
    2978:	90 91 32 02 	lds	r25, 0x0232
    297c:	89 2b       	or	r24, r25
    297e:	41 f4       	brne	.+16     	; 0x2990 <malloc+0xf6>
    2980:	80 91 09 02 	lds	r24, 0x0209
    2984:	90 91 0a 02 	lds	r25, 0x020A
    2988:	90 93 32 02 	sts	0x0232, r25
    298c:	80 93 31 02 	sts	0x0231, r24
    2990:	40 91 0b 02 	lds	r20, 0x020B
    2994:	50 91 0c 02 	lds	r21, 0x020C
    2998:	41 15       	cp	r20, r1
    299a:	51 05       	cpc	r21, r1
    299c:	41 f4       	brne	.+16     	; 0x29ae <malloc+0x114>
    299e:	4d b7       	in	r20, 0x3d	; 61
    29a0:	5e b7       	in	r21, 0x3e	; 62
    29a2:	80 91 07 02 	lds	r24, 0x0207
    29a6:	90 91 08 02 	lds	r25, 0x0208
    29aa:	48 1b       	sub	r20, r24
    29ac:	59 0b       	sbc	r21, r25
    29ae:	20 91 31 02 	lds	r18, 0x0231
    29b2:	30 91 32 02 	lds	r19, 0x0232
    29b6:	24 17       	cp	r18, r20
    29b8:	35 07       	cpc	r19, r21
    29ba:	b0 f4       	brcc	.+44     	; 0x29e8 <malloc+0x14e>
    29bc:	ca 01       	movw	r24, r20
    29be:	82 1b       	sub	r24, r18
    29c0:	93 0b       	sbc	r25, r19
    29c2:	86 17       	cp	r24, r22
    29c4:	97 07       	cpc	r25, r23
    29c6:	80 f0       	brcs	.+32     	; 0x29e8 <malloc+0x14e>
    29c8:	ab 01       	movw	r20, r22
    29ca:	4e 5f       	subi	r20, 0xFE	; 254
    29cc:	5f 4f       	sbci	r21, 0xFF	; 255
    29ce:	84 17       	cp	r24, r20
    29d0:	95 07       	cpc	r25, r21
    29d2:	50 f0       	brcs	.+20     	; 0x29e8 <malloc+0x14e>
    29d4:	42 0f       	add	r20, r18
    29d6:	53 1f       	adc	r21, r19
    29d8:	50 93 32 02 	sts	0x0232, r21
    29dc:	40 93 31 02 	sts	0x0231, r20
    29e0:	f9 01       	movw	r30, r18
    29e2:	61 93       	st	Z+, r22
    29e4:	71 93       	st	Z+, r23
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <malloc+0x152>
    29e8:	e0 e0       	ldi	r30, 0x00	; 0
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	cf 01       	movw	r24, r30
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	08 95       	ret

000029f4 <free>:
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	09 f4       	brne	.+2      	; 0x29fe <free+0xa>
    29fc:	50 c0       	rjmp	.+160    	; 0x2a9e <free+0xaa>
    29fe:	ec 01       	movw	r28, r24
    2a00:	22 97       	sbiw	r28, 0x02	; 2
    2a02:	1b 82       	std	Y+3, r1	; 0x03
    2a04:	1a 82       	std	Y+2, r1	; 0x02
    2a06:	a0 91 33 02 	lds	r26, 0x0233
    2a0a:	b0 91 34 02 	lds	r27, 0x0234
    2a0e:	10 97       	sbiw	r26, 0x00	; 0
    2a10:	09 f1       	breq	.+66     	; 0x2a54 <free+0x60>
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	ac 17       	cp	r26, r28
    2a18:	bd 07       	cpc	r27, r29
    2a1a:	08 f1       	brcs	.+66     	; 0x2a5e <free+0x6a>
    2a1c:	bb 83       	std	Y+3, r27	; 0x03
    2a1e:	aa 83       	std	Y+2, r26	; 0x02
    2a20:	fe 01       	movw	r30, r28
    2a22:	21 91       	ld	r18, Z+
    2a24:	31 91       	ld	r19, Z+
    2a26:	e2 0f       	add	r30, r18
    2a28:	f3 1f       	adc	r31, r19
    2a2a:	ae 17       	cp	r26, r30
    2a2c:	bf 07       	cpc	r27, r31
    2a2e:	79 f4       	brne	.+30     	; 0x2a4e <free+0x5a>
    2a30:	8d 91       	ld	r24, X+
    2a32:	9c 91       	ld	r25, X
    2a34:	11 97       	sbiw	r26, 0x01	; 1
    2a36:	28 0f       	add	r18, r24
    2a38:	39 1f       	adc	r19, r25
    2a3a:	2e 5f       	subi	r18, 0xFE	; 254
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	39 83       	std	Y+1, r19	; 0x01
    2a40:	28 83       	st	Y, r18
    2a42:	12 96       	adiw	r26, 0x02	; 2
    2a44:	8d 91       	ld	r24, X+
    2a46:	9c 91       	ld	r25, X
    2a48:	13 97       	sbiw	r26, 0x03	; 3
    2a4a:	9b 83       	std	Y+3, r25	; 0x03
    2a4c:	8a 83       	std	Y+2, r24	; 0x02
    2a4e:	41 15       	cp	r20, r1
    2a50:	51 05       	cpc	r21, r1
    2a52:	71 f4       	brne	.+28     	; 0x2a70 <free+0x7c>
    2a54:	d0 93 34 02 	sts	0x0234, r29
    2a58:	c0 93 33 02 	sts	0x0233, r28
    2a5c:	20 c0       	rjmp	.+64     	; 0x2a9e <free+0xaa>
    2a5e:	12 96       	adiw	r26, 0x02	; 2
    2a60:	8d 91       	ld	r24, X+
    2a62:	9c 91       	ld	r25, X
    2a64:	13 97       	sbiw	r26, 0x03	; 3
    2a66:	ad 01       	movw	r20, r26
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	11 f0       	breq	.+4      	; 0x2a70 <free+0x7c>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	d3 cf       	rjmp	.-90     	; 0x2a16 <free+0x22>
    2a70:	fa 01       	movw	r30, r20
    2a72:	d3 83       	std	Z+3, r29	; 0x03
    2a74:	c2 83       	std	Z+2, r28	; 0x02
    2a76:	21 91       	ld	r18, Z+
    2a78:	31 91       	ld	r19, Z+
    2a7a:	e2 0f       	add	r30, r18
    2a7c:	f3 1f       	adc	r31, r19
    2a7e:	ce 17       	cp	r28, r30
    2a80:	df 07       	cpc	r29, r31
    2a82:	69 f4       	brne	.+26     	; 0x2a9e <free+0xaa>
    2a84:	88 81       	ld	r24, Y
    2a86:	99 81       	ldd	r25, Y+1	; 0x01
    2a88:	28 0f       	add	r18, r24
    2a8a:	39 1f       	adc	r19, r25
    2a8c:	2e 5f       	subi	r18, 0xFE	; 254
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	fa 01       	movw	r30, r20
    2a92:	31 83       	std	Z+1, r19	; 0x01
    2a94:	20 83       	st	Z, r18
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9a:	93 83       	std	Z+3, r25	; 0x03
    2a9c:	82 83       	std	Z+2, r24	; 0x02
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	08 95       	ret

00002aa4 <strnlen_P>:
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	05 90       	lpm	r0, Z+
    2aa8:	61 50       	subi	r22, 0x01	; 1
    2aaa:	70 40       	sbci	r23, 0x00	; 0
    2aac:	01 10       	cpse	r0, r1
    2aae:	d8 f7       	brcc	.-10     	; 0x2aa6 <strnlen_P+0x2>
    2ab0:	80 95       	com	r24
    2ab2:	90 95       	com	r25
    2ab4:	8e 0f       	add	r24, r30
    2ab6:	9f 1f       	adc	r25, r31
    2ab8:	08 95       	ret

00002aba <memset>:
    2aba:	dc 01       	movw	r26, r24
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <memset+0x6>
    2abe:	6d 93       	st	X+, r22
    2ac0:	41 50       	subi	r20, 0x01	; 1
    2ac2:	50 40       	sbci	r21, 0x00	; 0
    2ac4:	e0 f7       	brcc	.-8      	; 0x2abe <memset+0x4>
    2ac6:	08 95       	ret

00002ac8 <strnlen>:
    2ac8:	fc 01       	movw	r30, r24
    2aca:	61 50       	subi	r22, 0x01	; 1
    2acc:	70 40       	sbci	r23, 0x00	; 0
    2ace:	01 90       	ld	r0, Z+
    2ad0:	01 10       	cpse	r0, r1
    2ad2:	d8 f7       	brcc	.-10     	; 0x2aca <strnlen+0x2>
    2ad4:	80 95       	com	r24
    2ad6:	90 95       	com	r25
    2ad8:	8e 0f       	add	r24, r30
    2ada:	9f 1f       	adc	r25, r31
    2adc:	08 95       	ret

00002ade <fputc>:
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	8c 01       	movw	r16, r24
    2ae8:	eb 01       	movw	r28, r22
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	81 ff       	sbrs	r24, 1
    2aee:	1b c0       	rjmp	.+54     	; 0x2b26 <fputc+0x48>
    2af0:	82 ff       	sbrs	r24, 2
    2af2:	0d c0       	rjmp	.+26     	; 0x2b0e <fputc+0x30>
    2af4:	2e 81       	ldd	r18, Y+6	; 0x06
    2af6:	3f 81       	ldd	r19, Y+7	; 0x07
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	9d 81       	ldd	r25, Y+5	; 0x05
    2afc:	28 17       	cp	r18, r24
    2afe:	39 07       	cpc	r19, r25
    2b00:	64 f4       	brge	.+24     	; 0x2b1a <fputc+0x3c>
    2b02:	e8 81       	ld	r30, Y
    2b04:	f9 81       	ldd	r31, Y+1	; 0x01
    2b06:	01 93       	st	Z+, r16
    2b08:	f9 83       	std	Y+1, r31	; 0x01
    2b0a:	e8 83       	st	Y, r30
    2b0c:	06 c0       	rjmp	.+12     	; 0x2b1a <fputc+0x3c>
    2b0e:	e8 85       	ldd	r30, Y+8	; 0x08
    2b10:	f9 85       	ldd	r31, Y+9	; 0x09
    2b12:	80 2f       	mov	r24, r16
    2b14:	09 95       	icall
    2b16:	89 2b       	or	r24, r25
    2b18:	31 f4       	brne	.+12     	; 0x2b26 <fputc+0x48>
    2b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b1e:	01 96       	adiw	r24, 0x01	; 1
    2b20:	9f 83       	std	Y+7, r25	; 0x07
    2b22:	8e 83       	std	Y+6, r24	; 0x06
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <fputc+0x4c>
    2b26:	0f ef       	ldi	r16, 0xFF	; 255
    2b28:	1f ef       	ldi	r17, 0xFF	; 255
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	08 95       	ret

00002b36 <__ultoa_invert>:
    2b36:	fa 01       	movw	r30, r20
    2b38:	aa 27       	eor	r26, r26
    2b3a:	28 30       	cpi	r18, 0x08	; 8
    2b3c:	51 f1       	breq	.+84     	; 0x2b92 <__ultoa_invert+0x5c>
    2b3e:	20 31       	cpi	r18, 0x10	; 16
    2b40:	81 f1       	breq	.+96     	; 0x2ba2 <__ultoa_invert+0x6c>
    2b42:	e8 94       	clt
    2b44:	6f 93       	push	r22
    2b46:	6e 7f       	andi	r22, 0xFE	; 254
    2b48:	6e 5f       	subi	r22, 0xFE	; 254
    2b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b50:	af 4f       	sbci	r26, 0xFF	; 255
    2b52:	b1 e0       	ldi	r27, 0x01	; 1
    2b54:	3e d0       	rcall	.+124    	; 0x2bd2 <__ultoa_invert+0x9c>
    2b56:	b4 e0       	ldi	r27, 0x04	; 4
    2b58:	3c d0       	rcall	.+120    	; 0x2bd2 <__ultoa_invert+0x9c>
    2b5a:	67 0f       	add	r22, r23
    2b5c:	78 1f       	adc	r23, r24
    2b5e:	89 1f       	adc	r24, r25
    2b60:	9a 1f       	adc	r25, r26
    2b62:	a1 1d       	adc	r26, r1
    2b64:	68 0f       	add	r22, r24
    2b66:	79 1f       	adc	r23, r25
    2b68:	8a 1f       	adc	r24, r26
    2b6a:	91 1d       	adc	r25, r1
    2b6c:	a1 1d       	adc	r26, r1
    2b6e:	6a 0f       	add	r22, r26
    2b70:	71 1d       	adc	r23, r1
    2b72:	81 1d       	adc	r24, r1
    2b74:	91 1d       	adc	r25, r1
    2b76:	a1 1d       	adc	r26, r1
    2b78:	20 d0       	rcall	.+64     	; 0x2bba <__ultoa_invert+0x84>
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <__ultoa_invert+0x48>
    2b7c:	68 94       	set
    2b7e:	3f 91       	pop	r19
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	26 9f       	mul	r18, r22
    2b84:	11 24       	eor	r1, r1
    2b86:	30 19       	sub	r19, r0
    2b88:	30 5d       	subi	r19, 0xD0	; 208
    2b8a:	31 93       	st	Z+, r19
    2b8c:	de f6       	brtc	.-74     	; 0x2b44 <__ultoa_invert+0xe>
    2b8e:	cf 01       	movw	r24, r30
    2b90:	08 95       	ret
    2b92:	46 2f       	mov	r20, r22
    2b94:	47 70       	andi	r20, 0x07	; 7
    2b96:	40 5d       	subi	r20, 0xD0	; 208
    2b98:	41 93       	st	Z+, r20
    2b9a:	b3 e0       	ldi	r27, 0x03	; 3
    2b9c:	0f d0       	rcall	.+30     	; 0x2bbc <__ultoa_invert+0x86>
    2b9e:	c9 f7       	brne	.-14     	; 0x2b92 <__ultoa_invert+0x5c>
    2ba0:	f6 cf       	rjmp	.-20     	; 0x2b8e <__ultoa_invert+0x58>
    2ba2:	46 2f       	mov	r20, r22
    2ba4:	4f 70       	andi	r20, 0x0F	; 15
    2ba6:	40 5d       	subi	r20, 0xD0	; 208
    2ba8:	4a 33       	cpi	r20, 0x3A	; 58
    2baa:	18 f0       	brcs	.+6      	; 0x2bb2 <__ultoa_invert+0x7c>
    2bac:	49 5d       	subi	r20, 0xD9	; 217
    2bae:	31 fd       	sbrc	r19, 1
    2bb0:	40 52       	subi	r20, 0x20	; 32
    2bb2:	41 93       	st	Z+, r20
    2bb4:	02 d0       	rcall	.+4      	; 0x2bba <__ultoa_invert+0x84>
    2bb6:	a9 f7       	brne	.-22     	; 0x2ba2 <__ultoa_invert+0x6c>
    2bb8:	ea cf       	rjmp	.-44     	; 0x2b8e <__ultoa_invert+0x58>
    2bba:	b4 e0       	ldi	r27, 0x04	; 4
    2bbc:	a6 95       	lsr	r26
    2bbe:	97 95       	ror	r25
    2bc0:	87 95       	ror	r24
    2bc2:	77 95       	ror	r23
    2bc4:	67 95       	ror	r22
    2bc6:	ba 95       	dec	r27
    2bc8:	c9 f7       	brne	.-14     	; 0x2bbc <__ultoa_invert+0x86>
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	61 05       	cpc	r22, r1
    2bce:	71 05       	cpc	r23, r1
    2bd0:	08 95       	ret
    2bd2:	9b 01       	movw	r18, r22
    2bd4:	ac 01       	movw	r20, r24
    2bd6:	0a 2e       	mov	r0, r26
    2bd8:	06 94       	lsr	r0
    2bda:	57 95       	ror	r21
    2bdc:	47 95       	ror	r20
    2bde:	37 95       	ror	r19
    2be0:	27 95       	ror	r18
    2be2:	ba 95       	dec	r27
    2be4:	c9 f7       	brne	.-14     	; 0x2bd8 <__ultoa_invert+0xa2>
    2be6:	62 0f       	add	r22, r18
    2be8:	73 1f       	adc	r23, r19
    2bea:	84 1f       	adc	r24, r20
    2bec:	95 1f       	adc	r25, r21
    2bee:	a0 1d       	adc	r26, r0
    2bf0:	08 95       	ret

00002bf2 <_exit>:
    2bf2:	f8 94       	cli

00002bf4 <__stop_program>:
    2bf4:	ff cf       	rjmp	.-2      	; 0x2bf4 <__stop_program>
