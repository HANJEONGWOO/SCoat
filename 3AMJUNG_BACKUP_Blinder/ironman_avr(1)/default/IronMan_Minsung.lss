
IronMan_Minsung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00002e86  00002f1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800188  00800188  00002fa2  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00002fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002cc  00000000  00000000  00003102  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002613  00000000  00000000  000033ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000114d  00000000  00000000  000059e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cb6  00000000  00000000  00006b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000087e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ad  00000000  00000000  00008aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00008f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000971f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e8       	ldi	r30, 0x86	; 134
      a0:	fe e2       	ldi	r31, 0x2E	; 46
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 38       	cpi	r26, 0x88	; 136
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a8 e8       	ldi	r26, 0x88	; 136
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3a       	cpi	r26, 0xAF	; 175
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 2d 0a 	call	0x145a	; 0x145a <main>
      c6:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Putchar>:
static int shot_cnt;
static int call_size_cnt;
static int command;

static int Putchar(char c, FILE *stream)//FILE 사용안함, 송신, avr->컴퓨터
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <Putchar+0x6>
      d4:	0f 92       	push	r0
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	89 83       	std	Y+1, r24	; 0x01
      dc:	7b 83       	std	Y+3, r23	; 0x03
      de:	6a 83       	std	Y+2, r22	; 0x02
 if(c == '\n')
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	8a 30       	cpi	r24, 0x0A	; 10
      e4:	29 f4       	brne	.+10     	; 0xf0 <Putchar+0x22>
  Putchar('\r', 0); 
      e6:	8d e0       	ldi	r24, 0x0D	; 13
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	0e 94 67 00 	call	0xce	; 0xce <Putchar>

 while(!(UCSR1A & 0x20)); // UDRE, data register empty
      f0:	eb e9       	ldi	r30, 0x9B	; 155
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	88 2f       	mov	r24, r24
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	80 72       	andi	r24, 0x20	; 32
      fc:	90 70       	andi	r25, 0x00	; 0
      fe:	00 97       	sbiw	r24, 0x00	; 0
     100:	b9 f3       	breq	.-18     	; 0xf0 <Putchar+0x22>
   UDR1 = c;
     102:	ec e9       	ldi	r30, 0x9C	; 156
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	80 83       	st	Z, r24
 return 0;
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	90 e0       	ldi	r25, 0x00	; 0
}
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	cf 91       	pop	r28
     116:	df 91       	pop	r29
     118:	08 95       	ret

0000011a <Getchar>:
 
static int Getchar(FILE *stream)//수신, 컴퓨터->avr
{
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	00 d0       	rcall	.+0      	; 0x120 <Getchar+0x6>
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	9a 83       	std	Y+2, r25	; 0x02
     126:	89 83       	std	Y+1, r24	; 0x01
 while(!(UCSR1A & 0x80));
     128:	eb e9       	ldi	r30, 0x9B	; 155
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	88 23       	and	r24, r24
     130:	dc f7       	brge	.-10     	; 0x128 <Getchar+0xe>
 return UDR1;
     132:	ec e9       	ldi	r30, 0x9C	; 156
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	88 2f       	mov	r24, r24
     13a:	90 e0       	ldi	r25, 0x00	; 0
}
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	cf 91       	pop	r28
     142:	df 91       	pop	r29
     144:	08 95       	ret

00000146 <port_init>:

void port_init(void)
{
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
  DDRF=0xF0;	//F 0, 1, 2(가슴)번 핀 입력 설정 / 3번 핀 0 설정 - 부저모듈 초기화
     14e:	e1 e6       	ldi	r30, 0x61	; 97
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 ef       	ldi	r24, 0xF0	; 240
     154:	80 83       	st	Z, r24
  ADCSRA = 0x00;	//처음에는 DISABLE -> 타이머 카운트를 이용하여 ENABLE 할 예정
     156:	e6 e2       	ldi	r30, 0x26	; 38
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	10 82       	st	Z, r1

  DDRA=0x07;	//A 0, 1번 핀 출력 설정(진동) || 2번 핀 출력 설정 (LED)
     15c:	ea e3       	ldi	r30, 0x3A	; 58
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	87 e0       	ldi	r24, 0x07	; 7
     162:	80 83       	st	Z, r24

  TIMSK = 0x04;		// 타이머, 카운트 1 오버플로 인터럽트 허용
     164:	e7 e5       	ldi	r30, 0x57	; 87
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	84 e0       	ldi	r24, 0x04	; 4
     16a:	80 83       	st	Z, r24
  TCCR1A = 0x00;	//
     16c:	ef e4       	ldi	r30, 0x4F	; 79
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	10 82       	st	Z, r1
  TCCR1B = 0x03;	//분주비 64		
     172:	ee e4       	ldi	r30, 0x4E	; 78
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	80 83       	st	Z, r24

  DDRB = 0x00;	//B 포트 입력
     17a:	e7 e3       	ldi	r30, 0x37	; 55
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	10 82       	st	Z, r1
}
     180:	cf 91       	pop	r28
     182:	df 91       	pop	r29
     184:	08 95       	ret

00000186 <uart0_init>:

void uart0_init(void) //Camera
{
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     18e:	ea e2       	ldi	r30, 0x2A	; 42
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     194:	eb e2       	ldi	r30, 0x2B	; 43
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     19a:	e5 e9       	ldi	r30, 0x95	; 149
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	86 e0       	ldi	r24, 0x06	; 6
     1a0:	80 83       	st	Z, r24
 UBRR0L = 0x19; //384
     1a2:	e9 e2       	ldi	r30, 0x29	; 41
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	89 e1       	ldi	r24, 0x19	; 25
     1a8:	80 83       	st	Z, r24
 UBRR0H = 0x00; 
     1aa:	e0 e9       	ldi	r30, 0x90	; 144
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
 UCSR0B = 0b10011000; //수신만
     1b0:	ea e2       	ldi	r30, 0x2A	; 42
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	88 e9       	ldi	r24, 0x98	; 152
     1b6:	80 83       	st	Z, r24
}
     1b8:	cf 91       	pop	r28
     1ba:	df 91       	pop	r29
     1bc:	08 95       	ret

000001be <uart1_init>:

void uart1_init(void) //PC와 통신
{
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
 UCSR1B = 0x00; //disable while setting baud rate
     1c6:	ea e9       	ldi	r30, 0x9A	; 154
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	10 82       	st	Z, r1
 UCSR1A = 0x00;
     1cc:	eb e9       	ldi	r30, 0x9B	; 155
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	10 82       	st	Z, r1
 UCSR1C = 0x06;
     1d2:	ed e9       	ldi	r30, 0x9D	; 157
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	86 e0       	ldi	r24, 0x06	; 6
     1d8:	80 83       	st	Z, r24
 UBRR1L = 0x08; //set baud rate 115200
     1da:	e9 e9       	ldi	r30, 0x99	; 153
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	80 83       	st	Z, r24
 UBRR1H = 0x00; 
     1e2:	e8 e9       	ldi	r30, 0x98	; 152
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	10 82       	st	Z, r1
 UCSR1B = 0b10011000; //송신 인터럽트 개방
     1e8:	ea e9       	ldi	r30, 0x9A	; 154
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	88 e9       	ldi	r24, 0x98	; 152
     1ee:	80 83       	st	Z, r24
}
     1f0:	cf 91       	pop	r28
     1f2:	df 91       	pop	r29
     1f4:	08 95       	ret

000001f6 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	00 90 5b 00 	lds	r0, 0x005B
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	2f 93       	push	r18
     208:	3f 93       	push	r19
     20a:	4f 93       	push	r20
     20c:	5f 93       	push	r21
     20e:	6f 93       	push	r22
     210:	7f 93       	push	r23
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	af 93       	push	r26
     218:	bf 93       	push	r27
     21a:	ef 93       	push	r30
     21c:	ff 93       	push	r31
     21e:	df 93       	push	r29
     220:	cf 93       	push	r28
     222:	00 d0       	rcall	.+0      	; 0x224 <__vector_14+0x2e>
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0xFF;
     228:	e6 e2       	ldi	r30, 0x26	; 38
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	80 83       	st	Z, r24
	
	if(TEST)
		printf("TIMER1_OVF_vect!\n");

	switch(sensor_flag)
     230:	80 91 8e 01 	lds	r24, 0x018E
     234:	90 91 8f 01 	lds	r25, 0x018F
     238:	9a 83       	std	Y+2, r25	; 0x02
     23a:	89 83       	std	Y+1, r24	; 0x01
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	9a 81       	ldd	r25, Y+2	; 0x02
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	91 05       	cpc	r25, r1
     244:	71 f1       	breq	.+92     	; 0x2a2 <__vector_14+0xac>
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	91 05       	cpc	r25, r1
     24e:	09 f4       	brne	.+2      	; 0x252 <__vector_14+0x5c>
     250:	4b c0       	rjmp	.+150    	; 0x2e8 <__vector_14+0xf2>
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	09 f0       	breq	.+2      	; 0x25c <__vector_14+0x66>
     25a:	63 c0       	rjmp	.+198    	; 0x322 <__vector_14+0x12c>
	{
	case 0: 
	  ADMUX = 0xC0;	//// 내부 클럭 사용, 오른쪽 
     25c:	e7 e2       	ldi	r30, 0x27	; 39
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 ec       	ldi	r24, 0xC0	; 192
     262:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     264:	e6 e2       	ldi	r30, 0x26	; 38
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	88 2f       	mov	r24, r24
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	80 71       	andi	r24, 0x10	; 16
     270:	90 70       	andi	r25, 0x00	; 0
     272:	00 97       	sbiw	r24, 0x00	; 0
     274:	b9 f3       	breq	.-18     	; 0x264 <__vector_14+0x6e>
	  	val0 = ADCW;
     276:	e4 e2       	ldi	r30, 0x24	; 36
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	90 93 89 01 	sts	0x0189, r25
     282:	80 93 88 01 	sts	0x0188, r24
		ADCW = 0;
     286:	e4 e2       	ldi	r30, 0x24	; 36
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	11 82       	std	Z+1, r1	; 0x01
     28c:	10 82       	st	Z, r1
		sensor_flag++;
     28e:	80 91 8e 01 	lds	r24, 0x018E
     292:	90 91 8f 01 	lds	r25, 0x018F
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	90 93 8f 01 	sts	0x018F, r25
     29c:	80 93 8e 01 	sts	0x018E, r24
     2a0:	40 c0       	rjmp	.+128    	; 0x322 <__vector_14+0x12c>
	  break;
	case 1:
	  ADMUX = 0xC1;	//// 왼쪽
     2a2:	e7 e2       	ldi	r30, 0x27	; 39
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	81 ec       	ldi	r24, 0xC1	; 193
     2a8:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     2aa:	e6 e2       	ldi	r30, 0x26	; 38
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	88 2f       	mov	r24, r24
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	80 71       	andi	r24, 0x10	; 16
     2b6:	90 70       	andi	r25, 0x00	; 0
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	b9 f3       	breq	.-18     	; 0x2aa <__vector_14+0xb4>
	  	val1 = ADCW;
     2bc:	e4 e2       	ldi	r30, 0x24	; 36
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	91 81       	ldd	r25, Z+1	; 0x01
     2c4:	90 93 8b 01 	sts	0x018B, r25
     2c8:	80 93 8a 01 	sts	0x018A, r24
		ADCW = 0;
     2cc:	e4 e2       	ldi	r30, 0x24	; 36
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	11 82       	std	Z+1, r1	; 0x01
     2d2:	10 82       	st	Z, r1
		sensor_flag++;
     2d4:	80 91 8e 01 	lds	r24, 0x018E
     2d8:	90 91 8f 01 	lds	r25, 0x018F
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	90 93 8f 01 	sts	0x018F, r25
     2e2:	80 93 8e 01 	sts	0x018E, r24
     2e6:	1d c0       	rjmp	.+58     	; 0x322 <__vector_14+0x12c>
	  break;
	case 2:
	  ADMUX = 0xC2; // 가슴 적외선
     2e8:	e7 e2       	ldi	r30, 0x27	; 39
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	82 ec       	ldi	r24, 0xC2	; 194
     2ee:	80 83       	st	Z, r24
	  while((ADCSRA & 0x10) == 0);
     2f0:	e6 e2       	ldi	r30, 0x26	; 38
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	88 2f       	mov	r24, r24
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	80 71       	andi	r24, 0x10	; 16
     2fc:	90 70       	andi	r25, 0x00	; 0
     2fe:	00 97       	sbiw	r24, 0x00	; 0
     300:	b9 f3       	breq	.-18     	; 0x2f0 <__vector_14+0xfa>
	  val2 = ADCW;
     302:	e4 e2       	ldi	r30, 0x24	; 36
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	90 93 8d 01 	sts	0x018D, r25
     30e:	80 93 8c 01 	sts	0x018C, r24
	  ADCW = 0;
     312:	e4 e2       	ldi	r30, 0x24	; 36
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	11 82       	std	Z+1, r1	; 0x01
     318:	10 82       	st	Z, r1
	  sensor_flag = 0;
     31a:	10 92 8f 01 	sts	0x018F, r1
     31e:	10 92 8e 01 	sts	0x018E, r1
	  break;
	}

	printf("%d %d %d\n", val0, val1, val2);
     322:	20 91 88 01 	lds	r18, 0x0188
     326:	30 91 89 01 	lds	r19, 0x0189
     32a:	40 91 8a 01 	lds	r20, 0x018A
     32e:	50 91 8b 01 	lds	r21, 0x018B
     332:	60 91 8c 01 	lds	r22, 0x018C
     336:	70 91 8d 01 	lds	r23, 0x018D
     33a:	8d b7       	in	r24, 0x3d	; 61
     33c:	9e b7       	in	r25, 0x3e	; 62
     33e:	08 97       	sbiw	r24, 0x08	; 8
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	9e bf       	out	0x3e, r25	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	8d bf       	out	0x3d, r24	; 61
     34a:	ed b7       	in	r30, 0x3d	; 61
     34c:	fe b7       	in	r31, 0x3e	; 62
     34e:	31 96       	adiw	r30, 0x01	; 1
     350:	89 e0       	ldi	r24, 0x09	; 9
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	91 83       	std	Z+1, r25	; 0x01
     356:	80 83       	st	Z, r24
     358:	33 83       	std	Z+3, r19	; 0x03
     35a:	22 83       	std	Z+2, r18	; 0x02
     35c:	55 83       	std	Z+5, r21	; 0x05
     35e:	44 83       	std	Z+4, r20	; 0x04
     360:	77 83       	std	Z+7, r23	; 0x07
     362:	66 83       	std	Z+6, r22	; 0x06
     364:	0e 94 25 13 	call	0x264a	; 0x264a <printf>
     368:	8d b7       	in	r24, 0x3d	; 61
     36a:	9e b7       	in	r25, 0x3e	; 62
     36c:	08 96       	adiw	r24, 0x08	; 8
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	9e bf       	out	0x3e, r25	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	8d bf       	out	0x3d, r24	; 61

	ADCSRA = 0x00;
     378:	e6 e2       	ldi	r30, 0x26	; 38
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	10 82       	st	Z, r1
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	cf 91       	pop	r28
     384:	df 91       	pop	r29
     386:	ff 91       	pop	r31
     388:	ef 91       	pop	r30
     38a:	bf 91       	pop	r27
     38c:	af 91       	pop	r26
     38e:	9f 91       	pop	r25
     390:	8f 91       	pop	r24
     392:	7f 91       	pop	r23
     394:	6f 91       	pop	r22
     396:	5f 91       	pop	r21
     398:	4f 91       	pop	r20
     39a:	3f 91       	pop	r19
     39c:	2f 91       	pop	r18
     39e:	0f 90       	pop	r0
     3a0:	00 92 5b 00 	sts	0x005B, r0
     3a4:	0f 90       	pop	r0
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	0f 90       	pop	r0
     3aa:	1f 90       	pop	r1
     3ac:	18 95       	reti

000003ae <init_devices>:

void init_devices(void)
{
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
  cli(); //disable all interrupts
     3b6:	f8 94       	cli
  port_init();
     3b8:	0e 94 a3 00 	call	0x146	; 0x146 <port_init>
  uart0_init();  
     3bc:	0e 94 c3 00 	call	0x186	; 0x186 <uart0_init>
  uart1_init();
     3c0:	0e 94 df 00 	call	0x1be	; 0x1be <uart1_init>
  fdevopen(Putchar, Getchar); //file stream 0
     3c4:	87 e6       	ldi	r24, 0x67	; 103
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	2d e8       	ldi	r18, 0x8D	; 141
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	b9 01       	movw	r22, r18
     3ce:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <fdevopen>
  sei();
     3d2:	78 94       	sei
  port_init();
     3d4:	0e 94 a3 00 	call	0x146	; 0x146 <port_init>

}
     3d8:	cf 91       	pop	r28
     3da:	df 91       	pop	r29
     3dc:	08 95       	ret

000003de <putchar1>:

//*** 카메라 관련 함수 ***//
static int putchar1(char c)	//카메라에 명령어 전송
{
     3de:	df 93       	push	r29
     3e0:	cf 93       	push	r28
     3e2:	0f 92       	push	r0
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
     3ea:	eb e2       	ldi	r30, 0x2B	; 43
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	80 72       	andi	r24, 0x20	; 32
     3f6:	90 70       	andi	r25, 0x00	; 0
     3f8:	00 97       	sbiw	r24, 0x00	; 0
     3fa:	b9 f3       	breq	.-18     	; 0x3ea <putchar1+0xc>
		UDR0 = c;
     3fc:	ec e2       	ldi	r30, 0x2C	; 44
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	80 83       	st	Z, r24
	return 0;
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
}
     408:	0f 90       	pop	r0
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <reset>:


void reset(){		//Camera Command(reset)
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nRESET  ");
 putchar1(0x56);
     418:	86 e5       	ldi	r24, 0x56	; 86
     41a:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x26);
     424:	86 e2       	ldi	r24, 0x26	; 38
     426:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 img_cnt = 0;
     430:	10 92 94 01 	sts	0x0194, r1
     434:	10 92 93 01 	sts	0x0193, r1
}
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <resize>:
 
void resize(){		//Camera Command(resize)
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nRESIZE  ");
 putchar1(0x56);
     446:	86 e5       	ldi	r24, 0x56	; 86
     448:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x31);
     452:	81 e3       	ldi	r24, 0x31	; 49
     454:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x05);
     458:	85 e0       	ldi	r24, 0x05	; 5
     45a:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x04);
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x01);
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x19);
     470:	89 e1       	ldi	r24, 0x19	; 25
     472:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x11);
     476:	81 e1       	ldi	r24, 0x11	; 17
     478:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 img_cnt = 0;
     47c:	10 92 94 01 	sts	0x0194, r1
     480:	10 92 93 01 	sts	0x0193, r1
}
     484:	cf 91       	pop	r28
     486:	df 91       	pop	r29
     488:	08 95       	ret

0000048a <set_rate>:
 
void set_rate(){	//Camera Command(set_rate 115200)
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nSET_RATE ");
 putchar1(0x56);
     492:	86 e5       	ldi	r24, 0x56	; 86
     494:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x24);
     49e:	84 e2       	ldi	r24, 0x24	; 36
     4a0:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x03);
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x01);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x0D);
     4b0:	8d e0       	ldi	r24, 0x0D	; 13
     4b2:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0xA6);
     4b6:	86 ea       	ldi	r24, 0xA6	; 166
     4b8:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 img_cnt = 0;
     4bc:	10 92 94 01 	sts	0x0194, r1
     4c0:	10 92 93 01 	sts	0x0193, r1
}
     4c4:	cf 91       	pop	r28
     4c6:	df 91       	pop	r29
     4c8:	08 95       	ret

000004ca <idle>:

void idle(){		//Camera Command(Idle)
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	c6 54       	subi	r28, 0x46	; 70
     4d8:	d0 40       	sbci	r29, 0x00	; 0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
 //printf("\r\nIDLE  ");
 init_buffer(CAMERA);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 39 08 	call	0x1072	; 0x1072 <init_buffer>
 command = IDLE;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	90 93 a4 01 	sts	0x01A4, r25
     4f4:	80 93 a3 01 	sts	0x01A3, r24
 idle_cnt = 0;
     4f8:	10 92 9e 01 	sts	0x019E, r1
     4fc:	10 92 9d 01 	sts	0x019D, r1
 img_cnt = 0;
     500:	10 92 94 01 	sts	0x0194, r1
     504:	10 92 93 01 	sts	0x0193, r1
 call_img_flag = 0;
     508:	10 92 98 01 	sts	0x0198, r1
     50c:	10 92 97 01 	sts	0x0197, r1
 img_data_start_flag = 0;
     510:	10 92 9a 01 	sts	0x019A, r1
     514:	10 92 99 01 	sts	0x0199, r1
 
 putchar1(0x56); _delay_ms(1);
     518:	86 e5       	ldi	r24, 0x56	; 86
     51a:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
     51e:	fe 01       	movw	r30, r28
     520:	ed 5b       	subi	r30, 0xBD	; 189
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	a0 e8       	ldi	r26, 0x80	; 128
     52a:	bf e3       	ldi	r27, 0x3F	; 63
     52c:	80 83       	st	Z, r24
     52e:	91 83       	std	Z+1, r25	; 0x01
     530:	a2 83       	std	Z+2, r26	; 0x02
     532:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     534:	8e 01       	movw	r16, r28
     536:	01 5c       	subi	r16, 0xC1	; 193
     538:	1f 4f       	sbci	r17, 0xFF	; 255
     53a:	fe 01       	movw	r30, r28
     53c:	ed 5b       	subi	r30, 0xBD	; 189
     53e:	ff 4f       	sbci	r31, 0xFF	; 255
     540:	60 81       	ld	r22, Z
     542:	71 81       	ldd	r23, Z+1	; 0x01
     544:	82 81       	ldd	r24, Z+2	; 0x02
     546:	93 81       	ldd	r25, Z+3	; 0x03
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	4a e7       	ldi	r20, 0x7A	; 122
     54e:	55 e4       	ldi	r21, 0x45	; 69
     550:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	f8 01       	movw	r30, r16
     55a:	80 83       	st	Z, r24
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	a2 83       	std	Z+2, r26	; 0x02
     560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     562:	fe 01       	movw	r30, r28
     564:	ff 96       	adiw	r30, 0x3f	; 63
     566:	60 81       	ld	r22, Z
     568:	71 81       	ldd	r23, Z+1	; 0x01
     56a:	82 81       	ldd	r24, Z+2	; 0x02
     56c:	93 81       	ldd	r25, Z+3	; 0x03
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e8       	ldi	r20, 0x80	; 128
     574:	5f e3       	ldi	r21, 0x3F	; 63
     576:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     57a:	88 23       	and	r24, r24
     57c:	2c f4       	brge	.+10     	; 0x588 <idle+0xbe>
		__ticks = 1;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	9e af       	std	Y+62, r25	; 0x3e
     584:	8d af       	std	Y+61, r24	; 0x3d
     586:	46 c0       	rjmp	.+140    	; 0x614 <idle+0x14a>
	else if (__tmp > 65535)
     588:	fe 01       	movw	r30, r28
     58a:	ff 96       	adiw	r30, 0x3f	; 63
     58c:	60 81       	ld	r22, Z
     58e:	71 81       	ldd	r23, Z+1	; 0x01
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	3f ef       	ldi	r19, 0xFF	; 255
     598:	4f e7       	ldi	r20, 0x7F	; 127
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     5a0:	18 16       	cp	r1, r24
     5a2:	64 f5       	brge	.+88     	; 0x5fc <idle+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5a4:	fe 01       	movw	r30, r28
     5a6:	ed 5b       	subi	r30, 0xBD	; 189
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	60 81       	ld	r22, Z
     5ac:	71 81       	ldd	r23, Z+1	; 0x01
     5ae:	82 81       	ldd	r24, Z+2	; 0x02
     5b0:	93 81       	ldd	r25, Z+3	; 0x03
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e2       	ldi	r20, 0x20	; 32
     5b8:	51 e4       	ldi	r21, 0x41	; 65
     5ba:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	9e af       	std	Y+62, r25	; 0x3e
     5d0:	8d af       	std	Y+61, r24	; 0x3d
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <idle+0x128>
     5d4:	80 e9       	ldi	r24, 0x90	; 144
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	9c af       	std	Y+60, r25	; 0x3c
     5da:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5dc:	8b ad       	ldd	r24, Y+59	; 0x3b
     5de:	9c ad       	ldd	r25, Y+60	; 0x3c
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <idle+0x116>
     5e4:	9c af       	std	Y+60, r25	; 0x3c
     5e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e8:	8d ad       	ldd	r24, Y+61	; 0x3d
     5ea:	9e ad       	ldd	r25, Y+62	; 0x3e
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	9e af       	std	Y+62, r25	; 0x3e
     5f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f2:	8d ad       	ldd	r24, Y+61	; 0x3d
     5f4:	9e ad       	ldd	r25, Y+62	; 0x3e
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	69 f7       	brne	.-38     	; 0x5d4 <idle+0x10a>
     5fa:	16 c0       	rjmp	.+44     	; 0x628 <idle+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fc:	fe 01       	movw	r30, r28
     5fe:	ff 96       	adiw	r30, 0x3f	; 63
     600:	60 81       	ld	r22, Z
     602:	71 81       	ldd	r23, Z+1	; 0x01
     604:	82 81       	ldd	r24, Z+2	; 0x02
     606:	93 81       	ldd	r25, Z+3	; 0x03
     608:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e af       	std	Y+62, r25	; 0x3e
     612:	8d af       	std	Y+61, r24	; 0x3d
     614:	8d ad       	ldd	r24, Y+61	; 0x3d
     616:	9e ad       	ldd	r25, Y+62	; 0x3e
     618:	9a af       	std	Y+58, r25	; 0x3a
     61a:	89 af       	std	Y+57, r24	; 0x39
     61c:	89 ad       	ldd	r24, Y+57	; 0x39
     61e:	9a ad       	ldd	r25, Y+58	; 0x3a
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <idle+0x156>
     624:	9a af       	std	Y+58, r25	; 0x3a
     626:	89 af       	std	Y+57, r24	; 0x39
 putchar1(0x00); _delay_ms(1);
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	a0 e8       	ldi	r26, 0x80	; 128
     634:	bf e3       	ldi	r27, 0x3F	; 63
     636:	8d ab       	std	Y+53, r24	; 0x35
     638:	9e ab       	std	Y+54, r25	; 0x36
     63a:	af ab       	std	Y+55, r26	; 0x37
     63c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     63e:	6d a9       	ldd	r22, Y+53	; 0x35
     640:	7e a9       	ldd	r23, Y+54	; 0x36
     642:	8f a9       	ldd	r24, Y+55	; 0x37
     644:	98 ad       	ldd	r25, Y+56	; 0x38
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	4a e7       	ldi	r20, 0x7A	; 122
     64c:	55 e4       	ldi	r21, 0x45	; 69
     64e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	89 ab       	std	Y+49, r24	; 0x31
     658:	9a ab       	std	Y+50, r25	; 0x32
     65a:	ab ab       	std	Y+51, r26	; 0x33
     65c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     65e:	69 a9       	ldd	r22, Y+49	; 0x31
     660:	7a a9       	ldd	r23, Y+50	; 0x32
     662:	8b a9       	ldd	r24, Y+51	; 0x33
     664:	9c a9       	ldd	r25, Y+52	; 0x34
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e8       	ldi	r20, 0x80	; 128
     66c:	5f e3       	ldi	r21, 0x3F	; 63
     66e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     672:	88 23       	and	r24, r24
     674:	2c f4       	brge	.+10     	; 0x680 <idle+0x1b6>
		__ticks = 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	98 ab       	std	Y+48, r25	; 0x30
     67c:	8f a7       	std	Y+47, r24	; 0x2f
     67e:	3f c0       	rjmp	.+126    	; 0x6fe <idle+0x234>
	else if (__tmp > 65535)
     680:	69 a9       	ldd	r22, Y+49	; 0x31
     682:	7a a9       	ldd	r23, Y+50	; 0x32
     684:	8b a9       	ldd	r24, Y+51	; 0x33
     686:	9c a9       	ldd	r25, Y+52	; 0x34
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	3f ef       	ldi	r19, 0xFF	; 255
     68c:	4f e7       	ldi	r20, 0x7F	; 127
     68e:	57 e4       	ldi	r21, 0x47	; 71
     690:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     694:	18 16       	cp	r1, r24
     696:	4c f5       	brge	.+82     	; 0x6ea <idle+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     698:	6d a9       	ldd	r22, Y+53	; 0x35
     69a:	7e a9       	ldd	r23, Y+54	; 0x36
     69c:	8f a9       	ldd	r24, Y+55	; 0x37
     69e:	98 ad       	ldd	r25, Y+56	; 0x38
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e2       	ldi	r20, 0x20	; 32
     6a6:	51 e4       	ldi	r21, 0x41	; 65
     6a8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	bc 01       	movw	r22, r24
     6b2:	cd 01       	movw	r24, r26
     6b4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	98 ab       	std	Y+48, r25	; 0x30
     6be:	8f a7       	std	Y+47, r24	; 0x2f
     6c0:	0f c0       	rjmp	.+30     	; 0x6e0 <idle+0x216>
     6c2:	80 e9       	ldi	r24, 0x90	; 144
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	9e a7       	std	Y+46, r25	; 0x2e
     6c8:	8d a7       	std	Y+45, r24	; 0x2d
     6ca:	8d a5       	ldd	r24, Y+45	; 0x2d
     6cc:	9e a5       	ldd	r25, Y+46	; 0x2e
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <idle+0x204>
     6d2:	9e a7       	std	Y+46, r25	; 0x2e
     6d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d6:	8f a5       	ldd	r24, Y+47	; 0x2f
     6d8:	98 a9       	ldd	r25, Y+48	; 0x30
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	98 ab       	std	Y+48, r25	; 0x30
     6de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e0:	8f a5       	ldd	r24, Y+47	; 0x2f
     6e2:	98 a9       	ldd	r25, Y+48	; 0x30
     6e4:	00 97       	sbiw	r24, 0x00	; 0
     6e6:	69 f7       	brne	.-38     	; 0x6c2 <idle+0x1f8>
     6e8:	14 c0       	rjmp	.+40     	; 0x712 <idle+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ea:	69 a9       	ldd	r22, Y+49	; 0x31
     6ec:	7a a9       	ldd	r23, Y+50	; 0x32
     6ee:	8b a9       	ldd	r24, Y+51	; 0x33
     6f0:	9c a9       	ldd	r25, Y+52	; 0x34
     6f2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     6f6:	dc 01       	movw	r26, r24
     6f8:	cb 01       	movw	r24, r22
     6fa:	98 ab       	std	Y+48, r25	; 0x30
     6fc:	8f a7       	std	Y+47, r24	; 0x2f
     6fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     700:	98 a9       	ldd	r25, Y+48	; 0x30
     702:	9c a7       	std	Y+44, r25	; 0x2c
     704:	8b a7       	std	Y+43, r24	; 0x2b
     706:	8b a5       	ldd	r24, Y+43	; 0x2b
     708:	9c a5       	ldd	r25, Y+44	; 0x2c
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <idle+0x240>
     70e:	9c a7       	std	Y+44, r25	; 0x2c
     710:	8b a7       	std	Y+43, r24	; 0x2b
 putchar1(0x36); _delay_ms(1);
     712:	86 e3       	ldi	r24, 0x36	; 54
     714:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	a0 e8       	ldi	r26, 0x80	; 128
     71e:	bf e3       	ldi	r27, 0x3F	; 63
     720:	8f a3       	std	Y+39, r24	; 0x27
     722:	98 a7       	std	Y+40, r25	; 0x28
     724:	a9 a7       	std	Y+41, r26	; 0x29
     726:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     728:	6f a1       	ldd	r22, Y+39	; 0x27
     72a:	78 a5       	ldd	r23, Y+40	; 0x28
     72c:	89 a5       	ldd	r24, Y+41	; 0x29
     72e:	9a a5       	ldd	r25, Y+42	; 0x2a
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	4a e7       	ldi	r20, 0x7A	; 122
     736:	55 e4       	ldi	r21, 0x45	; 69
     738:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	8b a3       	std	Y+35, r24	; 0x23
     742:	9c a3       	std	Y+36, r25	; 0x24
     744:	ad a3       	std	Y+37, r26	; 0x25
     746:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     748:	6b a1       	ldd	r22, Y+35	; 0x23
     74a:	7c a1       	ldd	r23, Y+36	; 0x24
     74c:	8d a1       	ldd	r24, Y+37	; 0x25
     74e:	9e a1       	ldd	r25, Y+38	; 0x26
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e8       	ldi	r20, 0x80	; 128
     756:	5f e3       	ldi	r21, 0x3F	; 63
     758:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     75c:	88 23       	and	r24, r24
     75e:	2c f4       	brge	.+10     	; 0x76a <idle+0x2a0>
		__ticks = 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9a a3       	std	Y+34, r25	; 0x22
     766:	89 a3       	std	Y+33, r24	; 0x21
     768:	3f c0       	rjmp	.+126    	; 0x7e8 <idle+0x31e>
	else if (__tmp > 65535)
     76a:	6b a1       	ldd	r22, Y+35	; 0x23
     76c:	7c a1       	ldd	r23, Y+36	; 0x24
     76e:	8d a1       	ldd	r24, Y+37	; 0x25
     770:	9e a1       	ldd	r25, Y+38	; 0x26
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	3f ef       	ldi	r19, 0xFF	; 255
     776:	4f e7       	ldi	r20, 0x7F	; 127
     778:	57 e4       	ldi	r21, 0x47	; 71
     77a:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     77e:	18 16       	cp	r1, r24
     780:	4c f5       	brge	.+82     	; 0x7d4 <idle+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     782:	6f a1       	ldd	r22, Y+39	; 0x27
     784:	78 a5       	ldd	r23, Y+40	; 0x28
     786:	89 a5       	ldd	r24, Y+41	; 0x29
     788:	9a a5       	ldd	r25, Y+42	; 0x2a
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e2       	ldi	r20, 0x20	; 32
     790:	51 e4       	ldi	r21, 0x41	; 65
     792:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	9a a3       	std	Y+34, r25	; 0x22
     7a8:	89 a3       	std	Y+33, r24	; 0x21
     7aa:	0f c0       	rjmp	.+30     	; 0x7ca <idle+0x300>
     7ac:	80 e9       	ldi	r24, 0x90	; 144
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	98 a3       	std	Y+32, r25	; 0x20
     7b2:	8f 8f       	std	Y+31, r24	; 0x1f
     7b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7b6:	98 a1       	ldd	r25, Y+32	; 0x20
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <idle+0x2ee>
     7bc:	98 a3       	std	Y+32, r25	; 0x20
     7be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c0:	89 a1       	ldd	r24, Y+33	; 0x21
     7c2:	9a a1       	ldd	r25, Y+34	; 0x22
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	9a a3       	std	Y+34, r25	; 0x22
     7c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ca:	89 a1       	ldd	r24, Y+33	; 0x21
     7cc:	9a a1       	ldd	r25, Y+34	; 0x22
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	69 f7       	brne	.-38     	; 0x7ac <idle+0x2e2>
     7d2:	14 c0       	rjmp	.+40     	; 0x7fc <idle+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d4:	6b a1       	ldd	r22, Y+35	; 0x23
     7d6:	7c a1       	ldd	r23, Y+36	; 0x24
     7d8:	8d a1       	ldd	r24, Y+37	; 0x25
     7da:	9e a1       	ldd	r25, Y+38	; 0x26
     7dc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	9a a3       	std	Y+34, r25	; 0x22
     7e6:	89 a3       	std	Y+33, r24	; 0x21
     7e8:	89 a1       	ldd	r24, Y+33	; 0x21
     7ea:	9a a1       	ldd	r25, Y+34	; 0x22
     7ec:	9e 8f       	std	Y+30, r25	; 0x1e
     7ee:	8d 8f       	std	Y+29, r24	; 0x1d
     7f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <idle+0x32a>
     7f8:	9e 8f       	std	Y+30, r25	; 0x1e
     7fa:	8d 8f       	std	Y+29, r24	; 0x1d
 putchar1(0x01); _delay_ms(1);
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	a0 e8       	ldi	r26, 0x80	; 128
     808:	bf e3       	ldi	r27, 0x3F	; 63
     80a:	89 8f       	std	Y+25, r24	; 0x19
     80c:	9a 8f       	std	Y+26, r25	; 0x1a
     80e:	ab 8f       	std	Y+27, r26	; 0x1b
     810:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     812:	69 8d       	ldd	r22, Y+25	; 0x19
     814:	7a 8d       	ldd	r23, Y+26	; 0x1a
     816:	8b 8d       	ldd	r24, Y+27	; 0x1b
     818:	9c 8d       	ldd	r25, Y+28	; 0x1c
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	4a e7       	ldi	r20, 0x7A	; 122
     820:	55 e4       	ldi	r21, 0x45	; 69
     822:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	8d 8b       	std	Y+21, r24	; 0x15
     82c:	9e 8b       	std	Y+22, r25	; 0x16
     82e:	af 8b       	std	Y+23, r26	; 0x17
     830:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     832:	6d 89       	ldd	r22, Y+21	; 0x15
     834:	7e 89       	ldd	r23, Y+22	; 0x16
     836:	8f 89       	ldd	r24, Y+23	; 0x17
     838:	98 8d       	ldd	r25, Y+24	; 0x18
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e8       	ldi	r20, 0x80	; 128
     840:	5f e3       	ldi	r21, 0x3F	; 63
     842:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     846:	88 23       	and	r24, r24
     848:	2c f4       	brge	.+10     	; 0x854 <idle+0x38a>
		__ticks = 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	9c 8b       	std	Y+20, r25	; 0x14
     850:	8b 8b       	std	Y+19, r24	; 0x13
     852:	3f c0       	rjmp	.+126    	; 0x8d2 <idle+0x408>
	else if (__tmp > 65535)
     854:	6d 89       	ldd	r22, Y+21	; 0x15
     856:	7e 89       	ldd	r23, Y+22	; 0x16
     858:	8f 89       	ldd	r24, Y+23	; 0x17
     85a:	98 8d       	ldd	r25, Y+24	; 0x18
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	3f ef       	ldi	r19, 0xFF	; 255
     860:	4f e7       	ldi	r20, 0x7F	; 127
     862:	57 e4       	ldi	r21, 0x47	; 71
     864:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     868:	18 16       	cp	r1, r24
     86a:	4c f5       	brge	.+82     	; 0x8be <idle+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     86c:	69 8d       	ldd	r22, Y+25	; 0x19
     86e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     870:	8b 8d       	ldd	r24, Y+27	; 0x1b
     872:	9c 8d       	ldd	r25, Y+28	; 0x1c
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e2       	ldi	r20, 0x20	; 32
     87a:	51 e4       	ldi	r21, 0x41	; 65
     87c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     880:	dc 01       	movw	r26, r24
     882:	cb 01       	movw	r24, r22
     884:	bc 01       	movw	r22, r24
     886:	cd 01       	movw	r24, r26
     888:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	9c 8b       	std	Y+20, r25	; 0x14
     892:	8b 8b       	std	Y+19, r24	; 0x13
     894:	0f c0       	rjmp	.+30     	; 0x8b4 <idle+0x3ea>
     896:	80 e9       	ldi	r24, 0x90	; 144
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	9a 8b       	std	Y+18, r25	; 0x12
     89c:	89 8b       	std	Y+17, r24	; 0x11
     89e:	89 89       	ldd	r24, Y+17	; 0x11
     8a0:	9a 89       	ldd	r25, Y+18	; 0x12
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <idle+0x3d8>
     8a6:	9a 8b       	std	Y+18, r25	; 0x12
     8a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8aa:	8b 89       	ldd	r24, Y+19	; 0x13
     8ac:	9c 89       	ldd	r25, Y+20	; 0x14
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	9c 8b       	std	Y+20, r25	; 0x14
     8b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b4:	8b 89       	ldd	r24, Y+19	; 0x13
     8b6:	9c 89       	ldd	r25, Y+20	; 0x14
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	69 f7       	brne	.-38     	; 0x896 <idle+0x3cc>
     8bc:	14 c0       	rjmp	.+40     	; 0x8e6 <idle+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8be:	6d 89       	ldd	r22, Y+21	; 0x15
     8c0:	7e 89       	ldd	r23, Y+22	; 0x16
     8c2:	8f 89       	ldd	r24, Y+23	; 0x17
     8c4:	98 8d       	ldd	r25, Y+24	; 0x18
     8c6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	9c 8b       	std	Y+20, r25	; 0x14
     8d0:	8b 8b       	std	Y+19, r24	; 0x13
     8d2:	8b 89       	ldd	r24, Y+19	; 0x13
     8d4:	9c 89       	ldd	r25, Y+20	; 0x14
     8d6:	98 8b       	std	Y+16, r25	; 0x10
     8d8:	8f 87       	std	Y+15, r24	; 0x0f
     8da:	8f 85       	ldd	r24, Y+15	; 0x0f
     8dc:	98 89       	ldd	r25, Y+16	; 0x10
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <idle+0x414>
     8e2:	98 8b       	std	Y+16, r25	; 0x10
     8e4:	8f 87       	std	Y+15, r24	; 0x0f
 putchar1(0x03); _delay_ms(1);
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e8       	ldi	r26, 0x80	; 128
     8f2:	bf e3       	ldi	r27, 0x3F	; 63
     8f4:	8b 87       	std	Y+11, r24	; 0x0b
     8f6:	9c 87       	std	Y+12, r25	; 0x0c
     8f8:	ad 87       	std	Y+13, r26	; 0x0d
     8fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8fc:	6b 85       	ldd	r22, Y+11	; 0x0b
     8fe:	7c 85       	ldd	r23, Y+12	; 0x0c
     900:	8d 85       	ldd	r24, Y+13	; 0x0d
     902:	9e 85       	ldd	r25, Y+14	; 0x0e
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	4a e7       	ldi	r20, 0x7A	; 122
     90a:	55 e4       	ldi	r21, 0x45	; 69
     90c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     910:	dc 01       	movw	r26, r24
     912:	cb 01       	movw	r24, r22
     914:	8f 83       	std	Y+7, r24	; 0x07
     916:	98 87       	std	Y+8, r25	; 0x08
     918:	a9 87       	std	Y+9, r26	; 0x09
     91a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     91c:	6f 81       	ldd	r22, Y+7	; 0x07
     91e:	78 85       	ldd	r23, Y+8	; 0x08
     920:	89 85       	ldd	r24, Y+9	; 0x09
     922:	9a 85       	ldd	r25, Y+10	; 0x0a
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e8       	ldi	r20, 0x80	; 128
     92a:	5f e3       	ldi	r21, 0x3F	; 63
     92c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     930:	88 23       	and	r24, r24
     932:	2c f4       	brge	.+10     	; 0x93e <idle+0x474>
		__ticks = 1;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9e 83       	std	Y+6, r25	; 0x06
     93a:	8d 83       	std	Y+5, r24	; 0x05
     93c:	3f c0       	rjmp	.+126    	; 0x9bc <idle+0x4f2>
	else if (__tmp > 65535)
     93e:	6f 81       	ldd	r22, Y+7	; 0x07
     940:	78 85       	ldd	r23, Y+8	; 0x08
     942:	89 85       	ldd	r24, Y+9	; 0x09
     944:	9a 85       	ldd	r25, Y+10	; 0x0a
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	3f ef       	ldi	r19, 0xFF	; 255
     94a:	4f e7       	ldi	r20, 0x7F	; 127
     94c:	57 e4       	ldi	r21, 0x47	; 71
     94e:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     952:	18 16       	cp	r1, r24
     954:	4c f5       	brge	.+82     	; 0x9a8 <idle+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     956:	6b 85       	ldd	r22, Y+11	; 0x0b
     958:	7c 85       	ldd	r23, Y+12	; 0x0c
     95a:	8d 85       	ldd	r24, Y+13	; 0x0d
     95c:	9e 85       	ldd	r25, Y+14	; 0x0e
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	40 e2       	ldi	r20, 0x20	; 32
     964:	51 e4       	ldi	r21, 0x41	; 65
     966:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	bc 01       	movw	r22, r24
     970:	cd 01       	movw	r24, r26
     972:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	9e 83       	std	Y+6, r25	; 0x06
     97c:	8d 83       	std	Y+5, r24	; 0x05
     97e:	0f c0       	rjmp	.+30     	; 0x99e <idle+0x4d4>
     980:	80 e9       	ldi	r24, 0x90	; 144
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	9c 83       	std	Y+4, r25	; 0x04
     986:	8b 83       	std	Y+3, r24	; 0x03
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <idle+0x4c2>
     990:	9c 83       	std	Y+4, r25	; 0x04
     992:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     994:	8d 81       	ldd	r24, Y+5	; 0x05
     996:	9e 81       	ldd	r25, Y+6	; 0x06
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	9e 83       	std	Y+6, r25	; 0x06
     99c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	69 f7       	brne	.-38     	; 0x980 <idle+0x4b6>
     9a6:	14 c0       	rjmp	.+40     	; 0x9d0 <idle+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a8:	6f 81       	ldd	r22, Y+7	; 0x07
     9aa:	78 85       	ldd	r23, Y+8	; 0x08
     9ac:	89 85       	ldd	r24, Y+9	; 0x09
     9ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     9b4:	dc 01       	movw	r26, r24
     9b6:	cb 01       	movw	r24, r22
     9b8:	9e 83       	std	Y+6, r25	; 0x06
     9ba:	8d 83       	std	Y+5, r24	; 0x05
     9bc:	8d 81       	ldd	r24, Y+5	; 0x05
     9be:	9e 81       	ldd	r25, Y+6	; 0x06
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <idle+0x4fe>
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01
 
 if(TEST)
 	printf("IDLE CALL!\\n");
}
     9d0:	ca 5b       	subi	r28, 0xBA	; 186
     9d2:	df 4f       	sbci	r29, 0xFF	; 255
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	08 95       	ret

000009e8 <shot>:
 
void shot(){		//Camera Command(shot)
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nSHOT  ");
 command = SHOT;
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	90 93 a4 01 	sts	0x01A4, r25
     9f8:	80 93 a3 01 	sts	0x01A3, r24
 idle_cnt = 0;
     9fc:	10 92 9e 01 	sts	0x019E, r1
     a00:	10 92 9d 01 	sts	0x019D, r1
 shot_cnt = 0;
     a04:	10 92 a0 01 	sts	0x01A0, r1
     a08:	10 92 9f 01 	sts	0x019F, r1
 putchar1(0x56);
     a0c:	86 e5       	ldi	r24, 0x56	; 86
     a0e:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x36);
     a18:	86 e3       	ldi	r24, 0x36	; 54
     a1a:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x01);
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 img_cnt = 0;
     a2a:	10 92 94 01 	sts	0x0194, r1
     a2e:	10 92 93 01 	sts	0x0193, r1
}
     a32:	cf 91       	pop	r28
     a34:	df 91       	pop	r29
     a36:	08 95       	ret

00000a38 <call_size>:
 
void call_size(){	//Camera Command(call_size)
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nCALL_SIZE ");
 command = CALL_SIZE;
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 a4 01 	sts	0x01A4, r25
     a48:	80 93 a3 01 	sts	0x01A3, r24
 shot_cnt = 0;
     a4c:	10 92 a0 01 	sts	0x01A0, r1
     a50:	10 92 9f 01 	sts	0x019F, r1
 call_size_cnt = 0;
     a54:	10 92 a2 01 	sts	0x01A2, r1
     a58:	10 92 a1 01 	sts	0x01A1, r1
 call_size_flag = 1;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 96 01 	sts	0x0196, r25
     a64:	80 93 95 01 	sts	0x0195, r24
 putchar1(0x56);
     a68:	86 e5       	ldi	r24, 0x56	; 86
     a6a:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x34);
     a74:	84 e3       	ldi	r24, 0x34	; 52
     a76:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x01);
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
}
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <call_img>:
 
void call_img(){	//Camera Command(call_img)
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nCALL_IMG ");
 command = 0;
     a94:	10 92 a4 01 	sts	0x01A4, r1
     a98:	10 92 a3 01 	sts	0x01A3, r1
 call_size_flag = 0;
     a9c:	10 92 96 01 	sts	0x0196, r1
     aa0:	10 92 95 01 	sts	0x0195, r1
 call_img_flag = 1;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	90 93 98 01 	sts	0x0198, r25
     aac:	80 93 97 01 	sts	0x0197, r24
 img_data_start_flag = 0;
     ab0:	10 92 9a 01 	sts	0x019A, r1
     ab4:	10 92 99 01 	sts	0x0199, r1
 putchar1(0x56);
     ab8:	86 e5       	ldi	r24, 0x56	; 86
     aba:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x32);
     ac4:	82 e3       	ldi	r24, 0x32	; 50
     ac6:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x0c);
     aca:	8c e0       	ldi	r24, 0x0C	; 12
     acc:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x0A);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(img_buffer[7]);
     b00:	80 91 07 01 	lds	r24, 0x0107
     b04:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(img_buffer[8]);
     b08:	80 91 08 01 	lds	r24, 0x0108
     b0c:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x0A);
     b16:	8a e0       	ldi	r24, 0x0A	; 10
     b18:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 img_cnt = 0;
     b1c:	10 92 94 01 	sts	0x0194, r1
     b20:	10 92 93 01 	sts	0x0193, r1
}
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	08 95       	ret

00000b2a <zip>:
 
void zip(){			//Camera Command(zip)
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
 //printf("\r\nZIP  ");
 putchar1(0x56);
     b32:	86 e5       	ldi	r24, 0x56	; 86
     b34:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x00);
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x31);
     b3e:	81 e3       	ldi	r24, 0x31	; 49
     b40:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x05);
     b44:	85 e0       	ldi	r24, 0x05	; 5
     b46:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x01);
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x01);
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x12);
     b56:	82 e1       	ldi	r24, 0x12	; 18
     b58:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0x04);
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 putchar1(0xFF);
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	0e 94 ef 01 	call	0x3de	; 0x3de <putchar1>
 img_cnt = 0;
     b68:	10 92 94 01 	sts	0x0194, r1
     b6c:	10 92 93 01 	sts	0x0193, r1
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <init_camera>:

void init_camera()
{
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	c6 54       	subi	r28, 0x46	; 70
     b84:	d0 40       	sbci	r29, 0x00	; 0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
 if(TEST)
 	printf("INIT CAMERA CALL!\n");

	 reset(); _delay_ms(1000);
     b90:	0e 94 08 02 	call	0x410	; 0x410 <reset>
     b94:	fe 01       	movw	r30, r28
     b96:	ed 5b       	subi	r30, 0xBD	; 189
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	aa e7       	ldi	r26, 0x7A	; 122
     ba0:	b4 e4       	ldi	r27, 0x44	; 68
     ba2:	80 83       	st	Z, r24
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	a2 83       	std	Z+2, r26	; 0x02
     ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     baa:	8e 01       	movw	r16, r28
     bac:	01 5c       	subi	r16, 0xC1	; 193
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
     bb0:	fe 01       	movw	r30, r28
     bb2:	ed 5b       	subi	r30, 0xBD	; 189
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	60 81       	ld	r22, Z
     bb8:	71 81       	ldd	r23, Z+1	; 0x01
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	93 81       	ldd	r25, Z+3	; 0x03
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	4a e7       	ldi	r20, 0x7A	; 122
     bc4:	55 e4       	ldi	r21, 0x45	; 69
     bc6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	f8 01       	movw	r30, r16
     bd0:	80 83       	st	Z, r24
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	a2 83       	std	Z+2, r26	; 0x02
     bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bd8:	fe 01       	movw	r30, r28
     bda:	ff 96       	adiw	r30, 0x3f	; 63
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e8       	ldi	r20, 0x80	; 128
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     bf0:	88 23       	and	r24, r24
     bf2:	2c f4       	brge	.+10     	; 0xbfe <init_camera+0x88>
		__ticks = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9e af       	std	Y+62, r25	; 0x3e
     bfa:	8d af       	std	Y+61, r24	; 0x3d
     bfc:	46 c0       	rjmp	.+140    	; 0xc8a <init_camera+0x114>
	else if (__tmp > 65535)
     bfe:	fe 01       	movw	r30, r28
     c00:	ff 96       	adiw	r30, 0x3f	; 63
     c02:	60 81       	ld	r22, Z
     c04:	71 81       	ldd	r23, Z+1	; 0x01
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	93 81       	ldd	r25, Z+3	; 0x03
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	4f e7       	ldi	r20, 0x7F	; 127
     c10:	57 e4       	ldi	r21, 0x47	; 71
     c12:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     c16:	18 16       	cp	r1, r24
     c18:	64 f5       	brge	.+88     	; 0xc72 <init_camera+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1a:	fe 01       	movw	r30, r28
     c1c:	ed 5b       	subi	r30, 0xBD	; 189
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	60 81       	ld	r22, Z
     c22:	71 81       	ldd	r23, Z+1	; 0x01
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	93 81       	ldd	r25, Z+3	; 0x03
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e2       	ldi	r20, 0x20	; 32
     c2e:	51 e4       	ldi	r21, 0x41	; 65
     c30:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	bc 01       	movw	r22, r24
     c3a:	cd 01       	movw	r24, r26
     c3c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	9e af       	std	Y+62, r25	; 0x3e
     c46:	8d af       	std	Y+61, r24	; 0x3d
     c48:	0f c0       	rjmp	.+30     	; 0xc68 <init_camera+0xf2>
     c4a:	80 e9       	ldi	r24, 0x90	; 144
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	9c af       	std	Y+60, r25	; 0x3c
     c50:	8b af       	std	Y+59, r24	; 0x3b
     c52:	8b ad       	ldd	r24, Y+59	; 0x3b
     c54:	9c ad       	ldd	r25, Y+60	; 0x3c
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <init_camera+0xe0>
     c5a:	9c af       	std	Y+60, r25	; 0x3c
     c5c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5e:	8d ad       	ldd	r24, Y+61	; 0x3d
     c60:	9e ad       	ldd	r25, Y+62	; 0x3e
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	9e af       	std	Y+62, r25	; 0x3e
     c66:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c68:	8d ad       	ldd	r24, Y+61	; 0x3d
     c6a:	9e ad       	ldd	r25, Y+62	; 0x3e
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	69 f7       	brne	.-38     	; 0xc4a <init_camera+0xd4>
     c70:	16 c0       	rjmp	.+44     	; 0xc9e <init_camera+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c72:	fe 01       	movw	r30, r28
     c74:	ff 96       	adiw	r30, 0x3f	; 63
     c76:	60 81       	ld	r22, Z
     c78:	71 81       	ldd	r23, Z+1	; 0x01
     c7a:	82 81       	ldd	r24, Z+2	; 0x02
     c7c:	93 81       	ldd	r25, Z+3	; 0x03
     c7e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	9e af       	std	Y+62, r25	; 0x3e
     c88:	8d af       	std	Y+61, r24	; 0x3d
     c8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c8c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c8e:	9a af       	std	Y+58, r25	; 0x3a
     c90:	89 af       	std	Y+57, r24	; 0x39
     c92:	89 ad       	ldd	r24, Y+57	; 0x39
     c94:	9a ad       	ldd	r25, Y+58	; 0x3a
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <init_camera+0x120>
     c9a:	9a af       	std	Y+58, r25	; 0x3a
     c9c:	89 af       	std	Y+57, r24	; 0x39
	 resize(); _delay_ms(50);
     c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <resize>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a8 e4       	ldi	r26, 0x48	; 72
     ca8:	b2 e4       	ldi	r27, 0x42	; 66
     caa:	8d ab       	std	Y+53, r24	; 0x35
     cac:	9e ab       	std	Y+54, r25	; 0x36
     cae:	af ab       	std	Y+55, r26	; 0x37
     cb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	6d a9       	ldd	r22, Y+53	; 0x35
     cb4:	7e a9       	ldd	r23, Y+54	; 0x36
     cb6:	8f a9       	ldd	r24, Y+55	; 0x37
     cb8:	98 ad       	ldd	r25, Y+56	; 0x38
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a e7       	ldi	r20, 0x7A	; 122
     cc0:	55 e4       	ldi	r21, 0x45	; 69
     cc2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	89 ab       	std	Y+49, r24	; 0x31
     ccc:	9a ab       	std	Y+50, r25	; 0x32
     cce:	ab ab       	std	Y+51, r26	; 0x33
     cd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cd2:	69 a9       	ldd	r22, Y+49	; 0x31
     cd4:	7a a9       	ldd	r23, Y+50	; 0x32
     cd6:	8b a9       	ldd	r24, Y+51	; 0x33
     cd8:	9c a9       	ldd	r25, Y+52	; 0x34
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <init_camera+0x17e>
		__ticks = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	98 ab       	std	Y+48, r25	; 0x30
     cf0:	8f a7       	std	Y+47, r24	; 0x2f
     cf2:	3f c0       	rjmp	.+126    	; 0xd72 <init_camera+0x1fc>
	else if (__tmp > 65535)
     cf4:	69 a9       	ldd	r22, Y+49	; 0x31
     cf6:	7a a9       	ldd	r23, Y+50	; 0x32
     cf8:	8b a9       	ldd	r24, Y+51	; 0x33
     cfa:	9c a9       	ldd	r25, Y+52	; 0x34
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	3f ef       	ldi	r19, 0xFF	; 255
     d00:	4f e7       	ldi	r20, 0x7F	; 127
     d02:	57 e4       	ldi	r21, 0x47	; 71
     d04:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     d08:	18 16       	cp	r1, r24
     d0a:	4c f5       	brge	.+82     	; 0xd5e <init_camera+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0c:	6d a9       	ldd	r22, Y+53	; 0x35
     d0e:	7e a9       	ldd	r23, Y+54	; 0x36
     d10:	8f a9       	ldd	r24, Y+55	; 0x37
     d12:	98 ad       	ldd	r25, Y+56	; 0x38
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e2       	ldi	r20, 0x20	; 32
     d1a:	51 e4       	ldi	r21, 0x41	; 65
     d1c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	98 ab       	std	Y+48, r25	; 0x30
     d32:	8f a7       	std	Y+47, r24	; 0x2f
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <init_camera+0x1de>
     d36:	80 e9       	ldi	r24, 0x90	; 144
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	9e a7       	std	Y+46, r25	; 0x2e
     d3c:	8d a7       	std	Y+45, r24	; 0x2d
     d3e:	8d a5       	ldd	r24, Y+45	; 0x2d
     d40:	9e a5       	ldd	r25, Y+46	; 0x2e
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <init_camera+0x1cc>
     d46:	9e a7       	std	Y+46, r25	; 0x2e
     d48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d4c:	98 a9       	ldd	r25, Y+48	; 0x30
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	98 ab       	std	Y+48, r25	; 0x30
     d52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	8f a5       	ldd	r24, Y+47	; 0x2f
     d56:	98 a9       	ldd	r25, Y+48	; 0x30
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	69 f7       	brne	.-38     	; 0xd36 <init_camera+0x1c0>
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <init_camera+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5e:	69 a9       	ldd	r22, Y+49	; 0x31
     d60:	7a a9       	ldd	r23, Y+50	; 0x32
     d62:	8b a9       	ldd	r24, Y+51	; 0x33
     d64:	9c a9       	ldd	r25, Y+52	; 0x34
     d66:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	98 ab       	std	Y+48, r25	; 0x30
     d70:	8f a7       	std	Y+47, r24	; 0x2f
     d72:	8f a5       	ldd	r24, Y+47	; 0x2f
     d74:	98 a9       	ldd	r25, Y+48	; 0x30
     d76:	9c a7       	std	Y+44, r25	; 0x2c
     d78:	8b a7       	std	Y+43, r24	; 0x2b
     d7a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d7c:	9c a5       	ldd	r25, Y+44	; 0x2c
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <init_camera+0x208>
     d82:	9c a7       	std	Y+44, r25	; 0x2c
     d84:	8b a7       	std	Y+43, r24	; 0x2b
	 zip(); _delay_ms(50);
     d86:	0e 94 95 05 	call	0xb2a	; 0xb2a <zip>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a8 e4       	ldi	r26, 0x48	; 72
     d90:	b2 e4       	ldi	r27, 0x42	; 66
     d92:	8f a3       	std	Y+39, r24	; 0x27
     d94:	98 a7       	std	Y+40, r25	; 0x28
     d96:	a9 a7       	std	Y+41, r26	; 0x29
     d98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9a:	6f a1       	ldd	r22, Y+39	; 0x27
     d9c:	78 a5       	ldd	r23, Y+40	; 0x28
     d9e:	89 a5       	ldd	r24, Y+41	; 0x29
     da0:	9a a5       	ldd	r25, Y+42	; 0x2a
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a e7       	ldi	r20, 0x7A	; 122
     da8:	55 e4       	ldi	r21, 0x45	; 69
     daa:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	8b a3       	std	Y+35, r24	; 0x23
     db4:	9c a3       	std	Y+36, r25	; 0x24
     db6:	ad a3       	std	Y+37, r26	; 0x25
     db8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dba:	6b a1       	ldd	r22, Y+35	; 0x23
     dbc:	7c a1       	ldd	r23, Y+36	; 0x24
     dbe:	8d a1       	ldd	r24, Y+37	; 0x25
     dc0:	9e a1       	ldd	r25, Y+38	; 0x26
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     dce:	88 23       	and	r24, r24
     dd0:	2c f4       	brge	.+10     	; 0xddc <init_camera+0x266>
		__ticks = 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9a a3       	std	Y+34, r25	; 0x22
     dd8:	89 a3       	std	Y+33, r24	; 0x21
     dda:	3f c0       	rjmp	.+126    	; 0xe5a <init_camera+0x2e4>
	else if (__tmp > 65535)
     ddc:	6b a1       	ldd	r22, Y+35	; 0x23
     dde:	7c a1       	ldd	r23, Y+36	; 0x24
     de0:	8d a1       	ldd	r24, Y+37	; 0x25
     de2:	9e a1       	ldd	r25, Y+38	; 0x26
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	3f ef       	ldi	r19, 0xFF	; 255
     de8:	4f e7       	ldi	r20, 0x7F	; 127
     dea:	57 e4       	ldi	r21, 0x47	; 71
     dec:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     df0:	18 16       	cp	r1, r24
     df2:	4c f5       	brge	.+82     	; 0xe46 <init_camera+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df4:	6f a1       	ldd	r22, Y+39	; 0x27
     df6:	78 a5       	ldd	r23, Y+40	; 0x28
     df8:	89 a5       	ldd	r24, Y+41	; 0x29
     dfa:	9a a5       	ldd	r25, Y+42	; 0x2a
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	9a a3       	std	Y+34, r25	; 0x22
     e1a:	89 a3       	std	Y+33, r24	; 0x21
     e1c:	0f c0       	rjmp	.+30     	; 0xe3c <init_camera+0x2c6>
     e1e:	80 e9       	ldi	r24, 0x90	; 144
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	98 a3       	std	Y+32, r25	; 0x20
     e24:	8f 8f       	std	Y+31, r24	; 0x1f
     e26:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e28:	98 a1       	ldd	r25, Y+32	; 0x20
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <init_camera+0x2b4>
     e2e:	98 a3       	std	Y+32, r25	; 0x20
     e30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e32:	89 a1       	ldd	r24, Y+33	; 0x21
     e34:	9a a1       	ldd	r25, Y+34	; 0x22
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	9a a3       	std	Y+34, r25	; 0x22
     e3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3c:	89 a1       	ldd	r24, Y+33	; 0x21
     e3e:	9a a1       	ldd	r25, Y+34	; 0x22
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	69 f7       	brne	.-38     	; 0xe1e <init_camera+0x2a8>
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <init_camera+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e46:	6b a1       	ldd	r22, Y+35	; 0x23
     e48:	7c a1       	ldd	r23, Y+36	; 0x24
     e4a:	8d a1       	ldd	r24, Y+37	; 0x25
     e4c:	9e a1       	ldd	r25, Y+38	; 0x26
     e4e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9a a3       	std	Y+34, r25	; 0x22
     e58:	89 a3       	std	Y+33, r24	; 0x21
     e5a:	89 a1       	ldd	r24, Y+33	; 0x21
     e5c:	9a a1       	ldd	r25, Y+34	; 0x22
     e5e:	9e 8f       	std	Y+30, r25	; 0x1e
     e60:	8d 8f       	std	Y+29, r24	; 0x1d
     e62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <init_camera+0x2f0>
     e6a:	9e 8f       	std	Y+30, r25	; 0x1e
     e6c:	8d 8f       	std	Y+29, r24	; 0x1d
	 set_rate(); _delay_ms(50);		//
     e6e:	0e 94 45 02 	call	0x48a	; 0x48a <set_rate>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	a8 e4       	ldi	r26, 0x48	; 72
     e78:	b2 e4       	ldi	r27, 0x42	; 66
     e7a:	89 8f       	std	Y+25, r24	; 0x19
     e7c:	9a 8f       	std	Y+26, r25	; 0x1a
     e7e:	ab 8f       	std	Y+27, r26	; 0x1b
     e80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e82:	69 8d       	ldd	r22, Y+25	; 0x19
     e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	4a e7       	ldi	r20, 0x7A	; 122
     e90:	55 e4       	ldi	r21, 0x45	; 69
     e92:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	8d 8b       	std	Y+21, r24	; 0x15
     e9c:	9e 8b       	std	Y+22, r25	; 0x16
     e9e:	af 8b       	std	Y+23, r26	; 0x17
     ea0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ea2:	6d 89       	ldd	r22, Y+21	; 0x15
     ea4:	7e 89       	ldd	r23, Y+22	; 0x16
     ea6:	8f 89       	ldd	r24, Y+23	; 0x17
     ea8:	98 8d       	ldd	r25, Y+24	; 0x18
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e8       	ldi	r20, 0x80	; 128
     eb0:	5f e3       	ldi	r21, 0x3F	; 63
     eb2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     eb6:	88 23       	and	r24, r24
     eb8:	2c f4       	brge	.+10     	; 0xec4 <init_camera+0x34e>
		__ticks = 1;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9c 8b       	std	Y+20, r25	; 0x14
     ec0:	8b 8b       	std	Y+19, r24	; 0x13
     ec2:	3f c0       	rjmp	.+126    	; 0xf42 <init_camera+0x3cc>
	else if (__tmp > 65535)
     ec4:	6d 89       	ldd	r22, Y+21	; 0x15
     ec6:	7e 89       	ldd	r23, Y+22	; 0x16
     ec8:	8f 89       	ldd	r24, Y+23	; 0x17
     eca:	98 8d       	ldd	r25, Y+24	; 0x18
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	3f ef       	ldi	r19, 0xFF	; 255
     ed0:	4f e7       	ldi	r20, 0x7F	; 127
     ed2:	57 e4       	ldi	r21, 0x47	; 71
     ed4:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     ed8:	18 16       	cp	r1, r24
     eda:	4c f5       	brge	.+82     	; 0xf2e <init_camera+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     edc:	69 8d       	ldd	r22, Y+25	; 0x19
     ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e2       	ldi	r20, 0x20	; 32
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	bc 01       	movw	r22, r24
     ef6:	cd 01       	movw	r24, r26
     ef8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	9c 8b       	std	Y+20, r25	; 0x14
     f02:	8b 8b       	std	Y+19, r24	; 0x13
     f04:	0f c0       	rjmp	.+30     	; 0xf24 <init_camera+0x3ae>
     f06:	80 e9       	ldi	r24, 0x90	; 144
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	9a 8b       	std	Y+18, r25	; 0x12
     f0c:	89 8b       	std	Y+17, r24	; 0x11
     f0e:	89 89       	ldd	r24, Y+17	; 0x11
     f10:	9a 89       	ldd	r25, Y+18	; 0x12
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <init_camera+0x39c>
     f16:	9a 8b       	std	Y+18, r25	; 0x12
     f18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1a:	8b 89       	ldd	r24, Y+19	; 0x13
     f1c:	9c 89       	ldd	r25, Y+20	; 0x14
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	9c 8b       	std	Y+20, r25	; 0x14
     f22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f24:	8b 89       	ldd	r24, Y+19	; 0x13
     f26:	9c 89       	ldd	r25, Y+20	; 0x14
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	69 f7       	brne	.-38     	; 0xf06 <init_camera+0x390>
     f2c:	14 c0       	rjmp	.+40     	; 0xf56 <init_camera+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2e:	6d 89       	ldd	r22, Y+21	; 0x15
     f30:	7e 89       	ldd	r23, Y+22	; 0x16
     f32:	8f 89       	ldd	r24, Y+23	; 0x17
     f34:	98 8d       	ldd	r25, Y+24	; 0x18
     f36:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	9c 8b       	std	Y+20, r25	; 0x14
     f40:	8b 8b       	std	Y+19, r24	; 0x13
     f42:	8b 89       	ldd	r24, Y+19	; 0x13
     f44:	9c 89       	ldd	r25, Y+20	; 0x14
     f46:	98 8b       	std	Y+16, r25	; 0x10
     f48:	8f 87       	std	Y+15, r24	; 0x0f
     f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f4c:	98 89       	ldd	r25, Y+16	; 0x10
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <init_camera+0x3d8>
     f52:	98 8b       	std	Y+16, r25	; 0x10
     f54:	8f 87       	std	Y+15, r24	; 0x0f
	 UBRR0L = 0x08; printf("\r\n chang boudrate"); _delay_ms(50);
     f56:	e9 e2       	ldi	r30, 0x29	; 41
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	88 e0       	ldi	r24, 0x08	; 8
     f5c:	80 83       	st	Z, r24
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <init_camera+0x3ea>
     f60:	ed b7       	in	r30, 0x3d	; 61
     f62:	fe b7       	in	r31, 0x3e	; 62
     f64:	31 96       	adiw	r30, 0x01	; 1
     f66:	83 e1       	ldi	r24, 0x13	; 19
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	0e 94 25 13 	call	0x264a	; 0x264a <printf>
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a8 e4       	ldi	r26, 0x48	; 72
     f7c:	b2 e4       	ldi	r27, 0x42	; 66
     f7e:	8b 87       	std	Y+11, r24	; 0x0b
     f80:	9c 87       	std	Y+12, r25	; 0x0c
     f82:	ad 87       	std	Y+13, r26	; 0x0d
     f84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f86:	6b 85       	ldd	r22, Y+11	; 0x0b
     f88:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	4a e7       	ldi	r20, 0x7A	; 122
     f94:	55 e4       	ldi	r21, 0x45	; 69
     f96:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	8f 83       	std	Y+7, r24	; 0x07
     fa0:	98 87       	std	Y+8, r25	; 0x08
     fa2:	a9 87       	std	Y+9, r26	; 0x09
     fa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fa6:	6f 81       	ldd	r22, Y+7	; 0x07
     fa8:	78 85       	ldd	r23, Y+8	; 0x08
     faa:	89 85       	ldd	r24, Y+9	; 0x09
     fac:	9a 85       	ldd	r25, Y+10	; 0x0a
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e8       	ldi	r20, 0x80	; 128
     fb4:	5f e3       	ldi	r21, 0x3F	; 63
     fb6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
     fba:	88 23       	and	r24, r24
     fbc:	2c f4       	brge	.+10     	; 0xfc8 <init_camera+0x452>
		__ticks = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
     fc6:	3f c0       	rjmp	.+126    	; 0x1046 <init_camera+0x4d0>
	else if (__tmp > 65535)
     fc8:	6f 81       	ldd	r22, Y+7	; 0x07
     fca:	78 85       	ldd	r23, Y+8	; 0x08
     fcc:	89 85       	ldd	r24, Y+9	; 0x09
     fce:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	3f ef       	ldi	r19, 0xFF	; 255
     fd4:	4f e7       	ldi	r20, 0x7F	; 127
     fd6:	57 e4       	ldi	r21, 0x47	; 71
     fd8:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
     fdc:	18 16       	cp	r1, r24
     fde:	4c f5       	brge	.+82     	; 0x1032 <init_camera+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e2       	ldi	r20, 0x20	; 32
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	0f c0       	rjmp	.+30     	; 0x1028 <init_camera+0x4b2>
    100a:	80 e9       	ldi	r24, 0x90	; 144
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <init_camera+0x4a0>
    101a:	9c 83       	std	Y+4, r25	; 0x04
    101c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	9e 83       	std	Y+6, r25	; 0x06
    1026:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f7       	brne	.-38     	; 0x100a <init_camera+0x494>
    1030:	14 c0       	rjmp	.+40     	; 0x105a <init_camera+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1032:	6f 81       	ldd	r22, Y+7	; 0x07
    1034:	78 85       	ldd	r23, Y+8	; 0x08
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <init_camera+0x4dc>
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
	 //idle();
}
    105a:	ca 5b       	subi	r28, 0xBA	; 186
    105c:	df 4f       	sbci	r29, 0xFF	; 255
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <init_buffer>:



void init_buffer(int select)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <init_buffer+0x6>
    1078:	00 d0       	rcall	.+0      	; 0x107a <init_buffer+0x8>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	switch(select)
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	99 f4       	brne	.+38     	; 0x10b0 <init_buffer+0x3e>
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    108a:	1a 82       	std	Y+2, r1	; 0x02
    108c:	19 82       	std	Y+1, r1	; 0x01
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <init_buffer+0x34>
			img_buffer[i] = 0x00;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	fc 01       	movw	r30, r24
    1096:	e0 50       	subi	r30, 0x00	; 0
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	10 82       	st	Z, r1
	int i;
	
	switch(select)
	{
	case CAMERA:	//0
		for(i=0; i<9; i++)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	89 30       	cpi	r24, 0x09	; 9
    10ac:	91 05       	cpc	r25, r1
    10ae:	84 f3       	brlt	.-32     	; 0x1090 <init_buffer+0x1e>
			img_buffer[i] = 0x00;
		break;
	}
}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <__vector_18>:


// *** USART 인터럽트
ISR(USART0_RX_vect)	//Camera의 수신완료 인터럽트
{
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	00 90 5b 00 	lds	r0, 0x005B
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	2f 93       	push	r18
    10d0:	3f 93       	push	r19
    10d2:	4f 93       	push	r20
    10d4:	5f 93       	push	r21
    10d6:	6f 93       	push	r22
    10d8:	7f 93       	push	r23
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    10de:	af 93       	push	r26
    10e0:	bf 93       	push	r27
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	61 97       	sbiw	r28, 0x11	; 17
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	cd bf       	out	0x3d, r28	; 61
	char uart0_data = UDR0;
    10f4:	ec e2       	ldi	r30, 0x2C	; 44
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 87       	std	Y+15, r24	; 0x0f

	switch(command)
    10fc:	80 91 a3 01 	lds	r24, 0x01A3
    1100:	90 91 a4 01 	lds	r25, 0x01A4
    1104:	99 8b       	std	Y+17, r25	; 0x11
    1106:	88 8b       	std	Y+16, r24	; 0x10
    1108:	88 89       	ldd	r24, Y+16	; 0x10
    110a:	99 89       	ldd	r25, Y+17	; 0x11
    110c:	82 30       	cpi	r24, 0x02	; 2
    110e:	91 05       	cpc	r25, r1
    1110:	a1 f0       	breq	.+40     	; 0x113a <__stack+0x3b>
    1112:	88 89       	ldd	r24, Y+16	; 0x10
    1114:	99 89       	ldd	r25, Y+17	; 0x11
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	c9 f0       	breq	.+50     	; 0x114e <__stack+0x4f>
    111c:	88 89       	ldd	r24, Y+16	; 0x10
    111e:	99 89       	ldd	r25, Y+17	; 0x11
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	e9 f4       	brne	.+58     	; 0x1160 <__stack+0x61>
	{
	case IDLE:
		idle_cnt++;
    1126:	80 91 9d 01 	lds	r24, 0x019D
    112a:	90 91 9e 01 	lds	r25, 0x019E
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	90 93 9e 01 	sts	0x019E, r25
    1134:	80 93 9d 01 	sts	0x019D, r24
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <__stack+0x61>
		break;
	case SHOT:
		shot_cnt++;
    113a:	80 91 9f 01 	lds	r24, 0x019F
    113e:	90 91 a0 01 	lds	r25, 0x01A0
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	90 93 a0 01 	sts	0x01A0, r25
    1148:	80 93 9f 01 	sts	0x019F, r24
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <__stack+0x61>
		break;
	case CALL_SIZE:
		call_size_cnt++;
    114e:	80 91 a1 01 	lds	r24, 0x01A1
    1152:	90 91 a2 01 	lds	r25, 0x01A2
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	90 93 a2 01 	sts	0x01A2, r25
    115c:	80 93 a1 01 	sts	0x01A1, r24
		break;
	}
	
	if(call_size_flag == 1)	{
    1160:	80 91 95 01 	lds	r24, 0x0195
    1164:	90 91 96 01 	lds	r25, 0x0196
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	91 f4       	brne	.+36     	; 0x1192 <__stack+0x93>
		img_buffer[img_cnt] = uart0_data;
    116e:	80 91 93 01 	lds	r24, 0x0193
    1172:	90 91 94 01 	lds	r25, 0x0194
    1176:	fc 01       	movw	r30, r24
    1178:	e0 50       	subi	r30, 0x00	; 0
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	8f 85       	ldd	r24, Y+15	; 0x0f
    117e:	80 83       	st	Z, r24
		img_cnt++;
    1180:	80 91 93 01 	lds	r24, 0x0193
    1184:	90 91 94 01 	lds	r25, 0x0194
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	90 93 94 01 	sts	0x0194, r25
    118e:	80 93 93 01 	sts	0x0193, r24
	}

	if(uart0_data == 0xff)
    1192:	8f 85       	ldd	r24, Y+15	; 0x0f
    1194:	8f 3f       	cpi	r24, 0xFF	; 255
    1196:	31 f4       	brne	.+12     	; 0x11a4 <__stack+0xa5>
		img_data_start_flag = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	90 93 9a 01 	sts	0x019A, r25
    11a0:	80 93 99 01 	sts	0x0199, r24
	
	if(uart0_data == 0xd9)
    11a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a6:	89 3d       	cpi	r24, 0xD9	; 217
    11a8:	39 f4       	brne	.+14     	; 0x11b8 <__stack+0xb9>
		img_data_cnt = 1;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	90 93 9c 01 	sts	0x019C, r25
    11b2:	80 93 9b 01 	sts	0x019B, r24
    11b6:	97 c0       	rjmp	.+302    	; 0x12e6 <__stack+0x1e7>
	else	{
		if(uart0_data == 0x76 && img_data_cnt == 1)	{
    11b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ba:	86 37       	cpi	r24, 0x76	; 118
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <__stack+0xc1>
    11be:	8f c0       	rjmp	.+286    	; 0x12de <__stack+0x1df>
    11c0:	80 91 9b 01 	lds	r24, 0x019B
    11c4:	90 91 9c 01 	lds	r25, 0x019C
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	91 05       	cpc	r25, r1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <__stack+0xd1>
    11ce:	87 c0       	rjmp	.+270    	; 0x12de <__stack+0x1df>
			img_data_start_flag = 0;
    11d0:	10 92 9a 01 	sts	0x019A, r1
    11d4:	10 92 99 01 	sts	0x0199, r1
			img_data_cnt = 0;
    11d8:	10 92 9c 01 	sts	0x019C, r1
    11dc:	10 92 9b 01 	sts	0x019B, r1
			printf("\n");
    11e0:	8a e0       	ldi	r24, 0x0A	; 10
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 37 13 	call	0x266e	; 0x266e <putchar>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	a8 ec       	ldi	r26, 0xC8	; 200
    11ee:	b2 e4       	ldi	r27, 0x42	; 66
    11f0:	8b 87       	std	Y+11, r24	; 0x0b
    11f2:	9c 87       	std	Y+12, r25	; 0x0c
    11f4:	ad 87       	std	Y+13, r26	; 0x0d
    11f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	4a e7       	ldi	r20, 0x7A	; 122
    1206:	55 e4       	ldi	r21, 0x45	; 69
    1208:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	8f 83       	std	Y+7, r24	; 0x07
    1212:	98 87       	std	Y+8, r25	; 0x08
    1214:	a9 87       	std	Y+9, r26	; 0x09
    1216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1218:	6f 81       	ldd	r22, Y+7	; 0x07
    121a:	78 85       	ldd	r23, Y+8	; 0x08
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	2c f4       	brge	.+10     	; 0x123a <__stack+0x13b>
		__ticks = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	3f c0       	rjmp	.+126    	; 0x12b8 <__stack+0x1b9>
	else if (__tmp > 65535)
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	3f ef       	ldi	r19, 0xFF	; 255
    1246:	4f e7       	ldi	r20, 0x7F	; 127
    1248:	57 e4       	ldi	r21, 0x47	; 71
    124a:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
    124e:	18 16       	cp	r1, r24
    1250:	4c f5       	brge	.+82     	; 0x12a4 <__stack+0x1a5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1252:	6b 85       	ldd	r22, Y+11	; 0x0b
    1254:	7c 85       	ldd	r23, Y+12	; 0x0c
    1256:	8d 85       	ldd	r24, Y+13	; 0x0d
    1258:	9e 85       	ldd	r25, Y+14	; 0x0e
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e2       	ldi	r20, 0x20	; 32
    1260:	51 e4       	ldi	r21, 0x41	; 65
    1262:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	0f c0       	rjmp	.+30     	; 0x129a <__stack+0x19b>
    127c:	80 e9       	ldi	r24, 0x90	; 144
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	8b 83       	std	Y+3, r24	; 0x03
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <__stack+0x189>
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9e 83       	std	Y+6, r25	; 0x06
    1298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	69 f7       	brne	.-38     	; 0x127c <__stack+0x17d>
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <__stack+0x1cd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	9e 83       	std	Y+6, r25	; 0x06
    12b6:	8d 83       	std	Y+5, r24	; 0x05
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <__stack+0x1c5>
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			init_buffer(CAMERA);
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 39 08 	call	0x1072	; 0x1072 <init_buffer>

			TIMSK = 0x04;	//타이머 인에이블
    12d4:	e7 e5       	ldi	r30, 0x57	; 87
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	84 e0       	ldi	r24, 0x04	; 4
    12da:	80 83       	st	Z, r24
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <__stack+0x1e7>

		}
		else
			img_data_cnt = 0;
    12de:	10 92 9c 01 	sts	0x019C, r1
    12e2:	10 92 9b 01 	sts	0x019B, r1
	}

	if(call_img_flag == 1 && img_data_start_flag == 1)
    12e6:	80 91 97 01 	lds	r24, 0x0197
    12ea:	90 91 98 01 	lds	r25, 0x0198
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	91 05       	cpc	r25, r1
    12f2:	59 f4       	brne	.+22     	; 0x130a <__stack+0x20b>
    12f4:	80 91 99 01 	lds	r24, 0x0199
    12f8:	90 91 9a 01 	lds	r25, 0x019A
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	91 05       	cpc	r25, r1
    1300:	21 f4       	brne	.+8      	; 0x130a <__stack+0x20b>
		UDR1 = uart0_data;
    1302:	ec e9       	ldi	r30, 0x9C	; 156
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8f 85       	ldd	r24, Y+15	; 0x0f
    1308:	80 83       	st	Z, r24
}
    130a:	61 96       	adiw	r28, 0x11	; 17
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	00 92 5b 00 	sts	0x005B, r0
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <__vector_30>:


ISR(USART1_RX_vect)	//Computer
{
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	00 90 5b 00 	lds	r0, 0x005B
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	2f 93       	push	r18
    134e:	3f 93       	push	r19
    1350:	4f 93       	push	r20
    1352:	5f 93       	push	r21
    1354:	6f 93       	push	r22
    1356:	7f 93       	push	r23
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	af 93       	push	r26
    135e:	bf 93       	push	r27
    1360:	ef 93       	push	r30
    1362:	ff 93       	push	r31
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <__vector_30+0x2e>
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	/*** 현재는 컴퓨터로부터 받는 데이터 ***/
	/*** 나중에는 스마트폰으로부터 받는 데이터 ***/
	
	char ch = UDR1;
    1370:	ec e9       	ldi	r30, 0x9C	; 156
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	89 83       	std	Y+1, r24	; 0x01

	switch(ch)
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3b 83       	std	Y+3, r19	; 0x03
    1380:	2a 83       	std	Y+2, r18	; 0x02
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	83 36       	cpi	r24, 0x63	; 99
    1388:	91 05       	cpc	r25, r1
    138a:	31 f0       	breq	.+12     	; 0x1398 <__vector_30+0x5c>
    138c:	2a 81       	ldd	r18, Y+2	; 0x02
    138e:	3b 81       	ldd	r19, Y+3	; 0x03
    1390:	24 36       	cpi	r18, 0x64	; 100
    1392:	31 05       	cpc	r19, r1
    1394:	51 f0       	breq	.+20     	; 0x13aa <__vector_30+0x6e>
    1396:	48 c0       	rjmp	.+144    	; 0x1428 <__vector_30+0xec>
	{
			case 'c':
				TIMSK = 0x00;	//타이머 디스에이블
    1398:	e7 e5       	ldi	r30, 0x57	; 87
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	10 82       	st	Z, r1
				ADCSRA = 0x00;	//ADC 인터럽트 디스에이블
    139e:	e6 e2       	ldi	r30, 0x26	; 38
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	10 82       	st	Z, r1
				idle();
    13a4:	0e 94 65 02 	call	0x4ca	; 0x4ca <idle>
    13a8:	3f c0       	rjmp	.+126    	; 0x1428 <__vector_30+0xec>
			break;
			case 'd'://
				printf("idle cnt : %d\n", idle_cnt);
    13aa:	20 91 9d 01 	lds	r18, 0x019D
    13ae:	30 91 9e 01 	lds	r19, 0x019E
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <__vector_30+0x78>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <__vector_30+0x7a>
    13b6:	ed b7       	in	r30, 0x3d	; 61
    13b8:	fe b7       	in	r31, 0x3e	; 62
    13ba:	31 96       	adiw	r30, 0x01	; 1
    13bc:	85 e2       	ldi	r24, 0x25	; 37
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	91 83       	std	Z+1, r25	; 0x01
    13c2:	80 83       	st	Z, r24
    13c4:	33 83       	std	Z+3, r19	; 0x03
    13c6:	22 83       	std	Z+2, r18	; 0x02
    13c8:	0e 94 25 13 	call	0x264a	; 0x264a <printf>
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
				printf("shot_cnt : %d\n", shot_cnt);
    13d4:	20 91 9f 01 	lds	r18, 0x019F
    13d8:	30 91 a0 01 	lds	r19, 0x01A0
    13dc:	00 d0       	rcall	.+0      	; 0x13de <__vector_30+0xa2>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <__vector_30+0xa4>
    13e0:	ed b7       	in	r30, 0x3d	; 61
    13e2:	fe b7       	in	r31, 0x3e	; 62
    13e4:	31 96       	adiw	r30, 0x01	; 1
    13e6:	84 e3       	ldi	r24, 0x34	; 52
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
    13ee:	33 83       	std	Z+3, r19	; 0x03
    13f0:	22 83       	std	Z+2, r18	; 0x02
    13f2:	0e 94 25 13 	call	0x264a	; 0x264a <printf>
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
				printf("call_size_cnt : %d\n", call_size_cnt);
    13fe:	20 91 a1 01 	lds	r18, 0x01A1
    1402:	30 91 a2 01 	lds	r19, 0x01A2
    1406:	00 d0       	rcall	.+0      	; 0x1408 <__vector_30+0xcc>
    1408:	00 d0       	rcall	.+0      	; 0x140a <__vector_30+0xce>
    140a:	ed b7       	in	r30, 0x3d	; 61
    140c:	fe b7       	in	r31, 0x3e	; 62
    140e:	31 96       	adiw	r30, 0x01	; 1
    1410:	83 e4       	ldi	r24, 0x43	; 67
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	80 83       	st	Z, r24
    1418:	33 83       	std	Z+3, r19	; 0x03
    141a:	22 83       	std	Z+2, r18	; 0x02
    141c:	0e 94 25 13 	call	0x264a	; 0x264a <printf>
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
			break;
	}
	
	if(TEST)
		printf("%c", UDR1);	
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	ff 91       	pop	r31
    1434:	ef 91       	pop	r30
    1436:	bf 91       	pop	r27
    1438:	af 91       	pop	r26
    143a:	9f 91       	pop	r25
    143c:	8f 91       	pop	r24
    143e:	7f 91       	pop	r23
    1440:	6f 91       	pop	r22
    1442:	5f 91       	pop	r21
    1444:	4f 91       	pop	r20
    1446:	3f 91       	pop	r19
    1448:	2f 91       	pop	r18
    144a:	0f 90       	pop	r0
    144c:	00 92 5b 00 	sts	0x005B, r0
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <main>:




int main(void)
{
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	c6 54       	subi	r28, 0x46	; 70
    1468:	d0 40       	sbci	r29, 0x00	; 0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    1474:	0e 94 d7 01 	call	0x3ae	; 0x3ae <init_devices>
	init_camera();
    1478:	0e 94 bb 05 	call	0xb76	; 0xb76 <init_camera>

	printf("\r\n\r\nConnect with IronMan_Suit\r\n");
    147c:	87 e5       	ldi	r24, 0x57	; 87
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	0e 94 3e 13 	call	0x267c	; 0x267c <puts>

	while(1)
	{
	// *** 카메라 관련 카운트*** //
	if(idle_cnt >= 3)	{
    1484:	80 91 9d 01 	lds	r24, 0x019D
    1488:	90 91 9e 01 	lds	r25, 0x019E
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	0c f4       	brge	.+2      	; 0x1494 <main+0x3a>
    1492:	88 c0       	rjmp	.+272    	; 0x15a4 <main+0x14a>
    1494:	fe 01       	movw	r30, r28
    1496:	ed 5b       	subi	r30, 0xBD	; 189
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a4 e3       	ldi	r26, 0x34	; 52
    14a0:	b2 e4       	ldi	r27, 0x42	; 66
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	a2 83       	std	Z+2, r26	; 0x02
    14a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	8e 01       	movw	r16, r28
    14ac:	01 5c       	subi	r16, 0xC1	; 193
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	ed 5b       	subi	r30, 0xBD	; 189
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a e7       	ldi	r20, 0x7A	; 122
    14c4:	55 e4       	ldi	r21, 0x45	; 69
    14c6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 83       	st	Z, r24
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d8:	fe 01       	movw	r30, r28
    14da:	ff 96       	adiw	r30, 0x3f	; 63
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <main+0xa4>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9e af       	std	Y+62, r25	; 0x3e
    14fa:	8d af       	std	Y+61, r24	; 0x3d
    14fc:	46 c0       	rjmp	.+140    	; 0x158a <main+0x130>
	else if (__tmp > 65535)
    14fe:	fe 01       	movw	r30, r28
    1500:	ff 96       	adiw	r30, 0x3f	; 63
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	64 f5       	brge	.+88     	; 0x1572 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	fe 01       	movw	r30, r28
    151c:	ed 5b       	subi	r30, 0xBD	; 189
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9e af       	std	Y+62, r25	; 0x3e
    1546:	8d af       	std	Y+61, r24	; 0x3d
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <main+0x10e>
    154a:	80 e9       	ldi	r24, 0x90	; 144
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	9c af       	std	Y+60, r25	; 0x3c
    1550:	8b af       	std	Y+59, r24	; 0x3b
    1552:	8b ad       	ldd	r24, Y+59	; 0x3b
    1554:	9c ad       	ldd	r25, Y+60	; 0x3c
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <main+0xfc>
    155a:	9c af       	std	Y+60, r25	; 0x3c
    155c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1560:	9e ad       	ldd	r25, Y+62	; 0x3e
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9e af       	std	Y+62, r25	; 0x3e
    1566:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1568:	8d ad       	ldd	r24, Y+61	; 0x3d
    156a:	9e ad       	ldd	r25, Y+62	; 0x3e
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f7       	brne	.-38     	; 0x154a <main+0xf0>
    1570:	16 c0       	rjmp	.+44     	; 0x159e <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	fe 01       	movw	r30, r28
    1574:	ff 96       	adiw	r30, 0x3f	; 63
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e af       	std	Y+62, r25	; 0x3e
    1588:	8d af       	std	Y+61, r24	; 0x3d
    158a:	8d ad       	ldd	r24, Y+61	; 0x3d
    158c:	9e ad       	ldd	r25, Y+62	; 0x3e
    158e:	9a af       	std	Y+58, r25	; 0x3a
    1590:	89 af       	std	Y+57, r24	; 0x39
    1592:	89 ad       	ldd	r24, Y+57	; 0x39
    1594:	9a ad       	ldd	r25, Y+58	; 0x3a
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <main+0x13c>
    159a:	9a af       	std	Y+58, r25	; 0x3a
    159c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(45);
		shot();
    159e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <shot>
    15a2:	70 cf       	rjmp	.-288    	; 0x1484 <main+0x2a>
		continue;
	}
	else if(shot_cnt == 5)	{
    15a4:	80 91 9f 01 	lds	r24, 0x019F
    15a8:	90 91 a0 01 	lds	r25, 0x01A0
    15ac:	85 30       	cpi	r24, 0x05	; 5
    15ae:	91 05       	cpc	r25, r1
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <main+0x15e>
		call_size();
    15b2:	0e 94 1c 05 	call	0xa38	; 0xa38 <call_size>
    15b6:	66 cf       	rjmp	.-308    	; 0x1484 <main+0x2a>
		continue;
	}
	else if(call_size_cnt == 9)	{
    15b8:	80 91 a1 01 	lds	r24, 0x01A1
    15bc:	90 91 a2 01 	lds	r25, 0x01A2
    15c0:	89 30       	cpi	r24, 0x09	; 9
    15c2:	91 05       	cpc	r25, r1
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <main+0x16e>
    15c6:	79 c0       	rjmp	.+242    	; 0x16ba <main+0x260>
		call_size_cnt = 0;
    15c8:	10 92 a2 01 	sts	0x01A2, r1
    15cc:	10 92 a1 01 	sts	0x01A1, r1
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a8 e4       	ldi	r26, 0x48	; 72
    15d6:	b2 e4       	ldi	r27, 0x42	; 66
    15d8:	8d ab       	std	Y+53, r24	; 0x35
    15da:	9e ab       	std	Y+54, r25	; 0x36
    15dc:	af ab       	std	Y+55, r26	; 0x37
    15de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e0:	6d a9       	ldd	r22, Y+53	; 0x35
    15e2:	7e a9       	ldd	r23, Y+54	; 0x36
    15e4:	8f a9       	ldd	r24, Y+55	; 0x37
    15e6:	98 ad       	ldd	r25, Y+56	; 0x38
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	4a e7       	ldi	r20, 0x7A	; 122
    15ee:	55 e4       	ldi	r21, 0x45	; 69
    15f0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	89 ab       	std	Y+49, r24	; 0x31
    15fa:	9a ab       	std	Y+50, r25	; 0x32
    15fc:	ab ab       	std	Y+51, r26	; 0x33
    15fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1600:	69 a9       	ldd	r22, Y+49	; 0x31
    1602:	7a a9       	ldd	r23, Y+50	; 0x32
    1604:	8b a9       	ldd	r24, Y+51	; 0x33
    1606:	9c a9       	ldd	r25, Y+52	; 0x34
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e8       	ldi	r20, 0x80	; 128
    160e:	5f e3       	ldi	r21, 0x3F	; 63
    1610:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
    1614:	88 23       	and	r24, r24
    1616:	2c f4       	brge	.+10     	; 0x1622 <main+0x1c8>
		__ticks = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	98 ab       	std	Y+48, r25	; 0x30
    161e:	8f a7       	std	Y+47, r24	; 0x2f
    1620:	3f c0       	rjmp	.+126    	; 0x16a0 <main+0x246>
	else if (__tmp > 65535)
    1622:	69 a9       	ldd	r22, Y+49	; 0x31
    1624:	7a a9       	ldd	r23, Y+50	; 0x32
    1626:	8b a9       	ldd	r24, Y+51	; 0x33
    1628:	9c a9       	ldd	r25, Y+52	; 0x34
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	4c f5       	brge	.+82     	; 0x168c <main+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163a:	6d a9       	ldd	r22, Y+53	; 0x35
    163c:	7e a9       	ldd	r23, Y+54	; 0x36
    163e:	8f a9       	ldd	r24, Y+55	; 0x37
    1640:	98 ad       	ldd	r25, Y+56	; 0x38
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	98 ab       	std	Y+48, r25	; 0x30
    1660:	8f a7       	std	Y+47, r24	; 0x2f
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <main+0x228>
    1664:	80 e9       	ldi	r24, 0x90	; 144
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	9e a7       	std	Y+46, r25	; 0x2e
    166a:	8d a7       	std	Y+45, r24	; 0x2d
    166c:	8d a5       	ldd	r24, Y+45	; 0x2d
    166e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <main+0x216>
    1674:	9e a7       	std	Y+46, r25	; 0x2e
    1676:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	8f a5       	ldd	r24, Y+47	; 0x2f
    167a:	98 a9       	ldd	r25, Y+48	; 0x30
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	98 ab       	std	Y+48, r25	; 0x30
    1680:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	8f a5       	ldd	r24, Y+47	; 0x2f
    1684:	98 a9       	ldd	r25, Y+48	; 0x30
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	69 f7       	brne	.-38     	; 0x1664 <main+0x20a>
    168a:	14 c0       	rjmp	.+40     	; 0x16b4 <main+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	69 a9       	ldd	r22, Y+49	; 0x31
    168e:	7a a9       	ldd	r23, Y+50	; 0x32
    1690:	8b a9       	ldd	r24, Y+51	; 0x33
    1692:	9c a9       	ldd	r25, Y+52	; 0x34
    1694:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	98 ab       	std	Y+48, r25	; 0x30
    169e:	8f a7       	std	Y+47, r24	; 0x2f
    16a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a2:	98 a9       	ldd	r25, Y+48	; 0x30
    16a4:	9c a7       	std	Y+44, r25	; 0x2c
    16a6:	8b a7       	std	Y+43, r24	; 0x2b
    16a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <main+0x252>
    16b0:	9c a7       	std	Y+44, r25	; 0x2c
    16b2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		call_img();
    16b4:	0e 94 46 05 	call	0xa8c	; 0xa8c <call_img>
    16b8:	e5 ce       	rjmp	.-566    	; 0x1484 <main+0x2a>
	}
		

	// *** 센서부분 *** //
	
	if(val0 > 300)	{	//왼쪽
    16ba:	80 91 88 01 	lds	r24, 0x0188
    16be:	90 91 89 01 	lds	r25, 0x0189
    16c2:	f1 e0       	ldi	r31, 0x01	; 1
    16c4:	8d 32       	cpi	r24, 0x2D	; 45
    16c6:	9f 07       	cpc	r25, r31
    16c8:	5c f0       	brlt	.+22     	; 0x16e0 <main+0x286>
		PORTA |= 0x01;
    16ca:	ab e3       	ldi	r26, 0x3B	; 59
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e3       	ldi	r30, 0x3B	; 59
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	81 60       	ori	r24, 0x01	; 1
    16d6:	8c 93       	st	X, r24
		right_h = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	80 93 90 01 	sts	0x0190, r24
    16de:	0e c0       	rjmp	.+28     	; 0x16fc <main+0x2a2>
	}
	else if(right_h == 1)	{
    16e0:	80 91 90 01 	lds	r24, 0x0190
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	51 f4       	brne	.+20     	; 0x16fc <main+0x2a2>
		PORTA ^= 0x01;
    16e8:	ab e3       	ldi	r26, 0x3B	; 59
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	eb e3       	ldi	r30, 0x3B	; 59
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	90 81       	ld	r25, Z
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	89 27       	eor	r24, r25
    16f6:	8c 93       	st	X, r24
		right_h = 0;
    16f8:	10 92 90 01 	sts	0x0190, r1
	}
	if(val1 > 300)	{	//오른쪽
    16fc:	80 91 8a 01 	lds	r24, 0x018A
    1700:	90 91 8b 01 	lds	r25, 0x018B
    1704:	21 e0       	ldi	r18, 0x01	; 1
    1706:	8d 32       	cpi	r24, 0x2D	; 45
    1708:	92 07       	cpc	r25, r18
    170a:	5c f0       	brlt	.+22     	; 0x1722 <main+0x2c8>
		PORTA |= 0x02;
    170c:	ab e3       	ldi	r26, 0x3B	; 59
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	eb e3       	ldi	r30, 0x3B	; 59
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	82 60       	ori	r24, 0x02	; 2
    1718:	8c 93       	st	X, r24
		left_h = 1;	//진동없는 상태 : 0, 진동있는 상태 : 1
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	80 93 91 01 	sts	0x0191, r24
    1720:	0e c0       	rjmp	.+28     	; 0x173e <main+0x2e4>
	}
	else if(left_h == 1)	{
    1722:	80 91 91 01 	lds	r24, 0x0191
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	51 f4       	brne	.+20     	; 0x173e <main+0x2e4>
		PORTA ^= 0x02;
    172a:	ab e3       	ldi	r26, 0x3B	; 59
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	eb e3       	ldi	r30, 0x3B	; 59
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	90 81       	ld	r25, Z
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	89 27       	eor	r24, r25
    1738:	8c 93       	st	X, r24
		left_h = 0;
    173a:	10 92 91 01 	sts	0x0191, r1
	}
	if(val2 > 500)	{	//가슴
    173e:	80 91 8c 01 	lds	r24, 0x018C
    1742:	90 91 8d 01 	lds	r25, 0x018D
    1746:	e1 e0       	ldi	r30, 0x01	; 1
    1748:	85 3f       	cpi	r24, 0xF5	; 245
    174a:	9e 07       	cpc	r25, r30
    174c:	5c f0       	brlt	.+22     	; 0x1764 <main+0x30a>
		PORTA |= 0x03;
    174e:	ab e3       	ldi	r26, 0x3B	; 59
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	eb e3       	ldi	r30, 0x3B	; 59
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	83 60       	ori	r24, 0x03	; 3
    175a:	8c 93       	st	X, r24
		front_h = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	80 93 92 01 	sts	0x0192, r24
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <main+0x326>
	}
	else if(front_h == 1)	{
    1764:	80 91 92 01 	lds	r24, 0x0192
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	51 f4       	brne	.+20     	; 0x1780 <main+0x326>
		PORTA ^= 0x03;
    176c:	ab e3       	ldi	r26, 0x3B	; 59
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	eb e3       	ldi	r30, 0x3B	; 59
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	90 81       	ld	r25, Z
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	89 27       	eor	r24, r25
    177a:	8c 93       	st	X, r24
		front_h = 0;
    177c:	10 92 92 01 	sts	0x0192, r1
	}
	
	
	//버튼 부분
	if(PINB == 0x01)	{	//1. 카메라 버튼
    1780:	e6 e3       	ldi	r30, 0x36	; 54
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	09 f0       	breq	.+2      	; 0x178c <main+0x332>
    178a:	7a c0       	rjmp	.+244    	; 0x1880 <main+0x426>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	aa e7       	ldi	r26, 0x7A	; 122
    1792:	b4 e4       	ldi	r27, 0x44	; 68
    1794:	8f a3       	std	Y+39, r24	; 0x27
    1796:	98 a7       	std	Y+40, r25	; 0x28
    1798:	a9 a7       	std	Y+41, r26	; 0x29
    179a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179c:	6f a1       	ldd	r22, Y+39	; 0x27
    179e:	78 a5       	ldd	r23, Y+40	; 0x28
    17a0:	89 a5       	ldd	r24, Y+41	; 0x29
    17a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a e7       	ldi	r20, 0x7A	; 122
    17aa:	55 e4       	ldi	r21, 0x45	; 69
    17ac:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	8b a3       	std	Y+35, r24	; 0x23
    17b6:	9c a3       	std	Y+36, r25	; 0x24
    17b8:	ad a3       	std	Y+37, r26	; 0x25
    17ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17bc:	6b a1       	ldd	r22, Y+35	; 0x23
    17be:	7c a1       	ldd	r23, Y+36	; 0x24
    17c0:	8d a1       	ldd	r24, Y+37	; 0x25
    17c2:	9e a1       	ldd	r25, Y+38	; 0x26
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	2c f4       	brge	.+10     	; 0x17de <main+0x384>
		__ticks = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9a a3       	std	Y+34, r25	; 0x22
    17da:	89 a3       	std	Y+33, r24	; 0x21
    17dc:	3f c0       	rjmp	.+126    	; 0x185c <main+0x402>
	else if (__tmp > 65535)
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	57 e4       	ldi	r21, 0x47	; 71
    17ee:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
    17f2:	18 16       	cp	r1, r24
    17f4:	4c f5       	brge	.+82     	; 0x1848 <main+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f6:	6f a1       	ldd	r22, Y+39	; 0x27
    17f8:	78 a5       	ldd	r23, Y+40	; 0x28
    17fa:	89 a5       	ldd	r24, Y+41	; 0x29
    17fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9a a3       	std	Y+34, r25	; 0x22
    181c:	89 a3       	std	Y+33, r24	; 0x21
    181e:	0f c0       	rjmp	.+30     	; 0x183e <main+0x3e4>
    1820:	80 e9       	ldi	r24, 0x90	; 144
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	98 a3       	std	Y+32, r25	; 0x20
    1826:	8f 8f       	std	Y+31, r24	; 0x1f
    1828:	8f 8d       	ldd	r24, Y+31	; 0x1f
    182a:	98 a1       	ldd	r25, Y+32	; 0x20
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <main+0x3d2>
    1830:	98 a3       	std	Y+32, r25	; 0x20
    1832:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1834:	89 a1       	ldd	r24, Y+33	; 0x21
    1836:	9a a1       	ldd	r25, Y+34	; 0x22
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9a a3       	std	Y+34, r25	; 0x22
    183c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	89 a1       	ldd	r24, Y+33	; 0x21
    1840:	9a a1       	ldd	r25, Y+34	; 0x22
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	69 f7       	brne	.-38     	; 0x1820 <main+0x3c6>
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <main+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	6b a1       	ldd	r22, Y+35	; 0x23
    184a:	7c a1       	ldd	r23, Y+36	; 0x24
    184c:	8d a1       	ldd	r24, Y+37	; 0x25
    184e:	9e a1       	ldd	r25, Y+38	; 0x26
    1850:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9a a3       	std	Y+34, r25	; 0x22
    185a:	89 a3       	std	Y+33, r24	; 0x21
    185c:	89 a1       	ldd	r24, Y+33	; 0x21
    185e:	9a a1       	ldd	r25, Y+34	; 0x22
    1860:	9e 8f       	std	Y+30, r25	; 0x1e
    1862:	8d 8f       	std	Y+29, r24	; 0x1d
    1864:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1866:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <main+0x40e>
    186c:	9e 8f       	std	Y+30, r25	; 0x1e
    186e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		TIMSK = 0x00;	//타이머 디스에이블
    1870:	e7 e5       	ldi	r30, 0x57	; 87
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	10 82       	st	Z, r1
		ADCSRA = 0x00;	//ADC 인터럽트 디스에이블
    1876:	e6 e2       	ldi	r30, 0x26	; 38
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	10 82       	st	Z, r1
		
		idle();
    187c:	0e 94 65 02 	call	0x4ca	; 0x4ca <idle>
	}
	
	if(PINB == 0x02)	{	//2. 비상사태 버튼
    1880:	e6 e3       	ldi	r30, 0x36	; 54
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	09 f0       	breq	.+2      	; 0x188c <main+0x432>
    188a:	7d c0       	rjmp	.+250    	; 0x1986 <main+0x52c>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	aa e7       	ldi	r26, 0x7A	; 122
    1892:	b4 e4       	ldi	r27, 0x44	; 68
    1894:	89 8f       	std	Y+25, r24	; 0x19
    1896:	9a 8f       	std	Y+26, r25	; 0x1a
    1898:	ab 8f       	std	Y+27, r26	; 0x1b
    189a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189c:	69 8d       	ldd	r22, Y+25	; 0x19
    189e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a e7       	ldi	r20, 0x7A	; 122
    18aa:	55 e4       	ldi	r21, 0x45	; 69
    18ac:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8d 8b       	std	Y+21, r24	; 0x15
    18b6:	9e 8b       	std	Y+22, r25	; 0x16
    18b8:	af 8b       	std	Y+23, r26	; 0x17
    18ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18bc:	6d 89       	ldd	r22, Y+21	; 0x15
    18be:	7e 89       	ldd	r23, Y+22	; 0x16
    18c0:	8f 89       	ldd	r24, Y+23	; 0x17
    18c2:	98 8d       	ldd	r25, Y+24	; 0x18
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <main+0x484>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9c 8b       	std	Y+20, r25	; 0x14
    18da:	8b 8b       	std	Y+19, r24	; 0x13
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <main+0x502>
	else if (__tmp > 65535)
    18de:	6d 89       	ldd	r22, Y+21	; 0x15
    18e0:	7e 89       	ldd	r23, Y+22	; 0x16
    18e2:	8f 89       	ldd	r24, Y+23	; 0x17
    18e4:	98 8d       	ldd	r25, Y+24	; 0x18
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <main+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	69 8d       	ldd	r22, Y+25	; 0x19
    18f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e2       	ldi	r20, 0x20	; 32
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9c 8b       	std	Y+20, r25	; 0x14
    191c:	8b 8b       	std	Y+19, r24	; 0x13
    191e:	0f c0       	rjmp	.+30     	; 0x193e <main+0x4e4>
    1920:	80 e9       	ldi	r24, 0x90	; 144
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	9a 8b       	std	Y+18, r25	; 0x12
    1926:	89 8b       	std	Y+17, r24	; 0x11
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	9a 89       	ldd	r25, Y+18	; 0x12
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <main+0x4d2>
    1930:	9a 8b       	std	Y+18, r25	; 0x12
    1932:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	8b 89       	ldd	r24, Y+19	; 0x13
    1936:	9c 89       	ldd	r25, Y+20	; 0x14
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9c 8b       	std	Y+20, r25	; 0x14
    193c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	69 f7       	brne	.-38     	; 0x1920 <main+0x4c6>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <main+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	6d 89       	ldd	r22, Y+21	; 0x15
    194a:	7e 89       	ldd	r23, Y+22	; 0x16
    194c:	8f 89       	ldd	r24, Y+23	; 0x17
    194e:	98 8d       	ldd	r25, Y+24	; 0x18
    1950:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	8b 89       	ldd	r24, Y+19	; 0x13
    195e:	9c 89       	ldd	r25, Y+20	; 0x14
    1960:	98 8b       	std	Y+16, r25	; 0x10
    1962:	8f 87       	std	Y+15, r24	; 0x0f
    1964:	8f 85       	ldd	r24, Y+15	; 0x0f
    1966:	98 89       	ldd	r25, Y+16	; 0x10
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <main+0x50e>
    196c:	98 8b       	std	Y+16, r25	; 0x10
    196e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		printf("1\n");
    1970:	86 e7       	ldi	r24, 0x76	; 118
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 3e 13 	call	0x267c	; 0x267c <puts>
		DDRF |= 0x08;	//부저모듈 작동
    1978:	a1 e6       	ldi	r26, 0x61	; 97
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e1 e6       	ldi	r30, 0x61	; 97
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	88 60       	ori	r24, 0x08	; 8
    1984:	8c 93       	st	X, r24
	}	

	if(PINB == 0x04)	{	//3. 비상해제 버튼
    1986:	e6 e3       	ldi	r30, 0x36	; 54
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	84 30       	cpi	r24, 0x04	; 4
    198e:	09 f0       	breq	.+2      	; 0x1992 <main+0x538>
    1990:	79 cd       	rjmp	.-1294   	; 0x1484 <main+0x2a>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	aa e7       	ldi	r26, 0x7A	; 122
    1998:	b4 e4       	ldi	r27, 0x44	; 68
    199a:	8b 87       	std	Y+11, r24	; 0x0b
    199c:	9c 87       	std	Y+12, r25	; 0x0c
    199e:	ad 87       	std	Y+13, r26	; 0x0d
    19a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a e7       	ldi	r20, 0x7A	; 122
    19b0:	55 e4       	ldi	r21, 0x45	; 69
    19b2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8f 83       	std	Y+7, r24	; 0x07
    19bc:	98 87       	std	Y+8, r25	; 0x08
    19be:	a9 87       	std	Y+9, r26	; 0x09
    19c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <main+0x58a>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	3f c0       	rjmp	.+126    	; 0x1a62 <main+0x608>
	else if (__tmp > 65535)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	0e 94 18 10 	call	0x2030	; 0x2030 <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	4c f5       	brge	.+82     	; 0x1a4e <main+0x5f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <main+0x5ea>
    1a26:	80 e9       	ldi	r24, 0x90	; 144
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	9c 83       	std	Y+4, r25	; 0x04
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <main+0x5d8>
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a44:	8d 81       	ldd	r24, Y+5	; 0x05
    1a46:	9e 81       	ldd	r25, Y+6	; 0x06
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	69 f7       	brne	.-38     	; 0x1a26 <main+0x5cc>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <main+0x61c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <main+0x614>
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		printf("0\n");
    1a76:	88 e7       	ldi	r24, 0x78	; 120
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	0e 94 3e 13 	call	0x267c	; 0x267c <puts>
		DDRF ^= 0x08;	//부저모듈 해제 
    1a7e:	a1 e6       	ldi	r26, 0x61	; 97
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e1 e6       	ldi	r30, 0x61	; 97
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	90 81       	ld	r25, Z
    1a88:	88 e0       	ldi	r24, 0x08	; 8
    1a8a:	89 27       	eor	r24, r25
    1a8c:	8c 93       	st	X, r24
    1a8e:	fa cc       	rjmp	.-1548   	; 0x1484 <main+0x2a>

00001a90 <__fixunssfsi>:
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	7b 01       	movw	r14, r22
    1a9a:	8c 01       	movw	r16, r24
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	5f e4       	ldi	r21, 0x4F	; 79
    1aa4:	0e 94 48 10 	call	0x2090	; 0x2090 <__gesf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	8c f0       	brlt	.+34     	; 0x1ace <__fixunssfsi+0x3e>
    1aac:	c8 01       	movw	r24, r16
    1aae:	b7 01       	movw	r22, r14
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	5f e4       	ldi	r21, 0x4F	; 79
    1ab8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__subsf3>
    1abc:	0e 94 a8 10 	call	0x2150	; 0x2150 <__fixsfsi>
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	20 50       	subi	r18, 0x00	; 0
    1ac6:	30 40       	sbci	r19, 0x00	; 0
    1ac8:	40 40       	sbci	r20, 0x00	; 0
    1aca:	50 48       	sbci	r21, 0x80	; 128
    1acc:	06 c0       	rjmp	.+12     	; 0x1ada <__fixunssfsi+0x4a>
    1ace:	c8 01       	movw	r24, r16
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	0e 94 a8 10 	call	0x2150	; 0x2150 <__fixsfsi>
    1ad6:	9b 01       	movw	r18, r22
    1ad8:	ac 01       	movw	r20, r24
    1ada:	b9 01       	movw	r22, r18
    1adc:	ca 01       	movw	r24, r20
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	08 95       	ret

00001ae8 <_fpadd_parts>:
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e7       	ldi	r30, 0x7A	; 122
    1aee:	fd e0       	ldi	r31, 0x0D	; 13
    1af0:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__prologue_saves__>
    1af4:	dc 01       	movw	r26, r24
    1af6:	2b 01       	movw	r4, r22
    1af8:	fa 01       	movw	r30, r20
    1afa:	9c 91       	ld	r25, X
    1afc:	92 30       	cpi	r25, 0x02	; 2
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <_fpadd_parts+0x1a>
    1b00:	39 c1       	rjmp	.+626    	; 0x1d74 <_fpadd_parts+0x28c>
    1b02:	eb 01       	movw	r28, r22
    1b04:	88 81       	ld	r24, Y
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	08 f4       	brcc	.+2      	; 0x1b0c <_fpadd_parts+0x24>
    1b0a:	33 c1       	rjmp	.+614    	; 0x1d72 <_fpadd_parts+0x28a>
    1b0c:	94 30       	cpi	r25, 0x04	; 4
    1b0e:	69 f4       	brne	.+26     	; 0x1b2a <_fpadd_parts+0x42>
    1b10:	84 30       	cpi	r24, 0x04	; 4
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <_fpadd_parts+0x2e>
    1b14:	2f c1       	rjmp	.+606    	; 0x1d74 <_fpadd_parts+0x28c>
    1b16:	11 96       	adiw	r26, 0x01	; 1
    1b18:	9c 91       	ld	r25, X
    1b1a:	11 97       	sbiw	r26, 0x01	; 1
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	98 17       	cp	r25, r24
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <_fpadd_parts+0x3c>
    1b22:	28 c1       	rjmp	.+592    	; 0x1d74 <_fpadd_parts+0x28c>
    1b24:	aa e7       	ldi	r26, 0x7A	; 122
    1b26:	b1 e0       	ldi	r27, 0x01	; 1
    1b28:	25 c1       	rjmp	.+586    	; 0x1d74 <_fpadd_parts+0x28c>
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <_fpadd_parts+0x48>
    1b2e:	21 c1       	rjmp	.+578    	; 0x1d72 <_fpadd_parts+0x28a>
    1b30:	82 30       	cpi	r24, 0x02	; 2
    1b32:	a9 f4       	brne	.+42     	; 0x1b5e <_fpadd_parts+0x76>
    1b34:	92 30       	cpi	r25, 0x02	; 2
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <_fpadd_parts+0x52>
    1b38:	1d c1       	rjmp	.+570    	; 0x1d74 <_fpadd_parts+0x28c>
    1b3a:	9a 01       	movw	r18, r20
    1b3c:	ad 01       	movw	r20, r26
    1b3e:	88 e0       	ldi	r24, 0x08	; 8
    1b40:	ea 01       	movw	r28, r20
    1b42:	09 90       	ld	r0, Y+
    1b44:	ae 01       	movw	r20, r28
    1b46:	e9 01       	movw	r28, r18
    1b48:	09 92       	st	Y+, r0
    1b4a:	9e 01       	movw	r18, r28
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	c1 f7       	brne	.-16     	; 0x1b40 <_fpadd_parts+0x58>
    1b50:	e2 01       	movw	r28, r4
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	9c 91       	ld	r25, X
    1b58:	89 23       	and	r24, r25
    1b5a:	81 83       	std	Z+1, r24	; 0x01
    1b5c:	08 c1       	rjmp	.+528    	; 0x1d6e <_fpadd_parts+0x286>
    1b5e:	92 30       	cpi	r25, 0x02	; 2
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <_fpadd_parts+0x7c>
    1b62:	07 c1       	rjmp	.+526    	; 0x1d72 <_fpadd_parts+0x28a>
    1b64:	12 96       	adiw	r26, 0x02	; 2
    1b66:	2d 90       	ld	r2, X+
    1b68:	3c 90       	ld	r3, X
    1b6a:	13 97       	sbiw	r26, 0x03	; 3
    1b6c:	eb 01       	movw	r28, r22
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	14 96       	adiw	r26, 0x04	; 4
    1b74:	ad 90       	ld	r10, X+
    1b76:	bd 90       	ld	r11, X+
    1b78:	cd 90       	ld	r12, X+
    1b7a:	dc 90       	ld	r13, X
    1b7c:	17 97       	sbiw	r26, 0x07	; 7
    1b7e:	ec 80       	ldd	r14, Y+4	; 0x04
    1b80:	fd 80       	ldd	r15, Y+5	; 0x05
    1b82:	0e 81       	ldd	r16, Y+6	; 0x06
    1b84:	1f 81       	ldd	r17, Y+7	; 0x07
    1b86:	91 01       	movw	r18, r2
    1b88:	28 1b       	sub	r18, r24
    1b8a:	39 0b       	sbc	r19, r25
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	37 ff       	sbrs	r19, 7
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <_fpadd_parts+0xb2>
    1b92:	66 27       	eor	r22, r22
    1b94:	77 27       	eor	r23, r23
    1b96:	62 1b       	sub	r22, r18
    1b98:	73 0b       	sbc	r23, r19
    1b9a:	60 32       	cpi	r22, 0x20	; 32
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	0c f0       	brlt	.+2      	; 0x1ba2 <_fpadd_parts+0xba>
    1ba0:	61 c0       	rjmp	.+194    	; 0x1c64 <_fpadd_parts+0x17c>
    1ba2:	12 16       	cp	r1, r18
    1ba4:	13 06       	cpc	r1, r19
    1ba6:	6c f5       	brge	.+90     	; 0x1c02 <_fpadd_parts+0x11a>
    1ba8:	37 01       	movw	r6, r14
    1baa:	48 01       	movw	r8, r16
    1bac:	06 2e       	mov	r0, r22
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <_fpadd_parts+0xd0>
    1bb0:	96 94       	lsr	r9
    1bb2:	87 94       	ror	r8
    1bb4:	77 94       	ror	r7
    1bb6:	67 94       	ror	r6
    1bb8:	0a 94       	dec	r0
    1bba:	d2 f7       	brpl	.-12     	; 0x1bb0 <_fpadd_parts+0xc8>
    1bbc:	21 e0       	ldi	r18, 0x01	; 1
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <_fpadd_parts+0xe6>
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	44 1f       	adc	r20, r20
    1bcc:	55 1f       	adc	r21, r21
    1bce:	6a 95       	dec	r22
    1bd0:	d2 f7       	brpl	.-12     	; 0x1bc6 <_fpadd_parts+0xde>
    1bd2:	21 50       	subi	r18, 0x01	; 1
    1bd4:	30 40       	sbci	r19, 0x00	; 0
    1bd6:	40 40       	sbci	r20, 0x00	; 0
    1bd8:	50 40       	sbci	r21, 0x00	; 0
    1bda:	2e 21       	and	r18, r14
    1bdc:	3f 21       	and	r19, r15
    1bde:	40 23       	and	r20, r16
    1be0:	51 23       	and	r21, r17
    1be2:	21 15       	cp	r18, r1
    1be4:	31 05       	cpc	r19, r1
    1be6:	41 05       	cpc	r20, r1
    1be8:	51 05       	cpc	r21, r1
    1bea:	21 f0       	breq	.+8      	; 0x1bf4 <_fpadd_parts+0x10c>
    1bec:	21 e0       	ldi	r18, 0x01	; 1
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	79 01       	movw	r14, r18
    1bf6:	8a 01       	movw	r16, r20
    1bf8:	e6 28       	or	r14, r6
    1bfa:	f7 28       	or	r15, r7
    1bfc:	08 29       	or	r16, r8
    1bfe:	19 29       	or	r17, r9
    1c00:	3c c0       	rjmp	.+120    	; 0x1c7a <_fpadd_parts+0x192>
    1c02:	23 2b       	or	r18, r19
    1c04:	d1 f1       	breq	.+116    	; 0x1c7a <_fpadd_parts+0x192>
    1c06:	26 0e       	add	r2, r22
    1c08:	37 1e       	adc	r3, r23
    1c0a:	35 01       	movw	r6, r10
    1c0c:	46 01       	movw	r8, r12
    1c0e:	06 2e       	mov	r0, r22
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <_fpadd_parts+0x132>
    1c12:	96 94       	lsr	r9
    1c14:	87 94       	ror	r8
    1c16:	77 94       	ror	r7
    1c18:	67 94       	ror	r6
    1c1a:	0a 94       	dec	r0
    1c1c:	d2 f7       	brpl	.-12     	; 0x1c12 <_fpadd_parts+0x12a>
    1c1e:	21 e0       	ldi	r18, 0x01	; 1
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <_fpadd_parts+0x148>
    1c28:	22 0f       	add	r18, r18
    1c2a:	33 1f       	adc	r19, r19
    1c2c:	44 1f       	adc	r20, r20
    1c2e:	55 1f       	adc	r21, r21
    1c30:	6a 95       	dec	r22
    1c32:	d2 f7       	brpl	.-12     	; 0x1c28 <_fpadd_parts+0x140>
    1c34:	21 50       	subi	r18, 0x01	; 1
    1c36:	30 40       	sbci	r19, 0x00	; 0
    1c38:	40 40       	sbci	r20, 0x00	; 0
    1c3a:	50 40       	sbci	r21, 0x00	; 0
    1c3c:	2a 21       	and	r18, r10
    1c3e:	3b 21       	and	r19, r11
    1c40:	4c 21       	and	r20, r12
    1c42:	5d 21       	and	r21, r13
    1c44:	21 15       	cp	r18, r1
    1c46:	31 05       	cpc	r19, r1
    1c48:	41 05       	cpc	r20, r1
    1c4a:	51 05       	cpc	r21, r1
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <_fpadd_parts+0x16e>
    1c4e:	21 e0       	ldi	r18, 0x01	; 1
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	59 01       	movw	r10, r18
    1c58:	6a 01       	movw	r12, r20
    1c5a:	a6 28       	or	r10, r6
    1c5c:	b7 28       	or	r11, r7
    1c5e:	c8 28       	or	r12, r8
    1c60:	d9 28       	or	r13, r9
    1c62:	0b c0       	rjmp	.+22     	; 0x1c7a <_fpadd_parts+0x192>
    1c64:	82 15       	cp	r24, r2
    1c66:	93 05       	cpc	r25, r3
    1c68:	2c f0       	brlt	.+10     	; 0x1c74 <_fpadd_parts+0x18c>
    1c6a:	1c 01       	movw	r2, r24
    1c6c:	aa 24       	eor	r10, r10
    1c6e:	bb 24       	eor	r11, r11
    1c70:	65 01       	movw	r12, r10
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <_fpadd_parts+0x192>
    1c74:	ee 24       	eor	r14, r14
    1c76:	ff 24       	eor	r15, r15
    1c78:	87 01       	movw	r16, r14
    1c7a:	11 96       	adiw	r26, 0x01	; 1
    1c7c:	9c 91       	ld	r25, X
    1c7e:	d2 01       	movw	r26, r4
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	8c 91       	ld	r24, X
    1c84:	98 17       	cp	r25, r24
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <_fpadd_parts+0x1a2>
    1c88:	45 c0       	rjmp	.+138    	; 0x1d14 <_fpadd_parts+0x22c>
    1c8a:	99 23       	and	r25, r25
    1c8c:	39 f0       	breq	.+14     	; 0x1c9c <_fpadd_parts+0x1b4>
    1c8e:	a8 01       	movw	r20, r16
    1c90:	97 01       	movw	r18, r14
    1c92:	2a 19       	sub	r18, r10
    1c94:	3b 09       	sbc	r19, r11
    1c96:	4c 09       	sbc	r20, r12
    1c98:	5d 09       	sbc	r21, r13
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <_fpadd_parts+0x1c0>
    1c9c:	a6 01       	movw	r20, r12
    1c9e:	95 01       	movw	r18, r10
    1ca0:	2e 19       	sub	r18, r14
    1ca2:	3f 09       	sbc	r19, r15
    1ca4:	40 0b       	sbc	r20, r16
    1ca6:	51 0b       	sbc	r21, r17
    1ca8:	57 fd       	sbrc	r21, 7
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <_fpadd_parts+0x1d4>
    1cac:	11 82       	std	Z+1, r1	; 0x01
    1cae:	33 82       	std	Z+3, r3	; 0x03
    1cb0:	22 82       	std	Z+2, r2	; 0x02
    1cb2:	24 83       	std	Z+4, r18	; 0x04
    1cb4:	35 83       	std	Z+5, r19	; 0x05
    1cb6:	46 83       	std	Z+6, r20	; 0x06
    1cb8:	57 83       	std	Z+7, r21	; 0x07
    1cba:	1d c0       	rjmp	.+58     	; 0x1cf6 <_fpadd_parts+0x20e>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	81 83       	std	Z+1, r24	; 0x01
    1cc0:	33 82       	std	Z+3, r3	; 0x03
    1cc2:	22 82       	std	Z+2, r2	; 0x02
    1cc4:	88 27       	eor	r24, r24
    1cc6:	99 27       	eor	r25, r25
    1cc8:	dc 01       	movw	r26, r24
    1cca:	82 1b       	sub	r24, r18
    1ccc:	93 0b       	sbc	r25, r19
    1cce:	a4 0b       	sbc	r26, r20
    1cd0:	b5 0b       	sbc	r27, r21
    1cd2:	84 83       	std	Z+4, r24	; 0x04
    1cd4:	95 83       	std	Z+5, r25	; 0x05
    1cd6:	a6 83       	std	Z+6, r26	; 0x06
    1cd8:	b7 83       	std	Z+7, r27	; 0x07
    1cda:	0d c0       	rjmp	.+26     	; 0x1cf6 <_fpadd_parts+0x20e>
    1cdc:	22 0f       	add	r18, r18
    1cde:	33 1f       	adc	r19, r19
    1ce0:	44 1f       	adc	r20, r20
    1ce2:	55 1f       	adc	r21, r21
    1ce4:	24 83       	std	Z+4, r18	; 0x04
    1ce6:	35 83       	std	Z+5, r19	; 0x05
    1ce8:	46 83       	std	Z+6, r20	; 0x06
    1cea:	57 83       	std	Z+7, r21	; 0x07
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	93 83       	std	Z+3, r25	; 0x03
    1cf4:	82 83       	std	Z+2, r24	; 0x02
    1cf6:	24 81       	ldd	r18, Z+4	; 0x04
    1cf8:	35 81       	ldd	r19, Z+5	; 0x05
    1cfa:	46 81       	ldd	r20, Z+6	; 0x06
    1cfc:	57 81       	ldd	r21, Z+7	; 0x07
    1cfe:	da 01       	movw	r26, r20
    1d00:	c9 01       	movw	r24, r18
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	a1 09       	sbc	r26, r1
    1d06:	b1 09       	sbc	r27, r1
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	af 4f       	sbci	r26, 0xFF	; 255
    1d0e:	bf 43       	sbci	r27, 0x3F	; 63
    1d10:	28 f3       	brcs	.-54     	; 0x1cdc <_fpadd_parts+0x1f4>
    1d12:	0b c0       	rjmp	.+22     	; 0x1d2a <_fpadd_parts+0x242>
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	33 82       	std	Z+3, r3	; 0x03
    1d18:	22 82       	std	Z+2, r2	; 0x02
    1d1a:	ea 0c       	add	r14, r10
    1d1c:	fb 1c       	adc	r15, r11
    1d1e:	0c 1d       	adc	r16, r12
    1d20:	1d 1d       	adc	r17, r13
    1d22:	e4 82       	std	Z+4, r14	; 0x04
    1d24:	f5 82       	std	Z+5, r15	; 0x05
    1d26:	06 83       	std	Z+6, r16	; 0x06
    1d28:	17 83       	std	Z+7, r17	; 0x07
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	80 83       	st	Z, r24
    1d2e:	24 81       	ldd	r18, Z+4	; 0x04
    1d30:	35 81       	ldd	r19, Z+5	; 0x05
    1d32:	46 81       	ldd	r20, Z+6	; 0x06
    1d34:	57 81       	ldd	r21, Z+7	; 0x07
    1d36:	57 ff       	sbrs	r21, 7
    1d38:	1a c0       	rjmp	.+52     	; 0x1d6e <_fpadd_parts+0x286>
    1d3a:	c9 01       	movw	r24, r18
    1d3c:	aa 27       	eor	r26, r26
    1d3e:	97 fd       	sbrc	r25, 7
    1d40:	a0 95       	com	r26
    1d42:	ba 2f       	mov	r27, r26
    1d44:	81 70       	andi	r24, 0x01	; 1
    1d46:	90 70       	andi	r25, 0x00	; 0
    1d48:	a0 70       	andi	r26, 0x00	; 0
    1d4a:	b0 70       	andi	r27, 0x00	; 0
    1d4c:	56 95       	lsr	r21
    1d4e:	47 95       	ror	r20
    1d50:	37 95       	ror	r19
    1d52:	27 95       	ror	r18
    1d54:	82 2b       	or	r24, r18
    1d56:	93 2b       	or	r25, r19
    1d58:	a4 2b       	or	r26, r20
    1d5a:	b5 2b       	or	r27, r21
    1d5c:	84 83       	std	Z+4, r24	; 0x04
    1d5e:	95 83       	std	Z+5, r25	; 0x05
    1d60:	a6 83       	std	Z+6, r26	; 0x06
    1d62:	b7 83       	std	Z+7, r27	; 0x07
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	93 83       	std	Z+3, r25	; 0x03
    1d6c:	82 83       	std	Z+2, r24	; 0x02
    1d6e:	df 01       	movw	r26, r30
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <_fpadd_parts+0x28c>
    1d72:	d2 01       	movw	r26, r4
    1d74:	cd 01       	movw	r24, r26
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	e2 e1       	ldi	r30, 0x12	; 18
    1d7c:	0c 94 be 12 	jmp	0x257c	; 0x257c <__epilogue_restores__>

00001d80 <__subsf3>:
    1d80:	a0 e2       	ldi	r26, 0x20	; 32
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e6 ec       	ldi	r30, 0xC6	; 198
    1d86:	fe e0       	ldi	r31, 0x0E	; 14
    1d88:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
    1d8c:	69 83       	std	Y+1, r22	; 0x01
    1d8e:	7a 83       	std	Y+2, r23	; 0x02
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	2d 83       	std	Y+5, r18	; 0x05
    1d96:	3e 83       	std	Y+6, r19	; 0x06
    1d98:	4f 83       	std	Y+7, r20	; 0x07
    1d9a:	58 87       	std	Y+8, r21	; 0x08
    1d9c:	e9 e0       	ldi	r30, 0x09	; 9
    1d9e:	ee 2e       	mov	r14, r30
    1da0:	f1 2c       	mov	r15, r1
    1da2:	ec 0e       	add	r14, r28
    1da4:	fd 1e       	adc	r15, r29
    1da6:	ce 01       	movw	r24, r28
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	b7 01       	movw	r22, r14
    1dac:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    1db0:	8e 01       	movw	r16, r28
    1db2:	0f 5e       	subi	r16, 0xEF	; 239
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	ce 01       	movw	r24, r28
    1db8:	05 96       	adiw	r24, 0x05	; 5
    1dba:	b8 01       	movw	r22, r16
    1dbc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    1dc0:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc2:	91 e0       	ldi	r25, 0x01	; 1
    1dc4:	89 27       	eor	r24, r25
    1dc6:	8a 8b       	std	Y+18, r24	; 0x12
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b8 01       	movw	r22, r16
    1dcc:	ae 01       	movw	r20, r28
    1dce:	47 5e       	subi	r20, 0xE7	; 231
    1dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_fpadd_parts>
    1dd6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__pack_f>
    1dda:	a0 96       	adiw	r28, 0x20	; 32
    1ddc:	e6 e0       	ldi	r30, 0x06	; 6
    1dde:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

00001de2 <__addsf3>:
    1de2:	a0 e2       	ldi	r26, 0x20	; 32
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e7 ef       	ldi	r30, 0xF7	; 247
    1de8:	fe e0       	ldi	r31, 0x0E	; 14
    1dea:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
    1dee:	69 83       	std	Y+1, r22	; 0x01
    1df0:	7a 83       	std	Y+2, r23	; 0x02
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	2d 83       	std	Y+5, r18	; 0x05
    1df8:	3e 83       	std	Y+6, r19	; 0x06
    1dfa:	4f 83       	std	Y+7, r20	; 0x07
    1dfc:	58 87       	std	Y+8, r21	; 0x08
    1dfe:	f9 e0       	ldi	r31, 0x09	; 9
    1e00:	ef 2e       	mov	r14, r31
    1e02:	f1 2c       	mov	r15, r1
    1e04:	ec 0e       	add	r14, r28
    1e06:	fd 1e       	adc	r15, r29
    1e08:	ce 01       	movw	r24, r28
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	b7 01       	movw	r22, r14
    1e0e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    1e12:	8e 01       	movw	r16, r28
    1e14:	0f 5e       	subi	r16, 0xEF	; 239
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255
    1e18:	ce 01       	movw	r24, r28
    1e1a:	05 96       	adiw	r24, 0x05	; 5
    1e1c:	b8 01       	movw	r22, r16
    1e1e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    1e22:	c7 01       	movw	r24, r14
    1e24:	b8 01       	movw	r22, r16
    1e26:	ae 01       	movw	r20, r28
    1e28:	47 5e       	subi	r20, 0xE7	; 231
    1e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_fpadd_parts>
    1e30:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__pack_f>
    1e34:	a0 96       	adiw	r28, 0x20	; 32
    1e36:	e6 e0       	ldi	r30, 0x06	; 6
    1e38:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

00001e3c <__mulsf3>:
    1e3c:	a0 e2       	ldi	r26, 0x20	; 32
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e4 e2       	ldi	r30, 0x24	; 36
    1e42:	ff e0       	ldi	r31, 0x0F	; 15
    1e44:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__prologue_saves__>
    1e48:	69 83       	std	Y+1, r22	; 0x01
    1e4a:	7a 83       	std	Y+2, r23	; 0x02
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	2d 83       	std	Y+5, r18	; 0x05
    1e52:	3e 83       	std	Y+6, r19	; 0x06
    1e54:	4f 83       	std	Y+7, r20	; 0x07
    1e56:	58 87       	std	Y+8, r21	; 0x08
    1e58:	ce 01       	movw	r24, r28
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	be 01       	movw	r22, r28
    1e5e:	67 5f       	subi	r22, 0xF7	; 247
    1e60:	7f 4f       	sbci	r23, 0xFF	; 255
    1e62:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    1e66:	ce 01       	movw	r24, r28
    1e68:	05 96       	adiw	r24, 0x05	; 5
    1e6a:	be 01       	movw	r22, r28
    1e6c:	6f 5e       	subi	r22, 0xEF	; 239
    1e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e70:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    1e74:	99 85       	ldd	r25, Y+9	; 0x09
    1e76:	92 30       	cpi	r25, 0x02	; 2
    1e78:	88 f0       	brcs	.+34     	; 0x1e9c <__mulsf3+0x60>
    1e7a:	89 89       	ldd	r24, Y+17	; 0x11
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	c8 f0       	brcs	.+50     	; 0x1eb2 <__mulsf3+0x76>
    1e80:	94 30       	cpi	r25, 0x04	; 4
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <__mulsf3+0x4e>
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	51 f4       	brne	.+20     	; 0x1e9c <__mulsf3+0x60>
    1e88:	04 c0       	rjmp	.+8      	; 0x1e92 <__mulsf3+0x56>
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	29 f4       	brne	.+10     	; 0x1e98 <__mulsf3+0x5c>
    1e8e:	92 30       	cpi	r25, 0x02	; 2
    1e90:	81 f4       	brne	.+32     	; 0x1eb2 <__mulsf3+0x76>
    1e92:	8a e7       	ldi	r24, 0x7A	; 122
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	c6 c0       	rjmp	.+396    	; 0x2024 <__mulsf3+0x1e8>
    1e98:	92 30       	cpi	r25, 0x02	; 2
    1e9a:	49 f4       	brne	.+18     	; 0x1eae <__mulsf3+0x72>
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ea2:	98 13       	cpse	r25, r24
    1ea4:	21 e0       	ldi	r18, 0x01	; 1
    1ea6:	2a 87       	std	Y+10, r18	; 0x0a
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	09 96       	adiw	r24, 0x09	; 9
    1eac:	bb c0       	rjmp	.+374    	; 0x2024 <__mulsf3+0x1e8>
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	49 f4       	brne	.+18     	; 0x1ec4 <__mulsf3+0x88>
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	8a 89       	ldd	r24, Y+18	; 0x12
    1eb8:	98 13       	cpse	r25, r24
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	2a 8b       	std	Y+18, r18	; 0x12
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	41 96       	adiw	r24, 0x11	; 17
    1ec2:	b0 c0       	rjmp	.+352    	; 0x2024 <__mulsf3+0x1e8>
    1ec4:	2d 84       	ldd	r2, Y+13	; 0x0d
    1ec6:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ec8:	4f 84       	ldd	r4, Y+15	; 0x0f
    1eca:	58 88       	ldd	r5, Y+16	; 0x10
    1ecc:	6d 88       	ldd	r6, Y+21	; 0x15
    1ece:	7e 88       	ldd	r7, Y+22	; 0x16
    1ed0:	8f 88       	ldd	r8, Y+23	; 0x17
    1ed2:	98 8c       	ldd	r9, Y+24	; 0x18
    1ed4:	ee 24       	eor	r14, r14
    1ed6:	ff 24       	eor	r15, r15
    1ed8:	87 01       	movw	r16, r14
    1eda:	aa 24       	eor	r10, r10
    1edc:	bb 24       	eor	r11, r11
    1ede:	65 01       	movw	r12, r10
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	e0 e0       	ldi	r30, 0x00	; 0
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	c1 01       	movw	r24, r2
    1eee:	81 70       	andi	r24, 0x01	; 1
    1ef0:	90 70       	andi	r25, 0x00	; 0
    1ef2:	89 2b       	or	r24, r25
    1ef4:	e9 f0       	breq	.+58     	; 0x1f30 <__mulsf3+0xf4>
    1ef6:	e6 0c       	add	r14, r6
    1ef8:	f7 1c       	adc	r15, r7
    1efa:	08 1d       	adc	r16, r8
    1efc:	19 1d       	adc	r17, r9
    1efe:	9a 01       	movw	r18, r20
    1f00:	ab 01       	movw	r20, r22
    1f02:	2a 0d       	add	r18, r10
    1f04:	3b 1d       	adc	r19, r11
    1f06:	4c 1d       	adc	r20, r12
    1f08:	5d 1d       	adc	r21, r13
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e6 14       	cp	r14, r6
    1f14:	f7 04       	cpc	r15, r7
    1f16:	08 05       	cpc	r16, r8
    1f18:	19 05       	cpc	r17, r9
    1f1a:	20 f4       	brcc	.+8      	; 0x1f24 <__mulsf3+0xe8>
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e0       	ldi	r26, 0x00	; 0
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	ba 01       	movw	r22, r20
    1f26:	a9 01       	movw	r20, r18
    1f28:	48 0f       	add	r20, r24
    1f2a:	59 1f       	adc	r21, r25
    1f2c:	6a 1f       	adc	r22, r26
    1f2e:	7b 1f       	adc	r23, r27
    1f30:	aa 0c       	add	r10, r10
    1f32:	bb 1c       	adc	r11, r11
    1f34:	cc 1c       	adc	r12, r12
    1f36:	dd 1c       	adc	r13, r13
    1f38:	97 fe       	sbrs	r9, 7
    1f3a:	08 c0       	rjmp	.+16     	; 0x1f4c <__mulsf3+0x110>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	a8 2a       	or	r10, r24
    1f46:	b9 2a       	or	r11, r25
    1f48:	ca 2a       	or	r12, r26
    1f4a:	db 2a       	or	r13, r27
    1f4c:	31 96       	adiw	r30, 0x01	; 1
    1f4e:	e0 32       	cpi	r30, 0x20	; 32
    1f50:	f1 05       	cpc	r31, r1
    1f52:	49 f0       	breq	.+18     	; 0x1f66 <__mulsf3+0x12a>
    1f54:	66 0c       	add	r6, r6
    1f56:	77 1c       	adc	r7, r7
    1f58:	88 1c       	adc	r8, r8
    1f5a:	99 1c       	adc	r9, r9
    1f5c:	56 94       	lsr	r5
    1f5e:	47 94       	ror	r4
    1f60:	37 94       	ror	r3
    1f62:	27 94       	ror	r2
    1f64:	c3 cf       	rjmp	.-122    	; 0x1eec <__mulsf3+0xb0>
    1f66:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f68:	ea 89       	ldd	r30, Y+18	; 0x12
    1f6a:	2b 89       	ldd	r18, Y+19	; 0x13
    1f6c:	3c 89       	ldd	r19, Y+20	; 0x14
    1f6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f70:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f72:	28 0f       	add	r18, r24
    1f74:	39 1f       	adc	r19, r25
    1f76:	2e 5f       	subi	r18, 0xFE	; 254
    1f78:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7a:	17 c0       	rjmp	.+46     	; 0x1faa <__mulsf3+0x16e>
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	81 70       	andi	r24, 0x01	; 1
    1f80:	90 70       	andi	r25, 0x00	; 0
    1f82:	89 2b       	or	r24, r25
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <__mulsf3+0x162>
    1f86:	16 95       	lsr	r17
    1f88:	07 95       	ror	r16
    1f8a:	f7 94       	ror	r15
    1f8c:	e7 94       	ror	r14
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e0       	ldi	r26, 0x00	; 0
    1f94:	b0 e8       	ldi	r27, 0x80	; 128
    1f96:	e8 2a       	or	r14, r24
    1f98:	f9 2a       	or	r15, r25
    1f9a:	0a 2b       	or	r16, r26
    1f9c:	1b 2b       	or	r17, r27
    1f9e:	76 95       	lsr	r23
    1fa0:	67 95       	ror	r22
    1fa2:	57 95       	ror	r21
    1fa4:	47 95       	ror	r20
    1fa6:	2f 5f       	subi	r18, 0xFF	; 255
    1fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1faa:	77 fd       	sbrc	r23, 7
    1fac:	e7 cf       	rjmp	.-50     	; 0x1f7c <__mulsf3+0x140>
    1fae:	0c c0       	rjmp	.+24     	; 0x1fc8 <__mulsf3+0x18c>
    1fb0:	44 0f       	add	r20, r20
    1fb2:	55 1f       	adc	r21, r21
    1fb4:	66 1f       	adc	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	17 fd       	sbrc	r17, 7
    1fba:	41 60       	ori	r20, 0x01	; 1
    1fbc:	ee 0c       	add	r14, r14
    1fbe:	ff 1c       	adc	r15, r15
    1fc0:	00 1f       	adc	r16, r16
    1fc2:	11 1f       	adc	r17, r17
    1fc4:	21 50       	subi	r18, 0x01	; 1
    1fc6:	30 40       	sbci	r19, 0x00	; 0
    1fc8:	40 30       	cpi	r20, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	59 07       	cpc	r21, r25
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	69 07       	cpc	r22, r25
    1fd2:	90 e4       	ldi	r25, 0x40	; 64
    1fd4:	79 07       	cpc	r23, r25
    1fd6:	60 f3       	brcs	.-40     	; 0x1fb0 <__mulsf3+0x174>
    1fd8:	2b 8f       	std	Y+27, r18	; 0x1b
    1fda:	3c 8f       	std	Y+28, r19	; 0x1c
    1fdc:	db 01       	movw	r26, r22
    1fde:	ca 01       	movw	r24, r20
    1fe0:	8f 77       	andi	r24, 0x7F	; 127
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	a0 70       	andi	r26, 0x00	; 0
    1fe6:	b0 70       	andi	r27, 0x00	; 0
    1fe8:	80 34       	cpi	r24, 0x40	; 64
    1fea:	91 05       	cpc	r25, r1
    1fec:	a1 05       	cpc	r26, r1
    1fee:	b1 05       	cpc	r27, r1
    1ff0:	61 f4       	brne	.+24     	; 0x200a <__mulsf3+0x1ce>
    1ff2:	47 fd       	sbrc	r20, 7
    1ff4:	0a c0       	rjmp	.+20     	; 0x200a <__mulsf3+0x1ce>
    1ff6:	e1 14       	cp	r14, r1
    1ff8:	f1 04       	cpc	r15, r1
    1ffa:	01 05       	cpc	r16, r1
    1ffc:	11 05       	cpc	r17, r1
    1ffe:	29 f0       	breq	.+10     	; 0x200a <__mulsf3+0x1ce>
    2000:	40 5c       	subi	r20, 0xC0	; 192
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	6f 4f       	sbci	r22, 0xFF	; 255
    2006:	7f 4f       	sbci	r23, 0xFF	; 255
    2008:	40 78       	andi	r20, 0x80	; 128
    200a:	1a 8e       	std	Y+26, r1	; 0x1a
    200c:	fe 17       	cp	r31, r30
    200e:	11 f0       	breq	.+4      	; 0x2014 <__mulsf3+0x1d8>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	8a 8f       	std	Y+26, r24	; 0x1a
    2014:	4d 8f       	std	Y+29, r20	; 0x1d
    2016:	5e 8f       	std	Y+30, r21	; 0x1e
    2018:	6f 8f       	std	Y+31, r22	; 0x1f
    201a:	78 a3       	std	Y+32, r23	; 0x20
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	89 8f       	std	Y+25, r24	; 0x19
    2020:	ce 01       	movw	r24, r28
    2022:	49 96       	adiw	r24, 0x19	; 25
    2024:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__pack_f>
    2028:	a0 96       	adiw	r28, 0x20	; 32
    202a:	e2 e1       	ldi	r30, 0x12	; 18
    202c:	0c 94 be 12 	jmp	0x257c	; 0x257c <__epilogue_restores__>

00002030 <__gtsf2>:
    2030:	a8 e1       	ldi	r26, 0x18	; 24
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ee e1       	ldi	r30, 0x1E	; 30
    2036:	f0 e1       	ldi	r31, 0x10	; 16
    2038:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
    203c:	69 83       	std	Y+1, r22	; 0x01
    203e:	7a 83       	std	Y+2, r23	; 0x02
    2040:	8b 83       	std	Y+3, r24	; 0x03
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	2d 83       	std	Y+5, r18	; 0x05
    2046:	3e 83       	std	Y+6, r19	; 0x06
    2048:	4f 83       	std	Y+7, r20	; 0x07
    204a:	58 87       	std	Y+8, r21	; 0x08
    204c:	89 e0       	ldi	r24, 0x09	; 9
    204e:	e8 2e       	mov	r14, r24
    2050:	f1 2c       	mov	r15, r1
    2052:	ec 0e       	add	r14, r28
    2054:	fd 1e       	adc	r15, r29
    2056:	ce 01       	movw	r24, r28
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	b7 01       	movw	r22, r14
    205c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    2060:	8e 01       	movw	r16, r28
    2062:	0f 5e       	subi	r16, 0xEF	; 239
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	ce 01       	movw	r24, r28
    2068:	05 96       	adiw	r24, 0x05	; 5
    206a:	b8 01       	movw	r22, r16
    206c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	82 30       	cpi	r24, 0x02	; 2
    2074:	40 f0       	brcs	.+16     	; 0x2086 <__gtsf2+0x56>
    2076:	89 89       	ldd	r24, Y+17	; 0x11
    2078:	82 30       	cpi	r24, 0x02	; 2
    207a:	28 f0       	brcs	.+10     	; 0x2086 <__gtsf2+0x56>
    207c:	c7 01       	movw	r24, r14
    207e:	b8 01       	movw	r22, r16
    2080:	0e 94 49 12 	call	0x2492	; 0x2492 <__fpcmp_parts_f>
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <__gtsf2+0x58>
    2086:	8f ef       	ldi	r24, 0xFF	; 255
    2088:	68 96       	adiw	r28, 0x18	; 24
    208a:	e6 e0       	ldi	r30, 0x06	; 6
    208c:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

00002090 <__gesf2>:
    2090:	a8 e1       	ldi	r26, 0x18	; 24
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	ee e4       	ldi	r30, 0x4E	; 78
    2096:	f0 e1       	ldi	r31, 0x10	; 16
    2098:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
    209c:	69 83       	std	Y+1, r22	; 0x01
    209e:	7a 83       	std	Y+2, r23	; 0x02
    20a0:	8b 83       	std	Y+3, r24	; 0x03
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	2d 83       	std	Y+5, r18	; 0x05
    20a6:	3e 83       	std	Y+6, r19	; 0x06
    20a8:	4f 83       	std	Y+7, r20	; 0x07
    20aa:	58 87       	std	Y+8, r21	; 0x08
    20ac:	89 e0       	ldi	r24, 0x09	; 9
    20ae:	e8 2e       	mov	r14, r24
    20b0:	f1 2c       	mov	r15, r1
    20b2:	ec 0e       	add	r14, r28
    20b4:	fd 1e       	adc	r15, r29
    20b6:	ce 01       	movw	r24, r28
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	b7 01       	movw	r22, r14
    20bc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    20c0:	8e 01       	movw	r16, r28
    20c2:	0f 5e       	subi	r16, 0xEF	; 239
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	ce 01       	movw	r24, r28
    20c8:	05 96       	adiw	r24, 0x05	; 5
    20ca:	b8 01       	movw	r22, r16
    20cc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	82 30       	cpi	r24, 0x02	; 2
    20d4:	40 f0       	brcs	.+16     	; 0x20e6 <__gesf2+0x56>
    20d6:	89 89       	ldd	r24, Y+17	; 0x11
    20d8:	82 30       	cpi	r24, 0x02	; 2
    20da:	28 f0       	brcs	.+10     	; 0x20e6 <__gesf2+0x56>
    20dc:	c7 01       	movw	r24, r14
    20de:	b8 01       	movw	r22, r16
    20e0:	0e 94 49 12 	call	0x2492	; 0x2492 <__fpcmp_parts_f>
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <__gesf2+0x58>
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	68 96       	adiw	r28, 0x18	; 24
    20ea:	e6 e0       	ldi	r30, 0x06	; 6
    20ec:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

000020f0 <__ltsf2>:
    20f0:	a8 e1       	ldi	r26, 0x18	; 24
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ee e7       	ldi	r30, 0x7E	; 126
    20f6:	f0 e1       	ldi	r31, 0x10	; 16
    20f8:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x18>
    20fc:	69 83       	std	Y+1, r22	; 0x01
    20fe:	7a 83       	std	Y+2, r23	; 0x02
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	9c 83       	std	Y+4, r25	; 0x04
    2104:	2d 83       	std	Y+5, r18	; 0x05
    2106:	3e 83       	std	Y+6, r19	; 0x06
    2108:	4f 83       	std	Y+7, r20	; 0x07
    210a:	58 87       	std	Y+8, r21	; 0x08
    210c:	89 e0       	ldi	r24, 0x09	; 9
    210e:	e8 2e       	mov	r14, r24
    2110:	f1 2c       	mov	r15, r1
    2112:	ec 0e       	add	r14, r28
    2114:	fd 1e       	adc	r15, r29
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	b7 01       	movw	r22, r14
    211c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    2120:	8e 01       	movw	r16, r28
    2122:	0f 5e       	subi	r16, 0xEF	; 239
    2124:	1f 4f       	sbci	r17, 0xFF	; 255
    2126:	ce 01       	movw	r24, r28
    2128:	05 96       	adiw	r24, 0x05	; 5
    212a:	b8 01       	movw	r22, r16
    212c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	82 30       	cpi	r24, 0x02	; 2
    2134:	40 f0       	brcs	.+16     	; 0x2146 <__ltsf2+0x56>
    2136:	89 89       	ldd	r24, Y+17	; 0x11
    2138:	82 30       	cpi	r24, 0x02	; 2
    213a:	28 f0       	brcs	.+10     	; 0x2146 <__ltsf2+0x56>
    213c:	c7 01       	movw	r24, r14
    213e:	b8 01       	movw	r22, r16
    2140:	0e 94 49 12 	call	0x2492	; 0x2492 <__fpcmp_parts_f>
    2144:	01 c0       	rjmp	.+2      	; 0x2148 <__ltsf2+0x58>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	68 96       	adiw	r28, 0x18	; 24
    214a:	e6 e0       	ldi	r30, 0x06	; 6
    214c:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x18>

00002150 <__fixsfsi>:
    2150:	ac e0       	ldi	r26, 0x0C	; 12
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ee ea       	ldi	r30, 0xAE	; 174
    2156:	f0 e1       	ldi	r31, 0x10	; 16
    2158:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__+0x20>
    215c:	69 83       	std	Y+1, r22	; 0x01
    215e:	7a 83       	std	Y+2, r23	; 0x02
    2160:	8b 83       	std	Y+3, r24	; 0x03
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	ce 01       	movw	r24, r28
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	be 01       	movw	r22, r28
    216a:	6b 5f       	subi	r22, 0xFB	; 251
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
    216e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__unpack_f>
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	82 30       	cpi	r24, 0x02	; 2
    2176:	61 f1       	breq	.+88     	; 0x21d0 <__fixsfsi+0x80>
    2178:	82 30       	cpi	r24, 0x02	; 2
    217a:	50 f1       	brcs	.+84     	; 0x21d0 <__fixsfsi+0x80>
    217c:	84 30       	cpi	r24, 0x04	; 4
    217e:	21 f4       	brne	.+8      	; 0x2188 <__fixsfsi+0x38>
    2180:	8e 81       	ldd	r24, Y+6	; 0x06
    2182:	88 23       	and	r24, r24
    2184:	51 f1       	breq	.+84     	; 0x21da <__fixsfsi+0x8a>
    2186:	2e c0       	rjmp	.+92     	; 0x21e4 <__fixsfsi+0x94>
    2188:	2f 81       	ldd	r18, Y+7	; 0x07
    218a:	38 85       	ldd	r19, Y+8	; 0x08
    218c:	37 fd       	sbrc	r19, 7
    218e:	20 c0       	rjmp	.+64     	; 0x21d0 <__fixsfsi+0x80>
    2190:	6e 81       	ldd	r22, Y+6	; 0x06
    2192:	2f 31       	cpi	r18, 0x1F	; 31
    2194:	31 05       	cpc	r19, r1
    2196:	1c f0       	brlt	.+6      	; 0x219e <__fixsfsi+0x4e>
    2198:	66 23       	and	r22, r22
    219a:	f9 f0       	breq	.+62     	; 0x21da <__fixsfsi+0x8a>
    219c:	23 c0       	rjmp	.+70     	; 0x21e4 <__fixsfsi+0x94>
    219e:	8e e1       	ldi	r24, 0x1E	; 30
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	82 1b       	sub	r24, r18
    21a4:	93 0b       	sbc	r25, r19
    21a6:	29 85       	ldd	r18, Y+9	; 0x09
    21a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    21aa:	4b 85       	ldd	r20, Y+11	; 0x0b
    21ac:	5c 85       	ldd	r21, Y+12	; 0x0c
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <__fixsfsi+0x68>
    21b0:	56 95       	lsr	r21
    21b2:	47 95       	ror	r20
    21b4:	37 95       	ror	r19
    21b6:	27 95       	ror	r18
    21b8:	8a 95       	dec	r24
    21ba:	d2 f7       	brpl	.-12     	; 0x21b0 <__fixsfsi+0x60>
    21bc:	66 23       	and	r22, r22
    21be:	b1 f0       	breq	.+44     	; 0x21ec <__fixsfsi+0x9c>
    21c0:	50 95       	com	r21
    21c2:	40 95       	com	r20
    21c4:	30 95       	com	r19
    21c6:	21 95       	neg	r18
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	4f 4f       	sbci	r20, 0xFF	; 255
    21cc:	5f 4f       	sbci	r21, 0xFF	; 255
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <__fixsfsi+0x9c>
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <__fixsfsi+0x9c>
    21da:	2f ef       	ldi	r18, 0xFF	; 255
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f ef       	ldi	r20, 0xFF	; 255
    21e0:	5f e7       	ldi	r21, 0x7F	; 127
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <__fixsfsi+0x9c>
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e8       	ldi	r21, 0x80	; 128
    21ec:	b9 01       	movw	r22, r18
    21ee:	ca 01       	movw	r24, r20
    21f0:	2c 96       	adiw	r28, 0x0c	; 12
    21f2:	e2 e0       	ldi	r30, 0x02	; 2
    21f4:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__+0x20>

000021f8 <__pack_f>:
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	fc 01       	movw	r30, r24
    2204:	e4 80       	ldd	r14, Z+4	; 0x04
    2206:	f5 80       	ldd	r15, Z+5	; 0x05
    2208:	06 81       	ldd	r16, Z+6	; 0x06
    220a:	17 81       	ldd	r17, Z+7	; 0x07
    220c:	d1 80       	ldd	r13, Z+1	; 0x01
    220e:	80 81       	ld	r24, Z
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	48 f4       	brcc	.+18     	; 0x2226 <__pack_f+0x2e>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e1       	ldi	r26, 0x10	; 16
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e8 2a       	or	r14, r24
    221e:	f9 2a       	or	r15, r25
    2220:	0a 2b       	or	r16, r26
    2222:	1b 2b       	or	r17, r27
    2224:	a5 c0       	rjmp	.+330    	; 0x2370 <__pack_f+0x178>
    2226:	84 30       	cpi	r24, 0x04	; 4
    2228:	09 f4       	brne	.+2      	; 0x222c <__pack_f+0x34>
    222a:	9f c0       	rjmp	.+318    	; 0x236a <__pack_f+0x172>
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	21 f4       	brne	.+8      	; 0x2238 <__pack_f+0x40>
    2230:	ee 24       	eor	r14, r14
    2232:	ff 24       	eor	r15, r15
    2234:	87 01       	movw	r16, r14
    2236:	05 c0       	rjmp	.+10     	; 0x2242 <__pack_f+0x4a>
    2238:	e1 14       	cp	r14, r1
    223a:	f1 04       	cpc	r15, r1
    223c:	01 05       	cpc	r16, r1
    223e:	11 05       	cpc	r17, r1
    2240:	19 f4       	brne	.+6      	; 0x2248 <__pack_f+0x50>
    2242:	e0 e0       	ldi	r30, 0x00	; 0
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	96 c0       	rjmp	.+300    	; 0x2374 <__pack_f+0x17c>
    2248:	62 81       	ldd	r22, Z+2	; 0x02
    224a:	73 81       	ldd	r23, Z+3	; 0x03
    224c:	9f ef       	ldi	r25, 0xFF	; 255
    224e:	62 38       	cpi	r22, 0x82	; 130
    2250:	79 07       	cpc	r23, r25
    2252:	0c f0       	brlt	.+2      	; 0x2256 <__pack_f+0x5e>
    2254:	5b c0       	rjmp	.+182    	; 0x230c <__pack_f+0x114>
    2256:	22 e8       	ldi	r18, 0x82	; 130
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	26 1b       	sub	r18, r22
    225c:	37 0b       	sbc	r19, r23
    225e:	2a 31       	cpi	r18, 0x1A	; 26
    2260:	31 05       	cpc	r19, r1
    2262:	2c f0       	brlt	.+10     	; 0x226e <__pack_f+0x76>
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	2a c0       	rjmp	.+84     	; 0x22c2 <__pack_f+0xca>
    226e:	b8 01       	movw	r22, r16
    2270:	a7 01       	movw	r20, r14
    2272:	02 2e       	mov	r0, r18
    2274:	04 c0       	rjmp	.+8      	; 0x227e <__pack_f+0x86>
    2276:	76 95       	lsr	r23
    2278:	67 95       	ror	r22
    227a:	57 95       	ror	r21
    227c:	47 95       	ror	r20
    227e:	0a 94       	dec	r0
    2280:	d2 f7       	brpl	.-12     	; 0x2276 <__pack_f+0x7e>
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 e0       	ldi	r26, 0x00	; 0
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <__pack_f+0x9c>
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	aa 1f       	adc	r26, r26
    2292:	bb 1f       	adc	r27, r27
    2294:	2a 95       	dec	r18
    2296:	d2 f7       	brpl	.-12     	; 0x228c <__pack_f+0x94>
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	a1 09       	sbc	r26, r1
    229c:	b1 09       	sbc	r27, r1
    229e:	8e 21       	and	r24, r14
    22a0:	9f 21       	and	r25, r15
    22a2:	a0 23       	and	r26, r16
    22a4:	b1 23       	and	r27, r17
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	a1 05       	cpc	r26, r1
    22aa:	b1 05       	cpc	r27, r1
    22ac:	21 f0       	breq	.+8      	; 0x22b6 <__pack_f+0xbe>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e0       	ldi	r26, 0x00	; 0
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	9a 01       	movw	r18, r20
    22b8:	ab 01       	movw	r20, r22
    22ba:	28 2b       	or	r18, r24
    22bc:	39 2b       	or	r19, r25
    22be:	4a 2b       	or	r20, r26
    22c0:	5b 2b       	or	r21, r27
    22c2:	da 01       	movw	r26, r20
    22c4:	c9 01       	movw	r24, r18
    22c6:	8f 77       	andi	r24, 0x7F	; 127
    22c8:	90 70       	andi	r25, 0x00	; 0
    22ca:	a0 70       	andi	r26, 0x00	; 0
    22cc:	b0 70       	andi	r27, 0x00	; 0
    22ce:	80 34       	cpi	r24, 0x40	; 64
    22d0:	91 05       	cpc	r25, r1
    22d2:	a1 05       	cpc	r26, r1
    22d4:	b1 05       	cpc	r27, r1
    22d6:	39 f4       	brne	.+14     	; 0x22e6 <__pack_f+0xee>
    22d8:	27 ff       	sbrs	r18, 7
    22da:	09 c0       	rjmp	.+18     	; 0x22ee <__pack_f+0xf6>
    22dc:	20 5c       	subi	r18, 0xC0	; 192
    22de:	3f 4f       	sbci	r19, 0xFF	; 255
    22e0:	4f 4f       	sbci	r20, 0xFF	; 255
    22e2:	5f 4f       	sbci	r21, 0xFF	; 255
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <__pack_f+0xf6>
    22e6:	21 5c       	subi	r18, 0xC1	; 193
    22e8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ea:	4f 4f       	sbci	r20, 0xFF	; 255
    22ec:	5f 4f       	sbci	r21, 0xFF	; 255
    22ee:	e0 e0       	ldi	r30, 0x00	; 0
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	20 30       	cpi	r18, 0x00	; 0
    22f4:	a0 e0       	ldi	r26, 0x00	; 0
    22f6:	3a 07       	cpc	r19, r26
    22f8:	a0 e0       	ldi	r26, 0x00	; 0
    22fa:	4a 07       	cpc	r20, r26
    22fc:	a0 e4       	ldi	r26, 0x40	; 64
    22fe:	5a 07       	cpc	r21, r26
    2300:	10 f0       	brcs	.+4      	; 0x2306 <__pack_f+0x10e>
    2302:	e1 e0       	ldi	r30, 0x01	; 1
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	79 01       	movw	r14, r18
    2308:	8a 01       	movw	r16, r20
    230a:	27 c0       	rjmp	.+78     	; 0x235a <__pack_f+0x162>
    230c:	60 38       	cpi	r22, 0x80	; 128
    230e:	71 05       	cpc	r23, r1
    2310:	64 f5       	brge	.+88     	; 0x236a <__pack_f+0x172>
    2312:	fb 01       	movw	r30, r22
    2314:	e1 58       	subi	r30, 0x81	; 129
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	d8 01       	movw	r26, r16
    231a:	c7 01       	movw	r24, r14
    231c:	8f 77       	andi	r24, 0x7F	; 127
    231e:	90 70       	andi	r25, 0x00	; 0
    2320:	a0 70       	andi	r26, 0x00	; 0
    2322:	b0 70       	andi	r27, 0x00	; 0
    2324:	80 34       	cpi	r24, 0x40	; 64
    2326:	91 05       	cpc	r25, r1
    2328:	a1 05       	cpc	r26, r1
    232a:	b1 05       	cpc	r27, r1
    232c:	39 f4       	brne	.+14     	; 0x233c <__pack_f+0x144>
    232e:	e7 fe       	sbrs	r14, 7
    2330:	0d c0       	rjmp	.+26     	; 0x234c <__pack_f+0x154>
    2332:	80 e4       	ldi	r24, 0x40	; 64
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a0 e0       	ldi	r26, 0x00	; 0
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <__pack_f+0x14c>
    233c:	8f e3       	ldi	r24, 0x3F	; 63
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e0       	ldi	r26, 0x00	; 0
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e8 0e       	add	r14, r24
    2346:	f9 1e       	adc	r15, r25
    2348:	0a 1f       	adc	r16, r26
    234a:	1b 1f       	adc	r17, r27
    234c:	17 ff       	sbrs	r17, 7
    234e:	05 c0       	rjmp	.+10     	; 0x235a <__pack_f+0x162>
    2350:	16 95       	lsr	r17
    2352:	07 95       	ror	r16
    2354:	f7 94       	ror	r15
    2356:	e7 94       	ror	r14
    2358:	31 96       	adiw	r30, 0x01	; 1
    235a:	87 e0       	ldi	r24, 0x07	; 7
    235c:	16 95       	lsr	r17
    235e:	07 95       	ror	r16
    2360:	f7 94       	ror	r15
    2362:	e7 94       	ror	r14
    2364:	8a 95       	dec	r24
    2366:	d1 f7       	brne	.-12     	; 0x235c <__pack_f+0x164>
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <__pack_f+0x17c>
    236a:	ee 24       	eor	r14, r14
    236c:	ff 24       	eor	r15, r15
    236e:	87 01       	movw	r16, r14
    2370:	ef ef       	ldi	r30, 0xFF	; 255
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	6e 2f       	mov	r22, r30
    2376:	67 95       	ror	r22
    2378:	66 27       	eor	r22, r22
    237a:	67 95       	ror	r22
    237c:	90 2f       	mov	r25, r16
    237e:	9f 77       	andi	r25, 0x7F	; 127
    2380:	d7 94       	ror	r13
    2382:	dd 24       	eor	r13, r13
    2384:	d7 94       	ror	r13
    2386:	8e 2f       	mov	r24, r30
    2388:	86 95       	lsr	r24
    238a:	49 2f       	mov	r20, r25
    238c:	46 2b       	or	r20, r22
    238e:	58 2f       	mov	r21, r24
    2390:	5d 29       	or	r21, r13
    2392:	b7 01       	movw	r22, r14
    2394:	ca 01       	movw	r24, r20
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	08 95       	ret

000023a2 <__unpack_f>:
    23a2:	fc 01       	movw	r30, r24
    23a4:	db 01       	movw	r26, r22
    23a6:	40 81       	ld	r20, Z
    23a8:	51 81       	ldd	r21, Z+1	; 0x01
    23aa:	22 81       	ldd	r18, Z+2	; 0x02
    23ac:	62 2f       	mov	r22, r18
    23ae:	6f 77       	andi	r22, 0x7F	; 127
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	22 1f       	adc	r18, r18
    23b4:	22 27       	eor	r18, r18
    23b6:	22 1f       	adc	r18, r18
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	89 2f       	mov	r24, r25
    23bc:	88 0f       	add	r24, r24
    23be:	82 2b       	or	r24, r18
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	99 1f       	adc	r25, r25
    23c6:	99 27       	eor	r25, r25
    23c8:	99 1f       	adc	r25, r25
    23ca:	11 96       	adiw	r26, 0x01	; 1
    23cc:	9c 93       	st	X, r25
    23ce:	11 97       	sbiw	r26, 0x01	; 1
    23d0:	21 15       	cp	r18, r1
    23d2:	31 05       	cpc	r19, r1
    23d4:	a9 f5       	brne	.+106    	; 0x2440 <__unpack_f+0x9e>
    23d6:	41 15       	cp	r20, r1
    23d8:	51 05       	cpc	r21, r1
    23da:	61 05       	cpc	r22, r1
    23dc:	71 05       	cpc	r23, r1
    23de:	11 f4       	brne	.+4      	; 0x23e4 <__unpack_f+0x42>
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	37 c0       	rjmp	.+110    	; 0x2452 <__unpack_f+0xb0>
    23e4:	82 e8       	ldi	r24, 0x82	; 130
    23e6:	9f ef       	ldi	r25, 0xFF	; 255
    23e8:	13 96       	adiw	r26, 0x03	; 3
    23ea:	9c 93       	st	X, r25
    23ec:	8e 93       	st	-X, r24
    23ee:	12 97       	sbiw	r26, 0x02	; 2
    23f0:	9a 01       	movw	r18, r20
    23f2:	ab 01       	movw	r20, r22
    23f4:	67 e0       	ldi	r22, 0x07	; 7
    23f6:	22 0f       	add	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	44 1f       	adc	r20, r20
    23fc:	55 1f       	adc	r21, r21
    23fe:	6a 95       	dec	r22
    2400:	d1 f7       	brne	.-12     	; 0x23f6 <__unpack_f+0x54>
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	8c 93       	st	X, r24
    2406:	0d c0       	rjmp	.+26     	; 0x2422 <__unpack_f+0x80>
    2408:	22 0f       	add	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	44 1f       	adc	r20, r20
    240e:	55 1f       	adc	r21, r21
    2410:	12 96       	adiw	r26, 0x02	; 2
    2412:	8d 91       	ld	r24, X+
    2414:	9c 91       	ld	r25, X
    2416:	13 97       	sbiw	r26, 0x03	; 3
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	13 96       	adiw	r26, 0x03	; 3
    241c:	9c 93       	st	X, r25
    241e:	8e 93       	st	-X, r24
    2420:	12 97       	sbiw	r26, 0x02	; 2
    2422:	20 30       	cpi	r18, 0x00	; 0
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	38 07       	cpc	r19, r24
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	48 07       	cpc	r20, r24
    242c:	80 e4       	ldi	r24, 0x40	; 64
    242e:	58 07       	cpc	r21, r24
    2430:	58 f3       	brcs	.-42     	; 0x2408 <__unpack_f+0x66>
    2432:	14 96       	adiw	r26, 0x04	; 4
    2434:	2d 93       	st	X+, r18
    2436:	3d 93       	st	X+, r19
    2438:	4d 93       	st	X+, r20
    243a:	5c 93       	st	X, r21
    243c:	17 97       	sbiw	r26, 0x07	; 7
    243e:	08 95       	ret
    2440:	2f 3f       	cpi	r18, 0xFF	; 255
    2442:	31 05       	cpc	r19, r1
    2444:	79 f4       	brne	.+30     	; 0x2464 <__unpack_f+0xc2>
    2446:	41 15       	cp	r20, r1
    2448:	51 05       	cpc	r21, r1
    244a:	61 05       	cpc	r22, r1
    244c:	71 05       	cpc	r23, r1
    244e:	19 f4       	brne	.+6      	; 0x2456 <__unpack_f+0xb4>
    2450:	84 e0       	ldi	r24, 0x04	; 4
    2452:	8c 93       	st	X, r24
    2454:	08 95       	ret
    2456:	64 ff       	sbrs	r22, 4
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <__unpack_f+0xbe>
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	8c 93       	st	X, r24
    245e:	12 c0       	rjmp	.+36     	; 0x2484 <__unpack_f+0xe2>
    2460:	1c 92       	st	X, r1
    2462:	10 c0       	rjmp	.+32     	; 0x2484 <__unpack_f+0xe2>
    2464:	2f 57       	subi	r18, 0x7F	; 127
    2466:	30 40       	sbci	r19, 0x00	; 0
    2468:	13 96       	adiw	r26, 0x03	; 3
    246a:	3c 93       	st	X, r19
    246c:	2e 93       	st	-X, r18
    246e:	12 97       	sbiw	r26, 0x02	; 2
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	8c 93       	st	X, r24
    2474:	87 e0       	ldi	r24, 0x07	; 7
    2476:	44 0f       	add	r20, r20
    2478:	55 1f       	adc	r21, r21
    247a:	66 1f       	adc	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	8a 95       	dec	r24
    2480:	d1 f7       	brne	.-12     	; 0x2476 <__unpack_f+0xd4>
    2482:	70 64       	ori	r23, 0x40	; 64
    2484:	14 96       	adiw	r26, 0x04	; 4
    2486:	4d 93       	st	X+, r20
    2488:	5d 93       	st	X+, r21
    248a:	6d 93       	st	X+, r22
    248c:	7c 93       	st	X, r23
    248e:	17 97       	sbiw	r26, 0x07	; 7
    2490:	08 95       	ret

00002492 <__fpcmp_parts_f>:
    2492:	1f 93       	push	r17
    2494:	dc 01       	movw	r26, r24
    2496:	fb 01       	movw	r30, r22
    2498:	9c 91       	ld	r25, X
    249a:	92 30       	cpi	r25, 0x02	; 2
    249c:	08 f4       	brcc	.+2      	; 0x24a0 <__fpcmp_parts_f+0xe>
    249e:	47 c0       	rjmp	.+142    	; 0x252e <__fpcmp_parts_f+0x9c>
    24a0:	80 81       	ld	r24, Z
    24a2:	82 30       	cpi	r24, 0x02	; 2
    24a4:	08 f4       	brcc	.+2      	; 0x24a8 <__fpcmp_parts_f+0x16>
    24a6:	43 c0       	rjmp	.+134    	; 0x252e <__fpcmp_parts_f+0x9c>
    24a8:	94 30       	cpi	r25, 0x04	; 4
    24aa:	51 f4       	brne	.+20     	; 0x24c0 <__fpcmp_parts_f+0x2e>
    24ac:	11 96       	adiw	r26, 0x01	; 1
    24ae:	1c 91       	ld	r17, X
    24b0:	84 30       	cpi	r24, 0x04	; 4
    24b2:	99 f5       	brne	.+102    	; 0x251a <__fpcmp_parts_f+0x88>
    24b4:	81 81       	ldd	r24, Z+1	; 0x01
    24b6:	68 2f       	mov	r22, r24
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	61 1b       	sub	r22, r17
    24bc:	71 09       	sbc	r23, r1
    24be:	3f c0       	rjmp	.+126    	; 0x253e <__fpcmp_parts_f+0xac>
    24c0:	84 30       	cpi	r24, 0x04	; 4
    24c2:	21 f0       	breq	.+8      	; 0x24cc <__fpcmp_parts_f+0x3a>
    24c4:	92 30       	cpi	r25, 0x02	; 2
    24c6:	31 f4       	brne	.+12     	; 0x24d4 <__fpcmp_parts_f+0x42>
    24c8:	82 30       	cpi	r24, 0x02	; 2
    24ca:	b9 f1       	breq	.+110    	; 0x253a <__fpcmp_parts_f+0xa8>
    24cc:	81 81       	ldd	r24, Z+1	; 0x01
    24ce:	88 23       	and	r24, r24
    24d0:	89 f1       	breq	.+98     	; 0x2534 <__fpcmp_parts_f+0xa2>
    24d2:	2d c0       	rjmp	.+90     	; 0x252e <__fpcmp_parts_f+0x9c>
    24d4:	11 96       	adiw	r26, 0x01	; 1
    24d6:	1c 91       	ld	r17, X
    24d8:	11 97       	sbiw	r26, 0x01	; 1
    24da:	82 30       	cpi	r24, 0x02	; 2
    24dc:	f1 f0       	breq	.+60     	; 0x251a <__fpcmp_parts_f+0x88>
    24de:	81 81       	ldd	r24, Z+1	; 0x01
    24e0:	18 17       	cp	r17, r24
    24e2:	d9 f4       	brne	.+54     	; 0x251a <__fpcmp_parts_f+0x88>
    24e4:	12 96       	adiw	r26, 0x02	; 2
    24e6:	2d 91       	ld	r18, X+
    24e8:	3c 91       	ld	r19, X
    24ea:	13 97       	sbiw	r26, 0x03	; 3
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	82 17       	cp	r24, r18
    24f2:	93 07       	cpc	r25, r19
    24f4:	94 f0       	brlt	.+36     	; 0x251a <__fpcmp_parts_f+0x88>
    24f6:	28 17       	cp	r18, r24
    24f8:	39 07       	cpc	r19, r25
    24fa:	bc f0       	brlt	.+46     	; 0x252a <__fpcmp_parts_f+0x98>
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	8d 91       	ld	r24, X+
    2500:	9d 91       	ld	r25, X+
    2502:	0d 90       	ld	r0, X+
    2504:	bc 91       	ld	r27, X
    2506:	a0 2d       	mov	r26, r0
    2508:	24 81       	ldd	r18, Z+4	; 0x04
    250a:	35 81       	ldd	r19, Z+5	; 0x05
    250c:	46 81       	ldd	r20, Z+6	; 0x06
    250e:	57 81       	ldd	r21, Z+7	; 0x07
    2510:	28 17       	cp	r18, r24
    2512:	39 07       	cpc	r19, r25
    2514:	4a 07       	cpc	r20, r26
    2516:	5b 07       	cpc	r21, r27
    2518:	18 f4       	brcc	.+6      	; 0x2520 <__fpcmp_parts_f+0x8e>
    251a:	11 23       	and	r17, r17
    251c:	41 f0       	breq	.+16     	; 0x252e <__fpcmp_parts_f+0x9c>
    251e:	0a c0       	rjmp	.+20     	; 0x2534 <__fpcmp_parts_f+0xa2>
    2520:	82 17       	cp	r24, r18
    2522:	93 07       	cpc	r25, r19
    2524:	a4 07       	cpc	r26, r20
    2526:	b5 07       	cpc	r27, r21
    2528:	40 f4       	brcc	.+16     	; 0x253a <__fpcmp_parts_f+0xa8>
    252a:	11 23       	and	r17, r17
    252c:	19 f0       	breq	.+6      	; 0x2534 <__fpcmp_parts_f+0xa2>
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	05 c0       	rjmp	.+10     	; 0x253e <__fpcmp_parts_f+0xac>
    2534:	6f ef       	ldi	r22, 0xFF	; 255
    2536:	7f ef       	ldi	r23, 0xFF	; 255
    2538:	02 c0       	rjmp	.+4      	; 0x253e <__fpcmp_parts_f+0xac>
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	cb 01       	movw	r24, r22
    2540:	1f 91       	pop	r17
    2542:	08 95       	ret

00002544 <__prologue_saves__>:
    2544:	2f 92       	push	r2
    2546:	3f 92       	push	r3
    2548:	4f 92       	push	r4
    254a:	5f 92       	push	r5
    254c:	6f 92       	push	r6
    254e:	7f 92       	push	r7
    2550:	8f 92       	push	r8
    2552:	9f 92       	push	r9
    2554:	af 92       	push	r10
    2556:	bf 92       	push	r11
    2558:	cf 92       	push	r12
    255a:	df 92       	push	r13
    255c:	ef 92       	push	r14
    255e:	ff 92       	push	r15
    2560:	0f 93       	push	r16
    2562:	1f 93       	push	r17
    2564:	cf 93       	push	r28
    2566:	df 93       	push	r29
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	ca 1b       	sub	r28, r26
    256e:	db 0b       	sbc	r29, r27
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	09 94       	ijmp

0000257c <__epilogue_restores__>:
    257c:	2a 88       	ldd	r2, Y+18	; 0x12
    257e:	39 88       	ldd	r3, Y+17	; 0x11
    2580:	48 88       	ldd	r4, Y+16	; 0x10
    2582:	5f 84       	ldd	r5, Y+15	; 0x0f
    2584:	6e 84       	ldd	r6, Y+14	; 0x0e
    2586:	7d 84       	ldd	r7, Y+13	; 0x0d
    2588:	8c 84       	ldd	r8, Y+12	; 0x0c
    258a:	9b 84       	ldd	r9, Y+11	; 0x0b
    258c:	aa 84       	ldd	r10, Y+10	; 0x0a
    258e:	b9 84       	ldd	r11, Y+9	; 0x09
    2590:	c8 84       	ldd	r12, Y+8	; 0x08
    2592:	df 80       	ldd	r13, Y+7	; 0x07
    2594:	ee 80       	ldd	r14, Y+6	; 0x06
    2596:	fd 80       	ldd	r15, Y+5	; 0x05
    2598:	0c 81       	ldd	r16, Y+4	; 0x04
    259a:	1b 81       	ldd	r17, Y+3	; 0x03
    259c:	aa 81       	ldd	r26, Y+2	; 0x02
    259e:	b9 81       	ldd	r27, Y+1	; 0x01
    25a0:	ce 0f       	add	r28, r30
    25a2:	d1 1d       	adc	r29, r1
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	ed 01       	movw	r28, r26
    25b0:	08 95       	ret

000025b2 <fdevopen>:
    25b2:	0f 93       	push	r16
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	8c 01       	movw	r16, r24
    25bc:	eb 01       	movw	r28, r22
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	31 f4       	brne	.+12     	; 0x25ce <fdevopen+0x1c>
    25c2:	61 15       	cp	r22, r1
    25c4:	71 05       	cpc	r23, r1
    25c6:	19 f4       	brne	.+6      	; 0x25ce <fdevopen+0x1c>
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	38 c0       	rjmp	.+112    	; 0x263e <fdevopen+0x8c>
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	6e e0       	ldi	r22, 0x0E	; 14
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	0e 94 79 15 	call	0x2af2	; 0x2af2 <calloc>
    25da:	fc 01       	movw	r30, r24
    25dc:	9c 01       	movw	r18, r24
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	71 f1       	breq	.+92     	; 0x263e <fdevopen+0x8c>
    25e2:	80 e8       	ldi	r24, 0x80	; 128
    25e4:	83 83       	std	Z+3, r24	; 0x03
    25e6:	20 97       	sbiw	r28, 0x00	; 0
    25e8:	71 f0       	breq	.+28     	; 0x2606 <fdevopen+0x54>
    25ea:	d3 87       	std	Z+11, r29	; 0x0b
    25ec:	c2 87       	std	Z+10, r28	; 0x0a
    25ee:	81 e8       	ldi	r24, 0x81	; 129
    25f0:	83 83       	std	Z+3, r24	; 0x03
    25f2:	80 91 a5 01 	lds	r24, 0x01A5
    25f6:	90 91 a6 01 	lds	r25, 0x01A6
    25fa:	89 2b       	or	r24, r25
    25fc:	21 f4       	brne	.+8      	; 0x2606 <fdevopen+0x54>
    25fe:	f0 93 a6 01 	sts	0x01A6, r31
    2602:	e0 93 a5 01 	sts	0x01A5, r30
    2606:	01 15       	cp	r16, r1
    2608:	11 05       	cpc	r17, r1
    260a:	c9 f0       	breq	.+50     	; 0x263e <fdevopen+0x8c>
    260c:	11 87       	std	Z+9, r17	; 0x09
    260e:	00 87       	std	Z+8, r16	; 0x08
    2610:	83 81       	ldd	r24, Z+3	; 0x03
    2612:	82 60       	ori	r24, 0x02	; 2
    2614:	83 83       	std	Z+3, r24	; 0x03
    2616:	80 91 a7 01 	lds	r24, 0x01A7
    261a:	90 91 a8 01 	lds	r25, 0x01A8
    261e:	89 2b       	or	r24, r25
    2620:	71 f4       	brne	.+28     	; 0x263e <fdevopen+0x8c>
    2622:	f0 93 a8 01 	sts	0x01A8, r31
    2626:	e0 93 a7 01 	sts	0x01A7, r30
    262a:	80 91 a9 01 	lds	r24, 0x01A9
    262e:	90 91 aa 01 	lds	r25, 0x01AA
    2632:	89 2b       	or	r24, r25
    2634:	21 f4       	brne	.+8      	; 0x263e <fdevopen+0x8c>
    2636:	f0 93 aa 01 	sts	0x01AA, r31
    263a:	e0 93 a9 01 	sts	0x01A9, r30
    263e:	c9 01       	movw	r24, r18
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	08 95       	ret

0000264a <printf>:
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	fe 01       	movw	r30, r28
    2654:	35 96       	adiw	r30, 0x05	; 5
    2656:	61 91       	ld	r22, Z+
    2658:	71 91       	ld	r23, Z+
    265a:	80 91 a7 01 	lds	r24, 0x01A7
    265e:	90 91 a8 01 	lds	r25, 0x01A8
    2662:	af 01       	movw	r20, r30
    2664:	0e 94 73 13 	call	0x26e6	; 0x26e6 <vfprintf>
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <putchar>:
    266e:	60 91 a7 01 	lds	r22, 0x01A7
    2672:	70 91 a8 01 	lds	r23, 0x01A8
    2676:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    267a:	08 95       	ret

0000267c <puts>:
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	8c 01       	movw	r16, r24
    2686:	e0 91 a7 01 	lds	r30, 0x01A7
    268a:	f0 91 a8 01 	lds	r31, 0x01A8
    268e:	83 81       	ldd	r24, Z+3	; 0x03
    2690:	81 ff       	sbrs	r24, 1
    2692:	21 c0       	rjmp	.+66     	; 0x26d6 <puts+0x5a>
    2694:	c0 e0       	ldi	r28, 0x00	; 0
    2696:	d0 e0       	ldi	r29, 0x00	; 0
    2698:	0d c0       	rjmp	.+26     	; 0x26b4 <puts+0x38>
    269a:	e0 91 a7 01 	lds	r30, 0x01A7
    269e:	f0 91 a8 01 	lds	r31, 0x01A8
    26a2:	20 85       	ldd	r18, Z+8	; 0x08
    26a4:	31 85       	ldd	r19, Z+9	; 0x09
    26a6:	bf 01       	movw	r22, r30
    26a8:	f9 01       	movw	r30, r18
    26aa:	09 95       	icall
    26ac:	89 2b       	or	r24, r25
    26ae:	11 f0       	breq	.+4      	; 0x26b4 <puts+0x38>
    26b0:	cf ef       	ldi	r28, 0xFF	; 255
    26b2:	df ef       	ldi	r29, 0xFF	; 255
    26b4:	f8 01       	movw	r30, r16
    26b6:	81 91       	ld	r24, Z+
    26b8:	8f 01       	movw	r16, r30
    26ba:	88 23       	and	r24, r24
    26bc:	71 f7       	brne	.-36     	; 0x269a <puts+0x1e>
    26be:	e0 91 a7 01 	lds	r30, 0x01A7
    26c2:	f0 91 a8 01 	lds	r31, 0x01A8
    26c6:	20 85       	ldd	r18, Z+8	; 0x08
    26c8:	31 85       	ldd	r19, Z+9	; 0x09
    26ca:	8a e0       	ldi	r24, 0x0A	; 10
    26cc:	bf 01       	movw	r22, r30
    26ce:	f9 01       	movw	r30, r18
    26d0:	09 95       	icall
    26d2:	89 2b       	or	r24, r25
    26d4:	11 f0       	breq	.+4      	; 0x26da <puts+0x5e>
    26d6:	cf ef       	ldi	r28, 0xFF	; 255
    26d8:	df ef       	ldi	r29, 0xFF	; 255
    26da:	ce 01       	movw	r24, r28
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	08 95       	ret

000026e6 <vfprintf>:
    26e6:	2f 92       	push	r2
    26e8:	3f 92       	push	r3
    26ea:	4f 92       	push	r4
    26ec:	5f 92       	push	r5
    26ee:	6f 92       	push	r6
    26f0:	7f 92       	push	r7
    26f2:	8f 92       	push	r8
    26f4:	9f 92       	push	r9
    26f6:	af 92       	push	r10
    26f8:	bf 92       	push	r11
    26fa:	cf 92       	push	r12
    26fc:	df 92       	push	r13
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	2b 97       	sbiw	r28, 0x0b	; 11
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	3c 01       	movw	r6, r24
    271c:	2b 01       	movw	r4, r22
    271e:	5a 01       	movw	r10, r20
    2720:	fc 01       	movw	r30, r24
    2722:	17 82       	std	Z+7, r1	; 0x07
    2724:	16 82       	std	Z+6, r1	; 0x06
    2726:	83 81       	ldd	r24, Z+3	; 0x03
    2728:	81 fd       	sbrc	r24, 1
    272a:	03 c0       	rjmp	.+6      	; 0x2732 <vfprintf+0x4c>
    272c:	6f ef       	ldi	r22, 0xFF	; 255
    272e:	7f ef       	ldi	r23, 0xFF	; 255
    2730:	c6 c1       	rjmp	.+908    	; 0x2abe <vfprintf+0x3d8>
    2732:	9a e0       	ldi	r25, 0x0A	; 10
    2734:	89 2e       	mov	r8, r25
    2736:	1e 01       	movw	r2, r28
    2738:	08 94       	sec
    273a:	21 1c       	adc	r2, r1
    273c:	31 1c       	adc	r3, r1
    273e:	f3 01       	movw	r30, r6
    2740:	23 81       	ldd	r18, Z+3	; 0x03
    2742:	f2 01       	movw	r30, r4
    2744:	23 fd       	sbrc	r18, 3
    2746:	85 91       	lpm	r24, Z+
    2748:	23 ff       	sbrs	r18, 3
    274a:	81 91       	ld	r24, Z+
    274c:	2f 01       	movw	r4, r30
    274e:	88 23       	and	r24, r24
    2750:	09 f4       	brne	.+2      	; 0x2754 <vfprintf+0x6e>
    2752:	b2 c1       	rjmp	.+868    	; 0x2ab8 <vfprintf+0x3d2>
    2754:	85 32       	cpi	r24, 0x25	; 37
    2756:	39 f4       	brne	.+14     	; 0x2766 <vfprintf+0x80>
    2758:	23 fd       	sbrc	r18, 3
    275a:	85 91       	lpm	r24, Z+
    275c:	23 ff       	sbrs	r18, 3
    275e:	81 91       	ld	r24, Z+
    2760:	2f 01       	movw	r4, r30
    2762:	85 32       	cpi	r24, 0x25	; 37
    2764:	29 f4       	brne	.+10     	; 0x2770 <vfprintf+0x8a>
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	b3 01       	movw	r22, r6
    276a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    276e:	e7 cf       	rjmp	.-50     	; 0x273e <vfprintf+0x58>
    2770:	98 2f       	mov	r25, r24
    2772:	ff 24       	eor	r15, r15
    2774:	ee 24       	eor	r14, r14
    2776:	99 24       	eor	r9, r9
    2778:	ff e1       	ldi	r31, 0x1F	; 31
    277a:	ff 15       	cp	r31, r15
    277c:	d0 f0       	brcs	.+52     	; 0x27b2 <vfprintf+0xcc>
    277e:	9b 32       	cpi	r25, 0x2B	; 43
    2780:	69 f0       	breq	.+26     	; 0x279c <vfprintf+0xb6>
    2782:	9c 32       	cpi	r25, 0x2C	; 44
    2784:	28 f4       	brcc	.+10     	; 0x2790 <vfprintf+0xaa>
    2786:	90 32       	cpi	r25, 0x20	; 32
    2788:	59 f0       	breq	.+22     	; 0x27a0 <vfprintf+0xba>
    278a:	93 32       	cpi	r25, 0x23	; 35
    278c:	91 f4       	brne	.+36     	; 0x27b2 <vfprintf+0xcc>
    278e:	0e c0       	rjmp	.+28     	; 0x27ac <vfprintf+0xc6>
    2790:	9d 32       	cpi	r25, 0x2D	; 45
    2792:	49 f0       	breq	.+18     	; 0x27a6 <vfprintf+0xc0>
    2794:	90 33       	cpi	r25, 0x30	; 48
    2796:	69 f4       	brne	.+26     	; 0x27b2 <vfprintf+0xcc>
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	24 c0       	rjmp	.+72     	; 0x27e4 <vfprintf+0xfe>
    279c:	52 e0       	ldi	r21, 0x02	; 2
    279e:	f5 2a       	or	r15, r21
    27a0:	84 e0       	ldi	r24, 0x04	; 4
    27a2:	f8 2a       	or	r15, r24
    27a4:	28 c0       	rjmp	.+80     	; 0x27f6 <vfprintf+0x110>
    27a6:	98 e0       	ldi	r25, 0x08	; 8
    27a8:	f9 2a       	or	r15, r25
    27aa:	25 c0       	rjmp	.+74     	; 0x27f6 <vfprintf+0x110>
    27ac:	e0 e1       	ldi	r30, 0x10	; 16
    27ae:	fe 2a       	or	r15, r30
    27b0:	22 c0       	rjmp	.+68     	; 0x27f6 <vfprintf+0x110>
    27b2:	f7 fc       	sbrc	r15, 7
    27b4:	29 c0       	rjmp	.+82     	; 0x2808 <vfprintf+0x122>
    27b6:	89 2f       	mov	r24, r25
    27b8:	80 53       	subi	r24, 0x30	; 48
    27ba:	8a 30       	cpi	r24, 0x0A	; 10
    27bc:	70 f4       	brcc	.+28     	; 0x27da <vfprintf+0xf4>
    27be:	f6 fe       	sbrs	r15, 6
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <vfprintf+0xe6>
    27c2:	98 9c       	mul	r9, r8
    27c4:	90 2c       	mov	r9, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	98 0e       	add	r9, r24
    27ca:	15 c0       	rjmp	.+42     	; 0x27f6 <vfprintf+0x110>
    27cc:	e8 9c       	mul	r14, r8
    27ce:	e0 2c       	mov	r14, r0
    27d0:	11 24       	eor	r1, r1
    27d2:	e8 0e       	add	r14, r24
    27d4:	f0 e2       	ldi	r31, 0x20	; 32
    27d6:	ff 2a       	or	r15, r31
    27d8:	0e c0       	rjmp	.+28     	; 0x27f6 <vfprintf+0x110>
    27da:	9e 32       	cpi	r25, 0x2E	; 46
    27dc:	29 f4       	brne	.+10     	; 0x27e8 <vfprintf+0x102>
    27de:	f6 fc       	sbrc	r15, 6
    27e0:	6b c1       	rjmp	.+726    	; 0x2ab8 <vfprintf+0x3d2>
    27e2:	40 e4       	ldi	r20, 0x40	; 64
    27e4:	f4 2a       	or	r15, r20
    27e6:	07 c0       	rjmp	.+14     	; 0x27f6 <vfprintf+0x110>
    27e8:	9c 36       	cpi	r25, 0x6C	; 108
    27ea:	19 f4       	brne	.+6      	; 0x27f2 <vfprintf+0x10c>
    27ec:	50 e8       	ldi	r21, 0x80	; 128
    27ee:	f5 2a       	or	r15, r21
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <vfprintf+0x110>
    27f2:	98 36       	cpi	r25, 0x68	; 104
    27f4:	49 f4       	brne	.+18     	; 0x2808 <vfprintf+0x122>
    27f6:	f2 01       	movw	r30, r4
    27f8:	23 fd       	sbrc	r18, 3
    27fa:	95 91       	lpm	r25, Z+
    27fc:	23 ff       	sbrs	r18, 3
    27fe:	91 91       	ld	r25, Z+
    2800:	2f 01       	movw	r4, r30
    2802:	99 23       	and	r25, r25
    2804:	09 f0       	breq	.+2      	; 0x2808 <vfprintf+0x122>
    2806:	b8 cf       	rjmp	.-144    	; 0x2778 <vfprintf+0x92>
    2808:	89 2f       	mov	r24, r25
    280a:	85 54       	subi	r24, 0x45	; 69
    280c:	83 30       	cpi	r24, 0x03	; 3
    280e:	18 f0       	brcs	.+6      	; 0x2816 <vfprintf+0x130>
    2810:	80 52       	subi	r24, 0x20	; 32
    2812:	83 30       	cpi	r24, 0x03	; 3
    2814:	38 f4       	brcc	.+14     	; 0x2824 <vfprintf+0x13e>
    2816:	44 e0       	ldi	r20, 0x04	; 4
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	a4 0e       	add	r10, r20
    281c:	b5 1e       	adc	r11, r21
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	59 83       	std	Y+1, r21	; 0x01
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <vfprintf+0x15c>
    2824:	93 36       	cpi	r25, 0x63	; 99
    2826:	31 f0       	breq	.+12     	; 0x2834 <vfprintf+0x14e>
    2828:	93 37       	cpi	r25, 0x73	; 115
    282a:	79 f0       	breq	.+30     	; 0x284a <vfprintf+0x164>
    282c:	93 35       	cpi	r25, 0x53	; 83
    282e:	09 f0       	breq	.+2      	; 0x2832 <vfprintf+0x14c>
    2830:	56 c0       	rjmp	.+172    	; 0x28de <vfprintf+0x1f8>
    2832:	20 c0       	rjmp	.+64     	; 0x2874 <vfprintf+0x18e>
    2834:	f5 01       	movw	r30, r10
    2836:	80 81       	ld	r24, Z
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	42 e0       	ldi	r20, 0x02	; 2
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	a4 0e       	add	r10, r20
    2840:	b5 1e       	adc	r11, r21
    2842:	61 01       	movw	r12, r2
    2844:	01 e0       	ldi	r16, 0x01	; 1
    2846:	10 e0       	ldi	r17, 0x00	; 0
    2848:	12 c0       	rjmp	.+36     	; 0x286e <vfprintf+0x188>
    284a:	f5 01       	movw	r30, r10
    284c:	c0 80       	ld	r12, Z
    284e:	d1 80       	ldd	r13, Z+1	; 0x01
    2850:	f6 fc       	sbrc	r15, 6
    2852:	03 c0       	rjmp	.+6      	; 0x285a <vfprintf+0x174>
    2854:	6f ef       	ldi	r22, 0xFF	; 255
    2856:	7f ef       	ldi	r23, 0xFF	; 255
    2858:	02 c0       	rjmp	.+4      	; 0x285e <vfprintf+0x178>
    285a:	69 2d       	mov	r22, r9
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	42 e0       	ldi	r20, 0x02	; 2
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	a4 0e       	add	r10, r20
    2864:	b5 1e       	adc	r11, r21
    2866:	c6 01       	movw	r24, r12
    2868:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <strnlen>
    286c:	8c 01       	movw	r16, r24
    286e:	5f e7       	ldi	r21, 0x7F	; 127
    2870:	f5 22       	and	r15, r21
    2872:	14 c0       	rjmp	.+40     	; 0x289c <vfprintf+0x1b6>
    2874:	f5 01       	movw	r30, r10
    2876:	c0 80       	ld	r12, Z
    2878:	d1 80       	ldd	r13, Z+1	; 0x01
    287a:	f6 fc       	sbrc	r15, 6
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <vfprintf+0x19e>
    287e:	6f ef       	ldi	r22, 0xFF	; 255
    2880:	7f ef       	ldi	r23, 0xFF	; 255
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <vfprintf+0x1a2>
    2884:	69 2d       	mov	r22, r9
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	42 e0       	ldi	r20, 0x02	; 2
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	a4 0e       	add	r10, r20
    288e:	b5 1e       	adc	r11, r21
    2890:	c6 01       	movw	r24, r12
    2892:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <strnlen_P>
    2896:	8c 01       	movw	r16, r24
    2898:	50 e8       	ldi	r21, 0x80	; 128
    289a:	f5 2a       	or	r15, r21
    289c:	f3 fe       	sbrs	r15, 3
    289e:	07 c0       	rjmp	.+14     	; 0x28ae <vfprintf+0x1c8>
    28a0:	1a c0       	rjmp	.+52     	; 0x28d6 <vfprintf+0x1f0>
    28a2:	80 e2       	ldi	r24, 0x20	; 32
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	b3 01       	movw	r22, r6
    28a8:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    28ac:	ea 94       	dec	r14
    28ae:	8e 2d       	mov	r24, r14
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	08 17       	cp	r16, r24
    28b4:	19 07       	cpc	r17, r25
    28b6:	a8 f3       	brcs	.-22     	; 0x28a2 <vfprintf+0x1bc>
    28b8:	0e c0       	rjmp	.+28     	; 0x28d6 <vfprintf+0x1f0>
    28ba:	f6 01       	movw	r30, r12
    28bc:	f7 fc       	sbrc	r15, 7
    28be:	85 91       	lpm	r24, Z+
    28c0:	f7 fe       	sbrs	r15, 7
    28c2:	81 91       	ld	r24, Z+
    28c4:	6f 01       	movw	r12, r30
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	b3 01       	movw	r22, r6
    28ca:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    28ce:	e1 10       	cpse	r14, r1
    28d0:	ea 94       	dec	r14
    28d2:	01 50       	subi	r16, 0x01	; 1
    28d4:	10 40       	sbci	r17, 0x00	; 0
    28d6:	01 15       	cp	r16, r1
    28d8:	11 05       	cpc	r17, r1
    28da:	79 f7       	brne	.-34     	; 0x28ba <vfprintf+0x1d4>
    28dc:	ea c0       	rjmp	.+468    	; 0x2ab2 <vfprintf+0x3cc>
    28de:	94 36       	cpi	r25, 0x64	; 100
    28e0:	11 f0       	breq	.+4      	; 0x28e6 <vfprintf+0x200>
    28e2:	99 36       	cpi	r25, 0x69	; 105
    28e4:	69 f5       	brne	.+90     	; 0x2940 <vfprintf+0x25a>
    28e6:	f7 fe       	sbrs	r15, 7
    28e8:	08 c0       	rjmp	.+16     	; 0x28fa <vfprintf+0x214>
    28ea:	f5 01       	movw	r30, r10
    28ec:	20 81       	ld	r18, Z
    28ee:	31 81       	ldd	r19, Z+1	; 0x01
    28f0:	42 81       	ldd	r20, Z+2	; 0x02
    28f2:	53 81       	ldd	r21, Z+3	; 0x03
    28f4:	84 e0       	ldi	r24, 0x04	; 4
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0a c0       	rjmp	.+20     	; 0x290e <vfprintf+0x228>
    28fa:	f5 01       	movw	r30, r10
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	9c 01       	movw	r18, r24
    2902:	44 27       	eor	r20, r20
    2904:	37 fd       	sbrc	r19, 7
    2906:	40 95       	com	r20
    2908:	54 2f       	mov	r21, r20
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a8 0e       	add	r10, r24
    2910:	b9 1e       	adc	r11, r25
    2912:	9f e6       	ldi	r25, 0x6F	; 111
    2914:	f9 22       	and	r15, r25
    2916:	57 ff       	sbrs	r21, 7
    2918:	09 c0       	rjmp	.+18     	; 0x292c <vfprintf+0x246>
    291a:	50 95       	com	r21
    291c:	40 95       	com	r20
    291e:	30 95       	com	r19
    2920:	21 95       	neg	r18
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	4f 4f       	sbci	r20, 0xFF	; 255
    2926:	5f 4f       	sbci	r21, 0xFF	; 255
    2928:	e0 e8       	ldi	r30, 0x80	; 128
    292a:	fe 2a       	or	r15, r30
    292c:	ca 01       	movw	r24, r20
    292e:	b9 01       	movw	r22, r18
    2930:	a1 01       	movw	r20, r2
    2932:	2a e0       	ldi	r18, 0x0A	; 10
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__ultoa_invert>
    293a:	d8 2e       	mov	r13, r24
    293c:	d2 18       	sub	r13, r2
    293e:	40 c0       	rjmp	.+128    	; 0x29c0 <vfprintf+0x2da>
    2940:	95 37       	cpi	r25, 0x75	; 117
    2942:	29 f4       	brne	.+10     	; 0x294e <vfprintf+0x268>
    2944:	1f 2d       	mov	r17, r15
    2946:	1f 7e       	andi	r17, 0xEF	; 239
    2948:	2a e0       	ldi	r18, 0x0A	; 10
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	1d c0       	rjmp	.+58     	; 0x2988 <vfprintf+0x2a2>
    294e:	1f 2d       	mov	r17, r15
    2950:	19 7f       	andi	r17, 0xF9	; 249
    2952:	9f 36       	cpi	r25, 0x6F	; 111
    2954:	61 f0       	breq	.+24     	; 0x296e <vfprintf+0x288>
    2956:	90 37       	cpi	r25, 0x70	; 112
    2958:	20 f4       	brcc	.+8      	; 0x2962 <vfprintf+0x27c>
    295a:	98 35       	cpi	r25, 0x58	; 88
    295c:	09 f0       	breq	.+2      	; 0x2960 <vfprintf+0x27a>
    295e:	ac c0       	rjmp	.+344    	; 0x2ab8 <vfprintf+0x3d2>
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <vfprintf+0x29a>
    2962:	90 37       	cpi	r25, 0x70	; 112
    2964:	39 f0       	breq	.+14     	; 0x2974 <vfprintf+0x28e>
    2966:	98 37       	cpi	r25, 0x78	; 120
    2968:	09 f0       	breq	.+2      	; 0x296c <vfprintf+0x286>
    296a:	a6 c0       	rjmp	.+332    	; 0x2ab8 <vfprintf+0x3d2>
    296c:	04 c0       	rjmp	.+8      	; 0x2976 <vfprintf+0x290>
    296e:	28 e0       	ldi	r18, 0x08	; 8
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	0a c0       	rjmp	.+20     	; 0x2988 <vfprintf+0x2a2>
    2974:	10 61       	ori	r17, 0x10	; 16
    2976:	14 fd       	sbrc	r17, 4
    2978:	14 60       	ori	r17, 0x04	; 4
    297a:	20 e1       	ldi	r18, 0x10	; 16
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	04 c0       	rjmp	.+8      	; 0x2988 <vfprintf+0x2a2>
    2980:	14 fd       	sbrc	r17, 4
    2982:	16 60       	ori	r17, 0x06	; 6
    2984:	20 e1       	ldi	r18, 0x10	; 16
    2986:	32 e0       	ldi	r19, 0x02	; 2
    2988:	17 ff       	sbrs	r17, 7
    298a:	08 c0       	rjmp	.+16     	; 0x299c <vfprintf+0x2b6>
    298c:	f5 01       	movw	r30, r10
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	44 e0       	ldi	r20, 0x04	; 4
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	08 c0       	rjmp	.+16     	; 0x29ac <vfprintf+0x2c6>
    299c:	f5 01       	movw	r30, r10
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	bc 01       	movw	r22, r24
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	42 e0       	ldi	r20, 0x02	; 2
    29aa:	50 e0       	ldi	r21, 0x00	; 0
    29ac:	a4 0e       	add	r10, r20
    29ae:	b5 1e       	adc	r11, r21
    29b0:	a1 01       	movw	r20, r2
    29b2:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__ultoa_invert>
    29b6:	d8 2e       	mov	r13, r24
    29b8:	d2 18       	sub	r13, r2
    29ba:	8f e7       	ldi	r24, 0x7F	; 127
    29bc:	f8 2e       	mov	r15, r24
    29be:	f1 22       	and	r15, r17
    29c0:	f6 fe       	sbrs	r15, 6
    29c2:	0b c0       	rjmp	.+22     	; 0x29da <vfprintf+0x2f4>
    29c4:	5e ef       	ldi	r21, 0xFE	; 254
    29c6:	f5 22       	and	r15, r21
    29c8:	d9 14       	cp	r13, r9
    29ca:	38 f4       	brcc	.+14     	; 0x29da <vfprintf+0x2f4>
    29cc:	f4 fe       	sbrs	r15, 4
    29ce:	07 c0       	rjmp	.+14     	; 0x29de <vfprintf+0x2f8>
    29d0:	f2 fc       	sbrc	r15, 2
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <vfprintf+0x2f8>
    29d4:	8f ee       	ldi	r24, 0xEF	; 239
    29d6:	f8 22       	and	r15, r24
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <vfprintf+0x2f8>
    29da:	1d 2d       	mov	r17, r13
    29dc:	01 c0       	rjmp	.+2      	; 0x29e0 <vfprintf+0x2fa>
    29de:	19 2d       	mov	r17, r9
    29e0:	f4 fe       	sbrs	r15, 4
    29e2:	0d c0       	rjmp	.+26     	; 0x29fe <vfprintf+0x318>
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 0d       	add	r30, r13
    29e8:	f1 1d       	adc	r31, r1
    29ea:	80 81       	ld	r24, Z
    29ec:	80 33       	cpi	r24, 0x30	; 48
    29ee:	19 f4       	brne	.+6      	; 0x29f6 <vfprintf+0x310>
    29f0:	99 ee       	ldi	r25, 0xE9	; 233
    29f2:	f9 22       	and	r15, r25
    29f4:	08 c0       	rjmp	.+16     	; 0x2a06 <vfprintf+0x320>
    29f6:	1f 5f       	subi	r17, 0xFF	; 255
    29f8:	f2 fe       	sbrs	r15, 2
    29fa:	05 c0       	rjmp	.+10     	; 0x2a06 <vfprintf+0x320>
    29fc:	03 c0       	rjmp	.+6      	; 0x2a04 <vfprintf+0x31e>
    29fe:	8f 2d       	mov	r24, r15
    2a00:	86 78       	andi	r24, 0x86	; 134
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <vfprintf+0x320>
    2a04:	1f 5f       	subi	r17, 0xFF	; 255
    2a06:	0f 2d       	mov	r16, r15
    2a08:	f3 fc       	sbrc	r15, 3
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <vfprintf+0x34e>
    2a0c:	f0 fe       	sbrs	r15, 0
    2a0e:	0f c0       	rjmp	.+30     	; 0x2a2e <vfprintf+0x348>
    2a10:	1e 15       	cp	r17, r14
    2a12:	10 f0       	brcs	.+4      	; 0x2a18 <vfprintf+0x332>
    2a14:	9d 2c       	mov	r9, r13
    2a16:	0b c0       	rjmp	.+22     	; 0x2a2e <vfprintf+0x348>
    2a18:	9d 2c       	mov	r9, r13
    2a1a:	9e 0c       	add	r9, r14
    2a1c:	91 1a       	sub	r9, r17
    2a1e:	1e 2d       	mov	r17, r14
    2a20:	06 c0       	rjmp	.+12     	; 0x2a2e <vfprintf+0x348>
    2a22:	80 e2       	ldi	r24, 0x20	; 32
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	b3 01       	movw	r22, r6
    2a28:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    2a2c:	1f 5f       	subi	r17, 0xFF	; 255
    2a2e:	1e 15       	cp	r17, r14
    2a30:	c0 f3       	brcs	.-16     	; 0x2a22 <vfprintf+0x33c>
    2a32:	04 c0       	rjmp	.+8      	; 0x2a3c <vfprintf+0x356>
    2a34:	1e 15       	cp	r17, r14
    2a36:	10 f4       	brcc	.+4      	; 0x2a3c <vfprintf+0x356>
    2a38:	e1 1a       	sub	r14, r17
    2a3a:	01 c0       	rjmp	.+2      	; 0x2a3e <vfprintf+0x358>
    2a3c:	ee 24       	eor	r14, r14
    2a3e:	04 ff       	sbrs	r16, 4
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <vfprintf+0x37a>
    2a42:	80 e3       	ldi	r24, 0x30	; 48
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	b3 01       	movw	r22, r6
    2a48:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    2a4c:	02 ff       	sbrs	r16, 2
    2a4e:	1d c0       	rjmp	.+58     	; 0x2a8a <vfprintf+0x3a4>
    2a50:	01 fd       	sbrc	r16, 1
    2a52:	03 c0       	rjmp	.+6      	; 0x2a5a <vfprintf+0x374>
    2a54:	88 e7       	ldi	r24, 0x78	; 120
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e c0       	rjmp	.+28     	; 0x2a76 <vfprintf+0x390>
    2a5a:	88 e5       	ldi	r24, 0x58	; 88
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	0b c0       	rjmp	.+22     	; 0x2a76 <vfprintf+0x390>
    2a60:	80 2f       	mov	r24, r16
    2a62:	86 78       	andi	r24, 0x86	; 134
    2a64:	91 f0       	breq	.+36     	; 0x2a8a <vfprintf+0x3a4>
    2a66:	01 ff       	sbrs	r16, 1
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <vfprintf+0x388>
    2a6a:	8b e2       	ldi	r24, 0x2B	; 43
    2a6c:	01 c0       	rjmp	.+2      	; 0x2a70 <vfprintf+0x38a>
    2a6e:	80 e2       	ldi	r24, 0x20	; 32
    2a70:	f7 fc       	sbrc	r15, 7
    2a72:	8d e2       	ldi	r24, 0x2D	; 45
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	b3 01       	movw	r22, r6
    2a78:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    2a7c:	06 c0       	rjmp	.+12     	; 0x2a8a <vfprintf+0x3a4>
    2a7e:	80 e3       	ldi	r24, 0x30	; 48
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	b3 01       	movw	r22, r6
    2a84:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    2a88:	9a 94       	dec	r9
    2a8a:	d9 14       	cp	r13, r9
    2a8c:	c0 f3       	brcs	.-16     	; 0x2a7e <vfprintf+0x398>
    2a8e:	da 94       	dec	r13
    2a90:	f1 01       	movw	r30, r2
    2a92:	ed 0d       	add	r30, r13
    2a94:	f1 1d       	adc	r31, r1
    2a96:	80 81       	ld	r24, Z
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	b3 01       	movw	r22, r6
    2a9c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    2aa0:	dd 20       	and	r13, r13
    2aa2:	a9 f7       	brne	.-22     	; 0x2a8e <vfprintf+0x3a8>
    2aa4:	06 c0       	rjmp	.+12     	; 0x2ab2 <vfprintf+0x3cc>
    2aa6:	80 e2       	ldi	r24, 0x20	; 32
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	b3 01       	movw	r22, r6
    2aac:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <fputc>
    2ab0:	ea 94       	dec	r14
    2ab2:	ee 20       	and	r14, r14
    2ab4:	c1 f7       	brne	.-16     	; 0x2aa6 <vfprintf+0x3c0>
    2ab6:	43 ce       	rjmp	.-890    	; 0x273e <vfprintf+0x58>
    2ab8:	f3 01       	movw	r30, r6
    2aba:	66 81       	ldd	r22, Z+6	; 0x06
    2abc:	77 81       	ldd	r23, Z+7	; 0x07
    2abe:	cb 01       	movw	r24, r22
    2ac0:	2b 96       	adiw	r28, 0x0b	; 11
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	ff 90       	pop	r15
    2ad6:	ef 90       	pop	r14
    2ad8:	df 90       	pop	r13
    2ada:	cf 90       	pop	r12
    2adc:	bf 90       	pop	r11
    2ade:	af 90       	pop	r10
    2ae0:	9f 90       	pop	r9
    2ae2:	8f 90       	pop	r8
    2ae4:	7f 90       	pop	r7
    2ae6:	6f 90       	pop	r6
    2ae8:	5f 90       	pop	r5
    2aea:	4f 90       	pop	r4
    2aec:	3f 90       	pop	r3
    2aee:	2f 90       	pop	r2
    2af0:	08 95       	ret

00002af2 <calloc>:
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	68 9f       	mul	r22, r24
    2afc:	80 01       	movw	r16, r0
    2afe:	69 9f       	mul	r22, r25
    2b00:	10 0d       	add	r17, r0
    2b02:	78 9f       	mul	r23, r24
    2b04:	10 0d       	add	r17, r0
    2b06:	11 24       	eor	r1, r1
    2b08:	c8 01       	movw	r24, r16
    2b0a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <malloc>
    2b0e:	ec 01       	movw	r28, r24
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	29 f0       	breq	.+10     	; 0x2b1e <calloc+0x2c>
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	a8 01       	movw	r20, r16
    2b1a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <memset>
    2b1e:	ce 01       	movw	r24, r28
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	08 95       	ret

00002b2a <malloc>:
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	bc 01       	movw	r22, r24
    2b30:	82 30       	cpi	r24, 0x02	; 2
    2b32:	91 05       	cpc	r25, r1
    2b34:	10 f4       	brcc	.+4      	; 0x2b3a <malloc+0x10>
    2b36:	62 e0       	ldi	r22, 0x02	; 2
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	a0 91 ad 01 	lds	r26, 0x01AD
    2b3e:	b0 91 ae 01 	lds	r27, 0x01AE
    2b42:	ed 01       	movw	r28, r26
    2b44:	e0 e0       	ldi	r30, 0x00	; 0
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	21 c0       	rjmp	.+66     	; 0x2b90 <malloc+0x66>
    2b4e:	88 81       	ld	r24, Y
    2b50:	99 81       	ldd	r25, Y+1	; 0x01
    2b52:	86 17       	cp	r24, r22
    2b54:	97 07       	cpc	r25, r23
    2b56:	69 f4       	brne	.+26     	; 0x2b72 <malloc+0x48>
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5c:	30 97       	sbiw	r30, 0x00	; 0
    2b5e:	19 f0       	breq	.+6      	; 0x2b66 <malloc+0x3c>
    2b60:	93 83       	std	Z+3, r25	; 0x03
    2b62:	82 83       	std	Z+2, r24	; 0x02
    2b64:	04 c0       	rjmp	.+8      	; 0x2b6e <malloc+0x44>
    2b66:	90 93 ae 01 	sts	0x01AE, r25
    2b6a:	80 93 ad 01 	sts	0x01AD, r24
    2b6e:	fe 01       	movw	r30, r28
    2b70:	34 c0       	rjmp	.+104    	; 0x2bda <malloc+0xb0>
    2b72:	68 17       	cp	r22, r24
    2b74:	79 07       	cpc	r23, r25
    2b76:	38 f4       	brcc	.+14     	; 0x2b86 <malloc+0x5c>
    2b78:	41 15       	cp	r20, r1
    2b7a:	51 05       	cpc	r21, r1
    2b7c:	19 f0       	breq	.+6      	; 0x2b84 <malloc+0x5a>
    2b7e:	84 17       	cp	r24, r20
    2b80:	95 07       	cpc	r25, r21
    2b82:	08 f4       	brcc	.+2      	; 0x2b86 <malloc+0x5c>
    2b84:	ac 01       	movw	r20, r24
    2b86:	fe 01       	movw	r30, r28
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8c:	9c 01       	movw	r18, r24
    2b8e:	e9 01       	movw	r28, r18
    2b90:	20 97       	sbiw	r28, 0x00	; 0
    2b92:	e9 f6       	brne	.-70     	; 0x2b4e <malloc+0x24>
    2b94:	41 15       	cp	r20, r1
    2b96:	51 05       	cpc	r21, r1
    2b98:	a9 f1       	breq	.+106    	; 0x2c04 <malloc+0xda>
    2b9a:	ca 01       	movw	r24, r20
    2b9c:	86 1b       	sub	r24, r22
    2b9e:	97 0b       	sbc	r25, r23
    2ba0:	04 97       	sbiw	r24, 0x04	; 4
    2ba2:	08 f4       	brcc	.+2      	; 0x2ba6 <malloc+0x7c>
    2ba4:	ba 01       	movw	r22, r20
    2ba6:	e0 e0       	ldi	r30, 0x00	; 0
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	2a c0       	rjmp	.+84     	; 0x2c00 <malloc+0xd6>
    2bac:	8d 91       	ld	r24, X+
    2bae:	9c 91       	ld	r25, X
    2bb0:	11 97       	sbiw	r26, 0x01	; 1
    2bb2:	84 17       	cp	r24, r20
    2bb4:	95 07       	cpc	r25, r21
    2bb6:	f9 f4       	brne	.+62     	; 0x2bf6 <malloc+0xcc>
    2bb8:	64 17       	cp	r22, r20
    2bba:	75 07       	cpc	r23, r21
    2bbc:	81 f4       	brne	.+32     	; 0x2bde <malloc+0xb4>
    2bbe:	12 96       	adiw	r26, 0x02	; 2
    2bc0:	8d 91       	ld	r24, X+
    2bc2:	9c 91       	ld	r25, X
    2bc4:	13 97       	sbiw	r26, 0x03	; 3
    2bc6:	30 97       	sbiw	r30, 0x00	; 0
    2bc8:	19 f0       	breq	.+6      	; 0x2bd0 <malloc+0xa6>
    2bca:	93 83       	std	Z+3, r25	; 0x03
    2bcc:	82 83       	std	Z+2, r24	; 0x02
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <malloc+0xae>
    2bd0:	90 93 ae 01 	sts	0x01AE, r25
    2bd4:	80 93 ad 01 	sts	0x01AD, r24
    2bd8:	fd 01       	movw	r30, r26
    2bda:	32 96       	adiw	r30, 0x02	; 2
    2bdc:	4f c0       	rjmp	.+158    	; 0x2c7c <malloc+0x152>
    2bde:	ca 01       	movw	r24, r20
    2be0:	86 1b       	sub	r24, r22
    2be2:	97 0b       	sbc	r25, r23
    2be4:	fd 01       	movw	r30, r26
    2be6:	e8 0f       	add	r30, r24
    2be8:	f9 1f       	adc	r31, r25
    2bea:	61 93       	st	Z+, r22
    2bec:	71 93       	st	Z+, r23
    2bee:	02 97       	sbiw	r24, 0x02	; 2
    2bf0:	8d 93       	st	X+, r24
    2bf2:	9c 93       	st	X, r25
    2bf4:	43 c0       	rjmp	.+134    	; 0x2c7c <malloc+0x152>
    2bf6:	fd 01       	movw	r30, r26
    2bf8:	82 81       	ldd	r24, Z+2	; 0x02
    2bfa:	93 81       	ldd	r25, Z+3	; 0x03
    2bfc:	9c 01       	movw	r18, r24
    2bfe:	d9 01       	movw	r26, r18
    2c00:	10 97       	sbiw	r26, 0x00	; 0
    2c02:	a1 f6       	brne	.-88     	; 0x2bac <malloc+0x82>
    2c04:	80 91 ab 01 	lds	r24, 0x01AB
    2c08:	90 91 ac 01 	lds	r25, 0x01AC
    2c0c:	89 2b       	or	r24, r25
    2c0e:	41 f4       	brne	.+16     	; 0x2c20 <malloc+0xf6>
    2c10:	80 91 84 01 	lds	r24, 0x0184
    2c14:	90 91 85 01 	lds	r25, 0x0185
    2c18:	90 93 ac 01 	sts	0x01AC, r25
    2c1c:	80 93 ab 01 	sts	0x01AB, r24
    2c20:	40 91 86 01 	lds	r20, 0x0186
    2c24:	50 91 87 01 	lds	r21, 0x0187
    2c28:	41 15       	cp	r20, r1
    2c2a:	51 05       	cpc	r21, r1
    2c2c:	41 f4       	brne	.+16     	; 0x2c3e <malloc+0x114>
    2c2e:	4d b7       	in	r20, 0x3d	; 61
    2c30:	5e b7       	in	r21, 0x3e	; 62
    2c32:	80 91 82 01 	lds	r24, 0x0182
    2c36:	90 91 83 01 	lds	r25, 0x0183
    2c3a:	48 1b       	sub	r20, r24
    2c3c:	59 0b       	sbc	r21, r25
    2c3e:	20 91 ab 01 	lds	r18, 0x01AB
    2c42:	30 91 ac 01 	lds	r19, 0x01AC
    2c46:	24 17       	cp	r18, r20
    2c48:	35 07       	cpc	r19, r21
    2c4a:	b0 f4       	brcc	.+44     	; 0x2c78 <malloc+0x14e>
    2c4c:	ca 01       	movw	r24, r20
    2c4e:	82 1b       	sub	r24, r18
    2c50:	93 0b       	sbc	r25, r19
    2c52:	86 17       	cp	r24, r22
    2c54:	97 07       	cpc	r25, r23
    2c56:	80 f0       	brcs	.+32     	; 0x2c78 <malloc+0x14e>
    2c58:	ab 01       	movw	r20, r22
    2c5a:	4e 5f       	subi	r20, 0xFE	; 254
    2c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5e:	84 17       	cp	r24, r20
    2c60:	95 07       	cpc	r25, r21
    2c62:	50 f0       	brcs	.+20     	; 0x2c78 <malloc+0x14e>
    2c64:	42 0f       	add	r20, r18
    2c66:	53 1f       	adc	r21, r19
    2c68:	50 93 ac 01 	sts	0x01AC, r21
    2c6c:	40 93 ab 01 	sts	0x01AB, r20
    2c70:	f9 01       	movw	r30, r18
    2c72:	61 93       	st	Z+, r22
    2c74:	71 93       	st	Z+, r23
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <malloc+0x152>
    2c78:	e0 e0       	ldi	r30, 0x00	; 0
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	cf 01       	movw	r24, r30
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	08 95       	ret

00002c84 <free>:
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <free+0xa>
    2c8c:	50 c0       	rjmp	.+160    	; 0x2d2e <free+0xaa>
    2c8e:	ec 01       	movw	r28, r24
    2c90:	22 97       	sbiw	r28, 0x02	; 2
    2c92:	1b 82       	std	Y+3, r1	; 0x03
    2c94:	1a 82       	std	Y+2, r1	; 0x02
    2c96:	a0 91 ad 01 	lds	r26, 0x01AD
    2c9a:	b0 91 ae 01 	lds	r27, 0x01AE
    2c9e:	10 97       	sbiw	r26, 0x00	; 0
    2ca0:	09 f1       	breq	.+66     	; 0x2ce4 <free+0x60>
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	ac 17       	cp	r26, r28
    2ca8:	bd 07       	cpc	r27, r29
    2caa:	08 f1       	brcs	.+66     	; 0x2cee <free+0x6a>
    2cac:	bb 83       	std	Y+3, r27	; 0x03
    2cae:	aa 83       	std	Y+2, r26	; 0x02
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	21 91       	ld	r18, Z+
    2cb4:	31 91       	ld	r19, Z+
    2cb6:	e2 0f       	add	r30, r18
    2cb8:	f3 1f       	adc	r31, r19
    2cba:	ae 17       	cp	r26, r30
    2cbc:	bf 07       	cpc	r27, r31
    2cbe:	79 f4       	brne	.+30     	; 0x2cde <free+0x5a>
    2cc0:	8d 91       	ld	r24, X+
    2cc2:	9c 91       	ld	r25, X
    2cc4:	11 97       	sbiw	r26, 0x01	; 1
    2cc6:	28 0f       	add	r18, r24
    2cc8:	39 1f       	adc	r19, r25
    2cca:	2e 5f       	subi	r18, 0xFE	; 254
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	39 83       	std	Y+1, r19	; 0x01
    2cd0:	28 83       	st	Y, r18
    2cd2:	12 96       	adiw	r26, 0x02	; 2
    2cd4:	8d 91       	ld	r24, X+
    2cd6:	9c 91       	ld	r25, X
    2cd8:	13 97       	sbiw	r26, 0x03	; 3
    2cda:	9b 83       	std	Y+3, r25	; 0x03
    2cdc:	8a 83       	std	Y+2, r24	; 0x02
    2cde:	41 15       	cp	r20, r1
    2ce0:	51 05       	cpc	r21, r1
    2ce2:	71 f4       	brne	.+28     	; 0x2d00 <free+0x7c>
    2ce4:	d0 93 ae 01 	sts	0x01AE, r29
    2ce8:	c0 93 ad 01 	sts	0x01AD, r28
    2cec:	20 c0       	rjmp	.+64     	; 0x2d2e <free+0xaa>
    2cee:	12 96       	adiw	r26, 0x02	; 2
    2cf0:	8d 91       	ld	r24, X+
    2cf2:	9c 91       	ld	r25, X
    2cf4:	13 97       	sbiw	r26, 0x03	; 3
    2cf6:	ad 01       	movw	r20, r26
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	11 f0       	breq	.+4      	; 0x2d00 <free+0x7c>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	d3 cf       	rjmp	.-90     	; 0x2ca6 <free+0x22>
    2d00:	fa 01       	movw	r30, r20
    2d02:	d3 83       	std	Z+3, r29	; 0x03
    2d04:	c2 83       	std	Z+2, r28	; 0x02
    2d06:	21 91       	ld	r18, Z+
    2d08:	31 91       	ld	r19, Z+
    2d0a:	e2 0f       	add	r30, r18
    2d0c:	f3 1f       	adc	r31, r19
    2d0e:	ce 17       	cp	r28, r30
    2d10:	df 07       	cpc	r29, r31
    2d12:	69 f4       	brne	.+26     	; 0x2d2e <free+0xaa>
    2d14:	88 81       	ld	r24, Y
    2d16:	99 81       	ldd	r25, Y+1	; 0x01
    2d18:	28 0f       	add	r18, r24
    2d1a:	39 1f       	adc	r19, r25
    2d1c:	2e 5f       	subi	r18, 0xFE	; 254
    2d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d20:	fa 01       	movw	r30, r20
    2d22:	31 83       	std	Z+1, r19	; 0x01
    2d24:	20 83       	st	Z, r18
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	93 83       	std	Z+3, r25	; 0x03
    2d2c:	82 83       	std	Z+2, r24	; 0x02
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	08 95       	ret

00002d34 <strnlen_P>:
    2d34:	fc 01       	movw	r30, r24
    2d36:	05 90       	lpm	r0, Z+
    2d38:	61 50       	subi	r22, 0x01	; 1
    2d3a:	70 40       	sbci	r23, 0x00	; 0
    2d3c:	01 10       	cpse	r0, r1
    2d3e:	d8 f7       	brcc	.-10     	; 0x2d36 <strnlen_P+0x2>
    2d40:	80 95       	com	r24
    2d42:	90 95       	com	r25
    2d44:	8e 0f       	add	r24, r30
    2d46:	9f 1f       	adc	r25, r31
    2d48:	08 95       	ret

00002d4a <memset>:
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	01 c0       	rjmp	.+2      	; 0x2d50 <memset+0x6>
    2d4e:	6d 93       	st	X+, r22
    2d50:	41 50       	subi	r20, 0x01	; 1
    2d52:	50 40       	sbci	r21, 0x00	; 0
    2d54:	e0 f7       	brcc	.-8      	; 0x2d4e <memset+0x4>
    2d56:	08 95       	ret

00002d58 <strnlen>:
    2d58:	fc 01       	movw	r30, r24
    2d5a:	61 50       	subi	r22, 0x01	; 1
    2d5c:	70 40       	sbci	r23, 0x00	; 0
    2d5e:	01 90       	ld	r0, Z+
    2d60:	01 10       	cpse	r0, r1
    2d62:	d8 f7       	brcc	.-10     	; 0x2d5a <strnlen+0x2>
    2d64:	80 95       	com	r24
    2d66:	90 95       	com	r25
    2d68:	8e 0f       	add	r24, r30
    2d6a:	9f 1f       	adc	r25, r31
    2d6c:	08 95       	ret

00002d6e <fputc>:
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	8c 01       	movw	r16, r24
    2d78:	eb 01       	movw	r28, r22
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	81 ff       	sbrs	r24, 1
    2d7e:	1b c0       	rjmp	.+54     	; 0x2db6 <fputc+0x48>
    2d80:	82 ff       	sbrs	r24, 2
    2d82:	0d c0       	rjmp	.+26     	; 0x2d9e <fputc+0x30>
    2d84:	2e 81       	ldd	r18, Y+6	; 0x06
    2d86:	3f 81       	ldd	r19, Y+7	; 0x07
    2d88:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8c:	28 17       	cp	r18, r24
    2d8e:	39 07       	cpc	r19, r25
    2d90:	64 f4       	brge	.+24     	; 0x2daa <fputc+0x3c>
    2d92:	e8 81       	ld	r30, Y
    2d94:	f9 81       	ldd	r31, Y+1	; 0x01
    2d96:	01 93       	st	Z+, r16
    2d98:	f9 83       	std	Y+1, r31	; 0x01
    2d9a:	e8 83       	st	Y, r30
    2d9c:	06 c0       	rjmp	.+12     	; 0x2daa <fputc+0x3c>
    2d9e:	e8 85       	ldd	r30, Y+8	; 0x08
    2da0:	f9 85       	ldd	r31, Y+9	; 0x09
    2da2:	80 2f       	mov	r24, r16
    2da4:	09 95       	icall
    2da6:	89 2b       	or	r24, r25
    2da8:	31 f4       	brne	.+12     	; 0x2db6 <fputc+0x48>
    2daa:	8e 81       	ldd	r24, Y+6	; 0x06
    2dac:	9f 81       	ldd	r25, Y+7	; 0x07
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	9f 83       	std	Y+7, r25	; 0x07
    2db2:	8e 83       	std	Y+6, r24	; 0x06
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <fputc+0x4c>
    2db6:	0f ef       	ldi	r16, 0xFF	; 255
    2db8:	1f ef       	ldi	r17, 0xFF	; 255
    2dba:	c8 01       	movw	r24, r16
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	08 95       	ret

00002dc6 <__ultoa_invert>:
    2dc6:	fa 01       	movw	r30, r20
    2dc8:	aa 27       	eor	r26, r26
    2dca:	28 30       	cpi	r18, 0x08	; 8
    2dcc:	51 f1       	breq	.+84     	; 0x2e22 <__ultoa_invert+0x5c>
    2dce:	20 31       	cpi	r18, 0x10	; 16
    2dd0:	81 f1       	breq	.+96     	; 0x2e32 <__ultoa_invert+0x6c>
    2dd2:	e8 94       	clt
    2dd4:	6f 93       	push	r22
    2dd6:	6e 7f       	andi	r22, 0xFE	; 254
    2dd8:	6e 5f       	subi	r22, 0xFE	; 254
    2dda:	7f 4f       	sbci	r23, 0xFF	; 255
    2ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	af 4f       	sbci	r26, 0xFF	; 255
    2de2:	b1 e0       	ldi	r27, 0x01	; 1
    2de4:	3e d0       	rcall	.+124    	; 0x2e62 <__ultoa_invert+0x9c>
    2de6:	b4 e0       	ldi	r27, 0x04	; 4
    2de8:	3c d0       	rcall	.+120    	; 0x2e62 <__ultoa_invert+0x9c>
    2dea:	67 0f       	add	r22, r23
    2dec:	78 1f       	adc	r23, r24
    2dee:	89 1f       	adc	r24, r25
    2df0:	9a 1f       	adc	r25, r26
    2df2:	a1 1d       	adc	r26, r1
    2df4:	68 0f       	add	r22, r24
    2df6:	79 1f       	adc	r23, r25
    2df8:	8a 1f       	adc	r24, r26
    2dfa:	91 1d       	adc	r25, r1
    2dfc:	a1 1d       	adc	r26, r1
    2dfe:	6a 0f       	add	r22, r26
    2e00:	71 1d       	adc	r23, r1
    2e02:	81 1d       	adc	r24, r1
    2e04:	91 1d       	adc	r25, r1
    2e06:	a1 1d       	adc	r26, r1
    2e08:	20 d0       	rcall	.+64     	; 0x2e4a <__ultoa_invert+0x84>
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <__ultoa_invert+0x48>
    2e0c:	68 94       	set
    2e0e:	3f 91       	pop	r19
    2e10:	2a e0       	ldi	r18, 0x0A	; 10
    2e12:	26 9f       	mul	r18, r22
    2e14:	11 24       	eor	r1, r1
    2e16:	30 19       	sub	r19, r0
    2e18:	30 5d       	subi	r19, 0xD0	; 208
    2e1a:	31 93       	st	Z+, r19
    2e1c:	de f6       	brtc	.-74     	; 0x2dd4 <__ultoa_invert+0xe>
    2e1e:	cf 01       	movw	r24, r30
    2e20:	08 95       	ret
    2e22:	46 2f       	mov	r20, r22
    2e24:	47 70       	andi	r20, 0x07	; 7
    2e26:	40 5d       	subi	r20, 0xD0	; 208
    2e28:	41 93       	st	Z+, r20
    2e2a:	b3 e0       	ldi	r27, 0x03	; 3
    2e2c:	0f d0       	rcall	.+30     	; 0x2e4c <__ultoa_invert+0x86>
    2e2e:	c9 f7       	brne	.-14     	; 0x2e22 <__ultoa_invert+0x5c>
    2e30:	f6 cf       	rjmp	.-20     	; 0x2e1e <__ultoa_invert+0x58>
    2e32:	46 2f       	mov	r20, r22
    2e34:	4f 70       	andi	r20, 0x0F	; 15
    2e36:	40 5d       	subi	r20, 0xD0	; 208
    2e38:	4a 33       	cpi	r20, 0x3A	; 58
    2e3a:	18 f0       	brcs	.+6      	; 0x2e42 <__ultoa_invert+0x7c>
    2e3c:	49 5d       	subi	r20, 0xD9	; 217
    2e3e:	31 fd       	sbrc	r19, 1
    2e40:	40 52       	subi	r20, 0x20	; 32
    2e42:	41 93       	st	Z+, r20
    2e44:	02 d0       	rcall	.+4      	; 0x2e4a <__ultoa_invert+0x84>
    2e46:	a9 f7       	brne	.-22     	; 0x2e32 <__ultoa_invert+0x6c>
    2e48:	ea cf       	rjmp	.-44     	; 0x2e1e <__ultoa_invert+0x58>
    2e4a:	b4 e0       	ldi	r27, 0x04	; 4
    2e4c:	a6 95       	lsr	r26
    2e4e:	97 95       	ror	r25
    2e50:	87 95       	ror	r24
    2e52:	77 95       	ror	r23
    2e54:	67 95       	ror	r22
    2e56:	ba 95       	dec	r27
    2e58:	c9 f7       	brne	.-14     	; 0x2e4c <__ultoa_invert+0x86>
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	61 05       	cpc	r22, r1
    2e5e:	71 05       	cpc	r23, r1
    2e60:	08 95       	ret
    2e62:	9b 01       	movw	r18, r22
    2e64:	ac 01       	movw	r20, r24
    2e66:	0a 2e       	mov	r0, r26
    2e68:	06 94       	lsr	r0
    2e6a:	57 95       	ror	r21
    2e6c:	47 95       	ror	r20
    2e6e:	37 95       	ror	r19
    2e70:	27 95       	ror	r18
    2e72:	ba 95       	dec	r27
    2e74:	c9 f7       	brne	.-14     	; 0x2e68 <__ultoa_invert+0xa2>
    2e76:	62 0f       	add	r22, r18
    2e78:	73 1f       	adc	r23, r19
    2e7a:	84 1f       	adc	r24, r20
    2e7c:	95 1f       	adc	r25, r21
    2e7e:	a0 1d       	adc	r26, r0
    2e80:	08 95       	ret

00002e82 <_exit>:
    2e82:	f8 94       	cli

00002e84 <__stop_program>:
    2e84:	ff cf       	rjmp	.-2      	; 0x2e84 <__stop_program>
